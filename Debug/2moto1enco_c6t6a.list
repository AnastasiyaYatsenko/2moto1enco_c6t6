
2moto1enco_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c40  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dfc  08007dfc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007dfc  08007dfc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dfc  08007dfc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001300  20000014  08007e1c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  08007e1c  00021314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe24  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ebd  00000000  00000000  0003fea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  00043d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011fa  00000000  00000000  00045498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cea6  00000000  00000000  00046692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001792c  00000000  00000000  00063538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099265  00000000  00000000  0007ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063e8  00000000  00000000  001140cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011a4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d38 	.word	0x08007d38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08007d38 	.word	0x08007d38

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
 8000f80:	4613      	mov	r3, r2
 8000f82:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8000f84:	787a      	ldrb	r2, [r7, #1]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f002 fe62 	bl	8003c54 <HAL_GPIO_WritePin>

}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	72fb      	strb	r3, [r7, #11]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8000fac:	893b      	ldrh	r3, [r7, #8]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffde 	bl	8000f74 <setCSLine>
	delay(docDelay);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f923 	bl	8001204 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8000fbe:	f107 0217 	add.w	r2, r7, #23
 8000fc2:	f107 010b 	add.w	r1, r7, #11
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f003 fb2b 	bl	8004628 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f916 	bl	8001204 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8000fd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fdc:	893b      	ldrh	r3, [r7, #8]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffc7 	bl	8000f74 <setCSLine>
	return data;
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	460b      	mov	r3, r1
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	4613      	mov	r3, r2
 8001004:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001006:	f000 f90f 	bl	8001228 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	2200      	movs	r2, #0
 8001012:	9200      	str	r2, [sp, #0]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	2100      	movs	r1, #0
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff ffbd 	bl	8000f98 <spiWriteRead>
 800101e:	4603      	mov	r3, r0
 8001020:	b29b      	uxth	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f8ec 	bl	8001204 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	2201      	movs	r2, #1
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	2100      	movs	r1, #0
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff ffae 	bl	8000f98 <spiWriteRead>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001042:	4313      	orrs	r3, r2
 8001044:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
 800104a:	e010      	b.n	800106e <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 800104c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	fa42 f303 	asr.w	r3, r2, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	b2d9      	uxtb	r1, r3
 800105c:	f107 0210 	add.w	r2, r7, #16
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	4413      	add	r3, r2
 8001064:	460a      	mov	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	3301      	adds	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	ddeb      	ble.n	800104c <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001078:	7f7a      	ldrb	r2, [r7, #29]
 800107a:	7efb      	ldrb	r3, [r7, #27]
 800107c:	4053      	eors	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	7e7b      	ldrb	r3, [r7, #25]
 8001082:	4053      	eors	r3, r2
 8001084:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001086:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001088:	4053      	eors	r3, r2
 800108a:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800108c:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800108e:	4053      	eors	r3, r2
 8001090:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001092:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001094:	4053      	eors	r3, r2
 8001096:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001098:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800109a:	429a      	cmp	r2, r3
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d11e      	bne.n	80010e6 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80010a8:	7fbb      	ldrb	r3, [r7, #30]
 80010aa:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010ac:	7f3a      	ldrb	r2, [r7, #28]
 80010ae:	7ebb      	ldrb	r3, [r7, #26]
 80010b0:	4053      	eors	r3, r2
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	7e3b      	ldrb	r3, [r7, #24]
 80010b6:	4053      	eors	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010ba:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010bc:	4053      	eors	r3, r2
 80010be:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010c0:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010c2:	4053      	eors	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010c6:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010c8:	4053      	eors	r3, r2
 80010ca:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 80010d8:	4299      	cmp	r1, r3
 80010da:	d104      	bne.n	80010e6 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 80010dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010de:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010e4:	e002      	b.n	80010ec <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 80010e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ea:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d107      	bne.n	8001102 <getPositionSPI+0x112>
 80010f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d002      	beq.n	8001102 <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 80010fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 8001102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001104:	4618      	mov	r0, r3
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	4613      	mov	r3, r2
 8001118:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	2200      	movs	r2, #0
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	2100      	movs	r1, #0
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff37 	bl	8000f98 <spiWriteRead>
	delay( docDelay);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 f86a 	bl	8001204 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	2201      	movs	r2, #1
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	2170      	movs	r1, #112	; 0x70
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff ff2c 	bl	8000f98 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f000 f85f 	bl	8001204 <delay>

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	80fb      	strh	r3, [r7, #6]
 800115c:	4613      	mov	r3, r2
 800115e:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 8001166:	797b      	ldrb	r3, [r7, #5]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d11e      	bne.n	80011aa <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fcc2 	bl	8000af8 <__aeabi_ui2f>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f94e 	bl	8000418 <__aeabi_f2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <calculateAngle+0xa8>)
 8001182:	f7ff f9a1 	bl	80004c8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <calculateAngle+0xac>)
 8001194:	f7ff fac2 	bl	800071c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fba4 	bl	80008ec <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e020      	b.n	80011ec <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 80011aa:	797b      	ldrb	r3, [r7, #5]
 80011ac:	2b0e      	cmp	r3, #14
 80011ae:	d11d      	bne.n	80011ec <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fca0 	bl	8000af8 <__aeabi_ui2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f92c 	bl	8000418 <__aeabi_f2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <calculateAngle+0xa8>)
 80011c6:	f7ff f97f 	bl	80004c8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <calculateAngle+0xb0>)
 80011d8:	f7ff faa0 	bl	800071c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fb82 	bl	80008ec <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40768000 	.word	0x40768000
 80011fc:	40b00000 	.word	0x40b00000
 8001200:	40d00000 	.word	0x40d00000

08001204 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f83b 	bl	8001288 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <startDWT>:

int startDWT(){
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 800121e:	f000 f803 	bl	8001228 <DWT_Delay_Init>

}
 8001222:	bf00      	nop
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}

08001228 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <DWT_Delay_Init+0x58>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <DWT_Delay_Init+0x58>)
 8001232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001236:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <DWT_Delay_Init+0x58>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a10      	ldr	r2, [pc, #64]	; (8001280 <DWT_Delay_Init+0x58>)
 800123e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001242:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <DWT_Delay_Init+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <DWT_Delay_Init+0x5c>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <DWT_Delay_Init+0x5c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <DWT_Delay_Init+0x5c>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <DWT_Delay_Init+0x5c>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001262:	bf00      	nop
    __ASM volatile ("NOP");
 8001264:	bf00      	nop
    __ASM volatile ("NOP");
 8001266:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <DWT_Delay_Init+0x5c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001274:	2301      	movs	r3, #1
    }
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000edf0 	.word	0xe000edf0
 8001284:	e0001000 	.word	0xe0001000

08001288 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <DWT_Delay_us+0x48>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001296:	f003 f8f3 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 800129a:	4603      	mov	r3, r0
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <DWT_Delay_us+0x4c>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0c9b      	lsrs	r3, r3, #18
 80012a4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	fb02 f303 	mul.w	r3, r2, r3
 80012ae:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80012b0:	bf00      	nop
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <DWT_Delay_us+0x48>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad2      	subs	r2, r2, r3
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3f6      	bcc.n	80012b2 <DWT_Delay_us+0x2a>
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e0001000 	.word	0xe0001000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	e9c7 0100 	strd	r0, r1, [r7]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f006 fca2 	bl	8007c60 <ceilf>
 800131c:	4603      	mov	r3, r0
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <_ZN7RoboArmC1Ehh>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(uint8_t defaultAngleT, uint8_t defaultDistanseT) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	70bb      	strb	r3, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a37      	ldr	r2, [pc, #220]	; (8001418 <_ZN7RoboArmC1Ehh+0xf0>)
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	645a      	str	r2, [r3, #68]	; 0x44
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	649a      	str	r2, [r3, #72]	; 0x48
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a33      	ldr	r2, [pc, #204]	; (800141c <_ZN7RoboArmC1Ehh+0xf4>)
 800134e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a33      	ldr	r2, [pc, #204]	; (8001420 <_ZN7RoboArmC1Ehh+0xf8>)
 8001354:	651a      	str	r2, [r3, #80]	; 0x50
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	220e      	movs	r2, #14
 800135a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3374      	adds	r3, #116	; 0x74
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fd24 	bl	8001db0 <_ZN7TMC2209C1Ev>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	339c      	adds	r3, #156	; 0x9c
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fd1f 	bl	8001db0 <_ZN7TMC2209C1Ev>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	33c4      	adds	r3, #196	; 0xc4
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fd1a 	bl	8001db0 <_ZN7TMC2209C1Ev>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	defaultAngle = defaultAngleT;
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fb84 	bl	8000af8 <__aeabi_ui2f>
 80013f0:	4602      	mov	r2, r0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	defaultDistanse = defaultDistanseT;
 80013f8:	78bb      	ldrb	r3, [r7, #2]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb7c 	bl	8000af8 <__aeabi_ui2f>
 8001400:	4602      	mov	r2, r0
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100


	startDWT();
 8001408:	f7ff ff07 	bl	800121a <startDWT>
}
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	43200000 	.word	0x43200000
 800141c:	4673c000 	.word	0x4673c000
 8001420:	437a0000 	.word	0x437a0000

08001424 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001434:	2201      	movs	r2, #1
 8001436:	4619      	mov	r1, r3
 8001438:	f002 fc0c 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001444:	2201      	movs	r2, #1
 8001446:	4619      	mov	r1, r3
 8001448:	f002 fc04 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001456:	2201      	movs	r2, #1
 8001458:	4619      	mov	r1, r3
 800145a:	f002 fbfb 	bl	8003c54 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fdef 	bl	8005048 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2104      	movs	r1, #4
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fde9 	bl	8005048 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2108      	movs	r1, #8
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fde3 	bl	8005048 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fcc4 	bl	8004e14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fcbf 	bl	8004e14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fcba 	bl	8004e14 <HAL_TIM_Base_Stop_IT>

	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZN7RoboArm15GetLastPositionEv>:
	return 0;

}
*/

int RoboArm::GetLastPosition() {
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
//	uint32_t posnowT_lin = GetPosEncoders(2);
//	while(posnowT_lin == 0xFFFF && ++attempts < 3)
//		posnowT_lin = GetPosEncoders(2);
//	float pos = GetAngleEncoders(posnowT_lin);
//	lastPosLinear_Enc = GetLinEncoders(pos); //+ defaultDistance?
	lastPosAngle_Enc = GetAng();
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fb4b 	bl	8001b4e <_ZN7RoboArm6GetAngEv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	lastPosLinear_Enc = GetLin();
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fb12 	bl	8001aea <_ZN7RoboArm6GetLinEv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZN7RoboArm11Move2MotorsEff>:

int RoboArm::Move2Motors(float angle, float distance) {
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b08f      	sub	sp, #60	; 0x3c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fdac 	bl	8005048 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2104      	movs	r1, #4
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fda6 	bl	8005048 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);				// остановили прерывание таймеров
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fc87 	bl	8004e14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fc82 	bl	8004e14 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 8001510:	2200      	movs	r2, #0
 8001512:	2101      	movs	r1, #1
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fc12 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 800151a:	2200      	movs	r2, #0
 800151c:	2102      	movs	r1, #2
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fc0d 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>

	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f7ff ffc0 	bl	80014aa <_ZN7RoboArm15GetLastPositionEv>
//	float lastPosAngle = ShiftZeroAng(lastPosAngle_Enc);
//	float lastPosLinear = ShiftZeroLin(lastPosLinear_Enc);

	float lastPosAngle = lastPosAngle_Enc;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
	float lastPosLinear = lastPosLinear_Enc;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c

	float pos_ang = abs(lastPosAngle - angle);
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800153e:	f7ff fa29 	bl	8000994 <__aeabi_fsub>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fed6 	bl	80012f6 <_ZSt3absf>
 800154a:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 800154c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800154e:	f7fe ff63 	bl	8000418 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	f04f 0000 	mov.w	r0, #0
 800155a:	4975      	ldr	r1, [pc, #468]	; (8001730 <_ZN7RoboArm11Move2MotorsEff+0x258>)
 800155c:	f7fe fdfc 	bl	8000158 <__aeabi_dsub>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff feb6 	bl	80012d8 <_ZSt3absd>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff f9ba 	bl	80008ec <__aeabi_d2f>
 8001578:	4603      	mov	r3, r0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 800157c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800157e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001580:	f7ff fcb0 	bl	8000ee4 <__aeabi_fcmplt>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01b      	beq.n	80015c2 <_ZN7RoboArm11Move2MotorsEff+0xea>
		actualPosAngle = inverse_pos_ang;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001592:	f7ff fca7 	bl	8000ee4 <__aeabi_fcmplt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <_ZN7RoboArm11Move2MotorsEff+0xd0>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.disableInverseMotorDirection();
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	339c      	adds	r3, #156	; 0x9c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fcd7 	bl	8001f54 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80015a6:	e027      	b.n	80015f8 <_ZN7RoboArm11Move2MotorsEff+0x120>
		} else if (lastPosAngle > angle) {
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ac:	f7ff fcb8 	bl	8000f20 <__aeabi_fcmpgt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d020      	beq.n	80015f8 <_ZN7RoboArm11Move2MotorsEff+0x120>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.enableInverseMotorDirection();
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	339c      	adds	r3, #156	; 0x9c
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fcba 	bl	8001f34 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80015c0:	e01a      	b.n	80015f8 <_ZN7RoboArm11Move2MotorsEff+0x120>
		}
	}
	else {
		actualPosAngle = pos_ang;
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ca:	f7ff fc8b 	bl	8000ee4 <__aeabi_fcmplt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <_ZN7RoboArm11Move2MotorsEff+0x108>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.enableInverseMotorDirection();
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	339c      	adds	r3, #156	; 0x9c
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fcab 	bl	8001f34 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80015de:	e00b      	b.n	80015f8 <_ZN7RoboArm11Move2MotorsEff+0x120>
		} else if (lastPosAngle > angle) {
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015e4:	f7ff fc9c 	bl	8000f20 <__aeabi_fcmpgt>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <_ZN7RoboArm11Move2MotorsEff+0x120>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.disableInverseMotorDirection();
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	339c      	adds	r3, #156	; 0x9c
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fcae 	bl	8001f54 <_ZN7TMC220928disableInverseMotorDirectionEv>
//	if (lastPosLinear < distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
//	} else if (lastPosLinear > distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
//	}
	if (lastPosLinear < distance) {
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015fc:	f7ff fc72 	bl	8000ee4 <__aeabi_fcmplt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <_ZN7RoboArm11Move2MotorsEff+0x13a>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
			tmcd_linear.enableInverseMotorDirection();
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3374      	adds	r3, #116	; 0x74
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fc92 	bl	8001f34 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001610:	e00b      	b.n	800162a <_ZN7RoboArm11Move2MotorsEff+0x152>
		} else if (lastPosLinear > distance) {
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001616:	f7ff fc83 	bl	8000f20 <__aeabi_fcmpgt>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d004      	beq.n	800162a <_ZN7RoboArm11Move2MotorsEff+0x152>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
			tmcd_linear.disableInverseMotorDirection();
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3374      	adds	r3, #116	; 0x74
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fc95 	bl	8001f54 <_ZN7TMC220928disableInverseMotorDirectionEv>
		}

//	actualPosAngle = abs(lastPosAngle - angle);
	float actualPosDistance = abs(lastPosLinear - distance);
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800162e:	f7ff f9b1 	bl	8000994 <__aeabi_fsub>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fe5e 	bl	80012f6 <_ZSt3absf>
 800163a:	6238      	str	r0, [r7, #32]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 800163c:	493d      	ldr	r1, [pc, #244]	; (8001734 <_ZN7RoboArm11Move2MotorsEff+0x25c>)
 800163e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001640:	f7ff fab2 	bl	8000ba8 <__aeabi_fmul>
 8001644:	4603      	mov	r3, r0
 8001646:	493c      	ldr	r1, [pc, #240]	; (8001738 <_ZN7RoboArm11Move2MotorsEff+0x260>)
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fb61 	bl	8000d10 <__aeabi_fdiv>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fc6f 	bl	8000f34 <__aeabi_f2uiz>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	649a      	str	r2, [r3, #72]	; 0x48
//	anglePsteps = anglePsteps+(anglePsteps*0.05);
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff faa0 	bl	8000ba8 <__aeabi_fmul>
 8001668:	4603      	mov	r3, r0
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fc62 	bl	8000f34 <__aeabi_f2uiz>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
//	lastPosLinear = distance;

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 200;
 8001676:	23c8      	movs	r3, #200	; 0xc8
 8001678:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72-1;
 800167a:	2347      	movs	r3, #71	; 0x47
 800167c:	61bb      	str	r3, [r7, #24]

	float delimiter=1;
 800167e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001682:	617b      	str	r3, [r7, #20]
	float mnoj=1;
 8001684:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001688:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	429a      	cmp	r2, r3
 8001694:	d952      	bls.n	800173c <_ZN7RoboArm11Move2MotorsEff+0x264>

		htim1M1->Instance->PSC = psc;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1/2;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	0852      	lsrs	r2, r2, #1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fa1c 	bl	8000af8 <__aeabi_ui2f>
 80016c0:	4604      	mov	r4, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fa16 	bl	8000af8 <__aeabi_ui2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff fb1d 	bl	8000d10 <__aeabi_fdiv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 80016da:	69f8      	ldr	r0, [r7, #28]
 80016dc:	f7ff fa0c 	bl	8000af8 <__aeabi_ui2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	6979      	ldr	r1, [r7, #20]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fa5f 	bl	8000ba8 <__aeabi_fmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fe0e 	bl	800130e <_ZSt4ceilf>
 80016f2:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	681c      	ldr	r4, [r3, #0]
 8001704:	6938      	ldr	r0, [r7, #16]
 8001706:	f7ff fc15 	bl	8000f34 <__aeabi_f2uiz>
 800170a:	4603      	mov	r3, r0
 800170c:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 800170e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001712:	6938      	ldr	r0, [r7, #16]
 8001714:	f7ff fafc 	bl	8000d10 <__aeabi_fdiv>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	681c      	ldr	r4, [r3, #0]
 8001722:	4610      	mov	r0, r2
 8001724:	f7ff fc06 	bl	8000f34 <__aeabi_f2uiz>
 8001728:	4603      	mov	r3, r0
 800172a:	63a3      	str	r3, [r4, #56]	; 0x38
 800172c:	e057      	b.n	80017de <_ZN7RoboArm11Move2MotorsEff+0x306>
 800172e:	bf00      	nop
 8001730:	40768000 	.word	0x40768000
 8001734:	47480000 	.word	0x47480000
 8001738:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	429a      	cmp	r2, r3
 8001746:	d24a      	bcs.n	80017de <_ZN7RoboArm11Move2MotorsEff+0x306>

		htim2M2->Instance->PSC = psc;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	0852      	lsrs	r2, r2, #1
 8001766:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff f9c3 	bl	8000af8 <__aeabi_ui2f>
 8001772:	4604      	mov	r4, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f9bd 	bl	8000af8 <__aeabi_ui2f>
 800177e:	4603      	mov	r3, r0
 8001780:	4619      	mov	r1, r3
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff fac4 	bl	8000d10 <__aeabi_fdiv>
 8001788:	4603      	mov	r3, r0
 800178a:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 800178c:	69f8      	ldr	r0, [r7, #28]
 800178e:	f7ff f9b3 	bl	8000af8 <__aeabi_ui2f>
 8001792:	4603      	mov	r3, r0
 8001794:	6979      	ldr	r1, [r7, #20]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fa06 	bl	8000ba8 <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fdb5 	bl	800130e <_ZSt4ceilf>
 80017a4:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	681c      	ldr	r4, [r3, #0]
 80017b6:	6938      	ldr	r0, [r7, #16]
 80017b8:	f7ff fbbc 	bl	8000f34 <__aeabi_f2uiz>
 80017bc:	4603      	mov	r3, r0
 80017be:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 80017c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017c4:	6938      	ldr	r0, [r7, #16]
 80017c6:	f7ff faa3 	bl	8000d10 <__aeabi_fdiv>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	681c      	ldr	r4, [r3, #0]
 80017d4:	4610      	mov	r0, r2
 80017d6:	f7ff fbad 	bl	8000f34 <__aeabi_f2uiz>
 80017da:	4603      	mov	r3, r0
 80017dc:	6363      	str	r3, [r4, #52]	; 0x34
//		htim1M1->Instance->PSC = psc;
//		htim1M1->Instance->ARR = mnoj;
//		htim1M1->Instance->CCR1 = mnoj / 2;
//	}

	stateMoveM1 = true;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	stateMoveM2 = true;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9

	SetEnable(1, true);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2101      	movs	r1, #1
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 faa3 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2102      	movs	r1, #2
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fa9e 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fb81 	bl	8004f10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2104      	movs	r1, #4
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fb7b 	bl	8004f10 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 faac 	bl	8004d7c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4618      	mov	r0, r3
 800182a:	f003 faa7 	bl	8004d7c <HAL_TIM_Base_Start_IT>

	return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	373c      	adds	r7, #60	; 0x3c
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}

08001838 <_ZN7RoboArm10SetGripperEi>:
	posNowDistance = defaultDistanse;

	return 0;
}

int RoboArm::SetGripper(int opcl) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]

	//Встановити захват
	//TODO додати перевірку чи точно зупинились мотори
	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fbfd 	bl	8005048 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2104      	movs	r1, #4
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fbf7 	bl	8005048 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fad8 	bl	8004e14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fad3 	bl	8004e14 <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_2);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2104      	movs	r1, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fbe7 	bl	8005048 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim3M3);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fac8 	bl	8004e14 <HAL_TIM_Base_Stop_IT>

	SetEnable(3, false);
 8001884:	2200      	movs	r2, #0
 8001886:	2103      	movs	r1, #3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fa58 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>

	//Зупинили все, 1 та 2й на утриманні
	//Обираэмо напрям
	if (opcl == 1) {
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d108      	bne.n	80018a6 <_ZN7RoboArm10SetGripperEi+0x6e>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_SET);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189c:	2201      	movs	r2, #1
 800189e:	4619      	mov	r1, r3
 80018a0:	f002 f9d8 	bl	8003c54 <HAL_GPIO_WritePin>
 80018a4:	e00a      	b.n	80018bc <_ZN7RoboArm10SetGripperEi+0x84>
	} else if (opcl == 0) {
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d107      	bne.n	80018bc <_ZN7RoboArm10SetGripperEi+0x84>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_RESET);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f002 f9cc 	bl	8003c54 <HAL_GPIO_WritePin>
	}

	//Підібрати кроки та швидкість
	float periodM3 = 60.00;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <_ZN7RoboArm10SetGripperEi+0xf0>)
 80018be:	60fb      	str	r3, [r7, #12]
	uint32_t psc3 = 72 - 1;
 80018c0:	2347      	movs	r3, #71	; 0x47
 80018c2:	60bb      	str	r3, [r7, #8]
	htim3M3->Instance->PSC = psc3;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
	htim3M3->Instance->ARR = periodM3;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	681c      	ldr	r4, [r3, #0]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fb2d 	bl	8000f34 <__aeabi_f2uiz>
 80018da:	4603      	mov	r3, r0
 80018dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3M3->Instance->CCR2 = periodM3 / 2;
 80018de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff fa14 	bl	8000d10 <__aeabi_fdiv>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	681c      	ldr	r4, [r3, #0]
 80018f2:	4610      	mov	r0, r2
 80018f4:	f7ff fb1e 	bl	8000f34 <__aeabi_f2uiz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	63a3      	str	r3, [r4, #56]	; 0x38

	SetEnable(3, true);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2103      	movs	r1, #3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fa1c 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
	HAL_TIM_PWM_Start(htim3M3, TIM_CHANNEL_2);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2104      	movs	r1, #4
 800190c:	4618      	mov	r0, r3
 800190e:	f003 faff 	bl	8004f10 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim3M3);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fa30 	bl	8004d7c <HAL_TIM_Base_Start_IT>
	return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	42700000 	.word	0x42700000

0800192c <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::setPrintState(bool state) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8001946:	e003      	b.n	8001950 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	}
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 8001972:	2300      	movs	r3, #0
	}
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <_ZN7RoboArm17SetMicrosteps4AllEh>:


int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step){
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	339c      	adds	r3, #156	; 0x9c
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fa6c 	bl	8001e70 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	33c4      	adds	r3, #196	; 0xc4
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fa65 	bl	8001e70 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3374      	adds	r3, #116	; 0x74
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fa5e 	bl	8001e70 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	659a      	str	r2, [r3, #88]	; 0x58
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	661a      	str	r2, [r3, #96]	; 0x60
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8bba      	ldrh	r2, [r7, #28]
 80019e4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	669a      	str	r2, [r3, #104]	; 0x68
	ResolutionEncoders = ResolutionEncodersT;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f7ff fb98 	bl	8001150 <calculateAngle>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <_ZN7RoboArm14GetLinEncodersEf>:

float RoboArm::GetLinEncoders(float ang) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	float pos;
	if (inverseLinZero){
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <_ZN7RoboArm14GetLinEncodersEf+0x26>
		ang = abs(360-ang);
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	480d      	ldr	r0, [pc, #52]	; (8001a78 <_ZN7RoboArm14GetLinEncodersEf+0x4c>)
 8001a44:	f7fe ffa6 	bl	8000994 <__aeabi_fsub>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fc53 	bl	80012f6 <_ZSt3absf>
 8001a50:	6038      	str	r0, [r7, #0]
	}
	pos = ang * distMax / 360.0;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a56:	6839      	ldr	r1, [r7, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f8a5 	bl	8000ba8 <__aeabi_fmul>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4905      	ldr	r1, [pc, #20]	; (8001a78 <_ZN7RoboArm14GetLinEncodersEf+0x4c>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f954 	bl	8000d10 <__aeabi_fdiv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]
	return pos;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	43b40000 	.word	0x43b40000

08001a7c <_ZN7RoboArm14GetPosEncodersEh>:

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d002      	beq.n	8001a94 <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d013      	beq.n	8001aba <_ZN7RoboArm14GetPosEncodersEh+0x3e>
 8001a92:	e025      	b.n	8001ae0 <_ZN7RoboArm14GetPosEncodersEh+0x64>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001aa8:	f7ff faa2 	bl	8000ff0 <getPositionSPI>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	66da      	str	r2, [r3, #108]	; 0x6c
				ResolutionEncoders);
		return posNowEnc1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ab8:	e013      	b.n	8001ae2 <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ace:	f7ff fa8f 	bl	8000ff0 <getPositionSPI>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	671a      	str	r2, [r3, #112]	; 0x70
				ResolutionEncoders);
		return posNowEnc2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	e000      	b.n	8001ae2 <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	default:
		return 1;
 8001ae0:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_ZN7RoboArm6GetLinEv>:

float RoboArm::GetLin() {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b088      	sub	sp, #32
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001af6:	2102      	movs	r1, #2
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffbf 	bl	8001a7c <_ZN7RoboArm14GetPosEncodersEh>
 8001afe:	61b8      	str	r0, [r7, #24]
	while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8001b00:	e004      	b.n	8001b0c <_ZN7RoboArm6GetLinEv+0x22>
		posnowT_2 = GetPosEncoders(2); //try again
 8001b02:	2102      	movs	r1, #2
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffb9 	bl	8001a7c <_ZN7RoboArm14GetPosEncodersEh>
 8001b0a:	61b8      	str	r0, [r7, #24]
	while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d107      	bne.n	8001b26 <_ZN7RoboArm6GetLinEv+0x3c>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	dc01      	bgt.n	8001b26 <_ZN7RoboArm6GetLinEv+0x3c>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <_ZN7RoboArm6GetLinEv+0x3e>
 8001b26:	2300      	movs	r3, #0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ea      	bne.n	8001b02 <_ZN7RoboArm6GetLinEv+0x18>

	float ang_pos = GetAngleEncoders(posnowT_2);
 8001b2c:	69b9      	ldr	r1, [r7, #24]
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff68 	bl	8001a04 <_ZN7RoboArm16GetAngleEncodersEm>
 8001b34:	6178      	str	r0, [r7, #20]
	float pos_actual = GetLinEncoders(ang_pos);
 8001b36:	6979      	ldr	r1, [r7, #20]
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff77 	bl	8001a2c <_ZN7RoboArm14GetLinEncodersEf>
 8001b3e:	6138      	str	r0, [r7, #16]
	float pos = pos_actual;
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	60fb      	str	r3, [r7, #12]

	return pos;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_ZN7RoboArm6GetAngEv>:

float RoboArm::GetAng() {
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff8d 	bl	8001a7c <_ZN7RoboArm14GetPosEncodersEh>
 8001b62:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8001b64:	e004      	b.n	8001b70 <_ZN7RoboArm6GetAngEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001b66:	2101      	movs	r1, #1
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff87 	bl	8001a7c <_ZN7RoboArm14GetPosEncodersEh>
 8001b6e:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d107      	bne.n	8001b8a <_ZN7RoboArm6GetAngEv+0x3c>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	dc01      	bgt.n	8001b8a <_ZN7RoboArm6GetAngEv+0x3c>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <_ZN7RoboArm6GetAngEv+0x3e>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ea      	bne.n	8001b66 <_ZN7RoboArm6GetAngEv+0x18>

	float ang_actual = GetAngleEncoders(posnowT_1);
 8001b90:	6939      	ldr	r1, [r7, #16]
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff36 	bl	8001a04 <_ZN7RoboArm16GetAngleEncodersEm>
 8001b98:	60f8      	str	r0, [r7, #12]
	float ang = ang_actual + defaultAngle;//arm.ShiftZeroAng(ang_actual);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7fe fef8 	bl	8000998 <__addsf3>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60bb      	str	r3, [r7, #8]
	return ang;
 8001bac:	68bb      	ldr	r3, [r7, #8]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	HAL_Delay(300);
 8001bbe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bc2:	f001 fce7 	bl	8003594 <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bda:	f7ff fa09 	bl	8000ff0 <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bf2:	f7ff f9fd 	bl	8000ff0 <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001c04:	461a      	mov	r2, r3
 8001c06:	f7ff fa81 	bl	800110c <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f7ff fa77 	bl	800110c <setZeroSPI>
	HAL_Delay(250);
 8001c1e:	20fa      	movs	r0, #250	; 0xfa
 8001c20:	f001 fcb8 	bl	8003594 <HAL_Delay>
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>:
		GPIO_TypeDef *Dir1_GPIO_Port_M1T, uint16_t Dir1_Pin_M1T,
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *Dir3_GPIO_Port_M3T, uint16_t Dir3_Pin_M3T,
		GPIO_TypeDef *En1_GPIO_Port_M1T, uint16_t En1_Pin_M1T,
		GPIO_TypeDef *En2_GPIO_Port_M2T, uint16_t En2_Pin_M2T,
		GPIO_TypeDef *En3_GPIO_Port_M3T, uint16_t En3_Pin_M3T){
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	609a      	str	r2, [r3, #8]
	htim3M3 = &htim3;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	60da      	str	r2, [r3, #12]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	615a      	str	r2, [r3, #20]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8c3a      	ldrh	r2, [r7, #32]
 8001c58:	831a      	strh	r2, [r3, #24]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	61da      	str	r2, [r3, #28]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c64:	841a      	strh	r2, [r3, #32]
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
	En1_Pin_M1 = En1_Pin_M1T;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001c7c:	861a      	strh	r2, [r3, #48]	; 0x30
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
	En2_Pin_M2 = En2_Pin_M2T;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001c8a:	871a      	strh	r2, [r3, #56]	; 0x38
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c
	En3_Pin_M3 = En3_Pin_M3T;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	SetEnable(1, true);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f84c 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2102      	movs	r1, #2
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f847 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f842 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	f000 f88e 	bl	8001de8 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_2);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	f000 f885 	bl	8001de8 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_1);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	f000 f87c 	bl	8001de8 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	339c      	adds	r3, #156	; 0x9c
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f88b 	bl	8001e10 <_ZN7TMC22096enableEv>

//	tmcd_angle.disableAutomaticCurrentScaling();
//	tmcd_angle.disableAutomaticGradientAdaptation();

	tmcd_gripper.enable();
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	33c4      	adds	r3, #196	; 0xc4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f886 	bl	8001e10 <_ZN7TMC22096enableEv>

//	tmcd_gripper.disableAutomaticCurrentScaling();
//	tmcd_gripper.disableAutomaticGradientAdaptation();

	tmcd_linear.enable();
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3374      	adds	r3, #116	; 0x74
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f881 	bl	8001e10 <_ZN7TMC22096enableEv>

//	tmcd_linear.disableAutomaticCurrentScaling();
//	tmcd_linear.disableAutomaticGradientAdaptation();

	SetMicrosteps4All(5);
 8001d0e:	2105      	movs	r1, #5
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff fe34 	bl	800197e <_ZN7RoboArm17SetMicrosteps4AllEh>



	SetEnable(1, false);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2101      	movs	r1, #1
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f80f 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2102      	movs	r1, #2
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f80a 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, false);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f805 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>

	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	807b      	strh	r3, [r7, #2]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 8001d4e:	787b      	ldrb	r3, [r7, #1]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f001 ff70 	bl	8003c54 <HAL_GPIO_WritePin>
 8001d74:	e017      	b.n	8001da6 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 2) {
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d108      	bne.n	8001d8e <_ZN7RoboArm9SetEnableEtb+0x50>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	4619      	mov	r1, r3
 8001d88:	f001 ff64 	bl	8003c54 <HAL_GPIO_WritePin>
 8001d8c:	e00b      	b.n	8001da6 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 3) {
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d108      	bne.n	8001da6 <_ZN7RoboArm9SetEnableEtb+0x68>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f001 ff57 	bl	8003c54 <HAL_GPIO_WritePin>
	}

	return 0;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc6:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd4:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f8b6 	bl	8001f74 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_ZN7TMC22096enableEv>:

//  pinMode(hardware_enable_pin_, OUTPUT);
//  digitalWrite(hardware_enable_pin_, HIGH);
}

void TMC2209::enable() {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0f      	blt.n	8001e42 <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2120      	movs	r1, #32
 8001e26:	4810      	ldr	r0, [pc, #64]	; (8001e68 <_ZN7TMC22096enableEv+0x58>)
 8001e28:	f001 ff14 	bl	8003c54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2101      	movs	r1, #1
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <_ZN7TMC22096enableEv+0x58>)
 8001e32:	f001 ff0f 	bl	8003c54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3c:	480b      	ldr	r0, [pc, #44]	; (8001e6c <_ZN7TMC22096enableEv+0x5c>)
 8001e3e:	f001 ff09 	bl	8003c54 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	b2d9      	uxtb	r1, r3
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	7f13      	ldrb	r3, [r2, #28]
 8001e52:	f361 0303 	bfi	r3, r1, #0, #4
 8001e56:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f9b8 	bl	80021ce <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	40010c00 	.word	0x40010c00

08001e70 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
		++exponent;
	}
	setMicrostepsPerStepPowerOfTwo(exponent);
}

void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	2b07      	cmp	r3, #7
 8001e80:	d84a      	bhi.n	8001f18 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001ea9 	.word	0x08001ea9
 8001e8c:	08001eb7 	.word	0x08001eb7
 8001e90:	08001ec5 	.word	0x08001ec5
 8001e94:	08001ed3 	.word	0x08001ed3
 8001e98:	08001ee1 	.word	0x08001ee1
 8001e9c:	08001eef 	.word	0x08001eef
 8001ea0:	08001efd 	.word	0x08001efd
 8001ea4:	08001f0b 	.word	0x08001f0b
	case 0: {
		chopper_config_.mres = MRES_001;
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	7fd3      	ldrb	r3, [r2, #31]
 8001eac:	2108      	movs	r1, #8
 8001eae:	f361 0303 	bfi	r3, r1, #0, #4
 8001eb2:	77d3      	strb	r3, [r2, #31]
		break;
 8001eb4:	e036      	b.n	8001f24 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	7fd3      	ldrb	r3, [r2, #31]
 8001eba:	2107      	movs	r1, #7
 8001ebc:	f361 0303 	bfi	r3, r1, #0, #4
 8001ec0:	77d3      	strb	r3, [r2, #31]
		break;
 8001ec2:	e02f      	b.n	8001f24 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	7fd3      	ldrb	r3, [r2, #31]
 8001ec8:	2106      	movs	r1, #6
 8001eca:	f361 0303 	bfi	r3, r1, #0, #4
 8001ece:	77d3      	strb	r3, [r2, #31]
		break;
 8001ed0:	e028      	b.n	8001f24 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	7fd3      	ldrb	r3, [r2, #31]
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	f361 0303 	bfi	r3, r1, #0, #4
 8001edc:	77d3      	strb	r3, [r2, #31]
		break;
 8001ede:	e021      	b.n	8001f24 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	7fd3      	ldrb	r3, [r2, #31]
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	f361 0303 	bfi	r3, r1, #0, #4
 8001eea:	77d3      	strb	r3, [r2, #31]
		break;
 8001eec:	e01a      	b.n	8001f24 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	7fd3      	ldrb	r3, [r2, #31]
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	f361 0303 	bfi	r3, r1, #0, #4
 8001ef8:	77d3      	strb	r3, [r2, #31]
		break;
 8001efa:	e013      	b.n	8001f24 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	7fd3      	ldrb	r3, [r2, #31]
 8001f00:	2102      	movs	r1, #2
 8001f02:	f361 0303 	bfi	r3, r1, #0, #4
 8001f06:	77d3      	strb	r3, [r2, #31]
		break;
 8001f08:	e00c      	b.n	8001f24 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	7fd3      	ldrb	r3, [r2, #31]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	f361 0303 	bfi	r3, r1, #0, #4
 8001f14:	77d3      	strb	r3, [r2, #31]
		break;
 8001f16:	e005      	b.n	8001f24 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	7fd3      	ldrb	r3, [r2, #31]
 8001f1c:	f36f 0303 	bfc	r3, #0, #4
 8001f20:	77d3      	strb	r3, [r2, #31]
		break;
 8001f22:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f952 	bl	80021ce <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop

08001f34 <_ZN7TMC220927enableInverseMotorDirectionEv>:
	driver_current_.ihold = hold_current;
	driver_current_.iholddelay = hold_delay;
	writeStoredDriverCurrent();
}

void TMC2209::enableInverseMotorDirection() {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	7b13      	ldrb	r3, [r2, #12]
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f932 	bl	80021b0 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	7b13      	ldrb	r3, [r2, #12]
 8001f60:	f36f 03c3 	bfc	r3, #3, #1
 8001f64:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f922 	bl	80021b0 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
	return read(ADDRESS_MSCNT);
}

// private
/* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f807 	bl	8001fa0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f82c 	bl	8001ff0 <_ZN7TMC220922setRegistersToDefaultsEv>
	//minimizeMotorCurrent();
//	setRunCurrent(100);
//	disable();
//	disableAutomaticCurrentScaling();
//	disableAutomaticGradientAdaptation();
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:

//	  tmcuart->RxXferCount = 0;

}

void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	7b13      	ldrb	r3, [r2, #12]
 8001fbc:	f36f 0300 	bfc	r3, #0, #1
 8001fc0:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	7b13      	ldrb	r3, [r2, #12]
 8001fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fca:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	7b13      	ldrb	r3, [r2, #12]
 8001fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd4:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	7b53      	ldrb	r3, [r2, #13]
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8e5 	bl	80021b0 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	7c13      	ldrb	r3, [r2, #16]
 8002002:	2110      	movs	r1, #16
 8002004:	f361 0304 	bfi	r3, r1, #0, #5
 8002008:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7c53      	ldrb	r3, [r2, #17]
 800200e:	f043 031f 	orr.w	r3, r3, #31
 8002012:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	7c93      	ldrb	r3, [r2, #18]
 8002018:	2101      	movs	r1, #1
 800201a:	f361 0303 	bfi	r3, r1, #0, #4
 800201e:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	461a      	mov	r2, r3
 8002026:	2110      	movs	r1, #16
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f885 	bl	8002138 <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 8002032:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	69d3      	ldr	r3, [r2, #28]
 8002038:	2102      	movs	r1, #2
 800203a:	f361 33d0 	bfi	r3, r1, #15, #2
 800203e:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	8b93      	ldrh	r3, [r2, #28]
 8002044:	f36f 13ca 	bfc	r3, #7, #4
 8002048:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	7f13      	ldrb	r3, [r2, #28]
 800204e:	2105      	movs	r1, #5
 8002050:	f361 1306 	bfi	r3, r1, #4, #3
 8002054:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	7f13      	ldrb	r3, [r2, #28]
 800205a:	2103      	movs	r1, #3
 800205c:	f361 0303 	bfi	r3, r1, #0, #4
 8002060:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	461a      	mov	r2, r3
 8002068:	216c      	movs	r1, #108	; 0x6c
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f864 	bl	8002138 <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	461a      	mov	r2, r3
 800207c:	2170      	movs	r1, #112	; 0x70
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f85a 	bl	8002138 <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	461a      	mov	r2, r3
 8002090:	2142      	movs	r1, #66	; 0x42
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f850 	bl	8002138 <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002098:	2214      	movs	r2, #20
 800209a:	2111      	movs	r1, #17
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f84b 	bl	8002138 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2113      	movs	r1, #19
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f846 	bl	8002138 <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2122      	movs	r1, #34	; 0x22
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f841 	bl	8002138 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2114      	movs	r1, #20
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f83c 	bl	8002138 <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f837 	bl	8002138 <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2142      	movs	r1, #66	; 0x42
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f832 	bl	8002138 <_ZN7TMC22095writeEhm>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	10000053 	.word	0x10000053
 80020e0:	c10d0024 	.word	0xc10d0024

080020e4 <_ZN7TMC220911reverseDataEm>:
	driver_current_.irun = CURRENT_SETTING_MIN;
	driver_current_.ihold = CURRENT_SETTING_MIN;
	writeStoredDriverCurrent();
}

uint32_t TMC2209::reverseData(uint32_t data) {
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80020f2:	2300      	movs	r3, #0
 80020f4:	72fb      	strb	r3, [r7, #11]
 80020f6:	e016      	b.n	8002126 <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	f1c3 0303 	rsb	r3, r3, #3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800210a:	7abb      	ldrb	r3, [r7, #10]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	b2da      	uxtb	r2, r3
 8002114:	7a7b      	ldrb	r3, [r7, #9]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002120:	7afb      	ldrb	r3, [r7, #11]
 8002122:	3301      	adds	r3, #1
 8002124:	72fb      	strb	r3, [r7, #11]
 8002126:	7afb      	ldrb	r3, [r7, #11]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d9e5      	bls.n	80020f8 <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 800212c:	68fb      	ldr	r3, [r7, #12]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <_ZN7TMC22095writeEhm>:
	for (uint8_t i = 0; i < datagram_size; ++i) {
		byte = serialRead();
	}*/
}

void TMC2209::write(uint8_t register_address, uint32_t data) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	460b      	mov	r3, r1
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8002152:	7c3b      	ldrb	r3, [r7, #16]
 8002154:	2205      	movs	r2, #5
 8002156:	f362 0303 	bfi	r3, r2, #0, #4
 800215a:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8002162:	7afb      	ldrb	r3, [r7, #11]
 8002164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002168:	b2da      	uxtb	r2, r3
 800216a:	7cbb      	ldrb	r3, [r7, #18]
 800216c:	f362 0306 	bfi	r3, r2, #0, #7
 8002170:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002172:	7cbb      	ldrb	r3, [r7, #18]
 8002174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002178:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff ffb1 	bl	80020e4 <_ZN7TMC220911reverseDataEm>
 8002182:	4603      	mov	r3, r0
 8002184:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	2208      	movs	r2, #8
 800218e:	4619      	mov	r1, r3
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f82b 	bl	80021ec <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	2208      	movs	r2, #8
 80021a0:	4619      	mov	r1, r3
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f871 	bl	800228a <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_ZN7TMC220923writeStoredGlobalConfigEv>:
uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
	return percent;
}

void TMC2209::writeStoredGlobalConfig() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	461a      	mov	r2, r3
 80021be:	2100      	movs	r1, #0
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffb9 	bl	8002138 <_ZN7TMC22095writeEhm>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_ZN7TMC220924writeStoredChopperConfigEv>:
	if (cool_step_enabled_) {
		write(ADDRESS_COOLCONF, cool_config_.bytes);
	}
}

void TMC2209::writeStoredChopperConfig() {
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	461a      	mov	r2, r3
 80021dc:	216c      	movs	r1, #108	; 0x6c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffaa 	bl	8002138 <_ZN7TMC22095writeEhm>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 80021ec:	b4f0      	push	{r4, r5, r6, r7}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	4613      	mov	r3, r2
 80021f8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80021fe:	2300      	movs	r3, #0
 8002200:	757b      	strb	r3, [r7, #21]
 8002202:	e037      	b.n	8002274 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	7d79      	ldrb	r1, [r7, #21]
 800220c:	00c9      	lsls	r1, r1, #3
 800220e:	f1c1 0620 	rsb	r6, r1, #32
 8002212:	f1a1 0020 	sub.w	r0, r1, #32
 8002216:	fa22 f401 	lsr.w	r4, r2, r1
 800221a:	fa03 f606 	lsl.w	r6, r3, r6
 800221e:	4334      	orrs	r4, r6
 8002220:	fa23 f000 	lsr.w	r0, r3, r0
 8002224:	4304      	orrs	r4, r0
 8002226:	fa23 f501 	lsr.w	r5, r3, r1
 800222a:	4623      	mov	r3, r4
 800222c:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 800222e:	2300      	movs	r3, #0
 8002230:	753b      	strb	r3, [r7, #20]
 8002232:	e019      	b.n	8002268 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	09db      	lsrs	r3, r3, #7
 8002238:	b2da      	uxtb	r2, r3
 800223a:	7dbb      	ldrb	r3, [r7, #22]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	429a      	cmp	r2, r3
 8002244:	d007      	beq.n	8002256 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	b25b      	sxtb	r3, r3
 800224c:	f083 0307 	eor.w	r3, r3, #7
 8002250:	b25b      	sxtb	r3, r3
 8002252:	75fb      	strb	r3, [r7, #23]
 8002254:	e002      	b.n	800225c <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 800225c:	7dbb      	ldrb	r3, [r7, #22]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002262:	7d3b      	ldrb	r3, [r7, #20]
 8002264:	3301      	adds	r3, #1
 8002266:	753b      	strb	r3, [r7, #20]
 8002268:	7d3b      	ldrb	r3, [r7, #20]
 800226a:	2b07      	cmp	r3, #7
 800226c:	d9e2      	bls.n	8002234 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 800226e:	7d7b      	ldrb	r3, [r7, #21]
 8002270:	3301      	adds	r3, #1
 8002272:	757b      	strb	r3, [r7, #21]
 8002274:	7d7a      	ldrb	r2, [r7, #21]
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	3b01      	subs	r3, #1
 800227a:	429a      	cmp	r2, r3
 800227c:	dbc2      	blt.n	8002204 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bcf0      	pop	{r4, r5, r6, r7}
 8002288:	4770      	bx	lr

0800228a <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	4613      	mov	r3, r2
 8002296:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4618      	mov	r0, r3
 800229e:	f003 ffe4 	bl	800626a <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6898      	ldr	r0, [r3, #8]
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	f003 fc83 	bl	8005bba <HAL_UART_Transmit>
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <vApplicationGetIdleTaskMemory+0x28>)
 80022cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80022d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000030 	.word	0x20000030
 80022e8:	20000084 	.word	0x20000084

080022ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b0a4      	sub	sp, #144	; 0x90
 80022f0:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f2:	f001 f8ed 	bl	80034d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f6:	f000 f89f 	bl	8002438 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fa:	f000 faef 	bl	80028dc <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 80022fe:	f000 f929 	bl	8002554 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8002302:	f000 f9bf 	bl	8002684 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 8002306:	f000 f8e9 	bl	80024dc <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 800230a:	f000 fa8b 	bl	8002824 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 800230e:	f000 fab7 	bl	8002880 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8002312:	f000 fa1f 	bl	8002754 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim1);
 8002316:	4839      	ldr	r0, [pc, #228]	; (80023fc <main+0x110>)
 8002318:	f002 fcd8 	bl	8004ccc <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 800231c:	4838      	ldr	r0, [pc, #224]	; (8002400 <main+0x114>)
 800231e:	f002 fcd5 	bl	8004ccc <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2,htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 8002322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002326:	930c      	str	r3, [sp, #48]	; 0x30
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <main+0x118>)
 800232a:	930b      	str	r3, [sp, #44]	; 0x2c
 800232c:	2301      	movs	r3, #1
 800232e:	930a      	str	r3, [sp, #40]	; 0x28
 8002330:	4b35      	ldr	r3, [pc, #212]	; (8002408 <main+0x11c>)
 8002332:	9309      	str	r3, [sp, #36]	; 0x24
 8002334:	2320      	movs	r3, #32
 8002336:	9308      	str	r3, [sp, #32]
 8002338:	4b33      	ldr	r3, [pc, #204]	; (8002408 <main+0x11c>)
 800233a:	9307      	str	r3, [sp, #28]
 800233c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002340:	9306      	str	r3, [sp, #24]
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <main+0x118>)
 8002344:	9305      	str	r3, [sp, #20]
 8002346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800234a:	9304      	str	r3, [sp, #16]
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <main+0x118>)
 800234e:	9303      	str	r3, [sp, #12]
 8002350:	2340      	movs	r3, #64	; 0x40
 8002352:	9302      	str	r3, [sp, #8]
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <main+0x11c>)
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <main+0x120>)
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4b28      	ldr	r3, [pc, #160]	; (8002400 <main+0x114>)
 800235e:	4a27      	ldr	r2, [pc, #156]	; (80023fc <main+0x110>)
 8002360:	492b      	ldr	r1, [pc, #172]	; (8002410 <main+0x124>)
 8002362:	482c      	ldr	r0, [pc, #176]	; (8002414 <main+0x128>)
 8002364:	f7ff fc63 	bl	8001c2e <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>
			Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
			En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin);

	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 8002368:	230e      	movs	r3, #14
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	2302      	movs	r3, #2
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <main+0x118>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <main+0x118>)
 8002378:	4927      	ldr	r1, [pc, #156]	; (8002418 <main+0x12c>)
 800237a:	4826      	ldr	r0, [pc, #152]	; (8002414 <main+0x128>)
 800237c:	f7ff fb1f 	bl	80019be <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
			14);
	un_now.params.hold = 0;
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <main+0x130>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <main+0x134>)
 8002388:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800238c:	461d      	mov	r5, r3
 800238e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002392:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800239a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 fa83 	bl	80068ac <osThreadCreate>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <main+0x138>)
 80023aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myAMT22Task */
  osThreadDef(myAMT22Task, StartAMT22Data, osPriorityIdle, 0, 128);
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <main+0x13c>)
 80023ae:	f107 0420 	add.w	r4, r7, #32
 80023b2:	461d      	mov	r5, r3
 80023b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myAMT22TaskHandle = osThreadCreate(osThread(myAMT22Task), NULL);
 80023c0:	f107 0320 	add.w	r3, r7, #32
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 fa70 	bl	80068ac <osThreadCreate>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <main+0x140>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myUARTTask */
  osThreadDef(myUARTTask, StartUARTData, osPriorityIdle, 0, 128);
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <main+0x144>)
 80023d4:	1d3c      	adds	r4, r7, #4
 80023d6:	461d      	mov	r5, r3
 80023d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myUARTTaskHandle = osThreadCreate(osThread(myUARTTask), NULL);
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f004 fa5f 	bl	80068ac <osThreadCreate>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a10      	ldr	r2, [pc, #64]	; (8002434 <main+0x148>)
 80023f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80023f4:	f004 fa53 	bl	800689e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 80023f8:	e7fe      	b.n	80023f8 <main+0x10c>
 80023fa:	bf00      	nop
 80023fc:	200002dc 	.word	0x200002dc
 8002400:	20000324 	.word	0x20000324
 8002404:	40010c00 	.word	0x40010c00
 8002408:	40010800 	.word	0x40010800
 800240c:	2000036c 	.word	0x2000036c
 8002410:	200003fc 	.word	0x200003fc
 8002414:	200004a0 	.word	0x200004a0
 8002418:	20000284 	.word	0x20000284
 800241c:	20000488 	.word	0x20000488
 8002420:	08007d5c 	.word	0x08007d5c
 8002424:	20000444 	.word	0x20000444
 8002428:	08007d84 	.word	0x08007d84
 800242c:	20000448 	.word	0x20000448
 8002430:	08007dac 	.word	0x08007dac
 8002434:	2000044c 	.word	0x2000044c

08002438 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b090      	sub	sp, #64	; 0x40
 800243c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	2228      	movs	r2, #40	; 0x28
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f005 fc4a 	bl	8007ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800245a:	2301      	movs	r3, #1
 800245c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800245e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002468:	2301      	movs	r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800246c:	2302      	movs	r3, #2
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002476:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247c:	f107 0318 	add.w	r3, r7, #24
 8002480:	4618      	mov	r0, r3
 8002482:	f001 fc31 	bl	8003ce8 <HAL_RCC_OscConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002496:	f000 fd53 	bl	8002f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800249a:	230f      	movs	r3, #15
 800249c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249e:	2302      	movs	r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fe99 	bl	80041ec <HAL_RCC_ClockConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80024ca:	f000 fd39 	bl	8002f40 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80024ce:	f001 ff77 	bl	80043c0 <HAL_RCC_EnableCSS>
}
 80024d2:	bf00      	nop
 80024d4:	3740      	adds	r7, #64	; 0x40
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 80024e2:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <_ZL12MX_SPI1_Initv+0x74>)
 80024e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 80024e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 8002508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 8002510:	2218      	movs	r2, #24
 8002512:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 8002516:	2200      	movs	r2, #0
 8002518:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 8002522:	2200      	movs	r2, #0
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 8002528:	220a      	movs	r2, #10
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800252c:	4807      	ldr	r0, [pc, #28]	; (800254c <_ZL12MX_SPI1_Initv+0x70>)
 800252e:	f001 fff7 	bl	8004520 <HAL_SPI_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002542:	f000 fcfd 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000284 	.word	0x20000284
 8002550:	40013000 	.word	0x40013000

08002554 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b092      	sub	sp, #72	; 0x48
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
 8002574:	615a      	str	r2, [r3, #20]
 8002576:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2220      	movs	r2, #32
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f005 fbae 	bl	8007ce0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002584:	4b3d      	ldr	r3, [pc, #244]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 8002586:	4a3e      	ldr	r2, [pc, #248]	; (8002680 <_ZL12MX_TIM1_Initv+0x12c>)
 8002588:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 800258c:	2248      	movs	r2, #72	; 0x48
 800258e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002596:	4b39      	ldr	r3, [pc, #228]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 8002598:	f240 32e7 	movw	r2, #999	; 0x3e7
 800259c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259e:	4b37      	ldr	r3, [pc, #220]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025aa:	4b34      	ldr	r3, [pc, #208]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025b0:	4832      	ldr	r0, [pc, #200]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 80025b2:	f002 fc5d 	bl	8004e70 <HAL_TIM_PWM_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80025c6:	f000 fcbb 	bl	8002f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025d6:	4619      	mov	r1, r3
 80025d8:	4828      	ldr	r0, [pc, #160]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 80025da:	f003 f98b 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80025ee:	f000 fca7 	bl	8002f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f2:	2360      	movs	r3, #96	; 0x60
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025fe:	2300      	movs	r3, #0
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800260e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002612:	2200      	movs	r2, #0
 8002614:	4619      	mov	r1, r3
 8002616:	4819      	ldr	r0, [pc, #100]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 8002618:	f002 fe82 	bl	8005320 <HAL_TIM_PWM_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf14      	ite	ne
 8002622:	2301      	movne	r3, #1
 8002624:	2300      	moveq	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 800262c:	f000 fc88 	bl	8002f40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002648:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	4619      	mov	r1, r3
 8002652:	480a      	ldr	r0, [pc, #40]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 8002654:	f003 f9a6 	bl	80059a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8002668:	f000 fc6a 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800266c:	4803      	ldr	r0, [pc, #12]	; (800267c <_ZL12MX_TIM1_Initv+0x128>)
 800266e:	f000 fd8b 	bl	8003188 <HAL_TIM_MspPostInit>

}
 8002672:	bf00      	nop
 8002674:	3748      	adds	r7, #72	; 0x48
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200002dc 	.word	0x200002dc
 8002680:	40012c00 	.word	0x40012c00

08002684 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268a:	f107 0320 	add.w	r3, r7, #32
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 80026a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80026ae:	4b28      	ldr	r3, [pc, #160]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 80026b0:	2248      	movs	r2, #72	; 0x48
 80026b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 80026bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026ce:	4820      	ldr	r0, [pc, #128]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 80026d0:	f002 fbce 	bl	8004e70 <HAL_TIM_PWM_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80026e4:	f000 fc2c 	bl	8002f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	4619      	mov	r1, r3
 80026f6:	4816      	ldr	r0, [pc, #88]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 80026f8:	f003 f8fc 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf14      	ite	ne
 8002702:	2301      	movne	r3, #1
 8002704:	2300      	moveq	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 800270c:	f000 fc18 	bl	8002f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002710:	2360      	movs	r3, #96	; 0x60
 8002712:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2204      	movs	r2, #4
 8002724:	4619      	mov	r1, r3
 8002726:	480a      	ldr	r0, [pc, #40]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 8002728:	f002 fdfa 	bl	8005320 <HAL_TIM_PWM_ConfigChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf14      	ite	ne
 8002732:	2301      	movne	r3, #1
 8002734:	2300      	moveq	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 800273c:	f000 fc00 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002740:	4803      	ldr	r0, [pc, #12]	; (8002750 <_ZL12MX_TIM2_Initv+0xcc>)
 8002742:	f000 fd21 	bl	8003188 <HAL_TIM_MspPostInit>

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000324 	.word	0x20000324

08002754 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275a:	f107 0320 	add.w	r3, r7, #32
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	615a      	str	r2, [r3, #20]
 8002774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 8002778:	4a29      	ldr	r2, [pc, #164]	; (8002820 <_ZL12MX_TIM3_Initv+0xcc>)
 800277a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 800277e:	2248      	movs	r2, #72	; 0x48
 8002780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 800278a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800278e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800279c:	481f      	ldr	r0, [pc, #124]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 800279e:	f002 fb67 	bl	8004e70 <HAL_TIM_PWM_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf14      	ite	ne
 80027a8:	2301      	movne	r3, #1
 80027aa:	2300      	moveq	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80027b2:	f000 fbc5 	bl	8002f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027be:	f107 0320 	add.w	r3, r7, #32
 80027c2:	4619      	mov	r1, r3
 80027c4:	4815      	ldr	r0, [pc, #84]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 80027c6:	f003 f895 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf14      	ite	ne
 80027d0:	2301      	movne	r3, #1
 80027d2:	2300      	moveq	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80027da:	f000 fbb1 	bl	8002f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027de:	2360      	movs	r3, #96	; 0x60
 80027e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	2204      	movs	r2, #4
 80027f2:	4619      	mov	r1, r3
 80027f4:	4809      	ldr	r0, [pc, #36]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 80027f6:	f002 fd93 	bl	8005320 <HAL_TIM_PWM_ConfigChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800280a:	f000 fb99 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800280e:	4803      	ldr	r0, [pc, #12]	; (800281c <_ZL12MX_TIM3_Initv+0xc8>)
 8002810:	f000 fcba 	bl	8003188 <HAL_TIM_MspPostInit>

}
 8002814:	bf00      	nop
 8002816:	3728      	adds	r7, #40	; 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000036c 	.word	0x2000036c
 8002820:	40000400 	.word	0x40000400

08002824 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 800282a:	4a14      	ldr	r2, [pc, #80]	; (800287c <_ZL19MX_USART1_UART_Initv+0x58>)
 800282c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 800284a:	220c      	movs	r2, #12
 800284c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800285a:	4807      	ldr	r0, [pc, #28]	; (8002878 <_ZL19MX_USART1_UART_Initv+0x54>)
 800285c:	f003 f905 	bl	8005a6a <HAL_UART_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002870:	f000 fb66 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200003b4 	.word	0x200003b4
 800287c:	40013800 	.word	0x40013800

08002880 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80028b6:	4807      	ldr	r0, [pc, #28]	; (80028d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028b8:	f003 f927 	bl	8005b0a <HAL_HalfDuplex_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80028cc:	f000 fb38 	bl	8002f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200003fc 	.word	0x200003fc
 80028d8:	40004400 	.word	0x40004400

080028dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f0:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4a53      	ldr	r2, [pc, #332]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 80028f6:	f043 0310 	orr.w	r3, r3, #16
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002908:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4a4d      	ldr	r2, [pc, #308]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	6193      	str	r3, [r2, #24]
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002920:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	4a47      	ldr	r2, [pc, #284]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	6193      	str	r3, [r2, #24]
 800292c:	4b45      	ldr	r3, [pc, #276]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002938:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 800293e:	f043 0308 	orr.w	r3, r3, #8
 8002942:	6193      	str	r3, [r2, #24]
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <_ZL12MX_GPIO_Initv+0x168>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002956:	483c      	ldr	r0, [pc, #240]	; (8002a48 <_ZL12MX_GPIO_Initv+0x16c>)
 8002958:	f001 f97c 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En2_Pin|Button_Pin|En1_Pin|Dir1_Pin
 800295c:	2200      	movs	r2, #0
 800295e:	f241 0171 	movw	r1, #4209	; 0x1071
 8002962:	483a      	ldr	r0, [pc, #232]	; (8002a4c <_ZL12MX_GPIO_Initv+0x170>)
 8002964:	f001 f976 	bl	8003c54 <HAL_GPIO_WritePin>
                          |Buser_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 8002968:	2200      	movs	r2, #0
 800296a:	f648 7143 	movw	r1, #36675	; 0x8f43
 800296e:	4838      	ldr	r0, [pc, #224]	; (8002a50 <_ZL12MX_GPIO_Initv+0x174>)
 8002970:	f001 f970 	bl	8003c54 <HAL_GPIO_WritePin>
                          |S1_Pin|S2_Pin|En3_Pin|Dir3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8002974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297a:	2301      	movs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2302      	movs	r3, #2
 8002984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4619      	mov	r1, r3
 800298c:	482e      	ldr	r0, [pc, #184]	; (8002a48 <_ZL12MX_GPIO_Initv+0x16c>)
 800298e:	f000 ffe5 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : En2_Pin Button_Pin En1_Pin Dir1_Pin
                           Buser_Pin */
  GPIO_InitStruct.Pin = En2_Pin|Button_Pin|En1_Pin|Dir1_Pin
 8002992:	f241 0371 	movw	r3, #4209	; 0x1071
 8002996:	613b      	str	r3, [r7, #16]
                          |Buser_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002998:	2301      	movs	r3, #1
 800299a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	4619      	mov	r1, r3
 80029aa:	4828      	ldr	r0, [pc, #160]	; (8002a4c <_ZL12MX_GPIO_Initv+0x170>)
 80029ac:	f000 ffd6 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
                           S1_Pin S2_Pin En3_Pin Dir3_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 80029b0:	f648 7343 	movw	r3, #36675	; 0x8f43
 80029b4:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|En3_Pin|Dir3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2302      	movs	r3, #2
 80029c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	4619      	mov	r1, r3
 80029c8:	4821      	ldr	r0, [pc, #132]	; (8002a50 <_ZL12MX_GPIO_Initv+0x174>)
 80029ca:	f000 ffc7 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : EndCap1_Pin EndCap2_Pin EndCap3_Pin */
  GPIO_InitStruct.Pin = EndCap1_Pin|EndCap2_Pin;
 80029ce:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80029d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <_ZL12MX_GPIO_Initv+0x178>)
 80029d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	4619      	mov	r1, r3
 80029e2:	481b      	ldr	r0, [pc, #108]	; (8002a50 <_ZL12MX_GPIO_Initv+0x174>)
 80029e4:	f000 ffba 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : EndCap3_Pin */
  GPIO_InitStruct.Pin = EndCap3_Pin;
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <_ZL12MX_GPIO_Initv+0x178>)
 80029ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EndCap3_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	4619      	mov	r1, r3
 80029fa:	4815      	ldr	r0, [pc, #84]	; (8002a50 <_ZL12MX_GPIO_Initv+0x174>)
 80029fc:	f000 ffae 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : EndCap4_Pin */
  GPIO_InitStruct.Pin = EndCap4_Pin;
 8002a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <_ZL12MX_GPIO_Initv+0x178>)
 8002a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EndCap4_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f107 0310 	add.w	r3, r7, #16
 8002a12:	4619      	mov	r1, r3
 8002a14:	480d      	ldr	r0, [pc, #52]	; (8002a4c <_ZL12MX_GPIO_Initv+0x170>)
 8002a16:	f000 ffa1 	bl	800395c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2105      	movs	r1, #5
 8002a1e:	2017      	movs	r0, #23
 8002a20:	f000 feb3 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a24:	2017      	movs	r0, #23
 8002a26:	f000 fecc 	bl	80037c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	2028      	movs	r0, #40	; 0x28
 8002a30:	f000 feab 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a34:	2028      	movs	r0, #40	; 0x28
 8002a36:	f000 fec4 	bl	80037c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a3a:	bf00      	nop
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40011000 	.word	0x40011000
 8002a4c:	40010800 	.word	0x40010800
 8002a50:	40010c00 	.word	0x40010c00
 8002a54:	10110000 	.word	0x10110000

08002a58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <HAL_UART_RxCpltCallback+0x9c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d13c      	bne.n	8002ae2 <HAL_UART_RxCpltCallback+0x8a>
//		if(!strcmp(rx_buffer,"TEXT")) {
//		}

//		uint8_t data[] = { '\\', 0x8f, 0xf8, 'B', 'q', '}', 0x16, 'C', 1, 1, 0, 0 };
		memcpy(un_get.bytes, rx_buffer, sizeof(rx_buffer));
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_UART_RxCpltCallback+0xa0>)
 8002a6a:	4a24      	ldr	r2, [pc, #144]	; (8002afc <HAL_UART_RxCpltCallback+0xa4>)
 8002a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		switch (un_get.params.hold) {
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <HAL_UART_RxCpltCallback+0xa0>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b4b      	cmp	r3, #75	; 0x4b
 8002a78:	d025      	beq.n	8002ac6 <HAL_UART_RxCpltCallback+0x6e>
 8002a7a:	2b4b      	cmp	r3, #75	; 0x4b
 8002a7c:	dc27      	bgt.n	8002ace <HAL_UART_RxCpltCallback+0x76>
 8002a7e:	2b32      	cmp	r3, #50	; 0x32
 8002a80:	d01d      	beq.n	8002abe <HAL_UART_RxCpltCallback+0x66>
 8002a82:	2b32      	cmp	r3, #50	; 0x32
 8002a84:	dc23      	bgt.n	8002ace <HAL_UART_RxCpltCallback+0x76>
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	dc02      	bgt.n	8002a90 <HAL_UART_RxCpltCallback+0x38>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da03      	bge.n	8002a96 <HAL_UART_RxCpltCallback+0x3e>
 8002a8e:	e01e      	b.n	8002ace <HAL_UART_RxCpltCallback+0x76>
 8002a90:	2b19      	cmp	r3, #25
 8002a92:	d010      	beq.n	8002ab6 <HAL_UART_RxCpltCallback+0x5e>
 8002a94:	e01b      	b.n	8002ace <HAL_UART_RxCpltCallback+0x76>
		case 0:
		case 1:
			startFirstMove = true;
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_UART_RxCpltCallback+0xa8>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
			un_to.params.lin = un_get.params.lin;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_UART_RxCpltCallback+0xa0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <HAL_UART_RxCpltCallback+0xac>)
 8002aa2:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_UART_RxCpltCallback+0xa0>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_UART_RxCpltCallback+0xac>)
 8002aaa:	6053      	str	r3, [r2, #4]
			un_to.params.hold = un_get.params.hold;
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_UART_RxCpltCallback+0xa0>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <HAL_UART_RxCpltCallback+0xac>)
 8002ab2:	6093      	str	r3, [r2, #8]
//			arm.moveGripper = un_get.params.hold;
			break;
 8002ab4:	e00b      	b.n	8002ace <HAL_UART_RxCpltCallback+0x76>
		case 25:
			stopHand = true;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_UART_RxCpltCallback+0xb0>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
			break;
 8002abc:	e007      	b.n	8002ace <HAL_UART_RxCpltCallback+0x76>
		case 50:
			sendDataFlag = true;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <HAL_UART_RxCpltCallback+0xb4>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
			break;
 8002ac4:	e003      	b.n	8002ace <HAL_UART_RxCpltCallback+0x76>
		case 75:
			setZeroFlag = true;
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_UART_RxCpltCallback+0xb8>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
			break;
 8002acc:	bf00      	nop
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002ace:	220c      	movs	r2, #12
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	480a      	ldr	r0, [pc, #40]	; (8002afc <HAL_UART_RxCpltCallback+0xa4>)
 8002ad4:	f005 f904 	bl	8007ce0 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8002ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002adc:	480d      	ldr	r0, [pc, #52]	; (8002b14 <HAL_UART_RxCpltCallback+0xbc>)
 8002ade:	f001 f8d1 	bl	8003c84 <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	4905      	ldr	r1, [pc, #20]	; (8002afc <HAL_UART_RxCpltCallback+0xa4>)
 8002ae6:	4803      	ldr	r0, [pc, #12]	; (8002af4 <HAL_UART_RxCpltCallback+0x9c>)
 8002ae8:	f003 f8ea 	bl	8005cc0 <HAL_UART_Receive_IT>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200003b4 	.word	0x200003b4
 8002af8:	20000464 	.word	0x20000464
 8002afc:	20000450 	.word	0x20000450
 8002b00:	2000045c 	.word	0x2000045c
 8002b04:	2000047c 	.word	0x2000047c
 8002b08:	2000045e 	.word	0x2000045e
 8002b0c:	2000045d 	.word	0x2000045d
 8002b10:	2000045f 	.word	0x2000045f
 8002b14:	40011000 	.word	0x40011000

08002b18 <_Z16StartDefaultTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	arm.setPrintState(false);
 8002b20:	2100      	movs	r1, #0
 8002b22:	483b      	ldr	r0, [pc, #236]	; (8002c10 <_Z16StartDefaultTaskPKv+0xf8>)
 8002b24:	f7fe ff02 	bl	800192c <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {
		if (startFirstMove) {
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <_Z16StartDefaultTaskPKv+0xfc>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d024      	beq.n	8002b7a <_Z16StartDefaultTaskPKv+0x62>
			startFirstMove = false;
 8002b30:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <_Z16StartDefaultTaskPKv+0xfc>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
//			float angle = arm.UnshiftZeroAng(un.params.ang);
//			uint16_t distance = arm.UnshiftZeroLin(un.params.lin);
//			arm.Move2Motors(angle, distance);
			if (un_now.params.hold != 0) {
 8002b36:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <_Z16StartDefaultTaskPKv+0x100>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <_Z16StartDefaultTaskPKv+0x3a>
				allowMove = false;
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <_Z16StartDefaultTaskPKv+0x104>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
				un_now.params.hold = 0;
 8002b44:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <_Z16StartDefaultTaskPKv+0x100>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
				arm.SetGripper(0);
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4830      	ldr	r0, [pc, #192]	; (8002c10 <_Z16StartDefaultTaskPKv+0xf8>)
 8002b4e:	f7fe fe73 	bl	8001838 <_ZN7RoboArm10SetGripperEi>
//				allowMove = false;
//				un_now.params.hold = 0;
			}
			while (!allowMove) {}
 8002b52:	bf00      	nop
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <_Z16StartDefaultTaskPKv+0x104>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f8      	bne.n	8002b54 <_Z16StartDefaultTaskPKv+0x3c>
			if (allowMove) {
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <_Z16StartDefaultTaskPKv+0x104>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <_Z16StartDefaultTaskPKv+0x62>
				arm.Move2Motors(un_to.params.ang, un_to.params.lin);
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <_Z16StartDefaultTaskPKv+0x108>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a2c      	ldr	r2, [pc, #176]	; (8002c20 <_Z16StartDefaultTaskPKv+0x108>)
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4826      	ldr	r0, [pc, #152]	; (8002c10 <_Z16StartDefaultTaskPKv+0xf8>)
 8002b76:	f7fe fcaf 	bl	80014d8 <_ZN7RoboArm11Move2MotorsEff>
//			arm.Move2MotorsSimu(un_get.params.ang, un_get.params.lin);
//			arm.Move2MotorsSimu(recAngleF, recDist);
			//steppingyakkazavmaxim(2000, 230);
		}

		if (timerFT1 && timerFT2) {
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <_Z16StartDefaultTaskPKv+0x10c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d041      	beq.n	8002c06 <_Z16StartDefaultTaskPKv+0xee>
 8002b82:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <_Z16StartDefaultTaskPKv+0x110>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d03d      	beq.n	8002c06 <_Z16StartDefaultTaskPKv+0xee>

			timerFT1 = false;
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <_Z16StartDefaultTaskPKv+0x10c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002b90:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <_Z16StartDefaultTaskPKv+0x110>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
			un_now.params.lin = un_to.params.lin;
 8002b96:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <_Z16StartDefaultTaskPKv+0x108>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <_Z16StartDefaultTaskPKv+0x100>)
 8002b9c:	6013      	str	r3, [r2, #0]
			un_now.params.ang = un_to.params.ang;
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <_Z16StartDefaultTaskPKv+0x108>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <_Z16StartDefaultTaskPKv+0x100>)
 8002ba4:	6053      	str	r3, [r2, #4]

			if (un_now.params.hold != un_to.params.hold) {
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <_Z16StartDefaultTaskPKv+0x100>)
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <_Z16StartDefaultTaskPKv+0x108>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d00c      	beq.n	8002bcc <_Z16StartDefaultTaskPKv+0xb4>
				gripperMoveFinished = false;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <_Z16StartDefaultTaskPKv+0x114>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
				un_now.params.hold = un_to.params.hold;
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <_Z16StartDefaultTaskPKv+0x108>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <_Z16StartDefaultTaskPKv+0x100>)
 8002bbe:	6093      	str	r3, [r2, #8]
				arm.SetGripper(un_to.params.hold);
 8002bc0:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <_Z16StartDefaultTaskPKv+0x108>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4812      	ldr	r0, [pc, #72]	; (8002c10 <_Z16StartDefaultTaskPKv+0xf8>)
 8002bc8:	f7fe fe36 	bl	8001838 <_ZN7RoboArm10SetGripperEi>
//				gripperMoveFinished = false;
//				un_now.params.hold = un_to.params.hold;
			}
			while (!gripperMoveFinished) {}
 8002bcc:	bf00      	nop
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <_Z16StartDefaultTaskPKv+0x114>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f8      	bne.n	8002bce <_Z16StartDefaultTaskPKv+0xb6>
			if (gripperMoveFinished) {
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <_Z16StartDefaultTaskPKv+0x114>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <_Z16StartDefaultTaskPKv+0xee>
				un_send.params.lin = 0;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <_Z16StartDefaultTaskPKv+0x118>)
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
				un_send.params.ang = 0;
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <_Z16StartDefaultTaskPKv+0x118>)
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
				un_send.params.hold = 10;
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <_Z16StartDefaultTaskPKv+0x118>)
 8002bf6:	220a      	movs	r2, #10
 8002bf8:	609a      	str	r2, [r3, #8]
				HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002bfa:	230c      	movs	r3, #12
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	490c      	ldr	r1, [pc, #48]	; (8002c30 <_Z16StartDefaultTaskPKv+0x118>)
 8002c00:	480c      	ldr	r0, [pc, #48]	; (8002c34 <_Z16StartDefaultTaskPKv+0x11c>)
 8002c02:	f002 ffda 	bl	8005bba <HAL_UART_Transmit>

		//	arm.correctPosition();

		}

		osDelay(1);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f003 fe9c 	bl	8006944 <osDelay>
		if (startFirstMove) {
 8002c0c:	e78c      	b.n	8002b28 <_Z16StartDefaultTaskPKv+0x10>
 8002c0e:	bf00      	nop
 8002c10:	200004a0 	.word	0x200004a0
 8002c14:	2000045c 	.word	0x2000045c
 8002c18:	20000488 	.word	0x20000488
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	2000047c 	.word	0x2000047c
 8002c24:	20000460 	.word	0x20000460
 8002c28:	20000461 	.word	0x20000461
 8002c2c:	20000001 	.word	0x20000001
 8002c30:	20000470 	.word	0x20000470
 8002c34:	200003b4 	.word	0x200003b4

08002c38 <_Z14StartAMT22DataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAMT22Data */
void StartAMT22Data(void const * argument)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
//
//		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str),
//				HAL_MAX_DELAY);


		osDelay(1000);
 8002c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c44:	f003 fe7e 	bl	8006944 <osDelay>
 8002c48:	e7fa      	b.n	8002c40 <_Z14StartAMT22DataPKv+0x8>
	...

08002c4c <_Z13StartUARTDataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTData */
void StartUARTData(void const * argument)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTData */
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002c54:	220c      	movs	r2, #12
 8002c56:	4935      	ldr	r1, [pc, #212]	; (8002d2c <_Z13StartUARTDataPKv+0xe0>)
 8002c58:	4835      	ldr	r0, [pc, #212]	; (8002d30 <_Z13StartUARTDataPKv+0xe4>)
 8002c5a:	f003 f831 	bl	8005cc0 <HAL_UART_Receive_IT>
//	uint32_t posnowT_1, posnowT_2;
//	float angleT = 0;
//	uint32_t linearDist = 0;
//	flagReadEnc = 1;
//	uint32_t distPmm = 0;
	arm.setPrintState(true);
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4834      	ldr	r0, [pc, #208]	; (8002d34 <_Z13StartUARTDataPKv+0xe8>)
 8002c62:	f7fe fe63 	bl	800192c <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {

		if (arm.getPrintState() && sendDataFlag) {
 8002c66:	4833      	ldr	r0, [pc, #204]	; (8002d34 <_Z13StartUARTDataPKv+0xe8>)
 8002c68:	f7fe fe78 	bl	800195c <_ZN7RoboArm13getPrintStateEv>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <_Z13StartUARTDataPKv+0x32>
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <_Z13StartUARTDataPKv+0xec>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <_Z13StartUARTDataPKv+0x32>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <_Z13StartUARTDataPKv+0x34>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d018      	beq.n	8002cb6 <_Z13StartUARTDataPKv+0x6a>
			sendDataFlag = false;
 8002c84:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <_Z13StartUARTDataPKv+0xec>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
//					* (6.45 / 360);
//			uint32_t mils = distPsteps / arm.linearStepsMil;
//
//			un_send.params.lin = mils;
//			un_send.params.hold = 0;
			un_send.params.lin = arm.GetLin();
 8002c8a:	482a      	ldr	r0, [pc, #168]	; (8002d34 <_Z13StartUARTDataPKv+0xe8>)
 8002c8c:	f7fe ff2d 	bl	8001aea <_ZN7RoboArm6GetLinEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002c94:	6013      	str	r3, [r2, #0]
			un_send.params.ang = arm.GetAng();
 8002c96:	4827      	ldr	r0, [pc, #156]	; (8002d34 <_Z13StartUARTDataPKv+0xe8>)
 8002c98:	f7fe ff59 	bl	8001b4e <_ZN7RoboArm6GetAngEv>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002ca0:	6053      	str	r3, [r2, #4]
			un_send.params.hold = un_now.params.hold;
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <_Z13StartUARTDataPKv+0xf4>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002ca8:	6093      	str	r3, [r2, #8]
//					0x09,0x0a,0x0b,0x0c};
//
//			size_t s = sizeof(un_send);

//			sprintf(str, "%.2f:", un_send.params.ang);//, send_params.lin, 100);
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002caa:	230c      	movs	r3, #12
 8002cac:	220c      	movs	r2, #12
 8002cae:	4923      	ldr	r1, [pc, #140]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002cb0:	481f      	ldr	r0, [pc, #124]	; (8002d30 <_Z13StartUARTDataPKv+0xe4>)
 8002cb2:	f002 ff82 	bl	8005bba <HAL_UART_Transmit>
//			HAL_UART_Transmit(&huart1, (uint8_t*)str, sizeof(str), 12);
//			sendDataFlag = false;

		}

		if (stopHand) {
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <_Z13StartUARTDataPKv+0xf8>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <_Z13StartUARTDataPKv+0xa0>
			stopHand = false;
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <_Z13StartUARTDataPKv+0xf8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 8002cc4:	481b      	ldr	r0, [pc, #108]	; (8002d34 <_Z13StartUARTDataPKv+0xe8>)
 8002cc6:	f7fe fbad 	bl	8001424 <_ZN7RoboArm13EmergencyStopEv>
			un_send.params.lin = 0;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002cdc:	220a      	movs	r2, #10
 8002cde:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002ce0:	230c      	movs	r3, #12
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	4915      	ldr	r1, [pc, #84]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002ce6:	4812      	ldr	r0, [pc, #72]	; (8002d30 <_Z13StartUARTDataPKv+0xe4>)
 8002ce8:	f002 ff67 	bl	8005bba <HAL_UART_Transmit>
					12);
		}

		if (setZeroFlag) {
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <_Z13StartUARTDataPKv+0xfc>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <_Z13StartUARTDataPKv+0xd6>
			setZeroFlag = false;
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <_Z13StartUARTDataPKv+0xfc>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
			arm.SetZeroEncoders();
 8002cfa:	480e      	ldr	r0, [pc, #56]	; (8002d34 <_Z13StartUARTDataPKv+0xe8>)
 8002cfc:	f7fe ff5b 	bl	8001bb6 <_ZN7RoboArm15SetZeroEncodersEv>
//			arm.SetSoftwareZero();
			un_send.params.lin = 0;
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002d12:	220a      	movs	r2, #10
 8002d14:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002d16:	230c      	movs	r3, #12
 8002d18:	220c      	movs	r2, #12
 8002d1a:	4908      	ldr	r1, [pc, #32]	; (8002d3c <_Z13StartUARTDataPKv+0xf0>)
 8002d1c:	4804      	ldr	r0, [pc, #16]	; (8002d30 <_Z13StartUARTDataPKv+0xe4>)
 8002d1e:	f002 ff4c 	bl	8005bba <HAL_UART_Transmit>
					12);
		}

		osDelay(500);
 8002d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d26:	f003 fe0d 	bl	8006944 <osDelay>
		if (arm.getPrintState() && sendDataFlag) {
 8002d2a:	e79c      	b.n	8002c66 <_Z13StartUARTDataPKv+0x1a>
 8002d2c:	20000450 	.word	0x20000450
 8002d30:	200003b4 	.word	0x200003b4
 8002d34:	200004a0 	.word	0x200004a0
 8002d38:	2000045d 	.word	0x2000045d
 8002d3c:	20000470 	.word	0x20000470
 8002d40:	20000488 	.word	0x20000488
 8002d44:	2000045e 	.word	0x2000045e
 8002d48:	2000045f 	.word	0x2000045f

08002d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d121      	bne.n	8002da2 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		cntImpulse1++;
 8002d5e:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a46      	ldr	r2, [pc, #280]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002d66:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 8002d68:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d6c:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d87f      	bhi.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x128>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002d74:	2100      	movs	r1, #0
 8002d76:	4844      	ldr	r0, [pc, #272]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002d78:	f002 f966 	bl	8005048 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002d7c:	4842      	ldr	r0, [pc, #264]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002d7e:	f002 f849 	bl	8004e14 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(1, false);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2101      	movs	r1, #1
 8002d86:	483f      	ldr	r0, [pc, #252]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002d88:	f7fe ffd9 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1 = 0;
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1 = false;
 8002d92:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			timerFT1 = true;
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
//    HAL_IncTick();
//  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002da0:	e068      	b.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x128>
	} else if (htim->Instance == TIM2) {
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d121      	bne.n	8002df0 <HAL_TIM_PeriodElapsedCallback+0xa4>
		cntImpulse2++;
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002db4:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dba:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d858      	bhi.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x128>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	4833      	ldr	r0, [pc, #204]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002dc6:	f002 f93f 	bl	8005048 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002dca:	4832      	ldr	r0, [pc, #200]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002dcc:	f002 f822 	bl	8004e14 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, false);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	482b      	ldr	r0, [pc, #172]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002dd6:	f7fe ffb2 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2 = 0;
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
			arm.stateMoveM2 = false;
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
			timerFT2 = true;
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
}
 8002dee:	e041      	b.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x128>
	} else if (htim->Instance == TIM3) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d13c      	bne.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x128>
		cntImpulse3++;
 8002dfa:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002e02:	6013      	str	r3, [r2, #0]
		if (cntImpulse3 >= arm.gripperPsteps) {
 8002e04:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fe75 	bl	8000af8 <__aeabi_ui2f>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f7fe f878 	bl	8000f0c <__aeabi_fcmpge>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d100      	bne.n	8002e24 <HAL_TIM_PeriodElapsedCallback+0xd8>
}
 8002e22:	e027      	b.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x128>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002e24:	2104      	movs	r1, #4
 8002e26:	481f      	ldr	r0, [pc, #124]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002e28:	f002 f90e 	bl	8005048 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8002e2c:	481d      	ldr	r0, [pc, #116]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002e2e:	f001 fff1 	bl	8004e14 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(3, false);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2103      	movs	r1, #3
 8002e36:	4813      	ldr	r0, [pc, #76]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002e38:	f7fe ff81 	bl	8001d3e <_ZN7RoboArm9SetEnableEtb>
			cntImpulse3 = 0;
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
			arm.stateMoveM3 = false;
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
			if (un_now.params.hold == 1) {
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_PeriodElapsedCallback+0x114>
				allowMove = false;
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
				gripperMoveFinished = true;
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
}
 8002e5e:	e009      	b.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x128>
			} else if (un_now.params.hold == 0) {
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x128>
				allowMove = true;
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
				gripperMoveFinished = true;
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	20000494 	.word	0x20000494
 8002e84:	200004a0 	.word	0x200004a0
 8002e88:	200002dc 	.word	0x200002dc
 8002e8c:	20000460 	.word	0x20000460
 8002e90:	20000498 	.word	0x20000498
 8002e94:	20000324 	.word	0x20000324
 8002e98:	20000461 	.word	0x20000461
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	2000049c 	.word	0x2000049c
 8002ea4:	2000036c 	.word	0x2000036c
 8002ea8:	20000488 	.word	0x20000488
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000001 	.word	0x20000001

08002eb4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EndCap1_Pin) {
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_GPIO_EXTI_Callback+0x20>
	    //gripper is fully opened, no move allowed
		allowMove = false;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_GPIO_EXTI_Callback+0x74>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
		gripperMoveFinished = true;
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x78>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
		  arm.stateMoveM2 = false;
		  timerFT2 = true;
	  } else {
	      __NOP();
	  }
}
 8002ed2:	e024      	b.n	8002f1e <HAL_GPIO_EXTI_Callback+0x6a>
	  } else if (GPIO_Pin == EndCap2_Pin) {
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eda:	d106      	bne.n	8002eea <HAL_GPIO_EXTI_Callback+0x36>
		allowMove = true;
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_GPIO_EXTI_Callback+0x74>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
		gripperMoveFinished = true;
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x78>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
}
 8002ee8:	e019      	b.n	8002f1e <HAL_GPIO_EXTI_Callback+0x6a>
	  } else if (GPIO_Pin == EndCap3_Pin || GPIO_Pin == EndCap4_Pin) {
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_EXTI_Callback+0x44>
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef6:	d111      	bne.n	8002f1c <HAL_GPIO_EXTI_Callback+0x68>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002ef8:	2104      	movs	r1, #4
 8002efa:	480d      	ldr	r0, [pc, #52]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002efc:	f002 f8a4 	bl	8005048 <HAL_TIM_PWM_Stop>
		  HAL_TIM_Base_Stop_IT(&htim2);
 8002f00:	480b      	ldr	r0, [pc, #44]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002f02:	f001 ff87 	bl	8004e14 <HAL_TIM_Base_Stop_IT>
		  cntImpulse2 = 0;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_GPIO_EXTI_Callback+0x80>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
		  arm.stateMoveM2 = false;
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_GPIO_EXTI_Callback+0x84>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
		  timerFT2 = true;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_GPIO_EXTI_Callback+0x88>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
}
 8002f1a:	e000      	b.n	8002f1e <HAL_GPIO_EXTI_Callback+0x6a>
	      __NOP();
 8002f1c:	bf00      	nop
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000001 	.word	0x20000001
 8002f30:	20000324 	.word	0x20000324
 8002f34:	20000498 	.word	0x20000498
 8002f38:	200004a0 	.word	0x200004a0
 8002f3c:	20000461 	.word	0x20000461

08002f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f44:	b672      	cpsid	i
}
 8002f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f48:	e7fe      	b.n	8002f48 <Error_Handler+0x8>
	...

08002f4c <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d109      	bne.n	8002f70 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d104      	bne.n	8002f70 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(0, 124);
 8002f66:	227c      	movs	r2, #124	; 0x7c
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4803      	ldr	r0, [pc, #12]	; (8002f78 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002f6c:	f7fe f9dc 	bl	8001328 <_ZN7RoboArmC1Ehh>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200004a0 	.word	0x200004a0

08002f7c <_GLOBAL__sub_I_hspi1>:
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7ff ffe1 	bl	8002f4c <_Z41__static_initialization_and_destruction_0ii>
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <HAL_MspInit+0x78>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_MspInit+0x78>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6193      	str	r3, [r2, #24]
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_MspInit+0x78>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_MspInit+0x78>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <HAL_MspInit+0x78>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	61d3      	str	r3, [r2, #28]
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_MspInit+0x78>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	f06f 0001 	mvn.w	r0, #1
 8002fca:	f000 fbde 	bl	800378a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2105      	movs	r1, #5
 8002fd2:	2005      	movs	r0, #5
 8002fd4:	f000 fbd9 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002fd8:	2005      	movs	r0, #5
 8002fda:	f000 fbf2 	bl	80037c2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_MspInit+0x7c>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_MspInit+0x7c>)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	40010000 	.word	0x40010000

0800300c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <HAL_SPI_MspInit+0xb4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d145      	bne.n	80030b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 8003032:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003036:	6193      	str	r3, [r2, #24]
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003044:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	4a1e      	ldr	r2, [pc, #120]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 800304a:	f043 0308 	orr.w	r3, r3, #8
 800304e:	6193      	str	r3, [r2, #24]
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800305c:	2328      	movs	r3, #40	; 0x28
 800305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4816      	ldr	r0, [pc, #88]	; (80030c8 <HAL_SPI_MspInit+0xbc>)
 8003070:	f000 fc74 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003074:	2310      	movs	r3, #16
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	4810      	ldr	r0, [pc, #64]	; (80030c8 <HAL_SPI_MspInit+0xbc>)
 8003088:	f000 fc68 	bl	800395c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_SPI_MspInit+0xc0>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_SPI_MspInit+0xc0>)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2105      	movs	r1, #5
 80030ac:	2023      	movs	r0, #35	; 0x23
 80030ae:	f000 fb6c 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030b2:	2023      	movs	r0, #35	; 0x23
 80030b4:	f000 fb85 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030b8:	bf00      	nop
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40013000 	.word	0x40013000
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	40010000 	.word	0x40010000

080030d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <HAL_TIM_PWM_MspInit+0xac>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d114      	bne.n	800310c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a26      	ldr	r2, [pc, #152]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 80030e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2105      	movs	r1, #5
 80030fe:	2019      	movs	r0, #25
 8003100:	f000 fb43 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003104:	2019      	movs	r0, #25
 8003106:	f000 fb5c 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800310a:	e032      	b.n	8003172 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d114      	bne.n	8003140 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2105      	movs	r1, #5
 8003132:	201c      	movs	r0, #28
 8003134:	f000 fb29 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003138:	201c      	movs	r0, #28
 800313a:	f000 fb42 	bl	80037c2 <HAL_NVIC_EnableIRQ>
}
 800313e:	e018      	b.n	8003172 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_TIM_PWM_MspInit+0xb4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d113      	bne.n	8003172 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2105      	movs	r1, #5
 8003166:	201d      	movs	r0, #29
 8003168:	f000 fb0f 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800316c:	201d      	movs	r0, #29
 800316e:	f000 fb28 	bl	80037c2 <HAL_NVIC_EnableIRQ>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40021000 	.word	0x40021000
 8003184:	40000400 	.word	0x40000400

08003188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2e      	ldr	r2, [pc, #184]	; (800325c <HAL_TIM_MspPostInit+0xd4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d119      	bne.n	80031dc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6193      	str	r3, [r2, #24]
 80031b4:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2302      	movs	r3, #2
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ce:	f107 0318 	add.w	r3, r7, #24
 80031d2:	4619      	mov	r1, r3
 80031d4:	4823      	ldr	r0, [pc, #140]	; (8003264 <HAL_TIM_MspPostInit+0xdc>)
 80031d6:	f000 fbc1 	bl	800395c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031da:	e03a      	b.n	8003252 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d118      	bne.n	8003218 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6193      	str	r3, [r2, #24]
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031fe:	2302      	movs	r3, #2
 8003200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2302      	movs	r3, #2
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f107 0318 	add.w	r3, r7, #24
 800320e:	4619      	mov	r1, r3
 8003210:	4814      	ldr	r0, [pc, #80]	; (8003264 <HAL_TIM_MspPostInit+0xdc>)
 8003212:	f000 fba3 	bl	800395c <HAL_GPIO_Init>
}
 8003216:	e01c      	b.n	8003252 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a12      	ldr	r2, [pc, #72]	; (8003268 <HAL_TIM_MspPostInit+0xe0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d117      	bne.n	8003252 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003222:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	6193      	str	r3, [r2, #24]
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2302      	movs	r3, #2
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003246:	f107 0318 	add.w	r3, r7, #24
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <HAL_TIM_MspPostInit+0xdc>)
 800324e:	f000 fb85 	bl	800395c <HAL_GPIO_Init>
}
 8003252:	bf00      	nop
 8003254:	3728      	adds	r7, #40	; 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40010800 	.word	0x40010800
 8003268:	40000400 	.word	0x40000400

0800326c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 0318 	add.w	r3, r7, #24
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <HAL_UART_MspInit+0x104>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d13a      	bne.n	8003302 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800328c:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_UART_MspInit+0x108>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4a38      	ldr	r2, [pc, #224]	; (8003374 <HAL_UART_MspInit+0x108>)
 8003292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003296:	6193      	str	r3, [r2, #24]
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_UART_MspInit+0x108>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_UART_MspInit+0x108>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_UART_MspInit+0x108>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6193      	str	r3, [r2, #24]
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_UART_MspInit+0x108>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	2302      	movs	r3, #2
 80032c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 0318 	add.w	r3, r7, #24
 80032ce:	4619      	mov	r1, r3
 80032d0:	4829      	ldr	r0, [pc, #164]	; (8003378 <HAL_UART_MspInit+0x10c>)
 80032d2:	f000 fb43 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e4:	f107 0318 	add.w	r3, r7, #24
 80032e8:	4619      	mov	r1, r3
 80032ea:	4823      	ldr	r0, [pc, #140]	; (8003378 <HAL_UART_MspInit+0x10c>)
 80032ec:	f000 fb36 	bl	800395c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2105      	movs	r1, #5
 80032f4:	2025      	movs	r0, #37	; 0x25
 80032f6:	f000 fa48 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032fa:	2025      	movs	r0, #37	; 0x25
 80032fc:	f000 fa61 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003300:	e032      	b.n	8003368 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_UART_MspInit+0x110>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d12d      	bne.n	8003368 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_UART_MspInit+0x108>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_UART_MspInit+0x108>)
 8003312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003316:	61d3      	str	r3, [r2, #28]
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_UART_MspInit+0x108>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_UART_MspInit+0x108>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <HAL_UART_MspInit+0x108>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6193      	str	r3, [r2, #24]
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_UART_MspInit+0x108>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800333c:	2304      	movs	r3, #4
 800333e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003340:	2312      	movs	r3, #18
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003344:	2301      	movs	r3, #1
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003348:	2303      	movs	r3, #3
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334c:	f107 0318 	add.w	r3, r7, #24
 8003350:	4619      	mov	r1, r3
 8003352:	4809      	ldr	r0, [pc, #36]	; (8003378 <HAL_UART_MspInit+0x10c>)
 8003354:	f000 fb02 	bl	800395c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	2105      	movs	r1, #5
 800335c:	2026      	movs	r0, #38	; 0x26
 800335e:	f000 fa14 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003362:	2026      	movs	r0, #38	; 0x26
 8003364:	f000 fa2d 	bl	80037c2 <HAL_NVIC_EnableIRQ>
}
 8003368:	bf00      	nop
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40013800 	.word	0x40013800
 8003374:	40021000 	.word	0x40021000
 8003378:	40010800 	.word	0x40010800
 800337c:	40004400 	.word	0x40004400

08003380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003384:	e7fe      	b.n	8003384 <NMI_Handler+0x4>

08003386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338a:	e7fe      	b.n	800338a <HardFault_Handler+0x4>

0800338c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <MemManage_Handler+0x4>

08003392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003396:	e7fe      	b.n	8003396 <BusFault_Handler+0x4>

08003398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <UsageFault_Handler+0x4>

0800339e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ae:	f000 f8d5 	bl	800355c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80033b2:	f004 f845 	bl	8007440 <xTaskGetSchedulerState>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d001      	beq.n	80033c0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80033bc:	f004 fa34 	bl	8007828 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap3_Pin);
 80033d4:	2080      	movs	r0, #128	; 0x80
 80033d6:	f000 fc6f 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <TIM1_UP_IRQHandler+0x10>)
 80033e6:	f001 fe93 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200002dc 	.word	0x200002dc

080033f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <TIM2_IRQHandler+0x10>)
 80033fa:	f001 fe89 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000324 	.word	0x20000324

08003408 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800340c:	4802      	ldr	r0, [pc, #8]	; (8003418 <TIM3_IRQHandler+0x10>)
 800340e:	f001 fe7f 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000036c 	.word	0x2000036c

0800341c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <SPI1_IRQHandler+0x10>)
 8003422:	f001 fab1 	bl	8004988 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000284 	.word	0x20000284

08003430 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <USART1_IRQHandler+0x10>)
 8003436:	f002 fc69 	bl	8005d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200003b4 	.word	0x200003b4

08003444 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <USART2_IRQHandler+0x10>)
 800344a:	f002 fc5f 	bl	8005d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200003fc 	.word	0x200003fc

08003458 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap4_Pin);
 800345c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003460:	f000 fc2a 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap1_Pin);
 8003464:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003468:	f000 fc26 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap2_Pin);
 800346c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003470:	f000 fc22 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003474:	bf00      	nop
 8003476:	bd80      	pop	{r7, pc}

08003478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003484:	f7ff fff8 	bl	8003478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800348a:	490c      	ldr	r1, [pc, #48]	; (80034bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003490:	e002      	b.n	8003498 <LoopCopyDataInit>

08003492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003496:	3304      	adds	r3, #4

08003498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800349c:	d3f9      	bcc.n	8003492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034a0:	4c09      	ldr	r4, [pc, #36]	; (80034c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a4:	e001      	b.n	80034aa <LoopFillZerobss>

080034a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a8:	3204      	adds	r2, #4

080034aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ac:	d3fb      	bcc.n	80034a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ae:	f004 fc1f 	bl	8007cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034b2:	f7fe ff1b 	bl	80022ec <main>
  bx lr
 80034b6:	4770      	bx	lr
  ldr r0, =_sdata
 80034b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80034c0:	08007e08 	.word	0x08007e08
  ldr r2, =_sbss
 80034c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80034c8:	20001314 	.word	0x20001314

080034cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034cc:	e7fe      	b.n	80034cc <ADC1_2_IRQHandler>
	...

080034d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_Init+0x28>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <HAL_Init+0x28>)
 80034da:	f043 0310 	orr.w	r3, r3, #16
 80034de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e0:	2003      	movs	r0, #3
 80034e2:	f000 f947 	bl	8003774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034e6:	200f      	movs	r0, #15
 80034e8:	f000 f808 	bl	80034fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034ec:	f7ff fd4e 	bl	8002f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40022000 	.word	0x40022000

080034fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_InitTick+0x54>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_InitTick+0x58>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	4619      	mov	r1, r3
 800350e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003512:	fbb3 f3f1 	udiv	r3, r3, r1
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f95f 	bl	80037de <HAL_SYSTICK_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e00e      	b.n	8003548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0f      	cmp	r3, #15
 800352e:	d80a      	bhi.n	8003546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003530:	2200      	movs	r2, #0
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003538:	f000 f927 	bl	800378a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800353c:	4a06      	ldr	r2, [pc, #24]	; (8003558 <HAL_InitTick+0x5c>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000004 	.word	0x20000004
 8003554:	2000000c 	.word	0x2000000c
 8003558:	20000008 	.word	0x20000008

0800355c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_IncTick+0x1c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_IncTick+0x20>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4413      	add	r3, r2
 800356c:	4a03      	ldr	r2, [pc, #12]	; (800357c <HAL_IncTick+0x20>)
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	2000000c 	.word	0x2000000c
 800357c:	200005c4 	.word	0x200005c4

08003580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return uwTick;
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <HAL_GetTick+0x10>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	200005c4 	.word	0x200005c4

08003594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800359c:	f7ff fff0 	bl	8003580 <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ac:	d005      	beq.n	80035ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_Delay+0x44>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ba:	bf00      	nop
 80035bc:	f7ff ffe0 	bl	8003580 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d8f7      	bhi.n	80035bc <HAL_Delay+0x28>
  {
  }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000000c 	.word	0x2000000c

080035dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f8:	4013      	ands	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360e:	4a04      	ldr	r2, [pc, #16]	; (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	60d3      	str	r3, [r2, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <__NVIC_GetPriorityGrouping+0x18>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f003 0307 	and.w	r3, r3, #7
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	2b00      	cmp	r3, #0
 8003650:	db0b      	blt.n	800366a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	4906      	ldr	r1, [pc, #24]	; (8003674 <__NVIC_EnableIRQ+0x34>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2001      	movs	r0, #1
 8003662:	fa00 f202 	lsl.w	r2, r0, r2
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	2b00      	cmp	r3, #0
 800368a:	db0a      	blt.n	80036a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	490c      	ldr	r1, [pc, #48]	; (80036c4 <__NVIC_SetPriority+0x4c>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	440b      	add	r3, r1
 800369c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a0:	e00a      	b.n	80036b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <__NVIC_SetPriority+0x50>)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3b04      	subs	r3, #4
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	440b      	add	r3, r1
 80036b6:	761a      	strb	r2, [r3, #24]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf28      	it	cs
 80036ea:	2304      	movcs	r3, #4
 80036ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d902      	bls.n	80036fc <NVIC_EncodePriority+0x30>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3b03      	subs	r3, #3
 80036fa:	e000      	b.n	80036fe <NVIC_EncodePriority+0x32>
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	401a      	ands	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43d9      	mvns	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	4313      	orrs	r3, r2
         );
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003740:	d301      	bcc.n	8003746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003742:	2301      	movs	r3, #1
 8003744:	e00f      	b.n	8003766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <SysTick_Config+0x40>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374e:	210f      	movs	r1, #15
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003754:	f7ff ff90 	bl	8003678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <SysTick_Config+0x40>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <SysTick_Config+0x40>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	e000e010 	.word	0xe000e010

08003774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff2d 	bl	80035dc <__NVIC_SetPriorityGrouping>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800379c:	f7ff ff42 	bl	8003624 <__NVIC_GetPriorityGrouping>
 80037a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7ff ff90 	bl	80036cc <NVIC_EncodePriority>
 80037ac:	4602      	mov	r2, r0
 80037ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff5f 	bl	8003678 <__NVIC_SetPriority>
}
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff35 	bl	8003640 <__NVIC_EnableIRQ>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffa2 	bl	8003730 <SysTick_Config>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d008      	beq.n	8003820 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2204      	movs	r2, #4
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e020      	b.n	8003862 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020e 	bic.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d005      	beq.n	8003890 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2204      	movs	r2, #4
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e051      	b.n	8003934 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 020e 	bic.w	r2, r2, #14
 800389e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a22      	ldr	r2, [pc, #136]	; (8003940 <HAL_DMA_Abort_IT+0xd4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d029      	beq.n	800390e <HAL_DMA_Abort_IT+0xa2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_DMA_Abort_IT+0xd8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d022      	beq.n	800390a <HAL_DMA_Abort_IT+0x9e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <HAL_DMA_Abort_IT+0xdc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01a      	beq.n	8003904 <HAL_DMA_Abort_IT+0x98>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_DMA_Abort_IT+0xe0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d012      	beq.n	80038fe <HAL_DMA_Abort_IT+0x92>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_DMA_Abort_IT+0xe4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00a      	beq.n	80038f8 <HAL_DMA_Abort_IT+0x8c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_DMA_Abort_IT+0xe8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d102      	bne.n	80038f2 <HAL_DMA_Abort_IT+0x86>
 80038ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038f0:	e00e      	b.n	8003910 <HAL_DMA_Abort_IT+0xa4>
 80038f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f6:	e00b      	b.n	8003910 <HAL_DMA_Abort_IT+0xa4>
 80038f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038fc:	e008      	b.n	8003910 <HAL_DMA_Abort_IT+0xa4>
 80038fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003902:	e005      	b.n	8003910 <HAL_DMA_Abort_IT+0xa4>
 8003904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003908:	e002      	b.n	8003910 <HAL_DMA_Abort_IT+0xa4>
 800390a:	2310      	movs	r3, #16
 800390c:	e000      	b.n	8003910 <HAL_DMA_Abort_IT+0xa4>
 800390e:	2301      	movs	r3, #1
 8003910:	4a11      	ldr	r2, [pc, #68]	; (8003958 <HAL_DMA_Abort_IT+0xec>)
 8003912:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
    } 
  }
  return status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40020008 	.word	0x40020008
 8003944:	4002001c 	.word	0x4002001c
 8003948:	40020030 	.word	0x40020030
 800394c:	40020044 	.word	0x40020044
 8003950:	40020058 	.word	0x40020058
 8003954:	4002006c 	.word	0x4002006c
 8003958:	40020000 	.word	0x40020000

0800395c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800395c:	b480      	push	{r7}
 800395e:	b08b      	sub	sp, #44	; 0x2c
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396e:	e161      	b.n	8003c34 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003970:	2201      	movs	r2, #1
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	429a      	cmp	r2, r3
 800398a:	f040 8150 	bne.w	8003c2e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4a97      	ldr	r2, [pc, #604]	; (8003bf0 <HAL_GPIO_Init+0x294>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d05e      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 8003998:	4a95      	ldr	r2, [pc, #596]	; (8003bf0 <HAL_GPIO_Init+0x294>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d875      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 800399e:	4a95      	ldr	r2, [pc, #596]	; (8003bf4 <HAL_GPIO_Init+0x298>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d058      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 80039a4:	4a93      	ldr	r2, [pc, #588]	; (8003bf4 <HAL_GPIO_Init+0x298>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d86f      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039aa:	4a93      	ldr	r2, [pc, #588]	; (8003bf8 <HAL_GPIO_Init+0x29c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d052      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 80039b0:	4a91      	ldr	r2, [pc, #580]	; (8003bf8 <HAL_GPIO_Init+0x29c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d869      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039b6:	4a91      	ldr	r2, [pc, #580]	; (8003bfc <HAL_GPIO_Init+0x2a0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04c      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 80039bc:	4a8f      	ldr	r2, [pc, #572]	; (8003bfc <HAL_GPIO_Init+0x2a0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d863      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039c2:	4a8f      	ldr	r2, [pc, #572]	; (8003c00 <HAL_GPIO_Init+0x2a4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d046      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
 80039c8:	4a8d      	ldr	r2, [pc, #564]	; (8003c00 <HAL_GPIO_Init+0x2a4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d85d      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039ce:	2b12      	cmp	r3, #18
 80039d0:	d82a      	bhi.n	8003a28 <HAL_GPIO_Init+0xcc>
 80039d2:	2b12      	cmp	r3, #18
 80039d4:	d859      	bhi.n	8003a8a <HAL_GPIO_Init+0x12e>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_GPIO_Init+0x80>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a57 	.word	0x08003a57
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a43 	.word	0x08003a43
 80039e8:	08003a85 	.word	0x08003a85
 80039ec:	08003a8b 	.word	0x08003a8b
 80039f0:	08003a8b 	.word	0x08003a8b
 80039f4:	08003a8b 	.word	0x08003a8b
 80039f8:	08003a8b 	.word	0x08003a8b
 80039fc:	08003a8b 	.word	0x08003a8b
 8003a00:	08003a8b 	.word	0x08003a8b
 8003a04:	08003a8b 	.word	0x08003a8b
 8003a08:	08003a8b 	.word	0x08003a8b
 8003a0c:	08003a8b 	.word	0x08003a8b
 8003a10:	08003a8b 	.word	0x08003a8b
 8003a14:	08003a8b 	.word	0x08003a8b
 8003a18:	08003a8b 	.word	0x08003a8b
 8003a1c:	08003a8b 	.word	0x08003a8b
 8003a20:	08003a39 	.word	0x08003a39
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	4a76      	ldr	r2, [pc, #472]	; (8003c04 <HAL_GPIO_Init+0x2a8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a2e:	e02c      	b.n	8003a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	623b      	str	r3, [r7, #32]
          break;
 8003a36:	e029      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	623b      	str	r3, [r7, #32]
          break;
 8003a40:	e024      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	3308      	adds	r3, #8
 8003a48:	623b      	str	r3, [r7, #32]
          break;
 8003a4a:	e01f      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	330c      	adds	r3, #12
 8003a52:	623b      	str	r3, [r7, #32]
          break;
 8003a54:	e01a      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a5e:	2304      	movs	r3, #4
 8003a60:	623b      	str	r3, [r7, #32]
          break;
 8003a62:	e013      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	611a      	str	r2, [r3, #16]
          break;
 8003a76:	e009      	b.n	8003a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a78:	2308      	movs	r3, #8
 8003a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	615a      	str	r2, [r3, #20]
          break;
 8003a82:	e003      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
          break;
 8003a88:	e000      	b.n	8003a8c <HAL_GPIO_Init+0x130>
          break;
 8003a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2bff      	cmp	r3, #255	; 0xff
 8003a90:	d801      	bhi.n	8003a96 <HAL_GPIO_Init+0x13a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	e001      	b.n	8003a9a <HAL_GPIO_Init+0x13e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2bff      	cmp	r3, #255	; 0xff
 8003aa0:	d802      	bhi.n	8003aa8 <HAL_GPIO_Init+0x14c>
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	e002      	b.n	8003aae <HAL_GPIO_Init+0x152>
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	3b08      	subs	r3, #8
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	210f      	movs	r1, #15
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	401a      	ands	r2, r3
 8003ac0:	6a39      	ldr	r1, [r7, #32]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80a9 	beq.w	8003c2e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_GPIO_Init+0x2ac>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	4a49      	ldr	r2, [pc, #292]	; (8003c08 <HAL_GPIO_Init+0x2ac>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6193      	str	r3, [r2, #24]
 8003ae8:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_GPIO_Init+0x2ac>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003af4:	4a45      	ldr	r2, [pc, #276]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3d      	ldr	r2, [pc, #244]	; (8003c10 <HAL_GPIO_Init+0x2b4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00d      	beq.n	8003b3c <HAL_GPIO_Init+0x1e0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a3c      	ldr	r2, [pc, #240]	; (8003c14 <HAL_GPIO_Init+0x2b8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <HAL_GPIO_Init+0x1dc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <HAL_GPIO_Init+0x2bc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_GPIO_Init+0x1d8>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e004      	b.n	8003b3e <HAL_GPIO_Init+0x1e2>
 8003b34:	2303      	movs	r3, #3
 8003b36:	e002      	b.n	8003b3e <HAL_GPIO_Init+0x1e2>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_GPIO_Init+0x1e2>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	f002 0203 	and.w	r2, r2, #3
 8003b44:	0092      	lsls	r2, r2, #2
 8003b46:	4093      	lsls	r3, r2
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b4e:	492f      	ldr	r1, [pc, #188]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	3302      	adds	r3, #2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d006      	beq.n	8003b76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b68:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	492b      	ldr	r1, [pc, #172]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]
 8003b74:	e006      	b.n	8003b84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b76:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	4927      	ldr	r1, [pc, #156]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	4921      	ldr	r1, [pc, #132]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60cb      	str	r3, [r1, #12]
 8003b9c:	e006      	b.n	8003bac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b9e:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	491d      	ldr	r1, [pc, #116]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d006      	beq.n	8003bc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4917      	ldr	r1, [pc, #92]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
 8003bc4:	e006      	b.n	8003bd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	4913      	ldr	r1, [pc, #76]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01f      	beq.n	8003c20 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	490d      	ldr	r1, [pc, #52]	; (8003c1c <HAL_GPIO_Init+0x2c0>)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e01f      	b.n	8003c2e <HAL_GPIO_Init+0x2d2>
 8003bee:	bf00      	nop
 8003bf0:	10320000 	.word	0x10320000
 8003bf4:	10310000 	.word	0x10310000
 8003bf8:	10220000 	.word	0x10220000
 8003bfc:	10210000 	.word	0x10210000
 8003c00:	10120000 	.word	0x10120000
 8003c04:	10110000 	.word	0x10110000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40010800 	.word	0x40010800
 8003c14:	40010c00 	.word	0x40010c00
 8003c18:	40011000 	.word	0x40011000
 8003c1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_GPIO_Init+0x2f4>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	4909      	ldr	r1, [pc, #36]	; (8003c50 <HAL_GPIO_Init+0x2f4>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	3301      	adds	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f47f ae96 	bne.w	8003970 <HAL_GPIO_Init+0x14>
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	372c      	adds	r7, #44	; 0x2c
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	40010400 	.word	0x40010400

08003c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	807b      	strh	r3, [r7, #2]
 8003c60:	4613      	mov	r3, r2
 8003c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c64:	787b      	ldrb	r3, [r7, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c70:	e003      	b.n	8003c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c72:	887b      	ldrh	r3, [r7, #2]
 8003c74:	041a      	lsls	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	041a      	lsls	r2, r3, #16
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43d9      	mvns	r1, r3
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff f8ec 	bl	8002eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e272      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8087 	beq.w	8003e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d08:	4b92      	ldr	r3, [pc, #584]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d00c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d14:	4b8f      	ldr	r3, [pc, #572]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d112      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
 8003d20:	4b8c      	ldr	r3, [pc, #560]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2e:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x12c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d168      	bne.n	8003e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e24c      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x76>
 8003d50:	4b80      	ldr	r3, [pc, #512]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7f      	ldr	r2, [pc, #508]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e02e      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b7b      	ldr	r3, [pc, #492]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7a      	ldr	r2, [pc, #488]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b78      	ldr	r3, [pc, #480]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a77      	ldr	r2, [pc, #476]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0xbc>
 8003d8a:	4b72      	ldr	r3, [pc, #456]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a71      	ldr	r2, [pc, #452]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6e      	ldr	r2, [pc, #440]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003da4:	4b6b      	ldr	r3, [pc, #428]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6a      	ldr	r2, [pc, #424]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a67      	ldr	r2, [pc, #412]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7ff fbdc 	bl	8003580 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7ff fbd8 	bl	8003580 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e200      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe4>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7ff fbc8 	bl	8003580 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7ff fbc4 	bl	8003580 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1ec      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x10c>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e22:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e2e:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
 8003e3a:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1c0      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4939      	ldr	r1, [pc, #228]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7ff fb7d 	bl	8003580 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7ff fb79 	bl	8003580 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1a1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4927      	ldr	r1, [pc, #156]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7ff fb5c 	bl	8003580 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7ff fb58 	bl	8003580 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e180      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03a      	beq.n	8003f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d019      	beq.n	8003f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7ff fb3c 	bl	8003580 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7ff fb38 	bl	8003580 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e160      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f000 fada 	bl	80044e4 <RCC_Delay>
 8003f30:	e01c      	b.n	8003f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f38:	f7ff fb22 	bl	8003580 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3e:	e00f      	b.n	8003f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f40:	f7ff fb1e 	bl	8003580 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d908      	bls.n	8003f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e146      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	42420000 	.word	0x42420000
 8003f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	4b92      	ldr	r3, [pc, #584]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e9      	bne.n	8003f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a6 	beq.w	80040c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4a87      	ldr	r2, [pc, #540]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	61d3      	str	r3, [r2, #28]
 8003f96:	4b85      	ldr	r3, [pc, #532]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b82      	ldr	r3, [pc, #520]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b7f      	ldr	r3, [pc, #508]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7e      	ldr	r2, [pc, #504]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7ff fadf 	bl	8003580 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7ff fadb 	bl	8003580 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	; 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e103      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	4b75      	ldr	r3, [pc, #468]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x312>
 8003fec:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6213      	str	r3, [r2, #32]
 8003ff8:	e02d      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x334>
 8004002:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4a69      	ldr	r2, [pc, #420]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6213      	str	r3, [r2, #32]
 800400e:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a66      	ldr	r2, [pc, #408]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x356>
 8004024:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4a60      	ldr	r2, [pc, #384]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6213      	str	r3, [r2, #32]
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a5d      	ldr	r2, [pc, #372]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800403e:	4b5b      	ldr	r3, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4a5a      	ldr	r2, [pc, #360]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6213      	str	r3, [r2, #32]
 800404a:	4b58      	ldr	r3, [pc, #352]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a57      	ldr	r2, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405e:	f7ff fa8f 	bl	8003580 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7ff fa8b 	bl	8003580 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	; 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e0b1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ee      	beq.n	8004066 <HAL_RCC_OscConfig+0x37e>
 8004088:	e014      	b.n	80040b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7ff fa79 	bl	8003580 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7ff fa75 	bl	8003580 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e09b      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	4b40      	ldr	r3, [pc, #256]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8087 	beq.w	80041de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d061      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d146      	bne.n	8004172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7ff fa49 	bl	8003580 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7ff fa45 	bl	8003580 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e06d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d108      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4921      	ldr	r1, [pc, #132]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a19      	ldr	r1, [r3, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	430b      	orrs	r3, r1
 800413e:	491b      	ldr	r1, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7ff fa19 	bl	8003580 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7ff fa15 	bl	8003580 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e03d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004164:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x46a>
 8004170:	e035      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7ff fa02 	bl	8003580 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7ff f9fe 	bl	8003580 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e026      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x498>
 800419e:	e01e      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e019      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40007000 	.word	0x40007000
 80041b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000

080041ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0d0      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d910      	bls.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	4965      	ldr	r1, [pc, #404]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b8      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004248:	4b59      	ldr	r3, [pc, #356]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004260:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a52      	ldr	r2, [pc, #328]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800426a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b50      	ldr	r3, [pc, #320]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	494d      	ldr	r1, [pc, #308]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d040      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d115      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e07f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e073      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06b      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4936      	ldr	r1, [pc, #216]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7ff f950 	bl	8003580 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7ff f94c 	bl	8003580 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e053      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d210      	bcs.n	800433c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 0207 	bic.w	r2, r3, #7
 8004322:	4922      	ldr	r1, [pc, #136]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e032      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4916      	ldr	r1, [pc, #88]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	490e      	ldr	r1, [pc, #56]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800437a:	f000 f82d 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	490a      	ldr	r1, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff f8ae 	bl	80034fc <HAL_InitTick>

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40022000 	.word	0x40022000
 80043b0:	40021000 	.word	0x40021000
 80043b4:	08007dd0 	.word	0x08007dd0
 80043b8:	20000004 	.word	0x20000004
 80043bc:	20000008 	.word	0x20000008

080043c0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <HAL_RCC_EnableCSS+0x14>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	4242004c 	.word	0x4242004c

080043d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043f2:	4b1e      	ldr	r3, [pc, #120]	; (800446c <HAL_RCC_GetSysClockFreq+0x94>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d002      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x30>
 8004402:	2b08      	cmp	r3, #8
 8004404:	d003      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x36>
 8004406:	e027      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_GetSysClockFreq+0x98>)
 800440a:	613b      	str	r3, [r7, #16]
      break;
 800440c:	e027      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	0c9b      	lsrs	r3, r3, #18
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	4a17      	ldr	r2, [pc, #92]	; (8004474 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004418:	5cd3      	ldrb	r3, [r2, r3]
 800441a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d010      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004426:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_RCC_GetSysClockFreq+0x94>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	0c5b      	lsrs	r3, r3, #17
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	4a11      	ldr	r2, [pc, #68]	; (8004478 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004432:	5cd3      	ldrb	r3, [r2, r3]
 8004434:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <HAL_RCC_GetSysClockFreq+0x98>)
 800443a:	fb03 f202 	mul.w	r2, r3, r2
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e004      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a0c      	ldr	r2, [pc, #48]	; (800447c <HAL_RCC_GetSysClockFreq+0xa4>)
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	613b      	str	r3, [r7, #16]
      break;
 8004456:	e002      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetSysClockFreq+0x98>)
 800445a:	613b      	str	r3, [r7, #16]
      break;
 800445c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445e:	693b      	ldr	r3, [r7, #16]
}
 8004460:	4618      	mov	r0, r3
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
 8004470:	007a1200 	.word	0x007a1200
 8004474:	08007de8 	.word	0x08007de8
 8004478:	08007df8 	.word	0x08007df8
 800447c:	003d0900 	.word	0x003d0900

08004480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <HAL_RCC_GetHCLKFreq+0x10>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	20000004 	.word	0x20000004

08004494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004498:	f7ff fff2 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	4903      	ldr	r1, [pc, #12]	; (80044b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044aa:	5ccb      	ldrb	r3, [r1, r3]
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	08007de0 	.word	0x08007de0

080044bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044c0:	f7ff ffde 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	0adb      	lsrs	r3, r3, #11
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4903      	ldr	r1, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000
 80044e0:	08007de0 	.word	0x08007de0

080044e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <RCC_Delay+0x34>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0a      	ldr	r2, [pc, #40]	; (800451c <RCC_Delay+0x38>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0a5b      	lsrs	r3, r3, #9
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004500:	bf00      	nop
  }
  while (Delay --);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1e5a      	subs	r2, r3, #1
 8004506:	60fa      	str	r2, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f9      	bne.n	8004500 <RCC_Delay+0x1c>
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	20000004 	.word	0x20000004
 800451c:	10624dd3 	.word	0x10624dd3

08004520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e076      	b.n	8004620 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d108      	bne.n	800454c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004542:	d009      	beq.n	8004558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	61da      	str	r2, [r3, #28]
 800454a:	e005      	b.n	8004558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fe fd4a 	bl	800300c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	ea42 0103 	orr.w	r1, r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	0c1a      	lsrs	r2, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f002 0204 	and.w	r2, r2, #4
 80045fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08c      	sub	sp, #48	; 0x30
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004636:	2301      	movs	r3, #1
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_SPI_TransmitReceive+0x26>
 800464a:	2302      	movs	r3, #2
 800464c:	e198      	b.n	8004980 <HAL_SPI_TransmitReceive+0x358>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004656:	f7fe ff93 	bl	8003580 <HAL_GetTick>
 800465a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800466c:	887b      	ldrh	r3, [r7, #2]
 800466e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004674:	2b01      	cmp	r3, #1
 8004676:	d00f      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x70>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800467e:	d107      	bne.n	8004690 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <HAL_SPI_TransmitReceive+0x68>
 8004688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800468c:	2b04      	cmp	r3, #4
 800468e:	d003      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004690:	2302      	movs	r3, #2
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004696:	e16d      	b.n	8004974 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x82>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x82>
 80046a4:	887b      	ldrh	r3, [r7, #2]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046b0:	e160      	b.n	8004974 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d003      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2205      	movs	r2, #5
 80046c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	887a      	ldrh	r2, [r7, #2]
 80046ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d007      	beq.n	800471a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004718:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004722:	d17c      	bne.n	800481e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x10a>
 800472c:	8b7b      	ldrh	r3, [r7, #26]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d16a      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	881a      	ldrh	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	1c9a      	adds	r2, r3, #2
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004756:	e057      	b.n	8004808 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d11b      	bne.n	800479e <HAL_SPI_TransmitReceive+0x176>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <HAL_SPI_TransmitReceive+0x176>
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d113      	bne.n	800479e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	881a      	ldrh	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d119      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x1b8>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d014      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	b292      	uxth	r2, r2
 80047c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047dc:	2301      	movs	r3, #1
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047e0:	f7fe fece 	bl	8003580 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d80b      	bhi.n	8004808 <HAL_SPI_TransmitReceive+0x1e0>
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f6:	d007      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004806:	e0b5      	b.n	8004974 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1a2      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x130>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d19d      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x130>
 800481c:	e080      	b.n	8004920 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_TransmitReceive+0x204>
 8004826:	8b7b      	ldrh	r3, [r7, #26]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d16f      	bne.n	800490c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	7812      	ldrb	r2, [r2, #0]
 8004838:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004852:	e05b      	b.n	800490c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b02      	cmp	r3, #2
 8004860:	d11c      	bne.n	800489c <HAL_SPI_TransmitReceive+0x274>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d017      	beq.n	800489c <HAL_SPI_TransmitReceive+0x274>
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d114      	bne.n	800489c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	7812      	ldrb	r2, [r2, #0]
 800487e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d119      	bne.n	80048de <HAL_SPI_TransmitReceive+0x2b6>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d014      	beq.n	80048de <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048da:	2301      	movs	r3, #1
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048de:	f7fe fe4f 	bl	8003580 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d803      	bhi.n	80048f6 <HAL_SPI_TransmitReceive+0x2ce>
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f4:	d102      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x2d4>
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d107      	bne.n	800490c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800490a:	e033      	b.n	8004974 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d19e      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x22c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d199      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f9b3 	bl	8004c90 <SPI_EndRxTxTransaction>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800493c:	e01a      	b.n	8004974 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496a:	e003      	b.n	8004974 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800497c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004980:	4618      	mov	r0, r3
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10e      	bne.n	80049c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	4798      	blx	r3
    return;
 80049c6:	e0b7      	b.n	8004b38 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_SPI_IRQHandler+0x5e>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
    return;
 80049e4:	e0a8      	b.n	8004b38 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <HAL_SPI_IRQHandler+0x74>
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 809e 	beq.w	8004b38 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8098 	beq.w	8004b38 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d023      	beq.n	8004a5a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d011      	beq.n	8004a42 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	f043 0204 	orr.w	r2, r3, #4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	e00b      	b.n	8004a5a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	693b      	ldr	r3, [r7, #16]
        return;
 8004a58:	e06e      	b.n	8004b38 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d014      	beq.n	8004a8e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	f043 0201 	orr.w	r2, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d04f      	beq.n	8004b36 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aa4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_SPI_IRQHandler+0x13a>
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d034      	beq.n	8004b2c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0203 	bic.w	r2, r2, #3
 8004ad0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d011      	beq.n	8004afe <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <HAL_SPI_IRQHandler+0x1b8>)
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fec0 	bl	800386c <HAL_DMA_Abort_IT>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d016      	beq.n	8004b34 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0a:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <HAL_SPI_IRQHandler+0x1b8>)
 8004b0c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe feaa 	bl	800386c <HAL_DMA_Abort_IT>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004b2a:	e003      	b.n	8004b34 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f809 	bl	8004b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b32:	e000      	b.n	8004b36 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8004b34:	bf00      	nop
    return;
 8004b36:	bf00      	nop
  }
}
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	08004b57 	.word	0x08004b57

08004b44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff ffe7 	bl	8004b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b90:	f7fe fcf6 	bl	8003580 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ba0:	f7fe fcee 	bl	8003580 <HAL_GetTick>
 8004ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	015b      	lsls	r3, r3, #5
 8004bac:	0d1b      	lsrs	r3, r3, #20
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb6:	e054      	b.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bbe:	d050      	beq.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bc0:	f7fe fcde 	bl	8003580 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d902      	bls.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13d      	bne.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bee:	d111      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf8:	d004      	beq.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c02:	d107      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1c:	d10f      	bne.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e017      	b.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	bf0c      	ite	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	2300      	movne	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d19b      	bne.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000004 	.word	0x20000004

08004c90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2180      	movs	r1, #128	; 0x80
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ff6a 	bl	8004b80 <SPI_WaitFlagStateUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e000      	b.n	8004cc4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e041      	b.n	8004d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f839 	bl	8004d6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f000 fbee 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d001      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e035      	b.n	8004e00 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a16      	ldr	r2, [pc, #88]	; (8004e0c <HAL_TIM_Base_Start_IT+0x90>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d009      	beq.n	8004dca <HAL_TIM_Base_Start_IT+0x4e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d004      	beq.n	8004dca <HAL_TIM_Base_Start_IT+0x4e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <HAL_TIM_Base_Start_IT+0x94>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d111      	bne.n	8004dee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d010      	beq.n	8004dfe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dec:	e007      	b.n	8004dfe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40000400 	.word	0x40000400

08004e14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6a1a      	ldr	r2, [r3, #32]
 8004e32:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10f      	bne.n	8004e5c <HAL_TIM_Base_Stop_IT+0x48>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	f240 4344 	movw	r3, #1092	; 0x444
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_Base_Stop_IT+0x48>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e041      	b.n	8004f06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fe f91a 	bl	80030d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f000 fb1c 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <HAL_TIM_PWM_Start+0x24>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e022      	b.n	8004f7a <HAL_TIM_PWM_Start+0x6a>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d109      	bne.n	8004f4e <HAL_TIM_PWM_Start+0x3e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	bf14      	ite	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	2300      	moveq	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	e015      	b.n	8004f7a <HAL_TIM_PWM_Start+0x6a>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d109      	bne.n	8004f68 <HAL_TIM_PWM_Start+0x58>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e008      	b.n	8004f7a <HAL_TIM_PWM_Start+0x6a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e059      	b.n	8005036 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_PWM_Start+0x82>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f90:	e013      	b.n	8004fba <HAL_TIM_PWM_Start+0xaa>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x92>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa0:	e00b      	b.n	8004fba <HAL_TIM_PWM_Start+0xaa>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb0:	e003      	b.n	8004fba <HAL_TIM_PWM_Start+0xaa>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fc72 	bl	80058ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_TIM_PWM_Start+0x130>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d107      	bne.n	8004fe2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <HAL_TIM_PWM_Start+0x130>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_PWM_Start+0xf0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_PWM_Start+0xf0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a12      	ldr	r2, [pc, #72]	; (8005044 <HAL_TIM_PWM_Start+0x134>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d111      	bne.n	8005024 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d010      	beq.n	8005034 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	e007      	b.n	8005034 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40000400 	.word	0x40000400

08005048 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fc26 	bl	80058ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a29      	ldr	r2, [pc, #164]	; (800510c <HAL_TIM_PWM_Stop+0xc4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d117      	bne.n	800509a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a1a      	ldr	r2, [r3, #32]
 8005070:	f241 1311 	movw	r3, #4369	; 0x1111
 8005074:	4013      	ands	r3, r2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <HAL_TIM_PWM_Stop+0x52>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	f240 4344 	movw	r3, #1092	; 0x444
 8005084:	4013      	ands	r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <HAL_TIM_PWM_Stop+0x52>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10f      	bne.n	80050ca <HAL_TIM_PWM_Stop+0x82>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	f240 4344 	movw	r3, #1092	; 0x444
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d107      	bne.n	80050ca <HAL_TIM_PWM_Stop+0x82>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0201 	bic.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Stop+0x92>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d8:	e013      	b.n	8005102 <HAL_TIM_PWM_Stop+0xba>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Stop+0xa2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e8:	e00b      	b.n	8005102 <HAL_TIM_PWM_Stop+0xba>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Stop+0xb2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f8:	e003      	b.n	8005102 <HAL_TIM_PWM_Stop+0xba>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40012c00 	.word	0x40012c00

08005110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0202 	mvn.w	r2, #2
 800513c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9af 	bl	80054b6 <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9a2 	bl	80054a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f9b1 	bl	80054c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0204 	mvn.w	r2, #4
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f985 	bl	80054b6 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f978 	bl	80054a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f987 	bl	80054c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0208 	mvn.w	r2, #8
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f95b 	bl	80054b6 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f94e 	bl	80054a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f95d 	bl	80054c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b10      	cmp	r3, #16
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b10      	cmp	r3, #16
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0210 	mvn.w	r2, #16
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2208      	movs	r2, #8
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f931 	bl	80054b6 <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f924 	bl	80054a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f933 	bl	80054c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0201 	mvn.w	r2, #1
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fd fd5c 	bl	8002d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b80      	cmp	r3, #128	; 0x80
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fbcc 	bl	8005a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8f7 	bl	80054da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b20      	cmp	r3, #32
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0220 	mvn.w	r2, #32
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb97 	bl	8005a46 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800533a:	2302      	movs	r3, #2
 800533c:	e0ae      	b.n	800549c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b0c      	cmp	r3, #12
 800534a:	f200 809f 	bhi.w	800548c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005389 	.word	0x08005389
 8005358:	0800548d 	.word	0x0800548d
 800535c:	0800548d 	.word	0x0800548d
 8005360:	0800548d 	.word	0x0800548d
 8005364:	080053c9 	.word	0x080053c9
 8005368:	0800548d 	.word	0x0800548d
 800536c:	0800548d 	.word	0x0800548d
 8005370:	0800548d 	.word	0x0800548d
 8005374:	0800540b 	.word	0x0800540b
 8005378:	0800548d 	.word	0x0800548d
 800537c:	0800548d 	.word	0x0800548d
 8005380:	0800548d 	.word	0x0800548d
 8005384:	0800544b 	.word	0x0800544b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f904 	bl	800559c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0208 	orr.w	r2, r2, #8
 80053a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0204 	bic.w	r2, r2, #4
 80053b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6999      	ldr	r1, [r3, #24]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	619a      	str	r2, [r3, #24]
      break;
 80053c6:	e064      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f94a 	bl	8005668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6999      	ldr	r1, [r3, #24]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	021a      	lsls	r2, r3, #8
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	619a      	str	r2, [r3, #24]
      break;
 8005408:	e043      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f993 	bl	800573c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0208 	orr.w	r2, r2, #8
 8005424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0204 	bic.w	r2, r2, #4
 8005434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69d9      	ldr	r1, [r3, #28]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	61da      	str	r2, [r3, #28]
      break;
 8005448:	e023      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 f9dd 	bl	8005810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69d9      	ldr	r1, [r3, #28]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	021a      	lsls	r2, r3, #8
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	61da      	str	r2, [r3, #28]
      break;
 800548a:	e002      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
      break;
 8005490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800549a:	7dfb      	ldrb	r3, [r7, #23]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a25      	ldr	r2, [pc, #148]	; (8005594 <TIM_Base_SetConfig+0xa8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d007      	beq.n	8005514 <TIM_Base_SetConfig+0x28>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0x28>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a22      	ldr	r2, [pc, #136]	; (8005598 <TIM_Base_SetConfig+0xac>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d108      	bne.n	8005526 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1a      	ldr	r2, [pc, #104]	; (8005594 <TIM_Base_SetConfig+0xa8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0x52>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0x52>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a17      	ldr	r2, [pc, #92]	; (8005598 <TIM_Base_SetConfig+0xac>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a07      	ldr	r2, [pc, #28]	; (8005594 <TIM_Base_SetConfig+0xa8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d103      	bne.n	8005584 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	615a      	str	r2, [r3, #20]
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40000400 	.word	0x40000400

0800559c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f023 0201 	bic.w	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 0302 	bic.w	r3, r3, #2
 80055e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1c      	ldr	r2, [pc, #112]	; (8005664 <TIM_OC1_SetConfig+0xc8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d10c      	bne.n	8005612 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0308 	bic.w	r3, r3, #8
 80055fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 0304 	bic.w	r3, r3, #4
 8005610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a13      	ldr	r2, [pc, #76]	; (8005664 <TIM_OC1_SetConfig+0xc8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d111      	bne.n	800563e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40012c00 	.word	0x40012c00

08005668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f023 0210 	bic.w	r2, r3, #16
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0320 	bic.w	r3, r3, #32
 80056b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <TIM_OC2_SetConfig+0xd0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d10d      	bne.n	80056e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a14      	ldr	r2, [pc, #80]	; (8005738 <TIM_OC2_SetConfig+0xd0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d113      	bne.n	8005714 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	40012c00 	.word	0x40012c00

0800573c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0303 	bic.w	r3, r3, #3
 8005772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <TIM_OC3_SetConfig+0xd0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d10d      	bne.n	80057b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <TIM_OC3_SetConfig+0xd0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d113      	bne.n	80057e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00

08005810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a0f      	ldr	r2, [pc, #60]	; (80058a8 <TIM_OC4_SetConfig+0x98>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d109      	bne.n	8005884 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr
 80058a8:	40012c00 	.word	0x40012c00

080058ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2201      	movs	r2, #1
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1a      	ldr	r2, [r3, #32]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	401a      	ands	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1a      	ldr	r2, [r3, #32]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	fa01 f303 	lsl.w	r3, r1, r3
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e041      	b.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a14      	ldr	r2, [pc, #80]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d004      	beq.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10c      	bne.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4313      	orrs	r3, r2
 8005974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40000400 	.word	0x40000400

080059a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059bc:	2302      	movs	r3, #2
 80059be:	e03d      	b.n	8005a3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e042      	b.n	8005b02 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fd fbeb 	bl	800326c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2224      	movs	r2, #36	; 0x24
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fe50 	bl	8006754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ac2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695a      	ldr	r2, [r3, #20]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ad2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e04a      	b.n	8005bb2 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fd fb9b 	bl	800326c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2224      	movs	r2, #36	; 0x24
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fe00 	bl	8006754 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005b72:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0208 	orr.w	r2, r2, #8
 8005b82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b08a      	sub	sp, #40	; 0x28
 8005bbe:	af02      	add	r7, sp, #8
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d16d      	bne.n	8005cb6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_UART_Transmit+0x2c>
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e066      	b.n	8005cb8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2221      	movs	r2, #33	; 0x21
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf8:	f7fd fcc2 	bl	8003580 <HAL_GetTick>
 8005bfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	88fa      	ldrh	r2, [r7, #6]
 8005c02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d108      	bne.n	8005c26 <HAL_UART_Transmit+0x6c>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	e003      	b.n	8005c2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c2e:	e02a      	b.n	8005c86 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	2180      	movs	r1, #128	; 0x80
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fb48 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e036      	b.n	8005cb8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c5e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	3302      	adds	r3, #2
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	e007      	b.n	8005c78 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3301      	adds	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1cf      	bne.n	8005c30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fb18 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e006      	b.n	8005cb8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e000      	b.n	8005cb8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
  }
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d112      	bne.n	8005d00 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_UART_Receive_IT+0x26>
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e00b      	b.n	8005d02 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fb58 	bl	80063ac <UART_Start_Receive_IT>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	e000      	b.n	8005d02 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b0ba      	sub	sp, #232	; 0xe8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10f      	bne.n	8005d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <HAL_UART_IRQHandler+0x66>
 8005d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fc34 	bl	80065d8 <UART_Receive_IT>
      return;
 8005d70:	e25b      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80de 	beq.w	8005f38 <HAL_UART_IRQHandler+0x22c>
 8005d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80d1 	beq.w	8005f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HAL_UART_IRQHandler+0xae>
 8005da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <HAL_UART_IRQHandler+0xd2>
 8005dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	f043 0202 	orr.w	r2, r3, #2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_UART_IRQHandler+0xf6>
 8005dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	f043 0204 	orr.w	r2, r3, #4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d011      	beq.n	8005e32 <HAL_UART_IRQHandler+0x126>
 8005e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	f043 0208 	orr.w	r2, r3, #8
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 81f2 	beq.w	8006220 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_UART_IRQHandler+0x14e>
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fbbf 	bl	80065d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <HAL_UART_IRQHandler+0x17a>
 8005e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d04f      	beq.n	8005f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fac9 	bl	800641e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d041      	beq.n	8005f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3314      	adds	r3, #20
 8005ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3314      	adds	r3, #20
 8005ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1d9      	bne.n	8005e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d013      	beq.n	8005f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	4a7e      	ldr	r2, [pc, #504]	; (80060ec <HAL_UART_IRQHandler+0x3e0>)
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fd fcb6 	bl	800386c <HAL_DMA_Abort_IT>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f10:	4610      	mov	r0, r2
 8005f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	e00e      	b.n	8005f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f993 	bl	8006242 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e00a      	b.n	8005f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f98f 	bl	8006242 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e006      	b.n	8005f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f98b 	bl	8006242 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005f32:	e175      	b.n	8006220 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	bf00      	nop
    return;
 8005f36:	e173      	b.n	8006220 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	f040 814f 	bne.w	80061e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 8148 	beq.w	80061e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8141 	beq.w	80061e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80b6 	beq.w	80060f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8145 	beq.w	8006224 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	f080 813e 	bcs.w	8006224 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	f000 8088 	beq.w	80060cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fe8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ff4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1d9      	bne.n	8005fbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800602c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006030:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006034:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800603e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e1      	bne.n	8006008 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3314      	adds	r3, #20
 800604a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006068:	66fa      	str	r2, [r7, #108]	; 0x6c
 800606a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800606e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e3      	bne.n	8006044 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609c:	f023 0310 	bic.w	r3, r3, #16
 80060a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80060b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e3      	bne.n	800608a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fd fb95 	bl	80037f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f8b6 	bl	8006254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060e8:	e09c      	b.n	8006224 <HAL_UART_IRQHandler+0x518>
 80060ea:	bf00      	nop
 80060ec:	080064e3 	.word	0x080064e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 808e 	beq.w	8006228 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800610c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8089 	beq.w	8006228 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800612c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800613a:	647a      	str	r2, [r7, #68]	; 0x44
 800613c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e3      	bne.n	8006116 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	623b      	str	r3, [r7, #32]
   return(result);
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006172:	633a      	str	r2, [r7, #48]	; 0x30
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e3      	bne.n	800614e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0310 	bic.w	r3, r3, #16
 80061aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061b8:	61fa      	str	r2, [r7, #28]
 80061ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	69b9      	ldr	r1, [r7, #24]
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	617b      	str	r3, [r7, #20]
   return(result);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e3      	bne.n	8006194 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f83b 	bl	8006254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061de:	e023      	b.n	8006228 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <HAL_UART_IRQHandler+0x4f4>
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f986 	bl	800650a <UART_Transmit_IT>
    return;
 80061fe:	e014      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <HAL_UART_IRQHandler+0x51e>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f9c5 	bl	80065a8 <UART_EndTransmit_IT>
    return;
 800621e:	e004      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
    return;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
      return;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
      return;
 8006228:	bf00      	nop
  }
}
 800622a:	37e8      	adds	r7, #232	; 0xe8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr

0800626a <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006280:	2302      	movs	r3, #2
 8006282:	e020      	b.n	80062c6 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2224      	movs	r2, #36	; 0x24
 8006290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 030c 	bic.w	r3, r3, #12
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f043 0308 	orr.w	r3, r3, #8
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b090      	sub	sp, #64	; 0x40
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e0:	e050      	b.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e8:	d04c      	beq.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
 80062f0:	f7fd f946 	bl	8003580 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d241      	bcs.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006320:	637a      	str	r2, [r7, #52]	; 0x34
 8006322:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e5      	bne.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	613b      	str	r3, [r7, #16]
   return(result);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	63bb      	str	r3, [r7, #56]	; 0x38
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006354:	623a      	str	r2, [r7, #32]
 8006356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	69f9      	ldr	r1, [r7, #28]
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	61bb      	str	r3, [r7, #24]
   return(result);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e00f      	b.n	80063a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4013      	ands	r3, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d09f      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3740      	adds	r7, #64	; 0x40
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2222      	movs	r2, #34	; 0x22
 80063d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695a      	ldr	r2, [r3, #20]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0220 	orr.w	r2, r2, #32
 8006410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800641e:	b480      	push	{r7}
 8006420:	b095      	sub	sp, #84	; 0x54
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800643c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006446:	643a      	str	r2, [r7, #64]	; 0x40
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800644c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3314      	adds	r3, #20
 8006460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	61fb      	str	r3, [r7, #28]
   return(result);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	2b01      	cmp	r3, #1
 8006494:	d119      	bne.n	80064ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	330c      	adds	r3, #12
 800649c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f023 0310 	bic.w	r3, r3, #16
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b6:	61ba      	str	r2, [r7, #24]
 80064b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	613b      	str	r3, [r7, #16]
   return(result);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064d8:	bf00      	nop
 80064da:	3754      	adds	r7, #84	; 0x54
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff fea0 	bl	8006242 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b21      	cmp	r3, #33	; 0x21
 800651c:	d13e      	bne.n	800659c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006526:	d114      	bne.n	8006552 <UART_Transmit_IT+0x48>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d110      	bne.n	8006552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	1c9a      	adds	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	621a      	str	r2, [r3, #32]
 8006550:	e008      	b.n	8006564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6211      	str	r1, [r2, #32]
 800655c:	781a      	ldrb	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29b      	uxth	r3, r3
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	4619      	mov	r1, r3
 8006572:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10f      	bne.n	8006598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	e000      	b.n	800659e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800659c:	2302      	movs	r3, #2
  }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fe31 	bl	8006230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	; 0x30
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b22      	cmp	r3, #34	; 0x22
 80065ea:	f040 80ae 	bne.w	800674a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f6:	d117      	bne.n	8006628 <UART_Receive_IT+0x50>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d113      	bne.n	8006628 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006600:	2300      	movs	r3, #0
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006616:	b29a      	uxth	r2, r3
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	1c9a      	adds	r2, r3, #2
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	629a      	str	r2, [r3, #40]	; 0x28
 8006626:	e026      	b.n	8006676 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663a:	d007      	beq.n	800664c <UART_Receive_IT+0x74>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <UART_Receive_IT+0x82>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	e008      	b.n	800666c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006666:	b2da      	uxtb	r2, r3
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29b      	uxth	r3, r3
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4619      	mov	r1, r3
 8006684:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006686:	2b00      	cmp	r3, #0
 8006688:	d15d      	bne.n	8006746 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0220 	bic.w	r2, r2, #32
 8006698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d135      	bne.n	800673c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	613b      	str	r3, [r7, #16]
   return(result);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f023 0310 	bic.w	r3, r3, #16
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f6:	623a      	str	r2, [r7, #32]
 80066f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	69f9      	ldr	r1, [r7, #28]
 80066fc:	6a3a      	ldr	r2, [r7, #32]
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	61bb      	str	r3, [r7, #24]
   return(result);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b10      	cmp	r3, #16
 8006716:	d10a      	bne.n	800672e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff fd8d 	bl	8006254 <HAL_UARTEx_RxEventCallback>
 800673a:	e002      	b.n	8006742 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7fc f98b 	bl	8002a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e002      	b.n	800674c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e000      	b.n	800674c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800674a:	2302      	movs	r3, #2
  }
}
 800674c:	4618      	mov	r0, r3
 800674e:	3730      	adds	r7, #48	; 0x30
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800678e:	f023 030c 	bic.w	r3, r3, #12
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	430b      	orrs	r3, r1
 800679a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2c      	ldr	r2, [pc, #176]	; (8006868 <UART_SetConfig+0x114>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d103      	bne.n	80067c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067bc:	f7fd fe7e 	bl	80044bc <HAL_RCC_GetPCLK2Freq>
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	e002      	b.n	80067ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fd fe66 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 80067c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009a      	lsls	r2, r3, #2
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <UART_SetConfig+0x118>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	0119      	lsls	r1, r3, #4
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009a      	lsls	r2, r3, #2
 80067f4:	441a      	add	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006800:	4b1a      	ldr	r3, [pc, #104]	; (800686c <UART_SetConfig+0x118>)
 8006802:	fba3 0302 	umull	r0, r3, r3, r2
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	2064      	movs	r0, #100	; 0x64
 800680a:	fb00 f303 	mul.w	r3, r0, r3
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	3332      	adds	r3, #50	; 0x32
 8006814:	4a15      	ldr	r2, [pc, #84]	; (800686c <UART_SetConfig+0x118>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006820:	4419      	add	r1, r3
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009a      	lsls	r2, r3, #2
 800682c:	441a      	add	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	fbb2 f2f3 	udiv	r2, r2, r3
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <UART_SetConfig+0x118>)
 800683a:	fba3 0302 	umull	r0, r3, r3, r2
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	2064      	movs	r0, #100	; 0x64
 8006842:	fb00 f303 	mul.w	r3, r0, r3
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	3332      	adds	r3, #50	; 0x32
 800684c:	4a07      	ldr	r2, [pc, #28]	; (800686c <UART_SetConfig+0x118>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	f003 020f 	and.w	r2, r3, #15
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	440a      	add	r2, r1
 800685e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40013800 	.word	0x40013800
 800686c:	51eb851f 	.word	0x51eb851f

08006870 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800687e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006882:	2b84      	cmp	r3, #132	; 0x84
 8006884:	d005      	beq.n	8006892 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006886:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	3303      	adds	r3, #3
 8006890:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80068a2:	f000 fad1 	bl	8006e48 <vTaskStartScheduler>
  
  return osOK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	bd80      	pop	{r7, pc}

080068ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	b089      	sub	sp, #36	; 0x24
 80068b0:	af04      	add	r7, sp, #16
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d020      	beq.n	8006900 <osThreadCreate+0x54>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01c      	beq.n	8006900 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685c      	ldr	r4, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691e      	ldr	r6, [r3, #16]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff ffc9 	bl	8006870 <makeFreeRtosPriority>
 80068de:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068e8:	9202      	str	r2, [sp, #8]
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	9100      	str	r1, [sp, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	4632      	mov	r2, r6
 80068f2:	4629      	mov	r1, r5
 80068f4:	4620      	mov	r0, r4
 80068f6:	f000 f8e8 	bl	8006aca <xTaskCreateStatic>
 80068fa:	4603      	mov	r3, r0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e01c      	b.n	800693a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685c      	ldr	r4, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800690c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff ffab 	bl	8006870 <makeFreeRtosPriority>
 800691a:	4602      	mov	r2, r0
 800691c:	f107 030c 	add.w	r3, r7, #12
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	9200      	str	r2, [sp, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	4632      	mov	r2, r6
 8006928:	4629      	mov	r1, r5
 800692a:	4620      	mov	r0, r4
 800692c:	f000 f929 	bl	8006b82 <xTaskCreate>
 8006930:	4603      	mov	r3, r0
 8006932:	2b01      	cmp	r3, #1
 8006934:	d001      	beq.n	800693a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006936:	2300      	movs	r3, #0
 8006938:	e000      	b.n	800693c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006944 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <osDelay+0x16>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	e000      	b.n	800695c <osDelay+0x18>
 800695a:	2301      	movs	r3, #1
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fa3f 	bl	8006de0 <vTaskDelay>
  
  return osOK;
 8006962:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f103 0208 	add.w	r2, r3, #8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006984:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f103 0208 	add.w	r2, r3, #8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f103 0208 	add.w	r2, r3, #8
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bc80      	pop	{r7}
 80069a8:	4770      	bx	lr

080069aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr

080069c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a1e:	d103      	bne.n	8006a28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	e00c      	b.n	8006a42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e002      	b.n	8006a36 <vListInsert+0x2e>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d2f6      	bcs.n	8006a30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6892      	ldr	r2, [r2, #8]
 8006a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6852      	ldr	r2, [r2, #4]
 8006a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d103      	bne.n	8006aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	1e5a      	subs	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc80      	pop	{r7}
 8006ac8:	4770      	bx	lr

08006aca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08e      	sub	sp, #56	; 0x38
 8006ace:	af04      	add	r7, sp, #16
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
 8006ad6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <xTaskCreateStatic+0x46>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	61fb      	str	r3, [r7, #28]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b10:	2354      	movs	r3, #84	; 0x54
 8006b12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	2b54      	cmp	r3, #84	; 0x54
 8006b18:	d00a      	beq.n	8006b30 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	61bb      	str	r3, [r7, #24]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01e      	beq.n	8006b74 <xTaskCreateStatic+0xaa>
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01b      	beq.n	8006b74 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	9302      	str	r3, [sp, #8]
 8006b56:	f107 0314 	add.w	r3, r7, #20
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 f850 	bl	8006c0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b6e:	f000 f8cd 	bl	8006d0c <prvAddNewTaskToReadyList>
 8006b72:	e001      	b.n	8006b78 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b78:	697b      	ldr	r3, [r7, #20]
	}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3728      	adds	r7, #40	; 0x28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b08c      	sub	sp, #48	; 0x30
 8006b86:	af04      	add	r7, sp, #16
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	603b      	str	r3, [r7, #0]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fe8a 	bl	80078b0 <pvPortMalloc>
 8006b9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00e      	beq.n	8006bc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ba4:	2054      	movs	r0, #84	; 0x54
 8006ba6:	f000 fe83 	bl	80078b0 <pvPortMalloc>
 8006baa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bb8:	e005      	b.n	8006bc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bba:	6978      	ldr	r0, [r7, #20]
 8006bbc:	f000 ff3c 	bl	8007a38 <vPortFree>
 8006bc0:	e001      	b.n	8006bc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bd4:	88fa      	ldrh	r2, [r7, #6]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9303      	str	r3, [sp, #12]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	9302      	str	r3, [sp, #8]
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f80e 	bl	8006c0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bf0:	69f8      	ldr	r0, [r7, #28]
 8006bf2:	f000 f88b 	bl	8006d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e002      	b.n	8006c02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c02:	69bb      	ldr	r3, [r7, #24]
	}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c24:	3b01      	subs	r3, #1
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f023 0307 	bic.w	r3, r3, #7
 8006c32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	617b      	str	r3, [r7, #20]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	e012      	b.n	8006c80 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	7819      	ldrb	r1, [r3, #0]
 8006c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	3334      	adds	r3, #52	; 0x34
 8006c6a:	460a      	mov	r2, r1
 8006c6c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d006      	beq.n	8006c88 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d9e9      	bls.n	8006c5a <prvInitialiseNewTask+0x4e>
 8006c86:	e000      	b.n	8006c8a <prvInitialiseNewTask+0x7e>
		{
			break;
 8006c88:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	2b06      	cmp	r3, #6
 8006c96:	d901      	bls.n	8006c9c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c98:	2306      	movs	r3, #6
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	2200      	movs	r2, #0
 8006cac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fe79 	bl	80069aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	3318      	adds	r3, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff fe74 	bl	80069aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	f1c3 0207 	rsb	r2, r3, #7
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	2200      	movs	r2, #0
 8006cdc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f000 fc2c 	bl	8007548 <pxPortInitialiseStack>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d02:	bf00      	nop
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d14:	f000 fd0a 	bl	800772c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d18:	4b2a      	ldr	r3, [pc, #168]	; (8006dc4 <prvAddNewTaskToReadyList+0xb8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	4a29      	ldr	r2, [pc, #164]	; (8006dc4 <prvAddNewTaskToReadyList+0xb8>)
 8006d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d22:	4b29      	ldr	r3, [pc, #164]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d2a:	4a27      	ldr	r2, [pc, #156]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d30:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <prvAddNewTaskToReadyList+0xb8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d110      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d38:	f000 fac0 	bl	80072bc <prvInitialiseTaskLists>
 8006d3c:	e00d      	b.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d3e:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <prvAddNewTaskToReadyList+0xc0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d802      	bhi.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d54:	4a1c      	ldr	r2, [pc, #112]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	4a18      	ldr	r2, [pc, #96]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <prvAddNewTaskToReadyList+0xcc>)
 8006d84:	441a      	add	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7ff fe18 	bl	80069c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d92:	f000 fcfb 	bl	800778c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d96:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <prvAddNewTaskToReadyList+0xc0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00e      	beq.n	8006dbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d207      	bcs.n	8006dbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dac:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	200006c8 	.word	0x200006c8
 8006dc8:	200005c8 	.word	0x200005c8
 8006dcc:	200006d4 	.word	0x200006d4
 8006dd0:	200006e4 	.word	0x200006e4
 8006dd4:	200006d0 	.word	0x200006d0
 8006dd8:	200005cc 	.word	0x200005cc
 8006ddc:	e000ed04 	.word	0xe000ed04

08006de0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d017      	beq.n	8006e22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006df2:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <vTaskDelay+0x60>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <vTaskDelay+0x30>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60bb      	str	r3, [r7, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e10:	f000 f87a 	bl	8006f08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fb30 	bl	800747c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e1c:	f000 f882 	bl	8006f24 <xTaskResumeAll>
 8006e20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d107      	bne.n	8006e38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <vTaskDelay+0x64>)
 8006e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	200006f0 	.word	0x200006f0
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	; 0x28
 8006e4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e56:	463a      	mov	r2, r7
 8006e58:	1d39      	adds	r1, r7, #4
 8006e5a:	f107 0308 	add.w	r3, r7, #8
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fb fa2c 	bl	80022bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	9202      	str	r2, [sp, #8]
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	460a      	mov	r2, r1
 8006e76:	491e      	ldr	r1, [pc, #120]	; (8006ef0 <vTaskStartScheduler+0xa8>)
 8006e78:	481e      	ldr	r0, [pc, #120]	; (8006ef4 <vTaskStartScheduler+0xac>)
 8006e7a:	f7ff fe26 	bl	8006aca <xTaskCreateStatic>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <vTaskStartScheduler+0xb0>)
 8006e82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e84:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <vTaskStartScheduler+0xb0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	e001      	b.n	8006e96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d116      	bne.n	8006eca <vTaskStartScheduler+0x82>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	613b      	str	r3, [r7, #16]
}
 8006eae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006eb0:	4b12      	ldr	r3, [pc, #72]	; (8006efc <vTaskStartScheduler+0xb4>)
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006eb8:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <vTaskStartScheduler+0xb8>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ebe:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <vTaskStartScheduler+0xbc>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ec4:	f000 fbc0 	bl	8007648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ec8:	e00e      	b.n	8006ee8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed0:	d10a      	bne.n	8006ee8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	60fb      	str	r3, [r7, #12]
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <vTaskStartScheduler+0x9e>
}
 8006ee8:	bf00      	nop
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	08007dc8 	.word	0x08007dc8
 8006ef4:	0800728d 	.word	0x0800728d
 8006ef8:	200006ec 	.word	0x200006ec
 8006efc:	200006e8 	.word	0x200006e8
 8006f00:	200006d4 	.word	0x200006d4
 8006f04:	200006cc 	.word	0x200006cc

08006f08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <vTaskSuspendAll+0x18>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3301      	adds	r3, #1
 8006f12:	4a03      	ldr	r2, [pc, #12]	; (8006f20 <vTaskSuspendAll+0x18>)
 8006f14:	6013      	str	r3, [r2, #0]
}
 8006f16:	bf00      	nop
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	200006f0 	.word	0x200006f0

08006f24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f32:	4b41      	ldr	r3, [pc, #260]	; (8007038 <xTaskResumeAll+0x114>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	603b      	str	r3, [r7, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f50:	f000 fbec 	bl	800772c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f54:	4b38      	ldr	r3, [pc, #224]	; (8007038 <xTaskResumeAll+0x114>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	4a37      	ldr	r2, [pc, #220]	; (8007038 <xTaskResumeAll+0x114>)
 8006f5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f5e:	4b36      	ldr	r3, [pc, #216]	; (8007038 <xTaskResumeAll+0x114>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d161      	bne.n	800702a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f66:	4b35      	ldr	r3, [pc, #212]	; (800703c <xTaskResumeAll+0x118>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d05d      	beq.n	800702a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f6e:	e02e      	b.n	8006fce <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006f70:	4b33      	ldr	r3, [pc, #204]	; (8007040 <xTaskResumeAll+0x11c>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3318      	adds	r3, #24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fd7b 	bl	8006a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff fd76 	bl	8006a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	2201      	movs	r2, #1
 8006f92:	409a      	lsls	r2, r3
 8006f94:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <xTaskResumeAll+0x120>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <xTaskResumeAll+0x120>)
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4a27      	ldr	r2, [pc, #156]	; (8007048 <xTaskResumeAll+0x124>)
 8006fac:	441a      	add	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7ff fd04 	bl	80069c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbe:	4b23      	ldr	r3, [pc, #140]	; (800704c <xTaskResumeAll+0x128>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d302      	bcc.n	8006fce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006fc8:	4b21      	ldr	r3, [pc, #132]	; (8007050 <xTaskResumeAll+0x12c>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fce:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <xTaskResumeAll+0x11c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1cc      	bne.n	8006f70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fdc:	f000 fa0c 	bl	80073f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006fe0:	4b1c      	ldr	r3, [pc, #112]	; (8007054 <xTaskResumeAll+0x130>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d010      	beq.n	800700e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fec:	f000 f836 	bl	800705c <xTaskIncrementTick>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006ff6:	4b16      	ldr	r3, [pc, #88]	; (8007050 <xTaskResumeAll+0x12c>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1f1      	bne.n	8006fec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007008:	4b12      	ldr	r3, [pc, #72]	; (8007054 <xTaskResumeAll+0x130>)
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800700e:	4b10      	ldr	r3, [pc, #64]	; (8007050 <xTaskResumeAll+0x12c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d009      	beq.n	800702a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007016:	2301      	movs	r3, #1
 8007018:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800701a:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <xTaskResumeAll+0x134>)
 800701c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800702a:	f000 fbaf 	bl	800778c <vPortExitCritical>

	return xAlreadyYielded;
 800702e:	68bb      	ldr	r3, [r7, #8]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	200006f0 	.word	0x200006f0
 800703c:	200006c8 	.word	0x200006c8
 8007040:	20000688 	.word	0x20000688
 8007044:	200006d0 	.word	0x200006d0
 8007048:	200005cc 	.word	0x200005cc
 800704c:	200005c8 	.word	0x200005c8
 8007050:	200006dc 	.word	0x200006dc
 8007054:	200006d8 	.word	0x200006d8
 8007058:	e000ed04 	.word	0xe000ed04

0800705c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007066:	4b51      	ldr	r3, [pc, #324]	; (80071ac <xTaskIncrementTick+0x150>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 808d 	bne.w	800718a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007070:	4b4f      	ldr	r3, [pc, #316]	; (80071b0 <xTaskIncrementTick+0x154>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007078:	4a4d      	ldr	r2, [pc, #308]	; (80071b0 <xTaskIncrementTick+0x154>)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d120      	bne.n	80070c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007084:	4b4b      	ldr	r3, [pc, #300]	; (80071b4 <xTaskIncrementTick+0x158>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	603b      	str	r3, [r7, #0]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <xTaskIncrementTick+0x46>
 80070a4:	4b43      	ldr	r3, [pc, #268]	; (80071b4 <xTaskIncrementTick+0x158>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	4b43      	ldr	r3, [pc, #268]	; (80071b8 <xTaskIncrementTick+0x15c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a41      	ldr	r2, [pc, #260]	; (80071b4 <xTaskIncrementTick+0x158>)
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	4a41      	ldr	r2, [pc, #260]	; (80071b8 <xTaskIncrementTick+0x15c>)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	4b40      	ldr	r3, [pc, #256]	; (80071bc <xTaskIncrementTick+0x160>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	4a3f      	ldr	r2, [pc, #252]	; (80071bc <xTaskIncrementTick+0x160>)
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	f000 f999 	bl	80073f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070c6:	4b3e      	ldr	r3, [pc, #248]	; (80071c0 <xTaskIncrementTick+0x164>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d34d      	bcc.n	800716c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070d0:	4b38      	ldr	r3, [pc, #224]	; (80071b4 <xTaskIncrementTick+0x158>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <xTaskIncrementTick+0x82>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xTaskIncrementTick+0x84>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e4:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <xTaskIncrementTick+0x164>)
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ea:	601a      	str	r2, [r3, #0]
					break;
 80070ec:	e03e      	b.n	800716c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070ee:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <xTaskIncrementTick+0x158>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	d203      	bcs.n	800710e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007106:	4a2e      	ldr	r2, [pc, #184]	; (80071c0 <xTaskIncrementTick+0x164>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6013      	str	r3, [r2, #0]
						break;
 800710c:	e02e      	b.n	800716c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff fcb0 	bl	8006a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	3318      	adds	r3, #24
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fca7 	bl	8006a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	2201      	movs	r2, #1
 8007130:	409a      	lsls	r2, r3
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <xTaskIncrementTick+0x168>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	4a22      	ldr	r2, [pc, #136]	; (80071c4 <xTaskIncrementTick+0x168>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <xTaskIncrementTick+0x16c>)
 800714a:	441a      	add	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7ff fc35 	bl	80069c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <xTaskIncrementTick+0x170>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	429a      	cmp	r2, r3
 8007164:	d3b4      	bcc.n	80070d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800716a:	e7b1      	b.n	80070d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800716c:	4b17      	ldr	r3, [pc, #92]	; (80071cc <xTaskIncrementTick+0x170>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4915      	ldr	r1, [pc, #84]	; (80071c8 <xTaskIncrementTick+0x16c>)
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d907      	bls.n	8007194 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e004      	b.n	8007194 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <xTaskIncrementTick+0x174>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3301      	adds	r3, #1
 8007190:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <xTaskIncrementTick+0x174>)
 8007192:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007194:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <xTaskIncrementTick+0x178>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071a0:	697b      	ldr	r3, [r7, #20]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	200006f0 	.word	0x200006f0
 80071b0:	200006cc 	.word	0x200006cc
 80071b4:	20000680 	.word	0x20000680
 80071b8:	20000684 	.word	0x20000684
 80071bc:	200006e0 	.word	0x200006e0
 80071c0:	200006e8 	.word	0x200006e8
 80071c4:	200006d0 	.word	0x200006d0
 80071c8:	200005cc 	.word	0x200005cc
 80071cc:	200005c8 	.word	0x200005c8
 80071d0:	200006d8 	.word	0x200006d8
 80071d4:	200006dc 	.word	0x200006dc

080071d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071de:	4b26      	ldr	r3, [pc, #152]	; (8007278 <vTaskSwitchContext+0xa0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071e6:	4b25      	ldr	r3, [pc, #148]	; (800727c <vTaskSwitchContext+0xa4>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071ec:	e03f      	b.n	800726e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80071ee:	4b23      	ldr	r3, [pc, #140]	; (800727c <vTaskSwitchContext+0xa4>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80071f4:	4b22      	ldr	r3, [pc, #136]	; (8007280 <vTaskSwitchContext+0xa8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	fab3 f383 	clz	r3, r3
 8007200:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	f1c3 031f 	rsb	r3, r3, #31
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	491e      	ldr	r1, [pc, #120]	; (8007284 <vTaskSwitchContext+0xac>)
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <vTaskSwitchContext+0x5c>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <vTaskSwitchContext+0x5a>
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4a11      	ldr	r2, [pc, #68]	; (8007284 <vTaskSwitchContext+0xac>)
 8007240:	4413      	add	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	3308      	adds	r3, #8
 8007256:	429a      	cmp	r2, r3
 8007258:	d104      	bne.n	8007264 <vTaskSwitchContext+0x8c>
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	605a      	str	r2, [r3, #4]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	4a07      	ldr	r2, [pc, #28]	; (8007288 <vTaskSwitchContext+0xb0>)
 800726c:	6013      	str	r3, [r2, #0]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr
 8007278:	200006f0 	.word	0x200006f0
 800727c:	200006dc 	.word	0x200006dc
 8007280:	200006d0 	.word	0x200006d0
 8007284:	200005cc 	.word	0x200005cc
 8007288:	200005c8 	.word	0x200005c8

0800728c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007294:	f000 f852 	bl	800733c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007298:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <prvIdleTask+0x28>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d9f9      	bls.n	8007294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <prvIdleTask+0x2c>)
 80072a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072b0:	e7f0      	b.n	8007294 <prvIdleTask+0x8>
 80072b2:	bf00      	nop
 80072b4:	200005cc 	.word	0x200005cc
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072c2:	2300      	movs	r3, #0
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	e00c      	b.n	80072e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4a12      	ldr	r2, [pc, #72]	; (800731c <prvInitialiseTaskLists+0x60>)
 80072d4:	4413      	add	r3, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff fb48 	bl	800696c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3301      	adds	r3, #1
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	d9ef      	bls.n	80072c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072e8:	480d      	ldr	r0, [pc, #52]	; (8007320 <prvInitialiseTaskLists+0x64>)
 80072ea:	f7ff fb3f 	bl	800696c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072ee:	480d      	ldr	r0, [pc, #52]	; (8007324 <prvInitialiseTaskLists+0x68>)
 80072f0:	f7ff fb3c 	bl	800696c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072f4:	480c      	ldr	r0, [pc, #48]	; (8007328 <prvInitialiseTaskLists+0x6c>)
 80072f6:	f7ff fb39 	bl	800696c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072fa:	480c      	ldr	r0, [pc, #48]	; (800732c <prvInitialiseTaskLists+0x70>)
 80072fc:	f7ff fb36 	bl	800696c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007300:	480b      	ldr	r0, [pc, #44]	; (8007330 <prvInitialiseTaskLists+0x74>)
 8007302:	f7ff fb33 	bl	800696c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <prvInitialiseTaskLists+0x78>)
 8007308:	4a05      	ldr	r2, [pc, #20]	; (8007320 <prvInitialiseTaskLists+0x64>)
 800730a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <prvInitialiseTaskLists+0x7c>)
 800730e:	4a05      	ldr	r2, [pc, #20]	; (8007324 <prvInitialiseTaskLists+0x68>)
 8007310:	601a      	str	r2, [r3, #0]
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	200005cc 	.word	0x200005cc
 8007320:	20000658 	.word	0x20000658
 8007324:	2000066c 	.word	0x2000066c
 8007328:	20000688 	.word	0x20000688
 800732c:	2000069c 	.word	0x2000069c
 8007330:	200006b4 	.word	0x200006b4
 8007334:	20000680 	.word	0x20000680
 8007338:	20000684 	.word	0x20000684

0800733c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007342:	e019      	b.n	8007378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007344:	f000 f9f2 	bl	800772c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007348:	4b10      	ldr	r3, [pc, #64]	; (800738c <prvCheckTasksWaitingTermination+0x50>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3304      	adds	r3, #4
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fb8f 	bl	8006a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <prvCheckTasksWaitingTermination+0x54>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3b01      	subs	r3, #1
 8007360:	4a0b      	ldr	r2, [pc, #44]	; (8007390 <prvCheckTasksWaitingTermination+0x54>)
 8007362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007364:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <prvCheckTasksWaitingTermination+0x58>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3b01      	subs	r3, #1
 800736a:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <prvCheckTasksWaitingTermination+0x58>)
 800736c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800736e:	f000 fa0d 	bl	800778c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f810 	bl	8007398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <prvCheckTasksWaitingTermination+0x58>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e1      	bne.n	8007344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	2000069c 	.word	0x2000069c
 8007390:	200006c8 	.word	0x200006c8
 8007394:	200006b0 	.word	0x200006b0

08007398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d108      	bne.n	80073bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fb42 	bl	8007a38 <vPortFree>
				vPortFree( pxTCB );
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fb3f 	bl	8007a38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073ba:	e018      	b.n	80073ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d103      	bne.n	80073ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fb36 	bl	8007a38 <vPortFree>
	}
 80073cc:	e00f      	b.n	80073ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d00a      	beq.n	80073ee <prvDeleteTCB+0x56>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	60fb      	str	r3, [r7, #12]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <prvDeleteTCB+0x54>
	}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073fe:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <prvResetNextTaskUnblockTime+0x40>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <prvResetNextTaskUnblockTime+0x14>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <prvResetNextTaskUnblockTime+0x16>
 800740c:	2300      	movs	r3, #0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <prvResetNextTaskUnblockTime+0x44>)
 8007414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007418:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800741a:	e008      	b.n	800742e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <prvResetNextTaskUnblockTime+0x40>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4a04      	ldr	r2, [pc, #16]	; (800743c <prvResetNextTaskUnblockTime+0x44>)
 800742c:	6013      	str	r3, [r2, #0]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr
 8007438:	20000680 	.word	0x20000680
 800743c:	200006e8 	.word	0x200006e8

08007440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007446:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <xTaskGetSchedulerState+0x34>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800744e:	2301      	movs	r3, #1
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	e008      	b.n	8007466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007454:	4b08      	ldr	r3, [pc, #32]	; (8007478 <xTaskGetSchedulerState+0x38>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800745c:	2302      	movs	r3, #2
 800745e:	607b      	str	r3, [r7, #4]
 8007460:	e001      	b.n	8007466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007466:	687b      	ldr	r3, [r7, #4]
	}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	200006d4 	.word	0x200006d4
 8007478:	200006f0 	.word	0x200006f0

0800747c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007486:	4b29      	ldr	r3, [pc, #164]	; (800752c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800748c:	4b28      	ldr	r3, [pc, #160]	; (8007530 <prvAddCurrentTaskToDelayedList+0xb4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3304      	adds	r3, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff faf0 	bl	8006a78 <uxListRemove>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10b      	bne.n	80074b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800749e:	4b24      	ldr	r3, [pc, #144]	; (8007530 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	2201      	movs	r2, #1
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43da      	mvns	r2, r3
 80074ac:	4b21      	ldr	r3, [pc, #132]	; (8007534 <prvAddCurrentTaskToDelayedList+0xb8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4013      	ands	r3, r2
 80074b2:	4a20      	ldr	r2, [pc, #128]	; (8007534 <prvAddCurrentTaskToDelayedList+0xb8>)
 80074b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074bc:	d10a      	bne.n	80074d4 <prvAddCurrentTaskToDelayedList+0x58>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074c4:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	481a      	ldr	r0, [pc, #104]	; (8007538 <prvAddCurrentTaskToDelayedList+0xbc>)
 80074ce:	f7ff fa78 	bl	80069c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074d2:	e026      	b.n	8007522 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074dc:	4b14      	ldr	r3, [pc, #80]	; (8007530 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d209      	bcs.n	8007500 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ec:	4b13      	ldr	r3, [pc, #76]	; (800753c <prvAddCurrentTaskToDelayedList+0xc0>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7ff fa85 	bl	8006a08 <vListInsert>
}
 80074fe:	e010      	b.n	8007522 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007500:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f7ff fa7b 	bl	8006a08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	429a      	cmp	r2, r3
 800751a:	d202      	bcs.n	8007522 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800751c:	4a09      	ldr	r2, [pc, #36]	; (8007544 <prvAddCurrentTaskToDelayedList+0xc8>)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6013      	str	r3, [r2, #0]
}
 8007522:	bf00      	nop
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	200006cc 	.word	0x200006cc
 8007530:	200005c8 	.word	0x200005c8
 8007534:	200006d0 	.word	0x200006d0
 8007538:	200006b4 	.word	0x200006b4
 800753c:	20000684 	.word	0x20000684
 8007540:	20000680 	.word	0x20000680
 8007544:	200006e8 	.word	0x200006e8

08007548 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3b04      	subs	r3, #4
 8007558:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3b04      	subs	r3, #4
 8007566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f023 0201 	bic.w	r2, r3, #1
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b04      	subs	r3, #4
 8007576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007578:	4a08      	ldr	r2, [pc, #32]	; (800759c <pxPortInitialiseStack+0x54>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3b14      	subs	r3, #20
 8007582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3b20      	subs	r3, #32
 800758e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr
 800759c:	080075a1 	.word	0x080075a1

080075a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <prvTaskExitError+0x54>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075b2:	d00a      	beq.n	80075ca <prvTaskExitError+0x2a>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	60fb      	str	r3, [r7, #12]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <prvTaskExitError+0x28>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60bb      	str	r3, [r7, #8]
}
 80075dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075de:	bf00      	nop
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0fc      	beq.n	80075e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000010 	.word	0x20000010
	...

08007600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <pxCurrentTCBConst2>)
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	6808      	ldr	r0, [r1, #0]
 8007606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800760a:	f380 8809 	msr	PSP, r0
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f380 8811 	msr	BASEPRI, r0
 800761a:	f04e 0e0d 	orr.w	lr, lr, #13
 800761e:	4770      	bx	lr

08007620 <pxCurrentTCBConst2>:
 8007620:	200005c8 	.word	0x200005c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007628:	4806      	ldr	r0, [pc, #24]	; (8007644 <prvPortStartFirstTask+0x1c>)
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f380 8808 	msr	MSP, r0
 8007632:	b662      	cpsie	i
 8007634:	b661      	cpsie	f
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	df00      	svc	0
 8007640:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007642:	bf00      	nop
 8007644:	e000ed08 	.word	0xe000ed08

08007648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800764e:	4b32      	ldr	r3, [pc, #200]	; (8007718 <xPortStartScheduler+0xd0>)
 8007650:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	22ff      	movs	r2, #255	; 0xff
 800765e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007670:	b2da      	uxtb	r2, r3
 8007672:	4b2a      	ldr	r3, [pc, #168]	; (800771c <xPortStartScheduler+0xd4>)
 8007674:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007676:	4b2a      	ldr	r3, [pc, #168]	; (8007720 <xPortStartScheduler+0xd8>)
 8007678:	2207      	movs	r2, #7
 800767a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800767c:	e009      	b.n	8007692 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800767e:	4b28      	ldr	r3, [pc, #160]	; (8007720 <xPortStartScheduler+0xd8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3b01      	subs	r3, #1
 8007684:	4a26      	ldr	r2, [pc, #152]	; (8007720 <xPortStartScheduler+0xd8>)
 8007686:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769a:	2b80      	cmp	r3, #128	; 0x80
 800769c:	d0ef      	beq.n	800767e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800769e:	4b20      	ldr	r3, [pc, #128]	; (8007720 <xPortStartScheduler+0xd8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1c3 0307 	rsb	r3, r3, #7
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d00a      	beq.n	80076c0 <xPortStartScheduler+0x78>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	60bb      	str	r3, [r7, #8]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076c0:	4b17      	ldr	r3, [pc, #92]	; (8007720 <xPortStartScheduler+0xd8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	4a16      	ldr	r2, [pc, #88]	; (8007720 <xPortStartScheduler+0xd8>)
 80076c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076ca:	4b15      	ldr	r3, [pc, #84]	; (8007720 <xPortStartScheduler+0xd8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076d2:	4a13      	ldr	r2, [pc, #76]	; (8007720 <xPortStartScheduler+0xd8>)
 80076d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076de:	4b11      	ldr	r3, [pc, #68]	; (8007724 <xPortStartScheduler+0xdc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a10      	ldr	r2, [pc, #64]	; (8007724 <xPortStartScheduler+0xdc>)
 80076e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076ea:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <xPortStartScheduler+0xdc>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a0d      	ldr	r2, [pc, #52]	; (8007724 <xPortStartScheduler+0xdc>)
 80076f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076f6:	f000 f8b9 	bl	800786c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076fa:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <xPortStartScheduler+0xe0>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007700:	f7ff ff92 	bl	8007628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007704:	f7ff fd68 	bl	80071d8 <vTaskSwitchContext>
	prvTaskExitError();
 8007708:	f7ff ff4a 	bl	80075a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	e000e400 	.word	0xe000e400
 800771c:	200006f4 	.word	0x200006f4
 8007720:	200006f8 	.word	0x200006f8
 8007724:	e000ed20 	.word	0xe000ed20
 8007728:	20000010 	.word	0x20000010

0800772c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	607b      	str	r3, [r7, #4]
}
 8007744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <vPortEnterCritical+0x58>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	4a0d      	ldr	r2, [pc, #52]	; (8007784 <vPortEnterCritical+0x58>)
 800774e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007750:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <vPortEnterCritical+0x58>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d10f      	bne.n	8007778 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007758:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <vPortEnterCritical+0x5c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <vPortEnterCritical+0x4c>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	603b      	str	r3, [r7, #0]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vPortEnterCritical+0x4a>
	}
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000010 	.word	0x20000010
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007792:	4b11      	ldr	r3, [pc, #68]	; (80077d8 <vPortExitCritical+0x4c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <vPortExitCritical+0x24>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	607b      	str	r3, [r7, #4]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <vPortExitCritical+0x4c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <vPortExitCritical+0x4c>)
 80077b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077ba:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <vPortExitCritical+0x4c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d105      	bne.n	80077ce <vPortExitCritical+0x42>
 80077c2:	2300      	movs	r3, #0
 80077c4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr
 80077d8:	20000010 	.word	0x20000010
 80077dc:	00000000 	.word	0x00000000

080077e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077e0:	f3ef 8009 	mrs	r0, PSP
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <pxCurrentTCBConst>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077f0:	6010      	str	r0, [r2, #0]
 80077f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80077f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077fa:	f380 8811 	msr	BASEPRI, r0
 80077fe:	f7ff fceb 	bl	80071d8 <vTaskSwitchContext>
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8811 	msr	BASEPRI, r0
 800780a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	6808      	ldr	r0, [r1, #0]
 8007812:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007816:	f380 8809 	msr	PSP, r0
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	4770      	bx	lr

08007820 <pxCurrentTCBConst>:
 8007820:	200005c8 	.word	0x200005c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop

08007828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007842:	f7ff fc0b 	bl	800705c <xTaskIncrementTick>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800784c:	4b06      	ldr	r3, [pc, #24]	; (8007868 <xPortSysTickHandler+0x40>)
 800784e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	2300      	movs	r3, #0
 8007856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f383 8811 	msr	BASEPRI, r3
}
 800785e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007870:	4b0a      	ldr	r3, [pc, #40]	; (800789c <vPortSetupTimerInterrupt+0x30>)
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007876:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <vPortSetupTimerInterrupt+0x34>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <vPortSetupTimerInterrupt+0x38>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a09      	ldr	r2, [pc, #36]	; (80078a8 <vPortSetupTimerInterrupt+0x3c>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	099b      	lsrs	r3, r3, #6
 8007888:	4a08      	ldr	r2, [pc, #32]	; (80078ac <vPortSetupTimerInterrupt+0x40>)
 800788a:	3b01      	subs	r3, #1
 800788c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800788e:	4b03      	ldr	r3, [pc, #12]	; (800789c <vPortSetupTimerInterrupt+0x30>)
 8007890:	2207      	movs	r2, #7
 8007892:	601a      	str	r2, [r3, #0]
}
 8007894:	bf00      	nop
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr
 800789c:	e000e010 	.word	0xe000e010
 80078a0:	e000e018 	.word	0xe000e018
 80078a4:	20000004 	.word	0x20000004
 80078a8:	10624dd3 	.word	0x10624dd3
 80078ac:	e000e014 	.word	0xe000e014

080078b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078bc:	f7ff fb24 	bl	8006f08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078c0:	4b58      	ldr	r3, [pc, #352]	; (8007a24 <pvPortMalloc+0x174>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078c8:	f000 f910 	bl	8007aec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078cc:	4b56      	ldr	r3, [pc, #344]	; (8007a28 <pvPortMalloc+0x178>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4013      	ands	r3, r2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 808e 	bne.w	80079f6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01d      	beq.n	800791c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078e0:	2208      	movs	r2, #8
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4413      	add	r3, r2
 80078e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d014      	beq.n	800791c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	3308      	adds	r3, #8
 80078fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <pvPortMalloc+0x6c>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	617b      	str	r3, [r7, #20]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d069      	beq.n	80079f6 <pvPortMalloc+0x146>
 8007922:	4b42      	ldr	r3, [pc, #264]	; (8007a2c <pvPortMalloc+0x17c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d864      	bhi.n	80079f6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800792c:	4b40      	ldr	r3, [pc, #256]	; (8007a30 <pvPortMalloc+0x180>)
 800792e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007930:	4b3f      	ldr	r3, [pc, #252]	; (8007a30 <pvPortMalloc+0x180>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007936:	e004      	b.n	8007942 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d903      	bls.n	8007954 <pvPortMalloc+0xa4>
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f1      	bne.n	8007938 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007954:	4b33      	ldr	r3, [pc, #204]	; (8007a24 <pvPortMalloc+0x174>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795a:	429a      	cmp	r2, r3
 800795c:	d04b      	beq.n	80079f6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2208      	movs	r2, #8
 8007964:	4413      	add	r3, r2
 8007966:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	2308      	movs	r3, #8
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	429a      	cmp	r2, r3
 800797e:	d91f      	bls.n	80079c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <pvPortMalloc+0xf8>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	613b      	str	r3, [r7, #16]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079ba:	69b8      	ldr	r0, [r7, #24]
 80079bc:	f000 f8f8 	bl	8007bb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079c0:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <pvPortMalloc+0x17c>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	4a18      	ldr	r2, [pc, #96]	; (8007a2c <pvPortMalloc+0x17c>)
 80079cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079ce:	4b17      	ldr	r3, [pc, #92]	; (8007a2c <pvPortMalloc+0x17c>)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <pvPortMalloc+0x184>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d203      	bcs.n	80079e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <pvPortMalloc+0x17c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a15      	ldr	r2, [pc, #84]	; (8007a34 <pvPortMalloc+0x184>)
 80079e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <pvPortMalloc+0x178>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079f6:	f7ff fa95 	bl	8006f24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <pvPortMalloc+0x16a>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	60fb      	str	r3, [r7, #12]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <pvPortMalloc+0x168>
	return pvReturn;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3728      	adds	r7, #40	; 0x28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20001304 	.word	0x20001304
 8007a28:	20001310 	.word	0x20001310
 8007a2c:	20001308 	.word	0x20001308
 8007a30:	200012fc 	.word	0x200012fc
 8007a34:	2000130c 	.word	0x2000130c

08007a38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d048      	beq.n	8007adc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	425b      	negs	r3, r3
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4413      	add	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <vPortFree+0xac>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4013      	ands	r3, r2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <vPortFree+0x44>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	60fb      	str	r3, [r7, #12]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <vPortFree+0x62>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	60bb      	str	r3, [r7, #8]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <vPortFree+0xac>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d019      	beq.n	8007adc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d115      	bne.n	8007adc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <vPortFree+0xac>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	401a      	ands	r2, r3
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ac0:	f7ff fa22 	bl	8006f08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <vPortFree+0xb0>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4413      	add	r3, r2
 8007ace:	4a06      	ldr	r2, [pc, #24]	; (8007ae8 <vPortFree+0xb0>)
 8007ad0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ad2:	6938      	ldr	r0, [r7, #16]
 8007ad4:	f000 f86c 	bl	8007bb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ad8:	f7ff fa24 	bl	8006f24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007adc:	bf00      	nop
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20001310 	.word	0x20001310
 8007ae8:	20001308 	.word	0x20001308

08007aec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007af2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007af6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007af8:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <prvHeapInit+0xac>)
 8007afa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00c      	beq.n	8007b20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3307      	adds	r3, #7
 8007b0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0307 	bic.w	r3, r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <prvHeapInit+0xac>)
 8007b1c:	4413      	add	r3, r2
 8007b1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b24:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <prvHeapInit+0xb0>)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b2a:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <prvHeapInit+0xb0>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	4413      	add	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b38:	2208      	movs	r2, #8
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0307 	bic.w	r3, r3, #7
 8007b46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4a15      	ldr	r2, [pc, #84]	; (8007ba0 <prvHeapInit+0xb4>)
 8007b4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b4e:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <prvHeapInit+0xb4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b56:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	1ad2      	subs	r2, r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <prvHeapInit+0xb4>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a0a      	ldr	r2, [pc, #40]	; (8007ba4 <prvHeapInit+0xb8>)
 8007b7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a09      	ldr	r2, [pc, #36]	; (8007ba8 <prvHeapInit+0xbc>)
 8007b82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b84:	4b09      	ldr	r3, [pc, #36]	; (8007bac <prvHeapInit+0xc0>)
 8007b86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b8a:	601a      	str	r2, [r3, #0]
}
 8007b8c:	bf00      	nop
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	200006fc 	.word	0x200006fc
 8007b9c:	200012fc 	.word	0x200012fc
 8007ba0:	20001304 	.word	0x20001304
 8007ba4:	2000130c 	.word	0x2000130c
 8007ba8:	20001308 	.word	0x20001308
 8007bac:	20001310 	.word	0x20001310

08007bb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bb8:	4b27      	ldr	r3, [pc, #156]	; (8007c58 <prvInsertBlockIntoFreeList+0xa8>)
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	e002      	b.n	8007bc4 <prvInsertBlockIntoFreeList+0x14>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d8f7      	bhi.n	8007bbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	4413      	add	r3, r2
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d108      	bne.n	8007bf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	441a      	add	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	441a      	add	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d118      	bne.n	8007c38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4b14      	ldr	r3, [pc, #80]	; (8007c5c <prvInsertBlockIntoFreeList+0xac>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d00d      	beq.n	8007c2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	441a      	add	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e008      	b.n	8007c40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <prvInsertBlockIntoFreeList+0xac>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	e003      	b.n	8007c40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d002      	beq.n	8007c4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr
 8007c58:	200012fc 	.word	0x200012fc
 8007c5c:	20001304 	.word	0x20001304

08007c60 <ceilf>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8007c66:	3d7f      	subs	r5, #127	; 0x7f
 8007c68:	2d16      	cmp	r5, #22
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007c72:	dc25      	bgt.n	8007cc0 <ceilf+0x60>
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	da0e      	bge.n	8007c96 <ceilf+0x36>
 8007c78:	4917      	ldr	r1, [pc, #92]	; (8007cd8 <ceilf+0x78>)
 8007c7a:	f7f8 fe8d 	bl	8000998 <__addsf3>
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f7f9 f94e 	bl	8000f20 <__aeabi_fcmpgt>
 8007c84:	b128      	cbz	r0, 8007c92 <ceilf+0x32>
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	db22      	blt.n	8007cd0 <ceilf+0x70>
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	bf18      	it	ne
 8007c8e:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8007c92:	4621      	mov	r1, r4
 8007c94:	e01a      	b.n	8007ccc <ceilf+0x6c>
 8007c96:	4e11      	ldr	r6, [pc, #68]	; (8007cdc <ceilf+0x7c>)
 8007c98:	412e      	asrs	r6, r5
 8007c9a:	4230      	tst	r0, r6
 8007c9c:	d016      	beq.n	8007ccc <ceilf+0x6c>
 8007c9e:	490e      	ldr	r1, [pc, #56]	; (8007cd8 <ceilf+0x78>)
 8007ca0:	f7f8 fe7a 	bl	8000998 <__addsf3>
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	f7f9 f93b 	bl	8000f20 <__aeabi_fcmpgt>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0f1      	beq.n	8007c92 <ceilf+0x32>
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	bfc2      	ittt	gt
 8007cb2:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8007cb6:	412b      	asrgt	r3, r5
 8007cb8:	18e4      	addgt	r4, r4, r3
 8007cba:	ea24 0406 	bic.w	r4, r4, r6
 8007cbe:	e7e8      	b.n	8007c92 <ceilf+0x32>
 8007cc0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007cc4:	d302      	bcc.n	8007ccc <ceilf+0x6c>
 8007cc6:	f7f8 fe67 	bl	8000998 <__addsf3>
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007cd4:	e7dd      	b.n	8007c92 <ceilf+0x32>
 8007cd6:	bf00      	nop
 8007cd8:	7149f2ca 	.word	0x7149f2ca
 8007cdc:	007fffff 	.word	0x007fffff

08007ce0 <memset>:
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	4402      	add	r2, r0
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d100      	bne.n	8007cea <memset+0xa>
 8007ce8:	4770      	bx	lr
 8007cea:	f803 1b01 	strb.w	r1, [r3], #1
 8007cee:	e7f9      	b.n	8007ce4 <memset+0x4>

08007cf0 <__libc_init_array>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	4d0c      	ldr	r5, [pc, #48]	; (8007d28 <__libc_init_array+0x38>)
 8007cf6:	4c0d      	ldr	r4, [pc, #52]	; (8007d2c <__libc_init_array+0x3c>)
 8007cf8:	1b64      	subs	r4, r4, r5
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	42a6      	cmp	r6, r4
 8007cfe:	d109      	bne.n	8007d14 <__libc_init_array+0x24>
 8007d00:	f000 f81a 	bl	8007d38 <_init>
 8007d04:	2600      	movs	r6, #0
 8007d06:	4d0a      	ldr	r5, [pc, #40]	; (8007d30 <__libc_init_array+0x40>)
 8007d08:	4c0a      	ldr	r4, [pc, #40]	; (8007d34 <__libc_init_array+0x44>)
 8007d0a:	1b64      	subs	r4, r4, r5
 8007d0c:	10a4      	asrs	r4, r4, #2
 8007d0e:	42a6      	cmp	r6, r4
 8007d10:	d105      	bne.n	8007d1e <__libc_init_array+0x2e>
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d18:	4798      	blx	r3
 8007d1a:	3601      	adds	r6, #1
 8007d1c:	e7ee      	b.n	8007cfc <__libc_init_array+0xc>
 8007d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d22:	4798      	blx	r3
 8007d24:	3601      	adds	r6, #1
 8007d26:	e7f2      	b.n	8007d0e <__libc_init_array+0x1e>
 8007d28:	08007dfc 	.word	0x08007dfc
 8007d2c:	08007dfc 	.word	0x08007dfc
 8007d30:	08007dfc 	.word	0x08007dfc
 8007d34:	08007e04 	.word	0x08007e04

08007d38 <_init>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	bf00      	nop
 8007d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3e:	bc08      	pop	{r3}
 8007d40:	469e      	mov	lr, r3
 8007d42:	4770      	bx	lr

08007d44 <_fini>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr
