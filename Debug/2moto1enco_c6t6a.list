
2moto1enco_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006984  08006984  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006984  08006984  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006984  08006984  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006984  08006984  00016984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000010  080069a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080069a0  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dfc  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003034  00000000  00000000  00037e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0003aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc6  00000000  00000000  0003bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b39e  00000000  00000000  0003cbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001246f  00000000  00000000  00057f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f782  00000000  00000000  0006a3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004708  00000000  00000000  000f9b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fe268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08006940 	.word	0x08006940

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08006940 	.word	0x08006940

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8000f80:	787a      	ldrb	r2, [r7, #1]
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f002 fe68 	bl	8003c5c <HAL_GPIO_WritePin>

}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	72fb      	strb	r3, [r7, #11]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8000fa8:	893b      	ldrh	r3, [r7, #8]
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffde 	bl	8000f70 <setCSLine>
	delay(docDelay);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f923 	bl	8001200 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8000fba:	f107 0217 	add.w	r2, r7, #23
 8000fbe:	f107 010b 	add.w	r1, r7, #11
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f003 fb31 	bl	8004630 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f000 f916 	bl	8001200 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8000fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd8:	893b      	ldrh	r3, [r7, #8]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffc7 	bl	8000f70 <setCSLine>
	return data;
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4613      	mov	r3, r2
 8001000:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001002:	f000 f90f 	bl	8001224 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	2200      	movs	r2, #0
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	2100      	movs	r1, #0
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff ffbd 	bl	8000f94 <spiWriteRead>
 800101a:	4603      	mov	r3, r0
 800101c:	b29b      	uxth	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001022:	2003      	movs	r0, #3
 8001024:	f000 f8ec 	bl	8001200 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	2100      	movs	r1, #0
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ffae 	bl	8000f94 <spiWriteRead>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800103e:	4313      	orrs	r3, r2
 8001040:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	e010      	b.n	800106a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8001048:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	fa42 f303 	asr.w	r3, r2, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	b2d9      	uxtb	r1, r3
 8001058:	f107 0210 	add.w	r2, r7, #16
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	4413      	add	r3, r2
 8001060:	460a      	mov	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	3301      	adds	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	ddeb      	ble.n	8001048 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001070:	7ffb      	ldrb	r3, [r7, #31]
 8001072:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001074:	7f7a      	ldrb	r2, [r7, #29]
 8001076:	7efb      	ldrb	r3, [r7, #27]
 8001078:	4053      	eors	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	7e7b      	ldrb	r3, [r7, #25]
 800107e:	4053      	eors	r3, r2
 8001080:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001082:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001084:	4053      	eors	r3, r2
 8001086:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001088:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800108a:	4053      	eors	r3, r2
 800108c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800108e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001090:	4053      	eors	r3, r2
 8001092:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001094:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001096:	429a      	cmp	r2, r3
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d11e      	bne.n	80010e2 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80010a4:	7fbb      	ldrb	r3, [r7, #30]
 80010a6:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010a8:	7f3a      	ldrb	r2, [r7, #28]
 80010aa:	7ebb      	ldrb	r3, [r7, #26]
 80010ac:	4053      	eors	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	4053      	eors	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010b8:	4053      	eors	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010bc:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010be:	4053      	eors	r3, r2
 80010c0:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010c2:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010c4:	4053      	eors	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80010c8:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	bf0c      	ite	eq
 80010ce:	2301      	moveq	r3, #1
 80010d0:	2300      	movne	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d104      	bne.n	80010e2 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 80010d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010e0:	e002      	b.n	80010e8 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 80010e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d107      	bne.n	80010fe <getPositionSPI+0x112>
 80010ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d002      	beq.n	80010fe <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 80010f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001100:	4618      	mov	r0, r3
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	4613      	mov	r3, r2
 8001114:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2200      	movs	r2, #0
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	2100      	movs	r1, #0
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff37 	bl	8000f94 <spiWriteRead>
	delay( docDelay);
 8001126:	2003      	movs	r0, #3
 8001128:	f000 f86a 	bl	8001200 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	2201      	movs	r2, #1
 8001130:	9200      	str	r2, [sp, #0]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	2170      	movs	r1, #112	; 0x70
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ff2c 	bl	8000f94 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 800113c:	2064      	movs	r0, #100	; 0x64
 800113e:	f000 f85f 	bl	8001200 <delay>

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	80fb      	strh	r3, [r7, #6]
 8001158:	4613      	mov	r3, r2
 800115a:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d11e      	bne.n	80011a6 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fcc2 	bl	8000af4 <__aeabi_ui2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f94e 	bl	8000414 <__aeabi_f2d>
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <calculateAngle+0xa8>)
 800117e:	f7ff f9a1 	bl	80004c4 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <calculateAngle+0xac>)
 8001190:	f7ff fac2 	bl	8000718 <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fba4 	bl	80008e8 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e020      	b.n	80011e8 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	2b0e      	cmp	r3, #14
 80011aa:	d11d      	bne.n	80011e8 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fca0 	bl	8000af4 <__aeabi_ui2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f92c 	bl	8000414 <__aeabi_f2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <calculateAngle+0xa8>)
 80011c2:	f7ff f97f 	bl	80004c4 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <calculateAngle+0xb0>)
 80011d4:	f7ff faa0 	bl	8000718 <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fb82 	bl	80008e8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40768000 	.word	0x40768000
 80011f8:	40b00000 	.word	0x40b00000
 80011fc:	40d00000 	.word	0x40d00000

08001200 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f83b 	bl	8001284 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <startDWT>:

int startDWT(){
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 800121a:	f000 f803 	bl	8001224 <DWT_Delay_Init>

}
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}

08001224 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <DWT_Delay_Init+0x58>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <DWT_Delay_Init+0x58>)
 800122e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001232:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <DWT_Delay_Init+0x58>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <DWT_Delay_Init+0x58>)
 800123a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <DWT_Delay_Init+0x5c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <DWT_Delay_Init+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800125e:	bf00      	nop
    __ASM volatile ("NOP");
 8001260:	bf00      	nop
    __ASM volatile ("NOP");
 8001262:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800126c:	2300      	movs	r3, #0
 800126e:	e000      	b.n	8001272 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001270:	2301      	movs	r3, #1
    }
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000edf0 	.word	0xe000edf0
 8001280:	e0001000 	.word	0xe0001000

08001284 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <DWT_Delay_us+0x48>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001292:	f003 f8f9 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 8001296:	4603      	mov	r3, r0
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <DWT_Delay_us+0x4c>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9b      	lsrs	r3, r3, #18
 80012a0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80012ac:	bf00      	nop
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <DWT_Delay_us+0x48>)
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1acb      	subs	r3, r1, r3
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3f6      	bcc.n	80012ae <DWT_Delay_us+0x2a>
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e0001000 	.word	0xe0001000
 80012d0:	431bde83 	.word	0x431bde83

080012d4 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	e9c7 0100 	strd	r0, r1, [r7]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f005 faa8 	bl	8006868 <ceilf>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <_ZN7RoboArmC1Ehh>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(uint8_t defaultAngleT, uint8_t defaultDistanseT) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
 8001330:	4613      	mov	r3, r2
 8001332:	70bb      	strb	r3, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a37      	ldr	r2, [pc, #220]	; (8001414 <_ZN7RoboArmC1Ehh+0xf0>)
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	651a      	str	r2, [r3, #80]	; 0x50
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a33      	ldr	r2, [pc, #204]	; (8001418 <_ZN7RoboArmC1Ehh+0xf4>)
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <_ZN7RoboArmC1Ehh+0xf8>)
 8001350:	659a      	str	r2, [r3, #88]	; 0x58
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	220e      	movs	r2, #14
 8001356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	337c      	adds	r3, #124	; 0x7c
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fd83 	bl	8001e6a <_ZN7TMC2209C1Ev>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	33a4      	adds	r3, #164	; 0xa4
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fd7e 	bl	8001e6a <_ZN7TMC2209C1Ev>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	33cc      	adds	r3, #204	; 0xcc
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fd79 	bl	8001e6a <_ZN7TMC2209C1Ev>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	defaultAngle = defaultAngleT;
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fb84 	bl	8000af4 <__aeabi_ui2f>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	defaultDistanse = defaultDistanseT;
 80013f4:	78bb      	ldrb	r3, [r7, #2]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fb7c 	bl	8000af4 <__aeabi_ui2f>
 80013fc:	4602      	mov	r2, r0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108


	startDWT();
 8001404:	f7ff ff07 	bl	8001216 <startDWT>
}
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	44200000 	.word	0x44200000
 8001418:	4673c000 	.word	0x4673c000
 800141c:	437a0000 	.word	0x437a0000

08001420 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001430:	2201      	movs	r2, #1
 8001432:	4619      	mov	r1, r3
 8001434:	f002 fc12 	bl	8003c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	f002 fc0a 	bl	8003c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001452:	2201      	movs	r2, #1
 8001454:	4619      	mov	r1, r3
 8001456:	f002 fc01 	bl	8003c5c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fdf5 	bl	8005050 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2104      	movs	r1, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fdef 	bl	8005050 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2108      	movs	r1, #8
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fde9 	bl	8005050 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fcca 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fcc5 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fcc0 	bl	8004e1c <HAL_TIM_Base_Stop_IT>

	return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <_ZN7RoboArm11Move2MotorsEff>:
//	lastPosAngle_Enc = GetAng();
//	lastPosLinear_Enc = GetLin();
//	return 0;
//}

int RoboArm::Move2Motors(float angle, float distance) {
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b08f      	sub	sp, #60	; 0x3c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fdc8 	bl	8005050 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2104      	movs	r1, #4
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fdc2 	bl	8005050 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);				// остановили прерывание таймеров
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fca3 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fc9e 	bl	8004e1c <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2101      	movs	r1, #1
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 fc87 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2102      	movs	r1, #2
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 fc82 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>

//	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
	lastPosAngle_Enc = GetAng();
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 fb67 	bl	8001bc8 <_ZN7RoboArm6GetAngEv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	lastPosLinear_Enc = GetLin();
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 fb15 	bl	8001b32 <_ZN7RoboArm6GetLinEv>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

//	float lastPosAngle = ShiftZeroAng(lastPosAngle_Enc);
//	float lastPosLinear = ShiftZeroLin(lastPosLinear_Enc);

	float lastPosAngle = lastPosAngle_Enc;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
	float lastPosLinear = lastPosLinear_Enc;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c

	float pos_ang = abs(lastPosAngle - angle);
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001524:	f7ff fa34 	bl	8000990 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fee1 	bl	80012f2 <_ZSt3absf>
 8001530:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 8001532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001534:	f7fe ff6e 	bl	8000414 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	4974      	ldr	r1, [pc, #464]	; (8001714 <_ZN7RoboArm11Move2MotorsEff+0x26c>)
 8001542:	f7fe fe07 	bl	8000154 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fec1 	bl	80012d4 <_ZSt3absd>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff f9c5 	bl	80008e8 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 8001562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001566:	f7ff fcbb 	bl	8000ee0 <__aeabi_fcmplt>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <_ZN7RoboArm11Move2MotorsEff+0x100>
		actualPosAngle = inverse_pos_ang;
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001578:	f7ff fcb2 	bl	8000ee0 <__aeabi_fcmplt>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <_ZN7RoboArm11Move2MotorsEff+0xe6>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.disableInverseMotorDirection();
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	33a4      	adds	r3, #164	; 0xa4
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fd42 	bl	8002010 <_ZN7TMC220928disableInverseMotorDirectionEv>
 800158c:	e027      	b.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
		} else if (lastPosAngle > angle) {
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001592:	f7ff fcc3 	bl	8000f1c <__aeabi_fcmpgt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.enableInverseMotorDirection();
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	33a4      	adds	r3, #164	; 0xa4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fd25 	bl	8001ff0 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80015a6:	e01a      	b.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
		}
	}
	else {
		actualPosAngle = pos_ang;
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015b0:	f7ff fc96 	bl	8000ee0 <__aeabi_fcmplt>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <_ZN7RoboArm11Move2MotorsEff+0x11e>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.enableInverseMotorDirection();
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	33a4      	adds	r3, #164	; 0xa4
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fd16 	bl	8001ff0 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80015c4:	e00b      	b.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
		} else if (lastPosAngle > angle) {
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ca:	f7ff fca7 	bl	8000f1c <__aeabi_fcmpgt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.disableInverseMotorDirection();
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	33a4      	adds	r3, #164	; 0xa4
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fd19 	bl	8002010 <_ZN7TMC220928disableInverseMotorDirectionEv>
//	if (lastPosLinear < distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
//	} else if (lastPosLinear > distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
//	}
	if (lastPosLinear < distance) {
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015e2:	f7ff fc7d 	bl	8000ee0 <__aeabi_fcmplt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <_ZN7RoboArm11Move2MotorsEff+0x150>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
			tmcd_linear.enableInverseMotorDirection();
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	337c      	adds	r3, #124	; 0x7c
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fcfd 	bl	8001ff0 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80015f6:	e00b      	b.n	8001610 <_ZN7RoboArm11Move2MotorsEff+0x168>
		} else if (lastPosLinear > distance) {
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015fc:	f7ff fc8e 	bl	8000f1c <__aeabi_fcmpgt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <_ZN7RoboArm11Move2MotorsEff+0x168>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
			tmcd_linear.disableInverseMotorDirection();
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	337c      	adds	r3, #124	; 0x7c
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd00 	bl	8002010 <_ZN7TMC220928disableInverseMotorDirectionEv>
		}

//	actualPosAngle = abs(lastPosAngle - angle);
	float actualPosDistance = abs(lastPosLinear - distance);
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001614:	f7ff f9bc 	bl	8000990 <__aeabi_fsub>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe69 	bl	80012f2 <_ZSt3absf>
 8001620:	6238      	str	r0, [r7, #32]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 8001622:	493d      	ldr	r1, [pc, #244]	; (8001718 <_ZN7RoboArm11Move2MotorsEff+0x270>)
 8001624:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001626:	f7ff fabd 	bl	8000ba4 <__aeabi_fmul>
 800162a:	4603      	mov	r3, r0
 800162c:	493b      	ldr	r1, [pc, #236]	; (800171c <_ZN7RoboArm11Move2MotorsEff+0x274>)
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb6c 	bl	8000d0c <__aeabi_fdiv>
 8001634:	4603      	mov	r3, r0
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc7a 	bl	8000f30 <__aeabi_f2uiz>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	651a      	str	r2, [r3, #80]	; 0x50
//	anglePsteps = anglePsteps+(anglePsteps*0.05);
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a39      	ldr	r1, [r7, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff faab 	bl	8000ba4 <__aeabi_fmul>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fc6d 	bl	8000f30 <__aeabi_f2uiz>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	64da      	str	r2, [r3, #76]	; 0x4c
//	lastPosLinear = distance;

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 30;
 800165c:	231e      	movs	r3, #30
 800165e:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72-1;
 8001660:	2347      	movs	r3, #71	; 0x47
 8001662:	61bb      	str	r3, [r7, #24]

	float delimiter=1;
 8001664:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001668:	617b      	str	r3, [r7, #20]
	float mnoj=1;
 800166a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800166e:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	429a      	cmp	r2, r3
 800167a:	d951      	bls.n	8001720 <_ZN7RoboArm11Move2MotorsEff+0x278>

		htim1M1->Instance->PSC = psc;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1/2;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	0852      	lsrs	r2, r2, #1
 800169a:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fa27 	bl	8000af4 <__aeabi_ui2f>
 80016a6:	4604      	mov	r4, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fa21 	bl	8000af4 <__aeabi_ui2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4619      	mov	r1, r3
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff fb28 	bl	8000d0c <__aeabi_fdiv>
 80016bc:	4603      	mov	r3, r0
 80016be:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 80016c0:	69f8      	ldr	r0, [r7, #28]
 80016c2:	f7ff fa17 	bl	8000af4 <__aeabi_ui2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	6979      	ldr	r1, [r7, #20]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fa6a 	bl	8000ba4 <__aeabi_fmul>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fe19 	bl	800130a <_ZSt4ceilf>
 80016d8:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	681c      	ldr	r4, [r3, #0]
 80016ea:	6938      	ldr	r0, [r7, #16]
 80016ec:	f7ff fc20 	bl	8000f30 <__aeabi_f2uiz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 80016f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016f8:	6938      	ldr	r0, [r7, #16]
 80016fa:	f7ff fb07 	bl	8000d0c <__aeabi_fdiv>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	681c      	ldr	r4, [r3, #0]
 8001708:	4610      	mov	r0, r2
 800170a:	f7ff fc11 	bl	8000f30 <__aeabi_f2uiz>
 800170e:	4603      	mov	r3, r0
 8001710:	63a3      	str	r3, [r4, #56]	; 0x38
 8001712:	e056      	b.n	80017c2 <_ZN7RoboArm11Move2MotorsEff+0x31a>
 8001714:	40768000 	.word	0x40768000
 8001718:	48480000 	.word	0x48480000
 800171c:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	429a      	cmp	r2, r3
 800172a:	d24a      	bcs.n	80017c2 <_ZN7RoboArm11Move2MotorsEff+0x31a>

		htim2M2->Instance->PSC = psc;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	0852      	lsrs	r2, r2, #1
 800174a:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f9cf 	bl	8000af4 <__aeabi_ui2f>
 8001756:	4604      	mov	r4, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff f9c9 	bl	8000af4 <__aeabi_ui2f>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fad0 	bl	8000d0c <__aeabi_fdiv>
 800176c:	4603      	mov	r3, r0
 800176e:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001770:	69f8      	ldr	r0, [r7, #28]
 8001772:	f7ff f9bf 	bl	8000af4 <__aeabi_ui2f>
 8001776:	4603      	mov	r3, r0
 8001778:	6979      	ldr	r1, [r7, #20]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa12 	bl	8000ba4 <__aeabi_fmul>
 8001780:	4603      	mov	r3, r0
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fdc1 	bl	800130a <_ZSt4ceilf>
 8001788:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	681c      	ldr	r4, [r3, #0]
 800179a:	6938      	ldr	r0, [r7, #16]
 800179c:	f7ff fbc8 	bl	8000f30 <__aeabi_f2uiz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 80017a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017a8:	6938      	ldr	r0, [r7, #16]
 80017aa:	f7ff faaf 	bl	8000d0c <__aeabi_fdiv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	681c      	ldr	r4, [r3, #0]
 80017b8:	4610      	mov	r0, r2
 80017ba:	f7ff fbb9 	bl	8000f30 <__aeabi_f2uiz>
 80017be:	4603      	mov	r3, r0
 80017c0:	6363      	str	r3, [r4, #52]	; 0x34
//		htim1M1->Instance->PSC = psc;
//		htim1M1->Instance->ARR = mnoj;
//		htim1M1->Instance->CCR1 = mnoj / 2;
//	}

	stateMoveM1 = true;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	stateMoveM2 = true;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

	SetEnable(1, true);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2101      	movs	r1, #1
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 fb0e 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 80017dc:	2201      	movs	r2, #1
 80017de:	2102      	movs	r1, #2
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 fb09 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fb93 	bl	8004f18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2104      	movs	r1, #4
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fb8d 	bl	8004f18 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fabe 	bl	8004d84 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fab9 	bl	8004d84 <HAL_TIM_Base_Start_IT>

	return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	373c      	adds	r7, #60	; 0x3c
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}

0800181c <_ZN7RoboArm13SetBuserStateEi>:

int RoboArm::SetBuserState(int State){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
    //State 1......9
    if (State > 0 && State < 10)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	dd24      	ble.n	8001876 <_ZN7RoboArm13SetBuserStateEi+0x5a>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2b09      	cmp	r3, #9
 8001830:	dc21      	bgt.n	8001876 <_ZN7RoboArm13SetBuserStateEi+0x5a>
    {
        for (int t = 0; t <= State; t++)
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e01a      	b.n	800186e <_ZN7RoboArm13SetBuserStateEi+0x52>
        {
            for (int i = 0; i <= 200; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	e00e      	b.n	800185c <_ZN7RoboArm13SetBuserStateEi+0x40>
            {
                HAL_GPIO_TogglePin(Buser_GPIO_Port_Ind, Buser_Pin_Ind);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f002 fa1e 	bl	8003c8c <HAL_GPIO_TogglePin>
                HAL_Delay(1);
 8001850:	2001      	movs	r0, #1
 8001852:	f001 fea3 	bl	800359c <HAL_Delay>
            for (int i = 0; i <= 200; i++)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3301      	adds	r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2bc8      	cmp	r3, #200	; 0xc8
 8001860:	dded      	ble.n	800183e <_ZN7RoboArm13SetBuserStateEi+0x22>
            }
            HAL_Delay(100);
 8001862:	2064      	movs	r0, #100	; 0x64
 8001864:	f001 fe9a 	bl	800359c <HAL_Delay>
        for (int t = 0; t <= State; t++)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3301      	adds	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	dde0      	ble.n	8001838 <_ZN7RoboArm13SetBuserStateEi+0x1c>
        }
    }
    return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZN7RoboArm10SetGripperEi>:
	posNowDistance = defaultDistanse;

	return 0;
}

int RoboArm::SetGripper(int opcl) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]

	//Встановити захват
	//TODO додати перевірку чи точно зупинились мотори
	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fbdd 	bl	8005050 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2104      	movs	r1, #4
 800189c:	4618      	mov	r0, r3
 800189e:	f003 fbd7 	bl	8005050 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fab8 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fab3 	bl	8004e1c <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_2);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2104      	movs	r1, #4
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fbc7 	bl	8005050 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim3M3);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 faa8 	bl	8004e1c <HAL_TIM_Base_Stop_IT>

	SetEnable(3, false);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2103      	movs	r1, #3
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fa91 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>

	//Зупинили все, 1 та 2й на утриманні
	//Обираэмо напрям
	if (opcl == 1) {
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d108      	bne.n	80018ee <_ZN7RoboArm10SetGripperEi+0x6e>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_SET);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	2201      	movs	r2, #1
 80018e6:	4619      	mov	r1, r3
 80018e8:	f002 f9b8 	bl	8003c5c <HAL_GPIO_WritePin>
 80018ec:	e00a      	b.n	8001904 <_ZN7RoboArm10SetGripperEi+0x84>
	} else if (opcl == 0) {
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d107      	bne.n	8001904 <_ZN7RoboArm10SetGripperEi+0x84>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_RESET);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	f002 f9ac 	bl	8003c5c <HAL_GPIO_WritePin>
	}

	//Підібрати кроки та швидкість
	float periodM3 = 60.00;
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <_ZN7RoboArm10SetGripperEi+0xf0>)
 8001906:	60fb      	str	r3, [r7, #12]
	uint32_t psc3 = 72 - 1;
 8001908:	2347      	movs	r3, #71	; 0x47
 800190a:	60bb      	str	r3, [r7, #8]
	htim3M3->Instance->PSC = psc3;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
	htim3M3->Instance->ARR = periodM3;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	681c      	ldr	r4, [r3, #0]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fb07 	bl	8000f30 <__aeabi_f2uiz>
 8001922:	4603      	mov	r3, r0
 8001924:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3M3->Instance->CCR2 = periodM3 / 2;
 8001926:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff f9ee 	bl	8000d0c <__aeabi_fdiv>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	681c      	ldr	r4, [r3, #0]
 800193a:	4610      	mov	r0, r2
 800193c:	f7ff faf8 	bl	8000f30 <__aeabi_f2uiz>
 8001940:	4603      	mov	r3, r0
 8001942:	63a3      	str	r3, [r4, #56]	; 0x38

	SetEnable(3, true);
 8001944:	2201      	movs	r2, #1
 8001946:	2103      	movs	r1, #3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fa55 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
	HAL_TIM_PWM_Start(htim3M3, TIM_CHANNEL_2);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2104      	movs	r1, #4
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fadf 	bl	8004f18 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim3M3);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fa10 	bl	8004d84 <HAL_TIM_Base_Start_IT>
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}
 800196e:	bf00      	nop
 8001970:	42700000 	.word	0x42700000

08001974 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::setPrintState(bool state) {
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 800198e:	e003      	b.n	8001998 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
	}
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 80019ba:	2300      	movs	r3, #0
	}
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <_ZN7RoboArm17SetMicrosteps4AllEh>:


int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step){
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	33a4      	adds	r3, #164	; 0xa4
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 faa6 	bl	8001f2c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	33cc      	adds	r3, #204	; 0xcc
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fa9f 	bl	8001f2c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	337c      	adds	r3, #124	; 0x7c
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fa98 	bl	8001f2c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	661a      	str	r2, [r3, #96]	; 0x60
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	669a      	str	r2, [r3, #104]	; 0x68
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8bba      	ldrh	r2, [r7, #28]
 8001a2c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	671a      	str	r2, [r3, #112]	; 0x70
	ResolutionEncoders = ResolutionEncodersT;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f7ff fb72 	bl	800114c <calculateAngle>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <_ZN7RoboArm14GetLinEncodersEf>:

float RoboArm::GetLinEncoders(float ang) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
	float pos;
	if (inverseLinZero){
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <_ZN7RoboArm14GetLinEncodersEf+0x26>
		ang = abs(360-ang);
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <_ZN7RoboArm14GetLinEncodersEf+0x4c>)
 8001a8c:	f7fe ff80 	bl	8000990 <__aeabi_fsub>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fc2d 	bl	80012f2 <_ZSt3absf>
 8001a98:	6038      	str	r0, [r7, #0]
	}
	pos = ang * distMax / 360.0;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f87f 	bl	8000ba4 <__aeabi_fmul>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4905      	ldr	r1, [pc, #20]	; (8001ac0 <_ZN7RoboArm14GetLinEncodersEf+0x4c>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f92e 	bl	8000d0c <__aeabi_fdiv>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60fb      	str	r3, [r7, #12]
	return pos;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	43b40000 	.word	0x43b40000

08001ac4 <_ZN7RoboArm14GetPosEncodersEh>:

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d002      	beq.n	8001adc <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d013      	beq.n	8001b02 <_ZN7RoboArm14GetPosEncodersEh+0x3e>
 8001ada:	e025      	b.n	8001b28 <_ZN7RoboArm14GetPosEncodersEh+0x64>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001af0:	f7ff fa7c 	bl	8000fec <getPositionSPI>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	675a      	str	r2, [r3, #116]	; 0x74
				ResolutionEncoders);
		return posNowEnc1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b00:	e013      	b.n	8001b2a <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b16:	f7ff fa69 	bl	8000fec <getPositionSPI>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	679a      	str	r2, [r3, #120]	; 0x78
				ResolutionEncoders);
		return posNowEnc2;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b26:	e000      	b.n	8001b2a <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	default:
		return 1;
 8001b28:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_ZN7RoboArm6GetLinEv>:

float RoboArm::GetLin() {
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b088      	sub	sp, #32
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001b3e:	2102      	movs	r1, #2
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ffbf 	bl	8001ac4 <_ZN7RoboArm14GetPosEncodersEh>
 8001b46:	61b8      	str	r0, [r7, #24]
	while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8001b48:	e004      	b.n	8001b54 <_ZN7RoboArm6GetLinEv+0x22>
		posnowT_2 = GetPosEncoders(2); //try again
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ffb9 	bl	8001ac4 <_ZN7RoboArm14GetPosEncodersEh>
 8001b52:	61b8      	str	r0, [r7, #24]
	while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d107      	bne.n	8001b6e <_ZN7RoboArm6GetLinEv+0x3c>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	dc01      	bgt.n	8001b6e <_ZN7RoboArm6GetLinEv+0x3c>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZN7RoboArm6GetLinEv+0x3e>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ea      	bne.n	8001b4a <_ZN7RoboArm6GetLinEv+0x18>

//	if (posnowT_2 == 0xFFFF) {
//		return -1;
//	}

	float ang_pos = GetAngleEncoders(posnowT_2);
 8001b74:	69b9      	ldr	r1, [r7, #24]
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ff68 	bl	8001a4c <_ZN7RoboArm16GetAngleEncodersEm>
 8001b7c:	6138      	str	r0, [r7, #16]
	float pos_actual = GetLinEncoders(ang_pos);
 8001b7e:	6939      	ldr	r1, [r7, #16]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff77 	bl	8001a74 <_ZN7RoboArm14GetLinEncodersEf>
 8001b86:	60f8      	str	r0, [r7, #12]
	float pos = pos_actual + defaultDistanse;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7fe feff 	bl	8000994 <__addsf3>
 8001b96:	4603      	mov	r3, r0
 8001b98:	617b      	str	r3, [r7, #20]
	if (pos > distMax)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	6978      	ldr	r0, [r7, #20]
 8001ba2:	f7ff f9bb 	bl	8000f1c <__aeabi_fcmpgt>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <_ZN7RoboArm6GetLinEv+0x8a>
		pos -= distMax;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7fe feec 	bl	8000990 <__aeabi_fsub>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	617b      	str	r3, [r7, #20]

	return pos;
 8001bbc:	697b      	ldr	r3, [r7, #20]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <_ZN7RoboArm6GetAngEv>:

float RoboArm::GetAng() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff74 	bl	8001ac4 <_ZN7RoboArm14GetPosEncodersEh>
 8001bdc:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8001bde:	e004      	b.n	8001bea <_ZN7RoboArm6GetAngEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001be0:	2101      	movs	r1, #1
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff6e 	bl	8001ac4 <_ZN7RoboArm14GetPosEncodersEh>
 8001be8:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d107      	bne.n	8001c04 <_ZN7RoboArm6GetAngEv+0x3c>
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	dc01      	bgt.n	8001c04 <_ZN7RoboArm6GetAngEv+0x3c>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <_ZN7RoboArm6GetAngEv+0x3e>
 8001c04:	2300      	movs	r3, #0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1ea      	bne.n	8001be0 <_ZN7RoboArm6GetAngEv+0x18>

//	if (posnowT_1 == 0xFFFF) {
//			return -1;
//	}

	float ang_actual = GetAngleEncoders(posnowT_1);
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff1d 	bl	8001a4c <_ZN7RoboArm16GetAngleEncodersEm>
 8001c12:	60b8      	str	r0, [r7, #8]
	float ang = ang_actual + defaultAngle;//arm.ShiftZeroAng(ang_actual);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	68b8      	ldr	r0, [r7, #8]
 8001c1e:	f7fe feb9 	bl	8000994 <__addsf3>
 8001c22:	4603      	mov	r3, r0
 8001c24:	60fb      	str	r3, [r7, #12]
	if (ang > 360.0)
 8001c26:	4909      	ldr	r1, [pc, #36]	; (8001c4c <_ZN7RoboArm6GetAngEv+0x84>)
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff f977 	bl	8000f1c <__aeabi_fcmpgt>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <_ZN7RoboArm6GetAngEv+0x78>
			ang -= 360.0;
 8001c34:	4905      	ldr	r1, [pc, #20]	; (8001c4c <_ZN7RoboArm6GetAngEv+0x84>)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7fe feaa 	bl	8000990 <__aeabi_fsub>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60fb      	str	r3, [r7, #12]
	return ang;
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	43b40000 	.word	0x43b40000

08001c50 <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	HAL_Delay(300);
 8001c58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c5c:	f001 fc9e 	bl	800359c <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c74:	f7ff f9ba 	bl	8000fec <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c8c:	f7ff f9ae 	bl	8000fec <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f7ff fa32 	bl	8001108 <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f7ff fa28 	bl	8001108 <setZeroSPI>
	HAL_Delay(250);
 8001cb8:	20fa      	movs	r0, #250	; 0xfa
 8001cba:	f001 fc6f 	bl	800359c <HAL_Delay>
	return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>:
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *Dir3_GPIO_Port_M3T, uint16_t Dir3_Pin_M3T,
		GPIO_TypeDef *En1_GPIO_Port_M1T, uint16_t En1_Pin_M1T,
		GPIO_TypeDef *En2_GPIO_Port_M2T, uint16_t En2_Pin_M2T,
		GPIO_TypeDef *En3_GPIO_Port_M3T, uint16_t En3_Pin_M3T,
		GPIO_TypeDef *Buser_GPIO_Port_IndT, uint16_t Buser_Pin_IndT){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	609a      	str	r2, [r3, #8]
	htim3M3 = &htim3;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	60da      	str	r2, [r3, #12]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8c3a      	ldrh	r2, [r7, #32]
 8001cf2:	831a      	strh	r2, [r3, #24]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	61da      	str	r2, [r3, #28]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cfe:	841a      	strh	r2, [r3, #32]
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001d0a:	851a      	strh	r2, [r3, #40]	; 0x28

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
	En1_Pin_M1 = En1_Pin_M1T;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001d16:	861a      	strh	r2, [r3, #48]	; 0x30
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d1c:	635a      	str	r2, [r3, #52]	; 0x34
	En2_Pin_M2 = En2_Pin_M2T;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001d24:	871a      	strh	r2, [r3, #56]	; 0x38
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
	En3_Pin_M3 = En3_Pin_M3T;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001d32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	En3_Pin_M3 = En3_Pin_M3T;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001d42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	Buser_GPIO_Port_Ind = Buser_GPIO_Port_IndT;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d4a:	645a      	str	r2, [r3, #68]	; 0x44
	Buser_Pin_Ind = Buser_Pin_IndT;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	SetEnable(1, true);
 8001d56:	2201      	movs	r2, #1
 8001d58:	2101      	movs	r1, #1
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f84c 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001d60:	2201      	movs	r2, #1
 8001d62:	2102      	movs	r1, #2
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f847 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f842 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	f000 f88e 	bl	8001ea2 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_2);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d92:	68b9      	ldr	r1, [r7, #8]
 8001d94:	f000 f885 	bl	8001ea2 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_1);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	f000 f87c 	bl	8001ea2 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	33a4      	adds	r3, #164	; 0xa4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f88c 	bl	8001ecc <_ZN7TMC22096enableEv>

//	tmcd_angle.disableAutomaticCurrentScaling();
//	tmcd_angle.disableAutomaticGradientAdaptation();

	tmcd_gripper.enable();
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	33cc      	adds	r3, #204	; 0xcc
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 f887 	bl	8001ecc <_ZN7TMC22096enableEv>

//	tmcd_gripper.disableAutomaticCurrentScaling();
//	tmcd_gripper.disableAutomaticGradientAdaptation();

	tmcd_linear.enable();
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	337c      	adds	r3, #124	; 0x7c
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f882 	bl	8001ecc <_ZN7TMC22096enableEv>

//	tmcd_linear.disableAutomaticCurrentScaling();
//	tmcd_linear.disableAutomaticGradientAdaptation();

	SetMicrosteps4All(7);
 8001dc8:	2107      	movs	r1, #7
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fdfb 	bl	80019c6 <_ZN7RoboArm17SetMicrosteps4AllEh>



	SetEnable(1, false);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f80f 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2102      	movs	r1, #2
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f80a 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, false);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2103      	movs	r1, #3
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f805 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>

	return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e001      	b.n	8001e18 <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f001 ff17 	bl	8003c5c <HAL_GPIO_WritePin>
 8001e2e:	e017      	b.n	8001e60 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 2) {
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d108      	bne.n	8001e48 <_ZN7RoboArm9SetEnableEtb+0x50>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f001 ff0b 	bl	8003c5c <HAL_GPIO_WritePin>
 8001e46:	e00b      	b.n	8001e60 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 3) {
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d108      	bne.n	8001e60 <_ZN7RoboArm9SetEnableEtb+0x68>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f001 fefe 	bl	8003c5c <HAL_GPIO_WritePin>
	}

	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2203      	movs	r2, #3
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2203      	movs	r2, #3
 8001e86:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8e:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	761a      	strb	r2, [r3, #24]
}
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f8b7 	bl	8002030 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <_ZN7TMC22096enableEv>:
//
////  pinMode(hardware_enable_pin_, OUTPUT);
////  digitalWrite(hardware_enable_pin_, HIGH);
//}
//
void TMC2209::enable() {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db0f      	blt.n	8001efe <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	4810      	ldr	r0, [pc, #64]	; (8001f24 <_ZN7TMC22096enableEv+0x58>)
 8001ee4:	f001 feba 	bl	8003c5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2101      	movs	r1, #1
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <_ZN7TMC22096enableEv+0x58>)
 8001eee:	f001 feb5 	bl	8003c5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <_ZN7TMC22096enableEv+0x5c>)
 8001efa:	f001 feaf 	bl	8003c5c <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	b2d9      	uxtb	r1, r3
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	7f13      	ldrb	r3, [r2, #28]
 8001f0e:	f361 0303 	bfi	r3, r1, #0, #4
 8001f12:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f9b8 	bl	800228a <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40010800 	.word	0x40010800
 8001f28:	40010c00 	.word	0x40010c00

08001f2c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
//		++exponent;
//	}
//	setMicrostepsPerStepPowerOfTwo(exponent);
//}
//
void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	d84a      	bhi.n	8001fd4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f65 	.word	0x08001f65
 8001f48:	08001f73 	.word	0x08001f73
 8001f4c:	08001f81 	.word	0x08001f81
 8001f50:	08001f8f 	.word	0x08001f8f
 8001f54:	08001f9d 	.word	0x08001f9d
 8001f58:	08001fab 	.word	0x08001fab
 8001f5c:	08001fb9 	.word	0x08001fb9
 8001f60:	08001fc7 	.word	0x08001fc7
	case 0: {
		chopper_config_.mres = MRES_001;
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	7fd3      	ldrb	r3, [r2, #31]
 8001f68:	2108      	movs	r1, #8
 8001f6a:	f361 0303 	bfi	r3, r1, #0, #4
 8001f6e:	77d3      	strb	r3, [r2, #31]
		break;
 8001f70:	e036      	b.n	8001fe0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	7fd3      	ldrb	r3, [r2, #31]
 8001f76:	2107      	movs	r1, #7
 8001f78:	f361 0303 	bfi	r3, r1, #0, #4
 8001f7c:	77d3      	strb	r3, [r2, #31]
		break;
 8001f7e:	e02f      	b.n	8001fe0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	7fd3      	ldrb	r3, [r2, #31]
 8001f84:	2106      	movs	r1, #6
 8001f86:	f361 0303 	bfi	r3, r1, #0, #4
 8001f8a:	77d3      	strb	r3, [r2, #31]
		break;
 8001f8c:	e028      	b.n	8001fe0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	7fd3      	ldrb	r3, [r2, #31]
 8001f92:	2105      	movs	r1, #5
 8001f94:	f361 0303 	bfi	r3, r1, #0, #4
 8001f98:	77d3      	strb	r3, [r2, #31]
		break;
 8001f9a:	e021      	b.n	8001fe0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	7fd3      	ldrb	r3, [r2, #31]
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	f361 0303 	bfi	r3, r1, #0, #4
 8001fa6:	77d3      	strb	r3, [r2, #31]
		break;
 8001fa8:	e01a      	b.n	8001fe0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	7fd3      	ldrb	r3, [r2, #31]
 8001fae:	2103      	movs	r1, #3
 8001fb0:	f361 0303 	bfi	r3, r1, #0, #4
 8001fb4:	77d3      	strb	r3, [r2, #31]
		break;
 8001fb6:	e013      	b.n	8001fe0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	7fd3      	ldrb	r3, [r2, #31]
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	f361 0303 	bfi	r3, r1, #0, #4
 8001fc2:	77d3      	strb	r3, [r2, #31]
		break;
 8001fc4:	e00c      	b.n	8001fe0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	7fd3      	ldrb	r3, [r2, #31]
 8001fca:	2101      	movs	r1, #1
 8001fcc:	f361 0303 	bfi	r3, r1, #0, #4
 8001fd0:	77d3      	strb	r3, [r2, #31]
		break;
 8001fd2:	e005      	b.n	8001fe0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	7fd3      	ldrb	r3, [r2, #31]
 8001fd8:	f36f 0303 	bfc	r3, #0, #4
 8001fdc:	77d3      	strb	r3, [r2, #31]
		break;
 8001fde:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f952 	bl	800228a <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop

08001ff0 <_ZN7TMC220927enableInverseMotorDirectionEv>:
//	driver_current_.ihold = hold_current;
//	driver_current_.iholddelay = hold_delay;
//	writeStoredDriverCurrent();
//}
//
void TMC2209::enableInverseMotorDirection() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	7b13      	ldrb	r3, [r2, #12]
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f932 	bl	800226c <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	7b13      	ldrb	r3, [r2, #12]
 800201c:	f36f 03c3 	bfc	r3, #3, #1
 8002020:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f922 	bl	800226c <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
//	return read(ADDRESS_MSCNT);
//}
//
//// private
///* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	4619      	mov	r1, r3
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f807 	bl	800205c <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f82c 	bl	80020ac <_ZN7TMC220922setRegistersToDefaultsEv>
	//minimizeMotorCurrent();
//	setRunCurrent(100);
//	disable();
//	disableAutomaticCurrentScaling();
//	disableAutomaticGradientAdaptation();
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:
//
////	  tmcuart->RxXferCount = 0;
//
//}
//
void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	7b13      	ldrb	r3, [r2, #12]
 8002078:	f36f 0300 	bfc	r3, #0, #1
 800207c:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	7b13      	ldrb	r3, [r2, #12]
 8002082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002086:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	7b13      	ldrb	r3, [r2, #12]
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	7b53      	ldrb	r3, [r2, #13]
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f8e5 	bl	800226c <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	7c13      	ldrb	r3, [r2, #16]
 80020be:	2110      	movs	r1, #16
 80020c0:	f361 0304 	bfi	r3, r1, #0, #5
 80020c4:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	7c53      	ldrb	r3, [r2, #17]
 80020ca:	f043 031f 	orr.w	r3, r3, #31
 80020ce:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	7c93      	ldrb	r3, [r2, #18]
 80020d4:	2101      	movs	r1, #1
 80020d6:	f361 0303 	bfi	r3, r1, #0, #4
 80020da:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	461a      	mov	r2, r3
 80020e2:	2110      	movs	r1, #16
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f885 	bl	80021f4 <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2a      	ldr	r2, [pc, #168]	; (8002198 <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 80020ee:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	69d3      	ldr	r3, [r2, #28]
 80020f4:	2102      	movs	r1, #2
 80020f6:	f361 33d0 	bfi	r3, r1, #15, #2
 80020fa:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	8b93      	ldrh	r3, [r2, #28]
 8002100:	f36f 13ca 	bfc	r3, #7, #4
 8002104:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	7f13      	ldrb	r3, [r2, #28]
 800210a:	2105      	movs	r1, #5
 800210c:	f361 1306 	bfi	r3, r1, #4, #3
 8002110:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	7f13      	ldrb	r3, [r2, #28]
 8002116:	2103      	movs	r1, #3
 8002118:	f361 0303 	bfi	r3, r1, #0, #4
 800211c:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	461a      	mov	r2, r3
 8002124:	216c      	movs	r1, #108	; 0x6c
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f864 	bl	80021f4 <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a1b      	ldr	r2, [pc, #108]	; (800219c <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	461a      	mov	r2, r3
 8002138:	2170      	movs	r1, #112	; 0x70
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f85a 	bl	80021f4 <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	461a      	mov	r2, r3
 800214c:	2142      	movs	r1, #66	; 0x42
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f850 	bl	80021f4 <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002154:	2214      	movs	r2, #20
 8002156:	2111      	movs	r1, #17
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f84b 	bl	80021f4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 800215e:	2200      	movs	r2, #0
 8002160:	2113      	movs	r1, #19
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f846 	bl	80021f4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002168:	2200      	movs	r2, #0
 800216a:	2122      	movs	r1, #34	; 0x22
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f841 	bl	80021f4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8002172:	2200      	movs	r2, #0
 8002174:	2114      	movs	r1, #20
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f83c 	bl	80021f4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 800217c:	2200      	movs	r2, #0
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f837 	bl	80021f4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 8002186:	2200      	movs	r2, #0
 8002188:	2142      	movs	r1, #66	; 0x42
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f832 	bl	80021f4 <_ZN7TMC22095writeEhm>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	10000053 	.word	0x10000053
 800219c:	c10d0024 	.word	0xc10d0024

080021a0 <_ZN7TMC220911reverseDataEm>:
//	driver_current_.irun = CURRENT_SETTING_MIN;
//	driver_current_.ihold = CURRENT_SETTING_MIN;
//	writeStoredDriverCurrent();
//}
//
uint32_t TMC2209::reverseData(uint32_t data) {
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	72fb      	strb	r3, [r7, #11]
 80021b2:	e016      	b.n	80021e2 <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 80021b4:	7afb      	ldrb	r3, [r7, #11]
 80021b6:	f1c3 0303 	rsb	r3, r3, #3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 80021c6:	7abb      	ldrb	r3, [r7, #10]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	7a7b      	ldrb	r3, [r7, #9]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	3301      	adds	r3, #1
 80021e0:	72fb      	strb	r3, [r7, #11]
 80021e2:	7afb      	ldrb	r3, [r7, #11]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d9e5      	bls.n	80021b4 <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <_ZN7TMC22095writeEhm>:
//	for (uint8_t i = 0; i < datagram_size; ++i) {
//		byte = serialRead();
//	}*/
//}
//
void TMC2209::write(uint8_t register_address, uint32_t data) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	460b      	mov	r3, r1
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 800220e:	7c3b      	ldrb	r3, [r7, #16]
 8002210:	2205      	movs	r2, #5
 8002212:	f362 0303 	bfi	r3, r2, #0, #4
 8002216:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	791b      	ldrb	r3, [r3, #4]
 800221c:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002224:	b2da      	uxtb	r2, r3
 8002226:	7cbb      	ldrb	r3, [r7, #18]
 8002228:	f362 0306 	bfi	r3, r2, #0, #7
 800222c:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 800222e:	7cbb      	ldrb	r3, [r7, #18]
 8002230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002234:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff ffb1 	bl	80021a0 <_ZN7TMC220911reverseDataEm>
 800223e:	4603      	mov	r3, r0
 8002240:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	2208      	movs	r2, #8
 800224a:	4619      	mov	r1, r3
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f82b 	bl	80022a8 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 8002252:	4603      	mov	r3, r0
 8002254:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	2208      	movs	r2, #8
 800225c:	4619      	mov	r1, r3
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f871 	bl	8002346 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_ZN7TMC220923writeStoredGlobalConfigEv>:
//uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
//	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
void TMC2209::writeStoredGlobalConfig() {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	461a      	mov	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ffb9 	bl	80021f4 <_ZN7TMC22095writeEhm>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_ZN7TMC220924writeStoredChopperConfigEv>:
//	if (cool_step_enabled_) {
//		write(ADDRESS_COOLCONF, cool_config_.bytes);
//	}
//}
//
void TMC2209::writeStoredChopperConfig() {
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	461a      	mov	r2, r3
 8002298:	216c      	movs	r1, #108	; 0x6c
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffaa 	bl	80021f4 <_ZN7TMC22095writeEhm>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 80022a8:	b4f0      	push	{r4, r5, r6, r7}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80022ba:	2300      	movs	r3, #0
 80022bc:	757b      	strb	r3, [r7, #21]
 80022be:	e037      	b.n	8002330 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	7d79      	ldrb	r1, [r7, #21]
 80022c8:	00c9      	lsls	r1, r1, #3
 80022ca:	f1c1 0620 	rsb	r6, r1, #32
 80022ce:	f1a1 0020 	sub.w	r0, r1, #32
 80022d2:	fa22 f401 	lsr.w	r4, r2, r1
 80022d6:	fa03 f606 	lsl.w	r6, r3, r6
 80022da:	4334      	orrs	r4, r6
 80022dc:	fa23 f000 	lsr.w	r0, r3, r0
 80022e0:	4304      	orrs	r4, r0
 80022e2:	fa23 f501 	lsr.w	r5, r3, r1
 80022e6:	4623      	mov	r3, r4
 80022e8:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 80022ea:	2300      	movs	r3, #0
 80022ec:	753b      	strb	r3, [r7, #20]
 80022ee:	e019      	b.n	8002324 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	09db      	lsrs	r3, r3, #7
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	7dbb      	ldrb	r3, [r7, #22]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	429a      	cmp	r2, r3
 8002300:	d007      	beq.n	8002312 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	b25b      	sxtb	r3, r3
 8002308:	f083 0307 	eor.w	r3, r3, #7
 800230c:	b25b      	sxtb	r3, r3
 800230e:	75fb      	strb	r3, [r7, #23]
 8002310:	e002      	b.n	8002318 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 8002318:	7dbb      	ldrb	r3, [r7, #22]
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 800231e:	7d3b      	ldrb	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	753b      	strb	r3, [r7, #20]
 8002324:	7d3b      	ldrb	r3, [r7, #20]
 8002326:	2b07      	cmp	r3, #7
 8002328:	d9e2      	bls.n	80022f0 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 800232a:	7d7b      	ldrb	r3, [r7, #21]
 800232c:	3301      	adds	r3, #1
 800232e:	757b      	strb	r3, [r7, #21]
 8002330:	7d7a      	ldrb	r2, [r7, #21]
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	3b01      	subs	r3, #1
 8002336:	429a      	cmp	r2, r3
 8002338:	dbc2      	blt.n	80022c0 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 800233a:	7dfb      	ldrb	r3, [r7, #23]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bcf0      	pop	{r4, r5, r6, r7}
 8002344:	4770      	bx	lr

08002346 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	4613      	mov	r3, r2
 8002352:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4618      	mov	r0, r3
 800235a:	f003 ff81 	bl	8006260 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6898      	ldr	r0, [r3, #8]
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	b29a      	uxth	r2, r3
 8002366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	f003 fc29 	bl	8005bc2 <HAL_UART_Transmit>
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b092      	sub	sp, #72	; 0x48
 800237c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800237e:	f001 f8ab 	bl	80034d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002382:	f000 f95d 	bl	8002640 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002386:	f000 fbad 	bl	8002ae4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800238a:	f000 fb4f 	bl	8002a2c <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 800238e:	f000 f9e5 	bl	800275c <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8002392:	f000 fa7b 	bl	800288c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8002396:	f000 fae1 	bl	800295c <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 800239a:	f000 fb75 	bl	8002a88 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 800239e:	f000 f9a1 	bl	80026e4 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim1);
 80023a2:	4892      	ldr	r0, [pc, #584]	; (80025ec <main+0x274>)
 80023a4:	f002 fc96 	bl	8004cd4 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim2);
 80023a8:	4891      	ldr	r0, [pc, #580]	; (80025f0 <main+0x278>)
 80023aa:	f002 fc93 	bl	8004cd4 <HAL_TIM_Base_Init>

  arm.SetSettMotors(huart2,htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b2:	930e      	str	r3, [sp, #56]	; 0x38
 80023b4:	4b8f      	ldr	r3, [pc, #572]	; (80025f4 <main+0x27c>)
 80023b6:	930d      	str	r3, [sp, #52]	; 0x34
 80023b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023bc:	930c      	str	r3, [sp, #48]	; 0x30
 80023be:	4b8e      	ldr	r3, [pc, #568]	; (80025f8 <main+0x280>)
 80023c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80023c2:	2301      	movs	r3, #1
 80023c4:	930a      	str	r3, [sp, #40]	; 0x28
 80023c6:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <main+0x27c>)
 80023c8:	9309      	str	r3, [sp, #36]	; 0x24
 80023ca:	2320      	movs	r3, #32
 80023cc:	9308      	str	r3, [sp, #32]
 80023ce:	4b89      	ldr	r3, [pc, #548]	; (80025f4 <main+0x27c>)
 80023d0:	9307      	str	r3, [sp, #28]
 80023d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d6:	9306      	str	r3, [sp, #24]
 80023d8:	4b87      	ldr	r3, [pc, #540]	; (80025f8 <main+0x280>)
 80023da:	9305      	str	r3, [sp, #20]
 80023dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e0:	9304      	str	r3, [sp, #16]
 80023e2:	4b85      	ldr	r3, [pc, #532]	; (80025f8 <main+0x280>)
 80023e4:	9303      	str	r3, [sp, #12]
 80023e6:	2340      	movs	r3, #64	; 0x40
 80023e8:	9302      	str	r3, [sp, #8]
 80023ea:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <main+0x27c>)
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	4b83      	ldr	r3, [pc, #524]	; (80025fc <main+0x284>)
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <main+0x278>)
 80023f4:	4a7d      	ldr	r2, [pc, #500]	; (80025ec <main+0x274>)
 80023f6:	4982      	ldr	r1, [pc, #520]	; (8002600 <main+0x288>)
 80023f8:	4882      	ldr	r0, [pc, #520]	; (8002604 <main+0x28c>)
 80023fa:	f7ff fc65 	bl	8001cc8 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>
		  Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
		  En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin,
		  Buser_GPIO_Port, Buser_Pin);

  arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 80023fe:	230e      	movs	r3, #14
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	2302      	movs	r3, #2
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <main+0x280>)
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2301      	movs	r3, #1
 800240c:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <main+0x280>)
 800240e:	497e      	ldr	r1, [pc, #504]	; (8002608 <main+0x290>)
 8002410:	487c      	ldr	r0, [pc, #496]	; (8002604 <main+0x28c>)
 8002412:	f7ff faf8 	bl	8001a06 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
		  14);
  un_now.params.hold = 0;
 8002416:	4b7d      	ldr	r3, [pc, #500]	; (800260c <main+0x294>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT (&huart1, str, 1);
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 800241c:	220c      	movs	r2, #12
 800241e:	497c      	ldr	r1, [pc, #496]	; (8002610 <main+0x298>)
 8002420:	487c      	ldr	r0, [pc, #496]	; (8002614 <main+0x29c>)
 8002422:	f003 fc51 	bl	8005cc8 <HAL_UART_Receive_IT>
  arm.setPrintState(true);
 8002426:	2101      	movs	r1, #1
 8002428:	4876      	ldr	r0, [pc, #472]	; (8002604 <main+0x28c>)
 800242a:	f7ff faa3 	bl	8001974 <_ZN7RoboArm13setPrintStateEb>

  arm.SetBuserState(8);
 800242e:	2108      	movs	r1, #8
 8002430:	4874      	ldr	r0, [pc, #464]	; (8002604 <main+0x28c>)
 8002432:	f7ff f9f3 	bl	800181c <_ZN7RoboArm13SetBuserStateEi>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 8002436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800243a:	486f      	ldr	r0, [pc, #444]	; (80025f8 <main+0x280>)
 800243c:	f001 fc26 	bl	8003c8c <HAL_GPIO_TogglePin>
	  }

//	  HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);

	  //початок руху
	  if (startFirstMove) {
 8002440:	4b75      	ldr	r3, [pc, #468]	; (8002618 <main+0x2a0>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d024      	beq.n	8002492 <main+0x11a>
		  startFirstMove = false;
 8002448:	4b73      	ldr	r3, [pc, #460]	; (8002618 <main+0x2a0>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]

		  //якщо зачеп зачеплений, перед початком руху його відпустити
		  if (un_now.params.hold != 0){
 800244e:	4b6f      	ldr	r3, [pc, #444]	; (800260c <main+0x294>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <main+0xf2>
			  allowMove = false; //= зачеп зачеплений
 8002456:	4b71      	ldr	r3, [pc, #452]	; (800261c <main+0x2a4>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
			  un_now.params.hold = 0;
 800245c:	4b6b      	ldr	r3, [pc, #428]	; (800260c <main+0x294>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
			  arm.SetGripper(0);
 8002462:	2100      	movs	r1, #0
 8002464:	4867      	ldr	r0, [pc, #412]	; (8002604 <main+0x28c>)
 8002466:	f7ff fa0b 	bl	8001880 <_ZN7RoboArm10SetGripperEi>
		  }
		  //поки не відпустили зачеп повністю, чекаємо
		  while (!allowMove) {}
 800246a:	bf00      	nop
 800246c:	4b6b      	ldr	r3, [pc, #428]	; (800261c <main+0x2a4>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f8      	bne.n	800246c <main+0xf4>
		  //починаємо рух
		  if (allowMove) {
 800247a:	4b68      	ldr	r3, [pc, #416]	; (800261c <main+0x2a4>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <main+0x11a>
			  arm.Move2Motors(un_to.params.ang, un_to.params.lin);
 8002482:	4b67      	ldr	r3, [pc, #412]	; (8002620 <main+0x2a8>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a66      	ldr	r2, [pc, #408]	; (8002620 <main+0x2a8>)
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	4619      	mov	r1, r3
 800248c:	485d      	ldr	r0, [pc, #372]	; (8002604 <main+0x28c>)
 800248e:	f7ff f80b 	bl	80014a8 <_ZN7RoboArm11Move2MotorsEff>
////			  arm.MoveCorrectPosition(un_to.params.ang, un_to.params.lin);
//		  }
//	  }

	  //обидва мотори доїхали
	  if (timerFT1 && timerFT2) {
 8002492:	4b64      	ldr	r3, [pc, #400]	; (8002624 <main+0x2ac>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d041      	beq.n	800251e <main+0x1a6>
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <main+0x2b0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d03d      	beq.n	800251e <main+0x1a6>
		  timerFT1 = false;
 80024a2:	4b60      	ldr	r3, [pc, #384]	; (8002624 <main+0x2ac>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
		  timerFT2 = false;
 80024a8:	4b5f      	ldr	r3, [pc, #380]	; (8002628 <main+0x2b0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
		  un_now.params.lin = un_to.params.lin;
 80024ae:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <main+0x2a8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a56      	ldr	r2, [pc, #344]	; (800260c <main+0x294>)
 80024b4:	6013      	str	r3, [r2, #0]
		  un_now.params.ang = un_to.params.ang;
 80024b6:	4b5a      	ldr	r3, [pc, #360]	; (8002620 <main+0x2a8>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a54      	ldr	r2, [pc, #336]	; (800260c <main+0x294>)
 80024bc:	6053      	str	r3, [r2, #4]

		  //виставляємо зачеп у потрібну позицію
		  if (un_now.params.hold != un_to.params.hold) {
 80024be:	4b53      	ldr	r3, [pc, #332]	; (800260c <main+0x294>)
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	4b57      	ldr	r3, [pc, #348]	; (8002620 <main+0x2a8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d00c      	beq.n	80024e4 <main+0x16c>
			  gripperMoveFinished = false;
 80024ca:	4b58      	ldr	r3, [pc, #352]	; (800262c <main+0x2b4>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
			  un_now.params.hold = un_to.params.hold;
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <main+0x2a8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a4d      	ldr	r2, [pc, #308]	; (800260c <main+0x294>)
 80024d6:	6093      	str	r3, [r2, #8]
			  arm.SetGripper(un_to.params.hold);
 80024d8:	4b51      	ldr	r3, [pc, #324]	; (8002620 <main+0x2a8>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4619      	mov	r1, r3
 80024de:	4849      	ldr	r0, [pc, #292]	; (8002604 <main+0x28c>)
 80024e0:	f7ff f9ce 	bl	8001880 <_ZN7RoboArm10SetGripperEi>
		  }
		  //поки зачеп не доїхав у 0 чи 1, чекаємо
		  while (!gripperMoveFinished) {}
 80024e4:	bf00      	nop
 80024e6:	4b51      	ldr	r3, [pc, #324]	; (800262c <main+0x2b4>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	f083 0301 	eor.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f8      	bne.n	80024e6 <main+0x16e>
		  //зачеп доїхав - відправляємо до малини "все ок"
		  if (gripperMoveFinished) {
 80024f4:	4b4d      	ldr	r3, [pc, #308]	; (800262c <main+0x2b4>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <main+0x1a6>
			  un_send.params.lin = 0;
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <main+0x2b8>)
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
			  un_send.params.ang = 0;
 8002504:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <main+0x2b8>)
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	605a      	str	r2, [r3, #4]
			  un_send.params.hold = 10;
 800250c:	4b48      	ldr	r3, [pc, #288]	; (8002630 <main+0x2b8>)
 800250e:	220a      	movs	r2, #10
 8002510:	609a      	str	r2, [r3, #8]
			  HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002512:	230c      	movs	r3, #12
 8002514:	220c      	movs	r2, #12
 8002516:	4946      	ldr	r1, [pc, #280]	; (8002630 <main+0x2b8>)
 8002518:	483e      	ldr	r0, [pc, #248]	; (8002614 <main+0x29c>)
 800251a:	f003 fb52 	bl	8005bc2 <HAL_UART_Transmit>
		  }

	  }

	  //запит на читання координат
	  if (arm.getPrintState() && sendDataFlag) {
 800251e:	4839      	ldr	r0, [pc, #228]	; (8002604 <main+0x28c>)
 8002520:	f7ff fa40 	bl	80019a4 <_ZN7RoboArm13getPrintStateEv>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <main+0x1be>
 800252a:	4b42      	ldr	r3, [pc, #264]	; (8002634 <main+0x2bc>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <main+0x1be>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <main+0x1c0>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01d      	beq.n	8002578 <main+0x200>
		  sendDataFlag = false;
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <main+0x2bc>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]

		  float lin = arm.GetLin();
 8002542:	4830      	ldr	r0, [pc, #192]	; (8002604 <main+0x28c>)
 8002544:	f7ff faf5 	bl	8001b32 <_ZN7RoboArm6GetLinEv>
 8002548:	6078      	str	r0, [r7, #4]
		  un_send.params.lin = lin;
 800254a:	4a39      	ldr	r2, [pc, #228]	; (8002630 <main+0x2b8>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6013      	str	r3, [r2, #0]
//		  un_send.params.lin = arm.ShiftZeroLin(lin); //це для АМТ223С-V
		  HAL_Delay(1);
 8002550:	2001      	movs	r0, #1
 8002552:	f001 f823 	bl	800359c <HAL_Delay>

		  float ang = arm.GetAng();
 8002556:	482b      	ldr	r0, [pc, #172]	; (8002604 <main+0x28c>)
 8002558:	f7ff fb36 	bl	8001bc8 <_ZN7RoboArm6GetAngEv>
 800255c:	6038      	str	r0, [r7, #0]
		  un_send.params.ang = ang;
 800255e:	4a34      	ldr	r2, [pc, #208]	; (8002630 <main+0x2b8>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6053      	str	r3, [r2, #4]
//		  un_send.params.ang = arm.ShiftZeroAng(ang); //це для АМТ223С-V

		  un_send.params.hold = un_now.params.hold;
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <main+0x294>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a31      	ldr	r2, [pc, #196]	; (8002630 <main+0x2b8>)
 800256a:	6093      	str	r3, [r2, #8]

		  HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 800256c:	230c      	movs	r3, #12
 800256e:	220c      	movs	r2, #12
 8002570:	492f      	ldr	r1, [pc, #188]	; (8002630 <main+0x2b8>)
 8002572:	4828      	ldr	r0, [pc, #160]	; (8002614 <main+0x29c>)
 8002574:	f003 fb25 	bl	8005bc2 <HAL_UART_Transmit>
				  12);

	  }

	  //екстренна зупинка
	  if (stopHand) {
 8002578:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <main+0x2c0>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d016      	beq.n	80025ae <main+0x236>
		  stopHand = false;
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <main+0x2c0>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
		  arm.EmergencyStop();
 8002586:	481f      	ldr	r0, [pc, #124]	; (8002604 <main+0x28c>)
 8002588:	f7fe ff4a 	bl	8001420 <_ZN7RoboArm13EmergencyStopEv>

		  //відправляємо "все ок" до малини
		  un_send.params.lin = 0;
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <main+0x2b8>)
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
		  un_send.params.ang = 0;
 8002594:	4b26      	ldr	r3, [pc, #152]	; (8002630 <main+0x2b8>)
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
		  un_send.params.hold = 10;
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <main+0x2b8>)
 800259e:	220a      	movs	r2, #10
 80025a0:	609a      	str	r2, [r3, #8]
		  HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80025a2:	230c      	movs	r3, #12
 80025a4:	220c      	movs	r2, #12
 80025a6:	4922      	ldr	r1, [pc, #136]	; (8002630 <main+0x2b8>)
 80025a8:	481a      	ldr	r0, [pc, #104]	; (8002614 <main+0x29c>)
 80025aa:	f003 fb0a 	bl	8005bc2 <HAL_UART_Transmit>
				  12);
	  }

	  //встановлення нуля
	  if (setZeroFlag) {
 80025ae:	4b23      	ldr	r3, [pc, #140]	; (800263c <main+0x2c4>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <main+0x26c>
		  setZeroFlag = false;
 80025b6:	4b21      	ldr	r3, [pc, #132]	; (800263c <main+0x2c4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
		  arm.SetZeroEncoders();
 80025bc:	4811      	ldr	r0, [pc, #68]	; (8002604 <main+0x28c>)
 80025be:	f7ff fb47 	bl	8001c50 <_ZN7RoboArm15SetZeroEncodersEv>
//		  arm.SetSoftwareZero();

		  //відправляємо "все ок" до малини
		  un_send.params.lin = 0;
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <main+0x2b8>)
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
		  un_send.params.ang = 0;
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <main+0x2b8>)
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
		  un_send.params.hold = 10;
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <main+0x2b8>)
 80025d4:	220a      	movs	r2, #10
 80025d6:	609a      	str	r2, [r3, #8]
		  HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80025d8:	230c      	movs	r3, #12
 80025da:	220c      	movs	r2, #12
 80025dc:	4914      	ldr	r1, [pc, #80]	; (8002630 <main+0x2b8>)
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <main+0x29c>)
 80025e0:	f003 faef 	bl	8005bc2 <HAL_UART_Transmit>
				  12);
	  }

	  HAL_Delay(10);
 80025e4:	200a      	movs	r0, #10
 80025e6:	f000 ffd9 	bl	800359c <HAL_Delay>
  }
 80025ea:	e724      	b.n	8002436 <main+0xbe>
 80025ec:	20000084 	.word	0x20000084
 80025f0:	200000cc 	.word	0x200000cc
 80025f4:	40010800 	.word	0x40010800
 80025f8:	40010c00 	.word	0x40010c00
 80025fc:	20000114 	.word	0x20000114
 8002600:	200001a4 	.word	0x200001a4
 8002604:	20000238 	.word	0x20000238
 8002608:	2000002c 	.word	0x2000002c
 800260c:	20000224 	.word	0x20000224
 8002610:	200001ec 	.word	0x200001ec
 8002614:	2000015c 	.word	0x2000015c
 8002618:	200001f8 	.word	0x200001f8
 800261c:	20000000 	.word	0x20000000
 8002620:	20000218 	.word	0x20000218
 8002624:	200001fc 	.word	0x200001fc
 8002628:	200001fd 	.word	0x200001fd
 800262c:	20000001 	.word	0x20000001
 8002630:	2000020c 	.word	0x2000020c
 8002634:	200001f9 	.word	0x200001f9
 8002638:	200001fa 	.word	0x200001fa
 800263c:	200001fb 	.word	0x200001fb

08002640 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b090      	sub	sp, #64	; 0x40
 8002644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002646:	f107 0318 	add.w	r3, r7, #24
 800264a:	2228      	movs	r2, #40	; 0x28
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f004 f94a 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002662:	2301      	movs	r3, #1
 8002664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002670:	2301      	movs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002674:	2302      	movs	r3, #2
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800267e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002684:	f107 0318 	add.w	r3, r7, #24
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fb31 	bl	8003cf0 <HAL_RCC_OscConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800269e:	f000 fc35 	bl	8002f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a2:	230f      	movs	r3, #15
 80026a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a6:	2302      	movs	r3, #2
 80026a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2102      	movs	r1, #2
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 fd99 	bl	80041f4 <HAL_RCC_ClockConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80026d2:	f000 fc1b 	bl	8002f0c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80026d6:	f001 fe77 	bl	80043c8 <HAL_RCC_EnableCSS>
}
 80026da:	bf00      	nop
 80026dc:	3740      	adds	r7, #64	; 0x40
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <_ZL12MX_SPI1_Initv>:
  * @param None HAL_Delay(1);
	      }
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <_ZL12MX_SPI1_Initv+0x74>)
 80026ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 80026f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 800270a:	2200      	movs	r2, #0
 800270c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 8002710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002714:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 8002718:	2218      	movs	r2, #24
 800271a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 800271e:	2200      	movs	r2, #0
 8002720:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 8002724:	2200      	movs	r2, #0
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 800272a:	2200      	movs	r2, #0
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 8002730:	220a      	movs	r2, #10
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002734:	4807      	ldr	r0, [pc, #28]	; (8002754 <_ZL12MX_SPI1_Initv+0x70>)
 8002736:	f001 fef7 	bl	8004528 <HAL_SPI_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800274a:	f000 fbdf 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000002c 	.word	0x2000002c
 8002758:	40013000 	.word	0x40013000

0800275c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b092      	sub	sp, #72	; 0x48
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002762:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
 800277c:	615a      	str	r2, [r3, #20]
 800277e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2220      	movs	r2, #32
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f004 f8ae 	bl	80068e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800278c:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 800278e:	4a3e      	ldr	r2, [pc, #248]	; (8002888 <_ZL12MX_TIM1_Initv+0x12c>)
 8002790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 8002794:	2248      	movs	r2, #72	; 0x48
 8002796:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002798:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 80027a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027ac:	4b35      	ldr	r3, [pc, #212]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b2:	4b34      	ldr	r3, [pc, #208]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027b8:	4832      	ldr	r0, [pc, #200]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 80027ba:	f002 fb5d 	bl	8004e78 <HAL_TIM_PWM_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80027ce:	f000 fb9d 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027de:	4619      	mov	r1, r3
 80027e0:	4828      	ldr	r0, [pc, #160]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 80027e2:	f003 f88b 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80027f6:	f000 fb89 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027fa:	2360      	movs	r3, #96	; 0x60
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002802:	2300      	movs	r3, #0
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002806:	2300      	movs	r3, #0
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281a:	2200      	movs	r2, #0
 800281c:	4619      	mov	r1, r3
 800281e:	4819      	ldr	r0, [pc, #100]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 8002820:	f002 fd82 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002834:	f000 fb6a 	bl	8002f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800284c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002850:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	4619      	mov	r1, r3
 800285a:	480a      	ldr	r0, [pc, #40]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 800285c:	f003 f8a6 	bl	80059ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8002870:	f000 fb4c 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002874:	4803      	ldr	r0, [pc, #12]	; (8002884 <_ZL12MX_TIM1_Initv+0x128>)
 8002876:	f000 fc87 	bl	8003188 <HAL_TIM_MspPostInit>

}
 800287a:	bf00      	nop
 800287c:	3748      	adds	r7, #72	; 0x48
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000084 	.word	0x20000084
 8002888:	40012c00 	.word	0x40012c00

0800288c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002892:	f107 0320 	add.w	r3, r7, #32
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]
 80028aa:	615a      	str	r2, [r3, #20]
 80028ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 80028b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80028b6:	4b28      	ldr	r3, [pc, #160]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 80028b8:	2248      	movs	r2, #72	; 0x48
 80028ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80028c2:	4b25      	ldr	r3, [pc, #148]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 80028c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028d6:	4820      	ldr	r0, [pc, #128]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 80028d8:	f002 face 	bl	8004e78 <HAL_TIM_PWM_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf14      	ite	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	2300      	moveq	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80028ec:	f000 fb0e 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f8:	f107 0320 	add.w	r3, r7, #32
 80028fc:	4619      	mov	r1, r3
 80028fe:	4816      	ldr	r0, [pc, #88]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 8002900:	f002 fffc 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8002914:	f000 fafa 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002918:	2360      	movs	r3, #96	; 0x60
 800291a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	2204      	movs	r2, #4
 800292c:	4619      	mov	r1, r3
 800292e:	480a      	ldr	r0, [pc, #40]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 8002930:	f002 fcfa 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8002944:	f000 fae2 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002948:	4803      	ldr	r0, [pc, #12]	; (8002958 <_ZL12MX_TIM2_Initv+0xcc>)
 800294a:	f000 fc1d 	bl	8003188 <HAL_TIM_MspPostInit>

}
 800294e:	bf00      	nop
 8002950:	3728      	adds	r7, #40	; 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200000cc 	.word	0x200000cc

0800295c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002962:	f107 0320 	add.w	r3, r7, #32
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	611a      	str	r2, [r3, #16]
 800297a:	615a      	str	r2, [r3, #20]
 800297c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 8002980:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <_ZL12MX_TIM3_Initv+0xcc>)
 8002982:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 8002986:	2248      	movs	r2, #72	; 0x48
 8002988:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 8002992:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002996:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029a4:	481f      	ldr	r0, [pc, #124]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 80029a6:	f002 fa67 	bl	8004e78 <HAL_TIM_PWM_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80029ba:	f000 faa7 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029c6:	f107 0320 	add.w	r3, r7, #32
 80029ca:	4619      	mov	r1, r3
 80029cc:	4815      	ldr	r0, [pc, #84]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 80029ce:	f002 ff95 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80029e2:	f000 fa93 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029e6:	2360      	movs	r3, #96	; 0x60
 80029e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	2204      	movs	r2, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4809      	ldr	r0, [pc, #36]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 80029fe:	f002 fc93 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8002a12:	f000 fa7b 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a16:	4803      	ldr	r0, [pc, #12]	; (8002a24 <_ZL12MX_TIM3_Initv+0xc8>)
 8002a18:	f000 fbb6 	bl	8003188 <HAL_TIM_MspPostInit>

}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000114 	.word	0x20000114
 8002a28:	40000400 	.word	0x40000400

08002a2c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a32:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a62:	4807      	ldr	r0, [pc, #28]	; (8002a80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a64:	f003 f805 	bl	8005a72 <HAL_UART_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002a78:	f000 fa48 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	2000015c 	.word	0x2000015c
 8002a84:	40013800 	.word	0x40013800

08002a88 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aae:	220c      	movs	r2, #12
 8002ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002abe:	4807      	ldr	r0, [pc, #28]	; (8002adc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ac0:	f003 f827 	bl	8005b12 <HAL_HalfDuplex_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002ad4:	f000 fa1a 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200001a4 	.word	0x200001a4
 8002ae0:	40004400 	.word	0x40004400

08002ae4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af8:	4b4e      	ldr	r3, [pc, #312]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	4a4d      	ldr	r2, [pc, #308]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002afe:	f043 0310 	orr.w	r3, r3, #16
 8002b02:	6193      	str	r3, [r2, #24]
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b10:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a47      	ldr	r2, [pc, #284]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b16:	f043 0320 	orr.w	r3, r3, #32
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b45      	ldr	r3, [pc, #276]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b28:	4b42      	ldr	r3, [pc, #264]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4a41      	ldr	r2, [pc, #260]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	6193      	str	r3, [r2, #24]
 8002b34:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b40:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a3b      	ldr	r2, [pc, #236]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b46:	f043 0308 	orr.w	r3, r3, #8
 8002b4a:	6193      	str	r3, [r2, #24]
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <_ZL12MX_GPIO_Initv+0x150>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b5e:	4836      	ldr	r0, [pc, #216]	; (8002c38 <_ZL12MX_GPIO_Initv+0x154>)
 8002b60:	f001 f87c 	bl	8003c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En2_Pin|Button_Pin|En1_Pin|Dir1_Pin
 8002b64:	2200      	movs	r2, #0
 8002b66:	f241 0171 	movw	r1, #4209	; 0x1071
 8002b6a:	4834      	ldr	r0, [pc, #208]	; (8002c3c <_ZL12MX_GPIO_Initv+0x158>)
 8002b6c:	f001 f876 	bl	8003c5c <HAL_GPIO_WritePin>
                          |Buser_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 8002b70:	2200      	movs	r2, #0
 8002b72:	f648 7143 	movw	r1, #36675	; 0x8f43
 8002b76:	4832      	ldr	r0, [pc, #200]	; (8002c40 <_ZL12MX_GPIO_Initv+0x15c>)
 8002b78:	f001 f870 	bl	8003c5c <HAL_GPIO_WritePin>
                          |S1_Pin|S2_Pin|En3_Pin|Dir3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8002b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4619      	mov	r1, r3
 8002b94:	4828      	ldr	r0, [pc, #160]	; (8002c38 <_ZL12MX_GPIO_Initv+0x154>)
 8002b96:	f000 fee5 	bl	8003964 <HAL_GPIO_Init>

  /*Configure GPIO pins : En2_Pin Button_Pin En1_Pin Dir1_Pin
                           Buser_Pin */
  GPIO_InitStruct.Pin = En2_Pin|Button_Pin|En1_Pin|Dir1_Pin
 8002b9a:	f241 0371 	movw	r3, #4209	; 0x1071
 8002b9e:	613b      	str	r3, [r7, #16]
                          |Buser_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 0310 	add.w	r3, r7, #16
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4822      	ldr	r0, [pc, #136]	; (8002c3c <_ZL12MX_GPIO_Initv+0x158>)
 8002bb4:	f000 fed6 	bl	8003964 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
                           S1_Pin S2_Pin En3_Pin Dir3_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 8002bb8:	f648 7343 	movw	r3, #36675	; 0x8f43
 8002bbc:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|En3_Pin|Dir3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bca:	f107 0310 	add.w	r3, r7, #16
 8002bce:	4619      	mov	r1, r3
 8002bd0:	481b      	ldr	r0, [pc, #108]	; (8002c40 <_ZL12MX_GPIO_Initv+0x15c>)
 8002bd2:	f000 fec7 	bl	8003964 <HAL_GPIO_Init>

  /*Configure GPIO pins : EndCap1_Pin EndCap2_Pin EndCap3_Pin */
  GPIO_InitStruct.Pin = EndCap1_Pin|EndCap2_Pin|EndCap3_Pin;
 8002bd6:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8002bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <_ZL12MX_GPIO_Initv+0x160>)
 8002bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4619      	mov	r1, r3
 8002bea:	4815      	ldr	r0, [pc, #84]	; (8002c40 <_ZL12MX_GPIO_Initv+0x15c>)
 8002bec:	f000 feba 	bl	8003964 <HAL_GPIO_Init>

  /*Configure GPIO pin : EndCap4_Pin */
  GPIO_InitStruct.Pin = EndCap4_Pin;
 8002bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <_ZL12MX_GPIO_Initv+0x160>)
 8002bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EndCap4_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 0310 	add.w	r3, r7, #16
 8002c02:	4619      	mov	r1, r3
 8002c04:	480d      	ldr	r0, [pc, #52]	; (8002c3c <_ZL12MX_GPIO_Initv+0x158>)
 8002c06:	f000 fead 	bl	8003964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2105      	movs	r1, #5
 8002c0e:	2017      	movs	r0, #23
 8002c10:	f000 fdbf 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c14:	2017      	movs	r0, #23
 8002c16:	f000 fdd8 	bl	80037ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2105      	movs	r1, #5
 8002c1e:	2028      	movs	r0, #40	; 0x28
 8002c20:	f000 fdb7 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c24:	2028      	movs	r0, #40	; 0x28
 8002c26:	f000 fdd0 	bl	80037ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c2a:	bf00      	nop
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	40010800 	.word	0x40010800
 8002c40:	40010c00 	.word	0x40010c00
 8002c44:	10110000 	.word	0x10110000

08002c48 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_UART_RxCpltCallback+0x9c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d13c      	bne.n	8002cd2 <HAL_UART_RxCpltCallback+0x8a>
		// копіюємо отримані дані у rx_buffer
		memcpy(un_get.bytes, rx_buffer, sizeof(rx_buffer));
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_UART_RxCpltCallback+0xa0>)
 8002c5a:	4a24      	ldr	r2, [pc, #144]	; (8002cec <HAL_UART_RxCpltCallback+0xa4>)
 8002c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		switch (un_get.params.hold) {
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_UART_RxCpltCallback+0xa0>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b4b      	cmp	r3, #75	; 0x4b
 8002c68:	d025      	beq.n	8002cb6 <HAL_UART_RxCpltCallback+0x6e>
 8002c6a:	2b4b      	cmp	r3, #75	; 0x4b
 8002c6c:	dc27      	bgt.n	8002cbe <HAL_UART_RxCpltCallback+0x76>
 8002c6e:	2b32      	cmp	r3, #50	; 0x32
 8002c70:	d01d      	beq.n	8002cae <HAL_UART_RxCpltCallback+0x66>
 8002c72:	2b32      	cmp	r3, #50	; 0x32
 8002c74:	dc23      	bgt.n	8002cbe <HAL_UART_RxCpltCallback+0x76>
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	dc02      	bgt.n	8002c80 <HAL_UART_RxCpltCallback+0x38>
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da03      	bge.n	8002c86 <HAL_UART_RxCpltCallback+0x3e>
 8002c7e:	e01e      	b.n	8002cbe <HAL_UART_RxCpltCallback+0x76>
 8002c80:	2b19      	cmp	r3, #25
 8002c82:	d010      	beq.n	8002ca6 <HAL_UART_RxCpltCallback+0x5e>
 8002c84:	e01b      	b.n	8002cbe <HAL_UART_RxCpltCallback+0x76>
		case 0:
		case 1:
			// 0 або 1 у un_get.params.hold = прийшли нові координати
			startFirstMove = true;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_UART_RxCpltCallback+0xa8>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
			un_to.params.lin = un_get.params.lin;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_UART_RxCpltCallback+0xa0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_UART_RxCpltCallback+0xac>)
 8002c92:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang;
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_UART_RxCpltCallback+0xa0>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_UART_RxCpltCallback+0xac>)
 8002c9a:	6053      	str	r3, [r2, #4]
			un_to.params.hold = un_get.params.hold;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_UART_RxCpltCallback+0xa0>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_UART_RxCpltCallback+0xac>)
 8002ca2:	6093      	str	r3, [r2, #8]
//			arm.moveGripper = un_get.params.hold;
			break;
 8002ca4:	e00b      	b.n	8002cbe <HAL_UART_RxCpltCallback+0x76>
		case 25:
			//25 = екстренна зупинка
			stopHand = true;
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_UART_RxCpltCallback+0xb0>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
			break;
 8002cac:	e007      	b.n	8002cbe <HAL_UART_RxCpltCallback+0x76>
		case 50:
			//50 = get-запит
			sendDataFlag = true;
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <HAL_UART_RxCpltCallback+0xb4>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
			break;
 8002cb4:	e003      	b.n	8002cbe <HAL_UART_RxCpltCallback+0x76>
		case 75:
			//75 = встановлення нуля
			setZeroFlag = true;
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_UART_RxCpltCallback+0xb8>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
			break;
 8002cbc:	bf00      	nop
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	480a      	ldr	r0, [pc, #40]	; (8002cec <HAL_UART_RxCpltCallback+0xa4>)
 8002cc4:	f003 fe10 	bl	80068e8 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8002cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <HAL_UART_RxCpltCallback+0xbc>)
 8002cce:	f000 ffdd 	bl	8003c8c <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	4905      	ldr	r1, [pc, #20]	; (8002cec <HAL_UART_RxCpltCallback+0xa4>)
 8002cd6:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <HAL_UART_RxCpltCallback+0x9c>)
 8002cd8:	f002 fff6 	bl	8005cc8 <HAL_UART_Receive_IT>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000015c 	.word	0x2000015c
 8002ce8:	20000200 	.word	0x20000200
 8002cec:	200001ec 	.word	0x200001ec
 8002cf0:	200001f8 	.word	0x200001f8
 8002cf4:	20000218 	.word	0x20000218
 8002cf8:	200001fa 	.word	0x200001fa
 8002cfc:	200001f9 	.word	0x200001f9
 8002d00:	200001fb 	.word	0x200001fb
 8002d04:	40011000 	.word	0x40011000

08002d08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EndCap1_Pin) {
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d18:	d10d      	bne.n	8002d36 <HAL_GPIO_EXTI_Callback+0x2e>
		//зачеп відкритий/зачеплений, їхати не можна
		allowMove = false;
 8002d1a:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
		gripperMoveFinished = true;
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x94>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]

		//зупиняємо ШІМ на третьому таймері
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002d26:	2104      	movs	r1, #4
 8002d28:	481d      	ldr	r0, [pc, #116]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d2a:	f002 f991 	bl	8005050 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8002d2e:	481c      	ldr	r0, [pc, #112]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d30:	f002 f874 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
		  arm.stateMoveM2 = false;
		  timerFT2 = true;
	  } else {
	      __NOP();
	  }
}
 8002d34:	e02b      	b.n	8002d8e <HAL_GPIO_EXTI_Callback+0x86>
	  } else if (GPIO_Pin == EndCap2_Pin) {
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d3c:	d10d      	bne.n	8002d5a <HAL_GPIO_EXTI_Callback+0x52>
		allowMove = true;
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
		gripperMoveFinished = true;
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x94>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	4814      	ldr	r0, [pc, #80]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d4e:	f002 f97f 	bl	8005050 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8002d52:	4813      	ldr	r0, [pc, #76]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d54:	f002 f862 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
}
 8002d58:	e019      	b.n	8002d8e <HAL_GPIO_EXTI_Callback+0x86>
	  } else if (GPIO_Pin == EndCap3_Pin || GPIO_Pin == EndCap4_Pin) {
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b80      	cmp	r3, #128	; 0x80
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_EXTI_Callback+0x60>
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d66:	d111      	bne.n	8002d8c <HAL_GPIO_EXTI_Callback+0x84>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002d68:	2104      	movs	r1, #4
 8002d6a:	480e      	ldr	r0, [pc, #56]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002d6c:	f002 f970 	bl	8005050 <HAL_TIM_PWM_Stop>
		  HAL_TIM_Base_Stop_IT(&htim2);
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002d72:	f002 f853 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
		  cntImpulse2 = 0;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
		  arm.stateMoveM2 = false;
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		  timerFT2 = true;
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
}
 8002d8a:	e000      	b.n	8002d8e <HAL_GPIO_EXTI_Callback+0x86>
	      __NOP();
 8002d8c:	bf00      	nop
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000001 	.word	0x20000001
 8002da0:	20000114 	.word	0x20000114
 8002da4:	200000cc 	.word	0x200000cc
 8002da8:	20000234 	.word	0x20000234
 8002dac:	20000238 	.word	0x20000238
 8002db0:	200001fd 	.word	0x200001fd

08002db4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_UART_ErrorCallback+0x84>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d133      	bne.n	8002e2e <HAL_UART_ErrorCallback+0x7a>
    {
        if (huart->ErrorCode == HAL_UART_ERROR_ORE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_UART_ErrorCallback+0x2c>
        {
            // переполнение
            arm.SetBuserState(2);
 8002dd8:	2102      	movs	r1, #2
 8002dda:	4818      	ldr	r0, [pc, #96]	; (8002e3c <HAL_UART_ErrorCallback+0x88>)
 8002ddc:	f7fe fd1e 	bl	800181c <_ZN7RoboArm13SetBuserStateEi>
        }
        if (huart->ErrorCode == HAL_UART_ERROR_PE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_ErrorCallback+0x46>
        {
            // Ошибка четности
        	arm.SetBuserState(3);
 8002df2:	2103      	movs	r1, #3
 8002df4:	4811      	ldr	r0, [pc, #68]	; (8002e3c <HAL_UART_ErrorCallback+0x88>)
 8002df6:	f7fe fd11 	bl	800181c <_ZN7RoboArm13SetBuserStateEi>
        }
        if (huart->ErrorCode == HAL_UART_ERROR_NE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_UART_ErrorCallback+0x60>
        {
            // Ошибка зашумление
        	arm.SetBuserState(4);
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	480b      	ldr	r0, [pc, #44]	; (8002e3c <HAL_UART_ErrorCallback+0x88>)
 8002e10:	f7fe fd04 	bl	800181c <_ZN7RoboArm13SetBuserStateEi>
        }
        if (huart->ErrorCode == HAL_UART_ERROR_FE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_UART_ErrorCallback+0x7a>
        {
            // Ошибка кадрирования
        	arm.SetBuserState(5);
 8002e26:	2105      	movs	r1, #5
 8002e28:	4804      	ldr	r0, [pc, #16]	; (8002e3c <HAL_UART_ErrorCallback+0x88>)
 8002e2a:	f7fe fcf7 	bl	800181c <_ZN7RoboArm13SetBuserStateEi>
        }
    }
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40013800 	.word	0x40013800
 8002e3c:	20000238 	.word	0x20000238

08002e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a27      	ldr	r2, [pc, #156]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d121      	bne.n	8002e96 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		cntImpulse1++;
 8002e52:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002e5a:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e60:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d83c      	bhi.n	8002ee2 <HAL_TIM_PeriodElapsedCallback+0xa2>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4823      	ldr	r0, [pc, #140]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002e6c:	f002 f8f0 	bl	8005050 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002e70:	4821      	ldr	r0, [pc, #132]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002e72:	f001 ffd3 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(1, false);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2101      	movs	r1, #1
 8002e7a:	481e      	ldr	r0, [pc, #120]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002e7c:	f7fe ffbc 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1 = 0;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1 = false;
 8002e86:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			timerFT1 = true;
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
//    HAL_IncTick();
//  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e94:	e025      	b.n	8002ee2 <HAL_TIM_PeriodElapsedCallback+0xa2>
	} else if (htim->Instance == TIM2) {
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9e:	d120      	bne.n	8002ee2 <HAL_TIM_PeriodElapsedCallback+0xa2>
		cntImpulse2++;
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ea8:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d815      	bhi.n	8002ee2 <HAL_TIM_PeriodElapsedCallback+0xa2>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	4812      	ldr	r0, [pc, #72]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002eba:	f002 f8c9 	bl	8005050 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002ebe:	4811      	ldr	r0, [pc, #68]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002ec0:	f001 ffac 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, false);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	480a      	ldr	r0, [pc, #40]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002eca:	f7fe ff95 	bl	8001df8 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2 = 0;
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
			arm.stateMoveM2 = false;
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			timerFT2 = true;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	20000230 	.word	0x20000230
 8002ef4:	20000238 	.word	0x20000238
 8002ef8:	20000084 	.word	0x20000084
 8002efc:	200001fc 	.word	0x200001fc
 8002f00:	20000234 	.word	0x20000234
 8002f04:	200000cc 	.word	0x200000cc
 8002f08:	200001fd 	.word	0x200001fd

08002f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//повинен пропищати при помилці; треба перевірити
	for (int t = 0; t <= 4; t++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	e016      	b.n	8002f46 <Error_Handler+0x3a>
	{
		for (int i = 0; i <= 200; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	e00a      	b.n	8002f34 <Error_Handler+0x28>
		{
			HAL_GPIO_TogglePin(Buser_GPIO_Port, Buser_Pin);
 8002f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f22:	480c      	ldr	r0, [pc, #48]	; (8002f54 <Error_Handler+0x48>)
 8002f24:	f000 feb2 	bl	8003c8c <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f000 fb37 	bl	800359c <HAL_Delay>
		for (int i = 0; i <= 200; i++)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2bc8      	cmp	r3, #200	; 0xc8
 8002f38:	ddf1      	ble.n	8002f1e <Error_Handler+0x12>
		}
		HAL_Delay(100);
 8002f3a:	2064      	movs	r0, #100	; 0x64
 8002f3c:	f000 fb2e 	bl	800359c <HAL_Delay>
	for (int t = 0; t <= 4; t++)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3301      	adds	r3, #1
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	dde5      	ble.n	8002f18 <Error_Handler+0xc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	bf00      	nop
	}
	__disable_irq();
	while (1) {
 8002f50:	e7fe      	b.n	8002f50 <Error_Handler+0x44>
 8002f52:	bf00      	nop
 8002f54:	40010800 	.word	0x40010800

08002f58 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d109      	bne.n	8002f7c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d104      	bne.n	8002f7c <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(0, 124);
 8002f72:	227c      	movs	r2, #124	; 0x7c
 8002f74:	2100      	movs	r1, #0
 8002f76:	4803      	ldr	r0, [pc, #12]	; (8002f84 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002f78:	f7fe f9d4 	bl	8001324 <_ZN7RoboArmC1Ehh>
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000238 	.word	0x20000238

08002f88 <_GLOBAL__sub_I_hspi1>:
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f90:	2001      	movs	r0, #1
 8002f92:	f7ff ffe1 	bl	8002f58 <_Z41__static_initialization_and_destruction_0ii>
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_MspInit+0x6c>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_MspInit+0x6c>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6193      	str	r3, [r2, #24]
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_MspInit+0x6c>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_MspInit+0x6c>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_MspInit+0x6c>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_MspInit+0x6c>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2105      	movs	r1, #5
 8002fd2:	2005      	movs	r0, #5
 8002fd4:	f000 fbdd 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002fd8:	2005      	movs	r0, #5
 8002fda:	f000 fbf6 	bl	80037ca <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_MspInit+0x70>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_MspInit+0x70>)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	40010000 	.word	0x40010000

0800300c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <HAL_SPI_MspInit+0xb4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d145      	bne.n	80030b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 8003032:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003036:	6193      	str	r3, [r2, #24]
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003044:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	4a1e      	ldr	r2, [pc, #120]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 800304a:	f043 0308 	orr.w	r3, r3, #8
 800304e:	6193      	str	r3, [r2, #24]
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_SPI_MspInit+0xb8>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800305c:	2328      	movs	r3, #40	; 0x28
 800305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4816      	ldr	r0, [pc, #88]	; (80030c8 <HAL_SPI_MspInit+0xbc>)
 8003070:	f000 fc78 	bl	8003964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003074:	2310      	movs	r3, #16
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	4810      	ldr	r0, [pc, #64]	; (80030c8 <HAL_SPI_MspInit+0xbc>)
 8003088:	f000 fc6c 	bl	8003964 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_SPI_MspInit+0xc0>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_SPI_MspInit+0xc0>)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2105      	movs	r1, #5
 80030ac:	2023      	movs	r0, #35	; 0x23
 80030ae:	f000 fb70 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030b2:	2023      	movs	r0, #35	; 0x23
 80030b4:	f000 fb89 	bl	80037ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030b8:	bf00      	nop
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40013000 	.word	0x40013000
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	40010000 	.word	0x40010000

080030d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <HAL_TIM_PWM_MspInit+0xac>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d114      	bne.n	800310c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a26      	ldr	r2, [pc, #152]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 80030e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2105      	movs	r1, #5
 80030fe:	2019      	movs	r0, #25
 8003100:	f000 fb47 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003104:	2019      	movs	r0, #25
 8003106:	f000 fb60 	bl	80037ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800310a:	e032      	b.n	8003172 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d114      	bne.n	8003140 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2105      	movs	r1, #5
 8003132:	201c      	movs	r0, #28
 8003134:	f000 fb2d 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003138:	201c      	movs	r0, #28
 800313a:	f000 fb46 	bl	80037ca <HAL_NVIC_EnableIRQ>
}
 800313e:	e018      	b.n	8003172 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_TIM_PWM_MspInit+0xb4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d113      	bne.n	8003172 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_TIM_PWM_MspInit+0xb0>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2105      	movs	r1, #5
 8003166:	201d      	movs	r0, #29
 8003168:	f000 fb13 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800316c:	201d      	movs	r0, #29
 800316e:	f000 fb2c 	bl	80037ca <HAL_NVIC_EnableIRQ>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40021000 	.word	0x40021000
 8003184:	40000400 	.word	0x40000400

08003188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2e      	ldr	r2, [pc, #184]	; (800325c <HAL_TIM_MspPostInit+0xd4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d119      	bne.n	80031dc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6193      	str	r3, [r2, #24]
 80031b4:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2302      	movs	r3, #2
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ce:	f107 0318 	add.w	r3, r7, #24
 80031d2:	4619      	mov	r1, r3
 80031d4:	4823      	ldr	r0, [pc, #140]	; (8003264 <HAL_TIM_MspPostInit+0xdc>)
 80031d6:	f000 fbc5 	bl	8003964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031da:	e03a      	b.n	8003252 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d118      	bne.n	8003218 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6193      	str	r3, [r2, #24]
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031fe:	2302      	movs	r3, #2
 8003200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2302      	movs	r3, #2
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f107 0318 	add.w	r3, r7, #24
 800320e:	4619      	mov	r1, r3
 8003210:	4814      	ldr	r0, [pc, #80]	; (8003264 <HAL_TIM_MspPostInit+0xdc>)
 8003212:	f000 fba7 	bl	8003964 <HAL_GPIO_Init>
}
 8003216:	e01c      	b.n	8003252 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a12      	ldr	r2, [pc, #72]	; (8003268 <HAL_TIM_MspPostInit+0xe0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d117      	bne.n	8003252 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003222:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	6193      	str	r3, [r2, #24]
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_TIM_MspPostInit+0xd8>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2302      	movs	r3, #2
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003246:	f107 0318 	add.w	r3, r7, #24
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <HAL_TIM_MspPostInit+0xdc>)
 800324e:	f000 fb89 	bl	8003964 <HAL_GPIO_Init>
}
 8003252:	bf00      	nop
 8003254:	3728      	adds	r7, #40	; 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40010800 	.word	0x40010800
 8003268:	40000400 	.word	0x40000400

0800326c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 0318 	add.w	r3, r7, #24
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <HAL_UART_MspInit+0x104>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d13a      	bne.n	8003302 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800328c:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_UART_MspInit+0x108>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4a38      	ldr	r2, [pc, #224]	; (8003374 <HAL_UART_MspInit+0x108>)
 8003292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003296:	6193      	str	r3, [r2, #24]
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_UART_MspInit+0x108>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_UART_MspInit+0x108>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_UART_MspInit+0x108>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6193      	str	r3, [r2, #24]
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_UART_MspInit+0x108>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	2302      	movs	r3, #2
 80032c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 0318 	add.w	r3, r7, #24
 80032ce:	4619      	mov	r1, r3
 80032d0:	4829      	ldr	r0, [pc, #164]	; (8003378 <HAL_UART_MspInit+0x10c>)
 80032d2:	f000 fb47 	bl	8003964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e0:	2301      	movs	r3, #1
 80032e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e4:	f107 0318 	add.w	r3, r7, #24
 80032e8:	4619      	mov	r1, r3
 80032ea:	4823      	ldr	r0, [pc, #140]	; (8003378 <HAL_UART_MspInit+0x10c>)
 80032ec:	f000 fb3a 	bl	8003964 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2105      	movs	r1, #5
 80032f4:	2025      	movs	r0, #37	; 0x25
 80032f6:	f000 fa4c 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032fa:	2025      	movs	r0, #37	; 0x25
 80032fc:	f000 fa65 	bl	80037ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003300:	e032      	b.n	8003368 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_UART_MspInit+0x110>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d12d      	bne.n	8003368 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_UART_MspInit+0x108>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_UART_MspInit+0x108>)
 8003312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003316:	61d3      	str	r3, [r2, #28]
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_UART_MspInit+0x108>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_UART_MspInit+0x108>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <HAL_UART_MspInit+0x108>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6193      	str	r3, [r2, #24]
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_UART_MspInit+0x108>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800333c:	2304      	movs	r3, #4
 800333e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003340:	2312      	movs	r3, #18
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003344:	2301      	movs	r3, #1
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003348:	2303      	movs	r3, #3
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334c:	f107 0318 	add.w	r3, r7, #24
 8003350:	4619      	mov	r1, r3
 8003352:	4809      	ldr	r0, [pc, #36]	; (8003378 <HAL_UART_MspInit+0x10c>)
 8003354:	f000 fb06 	bl	8003964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	2105      	movs	r1, #5
 800335c:	2026      	movs	r0, #38	; 0x26
 800335e:	f000 fa18 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003362:	2026      	movs	r0, #38	; 0x26
 8003364:	f000 fa31 	bl	80037ca <HAL_NVIC_EnableIRQ>
}
 8003368:	bf00      	nop
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40013800 	.word	0x40013800
 8003374:	40021000 	.word	0x40021000
 8003378:	40010800 	.word	0x40010800
 800337c:	40004400 	.word	0x40004400

08003380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003384:	e7fe      	b.n	8003384 <NMI_Handler+0x4>

08003386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338a:	e7fe      	b.n	800338a <HardFault_Handler+0x4>

0800338c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <MemManage_Handler+0x4>

08003392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003396:	e7fe      	b.n	8003396 <BusFault_Handler+0x4>

08003398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <UsageFault_Handler+0x4>

0800339e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr

080033b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c6:	f000 f8cd 	bl	8003564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}

080033ce <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap3_Pin);
 80033de:	2080      	movs	r0, #128	; 0x80
 80033e0:	f000 fc6e 	bl	8003cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM1_UP_IRQHandler+0x10>)
 80033ee:	f001 fe93 	bl	8005118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000084 	.word	0x20000084

080033fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <TIM2_IRQHandler+0x10>)
 8003402:	f001 fe89 	bl	8005118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200000cc 	.word	0x200000cc

08003410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <TIM3_IRQHandler+0x10>)
 8003416:	f001 fe7f 	bl	8005118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000114 	.word	0x20000114

08003424 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <SPI1_IRQHandler+0x10>)
 800342a:	f001 fab1 	bl	8004990 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	2000002c 	.word	0x2000002c

08003438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <USART1_IRQHandler+0x10>)
 800343e:	f002 fc69 	bl	8005d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000015c 	.word	0x2000015c

0800344c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <USART2_IRQHandler+0x10>)
 8003452:	f002 fc5f 	bl	8005d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200001a4 	.word	0x200001a4

08003460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap4_Pin);
 8003464:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003468:	f000 fc2a 	bl	8003cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap1_Pin);
 800346c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003470:	f000 fc26 	bl	8003cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap2_Pin);
 8003474:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003478:	f000 fc22 	bl	8003cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}

08003480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800348c:	f7ff fff8 	bl	8003480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003490:	480b      	ldr	r0, [pc, #44]	; (80034c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003492:	490c      	ldr	r1, [pc, #48]	; (80034c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003494:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003498:	e002      	b.n	80034a0 <LoopCopyDataInit>

0800349a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800349c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349e:	3304      	adds	r3, #4

080034a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a4:	d3f9      	bcc.n	800349a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034a8:	4c09      	ldr	r4, [pc, #36]	; (80034d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ac:	e001      	b.n	80034b2 <LoopFillZerobss>

080034ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b0:	3204      	adds	r2, #4

080034b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b4:	d3fb      	bcc.n	80034ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034b6:	f003 fa1f 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ba:	f7fe ff5d 	bl	8002378 <main>
  bx lr
 80034be:	4770      	bx	lr
  ldr r0, =_sdata
 80034c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80034c8:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 80034cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80034d0:	20000368 	.word	0x20000368

080034d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034d4:	e7fe      	b.n	80034d4 <ADC1_2_IRQHandler>
	...

080034d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_Init+0x28>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a07      	ldr	r2, [pc, #28]	; (8003500 <HAL_Init+0x28>)
 80034e2:	f043 0310 	orr.w	r3, r3, #16
 80034e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e8:	2003      	movs	r0, #3
 80034ea:	f000 f947 	bl	800377c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ee:	200f      	movs	r0, #15
 80034f0:	f000 f808 	bl	8003504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f4:	f7ff fd50 	bl	8002f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40022000 	.word	0x40022000

08003504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_InitTick+0x54>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_InitTick+0x58>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800351a:	fbb3 f3f1 	udiv	r3, r3, r1
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f95f 	bl	80037e6 <HAL_SYSTICK_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e00e      	b.n	8003550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d80a      	bhi.n	800354e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003538:	2200      	movs	r2, #0
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003540:	f000 f927 	bl	8003792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003544:	4a06      	ldr	r2, [pc, #24]	; (8003560 <HAL_InitTick+0x5c>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000004 	.word	0x20000004
 800355c:	2000000c 	.word	0x2000000c
 8003560:	20000008 	.word	0x20000008

08003564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_IncTick+0x1c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_IncTick+0x20>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4413      	add	r3, r2
 8003574:	4a03      	ldr	r2, [pc, #12]	; (8003584 <HAL_IncTick+0x20>)
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	2000000c 	.word	0x2000000c
 8003584:	20000364 	.word	0x20000364

08003588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return uwTick;
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <HAL_GetTick+0x10>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000364 	.word	0x20000364

0800359c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff fff0 	bl	8003588 <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b4:	d005      	beq.n	80035c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_Delay+0x44>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035c2:	bf00      	nop
 80035c4:	f7ff ffe0 	bl	8003588 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d8f7      	bhi.n	80035c4 <HAL_Delay+0x28>
  {
  }
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800360c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003616:	4a04      	ldr	r2, [pc, #16]	; (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	60d3      	str	r3, [r2, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <__NVIC_GetPriorityGrouping+0x18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0307 	and.w	r3, r3, #7
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4906      	ldr	r1, [pc, #24]	; (800367c <__NVIC_EnableIRQ+0x34>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100

08003680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	db0a      	blt.n	80036aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	490c      	ldr	r1, [pc, #48]	; (80036cc <__NVIC_SetPriority+0x4c>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	440b      	add	r3, r1
 80036a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a8:	e00a      	b.n	80036c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4908      	ldr	r1, [pc, #32]	; (80036d0 <__NVIC_SetPriority+0x50>)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3b04      	subs	r3, #4
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	440b      	add	r3, r1
 80036be:	761a      	strb	r2, [r3, #24]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f1c3 0307 	rsb	r3, r3, #7
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf28      	it	cs
 80036f2:	2304      	movcs	r3, #4
 80036f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d902      	bls.n	8003704 <NVIC_EncodePriority+0x30>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3b03      	subs	r3, #3
 8003702:	e000      	b.n	8003706 <NVIC_EncodePriority+0x32>
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	401a      	ands	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800371c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43d9      	mvns	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	4313      	orrs	r3, r2
         );
}
 800372e:	4618      	mov	r0, r3
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003748:	d301      	bcc.n	800374e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374a:	2301      	movs	r3, #1
 800374c:	e00f      	b.n	800376e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <SysTick_Config+0x40>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003756:	210f      	movs	r1, #15
 8003758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800375c:	f7ff ff90 	bl	8003680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <SysTick_Config+0x40>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <SysTick_Config+0x40>)
 8003768:	2207      	movs	r2, #7
 800376a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000e010 	.word	0xe000e010

0800377c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff2d 	bl	80035e4 <__NVIC_SetPriorityGrouping>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a4:	f7ff ff42 	bl	800362c <__NVIC_GetPriorityGrouping>
 80037a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f7ff ff90 	bl	80036d4 <NVIC_EncodePriority>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff5f 	bl	8003680 <__NVIC_SetPriority>
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff35 	bl	8003648 <__NVIC_EnableIRQ>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ffa2 	bl	8003738 <SysTick_Config>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d008      	beq.n	8003828 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2204      	movs	r2, #4
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e020      	b.n	800386a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 020e 	bic.w	r2, r2, #14
 8003836:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	2101      	movs	r1, #1
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
 8003856:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d005      	beq.n	8003898 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2204      	movs	r2, #4
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e051      	b.n	800393c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 020e 	bic.w	r2, r2, #14
 80038a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <HAL_DMA_Abort_IT+0xd4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d029      	beq.n	8003916 <HAL_DMA_Abort_IT+0xa2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a21      	ldr	r2, [pc, #132]	; (800394c <HAL_DMA_Abort_IT+0xd8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_Abort_IT+0x9e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_DMA_Abort_IT+0xdc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01a      	beq.n	800390c <HAL_DMA_Abort_IT+0x98>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_DMA_Abort_IT+0xe0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d012      	beq.n	8003906 <HAL_DMA_Abort_IT+0x92>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_DMA_Abort_IT+0xe4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00a      	beq.n	8003900 <HAL_DMA_Abort_IT+0x8c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_DMA_Abort_IT+0xe8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d102      	bne.n	80038fa <HAL_DMA_Abort_IT+0x86>
 80038f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038f8:	e00e      	b.n	8003918 <HAL_DMA_Abort_IT+0xa4>
 80038fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038fe:	e00b      	b.n	8003918 <HAL_DMA_Abort_IT+0xa4>
 8003900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003904:	e008      	b.n	8003918 <HAL_DMA_Abort_IT+0xa4>
 8003906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390a:	e005      	b.n	8003918 <HAL_DMA_Abort_IT+0xa4>
 800390c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003910:	e002      	b.n	8003918 <HAL_DMA_Abort_IT+0xa4>
 8003912:	2310      	movs	r3, #16
 8003914:	e000      	b.n	8003918 <HAL_DMA_Abort_IT+0xa4>
 8003916:	2301      	movs	r3, #1
 8003918:	4a11      	ldr	r2, [pc, #68]	; (8003960 <HAL_DMA_Abort_IT+0xec>)
 800391a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
    } 
  }
  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40020008 	.word	0x40020008
 800394c:	4002001c 	.word	0x4002001c
 8003950:	40020030 	.word	0x40020030
 8003954:	40020044 	.word	0x40020044
 8003958:	40020058 	.word	0x40020058
 800395c:	4002006c 	.word	0x4002006c
 8003960:	40020000 	.word	0x40020000

08003964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003964:	b480      	push	{r7}
 8003966:	b08b      	sub	sp, #44	; 0x2c
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003972:	2300      	movs	r3, #0
 8003974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003976:	e161      	b.n	8003c3c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003978:	2201      	movs	r2, #1
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	429a      	cmp	r2, r3
 8003992:	f040 8150 	bne.w	8003c36 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4a97      	ldr	r2, [pc, #604]	; (8003bf8 <HAL_GPIO_Init+0x294>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d05e      	beq.n	8003a5e <HAL_GPIO_Init+0xfa>
 80039a0:	4a95      	ldr	r2, [pc, #596]	; (8003bf8 <HAL_GPIO_Init+0x294>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d875      	bhi.n	8003a92 <HAL_GPIO_Init+0x12e>
 80039a6:	4a95      	ldr	r2, [pc, #596]	; (8003bfc <HAL_GPIO_Init+0x298>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d058      	beq.n	8003a5e <HAL_GPIO_Init+0xfa>
 80039ac:	4a93      	ldr	r2, [pc, #588]	; (8003bfc <HAL_GPIO_Init+0x298>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d86f      	bhi.n	8003a92 <HAL_GPIO_Init+0x12e>
 80039b2:	4a93      	ldr	r2, [pc, #588]	; (8003c00 <HAL_GPIO_Init+0x29c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d052      	beq.n	8003a5e <HAL_GPIO_Init+0xfa>
 80039b8:	4a91      	ldr	r2, [pc, #580]	; (8003c00 <HAL_GPIO_Init+0x29c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d869      	bhi.n	8003a92 <HAL_GPIO_Init+0x12e>
 80039be:	4a91      	ldr	r2, [pc, #580]	; (8003c04 <HAL_GPIO_Init+0x2a0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d04c      	beq.n	8003a5e <HAL_GPIO_Init+0xfa>
 80039c4:	4a8f      	ldr	r2, [pc, #572]	; (8003c04 <HAL_GPIO_Init+0x2a0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d863      	bhi.n	8003a92 <HAL_GPIO_Init+0x12e>
 80039ca:	4a8f      	ldr	r2, [pc, #572]	; (8003c08 <HAL_GPIO_Init+0x2a4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d046      	beq.n	8003a5e <HAL_GPIO_Init+0xfa>
 80039d0:	4a8d      	ldr	r2, [pc, #564]	; (8003c08 <HAL_GPIO_Init+0x2a4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d85d      	bhi.n	8003a92 <HAL_GPIO_Init+0x12e>
 80039d6:	2b12      	cmp	r3, #18
 80039d8:	d82a      	bhi.n	8003a30 <HAL_GPIO_Init+0xcc>
 80039da:	2b12      	cmp	r3, #18
 80039dc:	d859      	bhi.n	8003a92 <HAL_GPIO_Init+0x12e>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <HAL_GPIO_Init+0x80>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	08003a5f 	.word	0x08003a5f
 80039e8:	08003a39 	.word	0x08003a39
 80039ec:	08003a4b 	.word	0x08003a4b
 80039f0:	08003a8d 	.word	0x08003a8d
 80039f4:	08003a93 	.word	0x08003a93
 80039f8:	08003a93 	.word	0x08003a93
 80039fc:	08003a93 	.word	0x08003a93
 8003a00:	08003a93 	.word	0x08003a93
 8003a04:	08003a93 	.word	0x08003a93
 8003a08:	08003a93 	.word	0x08003a93
 8003a0c:	08003a93 	.word	0x08003a93
 8003a10:	08003a93 	.word	0x08003a93
 8003a14:	08003a93 	.word	0x08003a93
 8003a18:	08003a93 	.word	0x08003a93
 8003a1c:	08003a93 	.word	0x08003a93
 8003a20:	08003a93 	.word	0x08003a93
 8003a24:	08003a93 	.word	0x08003a93
 8003a28:	08003a41 	.word	0x08003a41
 8003a2c:	08003a55 	.word	0x08003a55
 8003a30:	4a76      	ldr	r2, [pc, #472]	; (8003c0c <HAL_GPIO_Init+0x2a8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a36:	e02c      	b.n	8003a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	623b      	str	r3, [r7, #32]
          break;
 8003a3e:	e029      	b.n	8003a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	3304      	adds	r3, #4
 8003a46:	623b      	str	r3, [r7, #32]
          break;
 8003a48:	e024      	b.n	8003a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	623b      	str	r3, [r7, #32]
          break;
 8003a52:	e01f      	b.n	8003a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	623b      	str	r3, [r7, #32]
          break;
 8003a5c:	e01a      	b.n	8003a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a66:	2304      	movs	r3, #4
 8003a68:	623b      	str	r3, [r7, #32]
          break;
 8003a6a:	e013      	b.n	8003a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d105      	bne.n	8003a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a74:	2308      	movs	r3, #8
 8003a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	611a      	str	r2, [r3, #16]
          break;
 8003a7e:	e009      	b.n	8003a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a80:	2308      	movs	r3, #8
 8003a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	615a      	str	r2, [r3, #20]
          break;
 8003a8a:	e003      	b.n	8003a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
          break;
 8003a90:	e000      	b.n	8003a94 <HAL_GPIO_Init+0x130>
          break;
 8003a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2bff      	cmp	r3, #255	; 0xff
 8003a98:	d801      	bhi.n	8003a9e <HAL_GPIO_Init+0x13a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	e001      	b.n	8003aa2 <HAL_GPIO_Init+0x13e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2bff      	cmp	r3, #255	; 0xff
 8003aa8:	d802      	bhi.n	8003ab0 <HAL_GPIO_Init+0x14c>
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	e002      	b.n	8003ab6 <HAL_GPIO_Init+0x152>
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	3b08      	subs	r3, #8
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	210f      	movs	r1, #15
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	6a39      	ldr	r1, [r7, #32]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80a9 	beq.w	8003c36 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ae4:	4b4a      	ldr	r3, [pc, #296]	; (8003c10 <HAL_GPIO_Init+0x2ac>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	4a49      	ldr	r2, [pc, #292]	; (8003c10 <HAL_GPIO_Init+0x2ac>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6193      	str	r3, [r2, #24]
 8003af0:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_GPIO_Init+0x2ac>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003afc:	4a45      	ldr	r2, [pc, #276]	; (8003c14 <HAL_GPIO_Init+0x2b0>)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	089b      	lsrs	r3, r3, #2
 8003b02:	3302      	adds	r3, #2
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	220f      	movs	r2, #15
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a3d      	ldr	r2, [pc, #244]	; (8003c18 <HAL_GPIO_Init+0x2b4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00d      	beq.n	8003b44 <HAL_GPIO_Init+0x1e0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a3c      	ldr	r2, [pc, #240]	; (8003c1c <HAL_GPIO_Init+0x2b8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d007      	beq.n	8003b40 <HAL_GPIO_Init+0x1dc>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3b      	ldr	r2, [pc, #236]	; (8003c20 <HAL_GPIO_Init+0x2bc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_GPIO_Init+0x1d8>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e004      	b.n	8003b46 <HAL_GPIO_Init+0x1e2>
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e002      	b.n	8003b46 <HAL_GPIO_Init+0x1e2>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_GPIO_Init+0x1e2>
 8003b44:	2300      	movs	r3, #0
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	f002 0203 	and.w	r2, r2, #3
 8003b4c:	0092      	lsls	r2, r2, #2
 8003b4e:	4093      	lsls	r3, r2
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b56:	492f      	ldr	r1, [pc, #188]	; (8003c14 <HAL_GPIO_Init+0x2b0>)
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b70:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	492b      	ldr	r1, [pc, #172]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]
 8003b7c:	e006      	b.n	8003b8c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	43db      	mvns	r3, r3
 8003b86:	4927      	ldr	r1, [pc, #156]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b98:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	4921      	ldr	r1, [pc, #132]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60cb      	str	r3, [r1, #12]
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	491d      	ldr	r1, [pc, #116]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	4917      	ldr	r1, [pc, #92]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
 8003bcc:	e006      	b.n	8003bdc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	4913      	ldr	r1, [pc, #76]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01f      	beq.n	8003c28 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	490d      	ldr	r1, [pc, #52]	; (8003c24 <HAL_GPIO_Init+0x2c0>)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	e01f      	b.n	8003c36 <HAL_GPIO_Init+0x2d2>
 8003bf6:	bf00      	nop
 8003bf8:	10320000 	.word	0x10320000
 8003bfc:	10310000 	.word	0x10310000
 8003c00:	10220000 	.word	0x10220000
 8003c04:	10210000 	.word	0x10210000
 8003c08:	10120000 	.word	0x10120000
 8003c0c:	10110000 	.word	0x10110000
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40010800 	.word	0x40010800
 8003c1c:	40010c00 	.word	0x40010c00
 8003c20:	40011000 	.word	0x40011000
 8003c24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_GPIO_Init+0x2f4>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	4909      	ldr	r1, [pc, #36]	; (8003c58 <HAL_GPIO_Init+0x2f4>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	3301      	adds	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f47f ae96 	bne.w	8003978 <HAL_GPIO_Init+0x14>
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	bf00      	nop
 8003c50:	372c      	adds	r7, #44	; 0x2c
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	40010400 	.word	0x40010400

08003c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c6c:	787b      	ldrb	r3, [r7, #1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c78:	e003      	b.n	8003c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c7a:	887b      	ldrh	r3, [r7, #2]
 8003c7c:	041a      	lsls	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	43d9      	mvns	r1, r3
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	400b      	ands	r3, r1
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	611a      	str	r2, [r3, #16]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cd6:	4a05      	ldr	r2, [pc, #20]	; (8003cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff f812 	bl	8002d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40010400 	.word	0x40010400

08003cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e272      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8087 	beq.w	8003e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d10:	4b92      	ldr	r3, [pc, #584]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d00c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d1c:	4b8f      	ldr	r3, [pc, #572]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d112      	bne.n	8003d4e <HAL_RCC_OscConfig+0x5e>
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d36:	4b89      	ldr	r3, [pc, #548]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d06c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x12c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d168      	bne.n	8003e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e24c      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x76>
 8003d58:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7f      	ldr	r2, [pc, #508]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e02e      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd4>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x98>
 8003d6e:	4b7b      	ldr	r3, [pc, #492]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7a      	ldr	r2, [pc, #488]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b78      	ldr	r3, [pc, #480]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a77      	ldr	r2, [pc, #476]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e01d      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCC_OscConfig+0xbc>
 8003d92:	4b72      	ldr	r3, [pc, #456]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a71      	ldr	r2, [pc, #452]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a6e      	ldr	r2, [pc, #440]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd4>
 8003dac:	4b6b      	ldr	r3, [pc, #428]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6a      	ldr	r2, [pc, #424]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b68      	ldr	r3, [pc, #416]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a67      	ldr	r2, [pc, #412]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d013      	beq.n	8003df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7ff fbdc 	bl	8003588 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7ff fbd8 	bl	8003588 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	; 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e200      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b5d      	ldr	r3, [pc, #372]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xe4>
 8003df2:	e014      	b.n	8003e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7ff fbc8 	bl	8003588 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7ff fbc4 	bl	8003588 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1ec      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	4b53      	ldr	r3, [pc, #332]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x10c>
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d063      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2a:	4b4c      	ldr	r3, [pc, #304]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e36:	4b49      	ldr	r3, [pc, #292]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d11c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x18c>
 8003e42:	4b46      	ldr	r3, [pc, #280]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d116      	bne.n	8003e7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	4b43      	ldr	r3, [pc, #268]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_RCC_OscConfig+0x176>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e1c0      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b3d      	ldr	r3, [pc, #244]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4939      	ldr	r1, [pc, #228]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	e03a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7ff fb7d 	bl	8003588 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e92:	f7ff fb79 	bl	8003588 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e1a1      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb0:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4927      	ldr	r1, [pc, #156]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	600b      	str	r3, [r1, #0]
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7ff fb5c 	bl	8003588 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed4:	f7ff fb58 	bl	8003588 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e180      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d03a      	beq.n	8003f74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d019      	beq.n	8003f3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f06:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <HAL_RCC_OscConfig+0x274>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0c:	f7ff fb3c 	bl	8003588 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f14:	f7ff fb38 	bl	8003588 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e160      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f32:	2001      	movs	r0, #1
 8003f34:	f000 fada 	bl	80044ec <RCC_Delay>
 8003f38:	e01c      	b.n	8003f74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f40:	f7ff fb22 	bl	8003588 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f46:	e00f      	b.n	8003f68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f48:	f7ff fb1e 	bl	8003588 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d908      	bls.n	8003f68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e146      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	42420000 	.word	0x42420000
 8003f64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e9      	bne.n	8003f48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80a6 	beq.w	80040ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f86:	4b8b      	ldr	r3, [pc, #556]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10d      	bne.n	8003fae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f92:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4a87      	ldr	r2, [pc, #540]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	61d3      	str	r3, [r2, #28]
 8003f9e:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	4b82      	ldr	r3, [pc, #520]	; (80041b8 <HAL_RCC_OscConfig+0x4c8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d118      	bne.n	8003fec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fba:	4b7f      	ldr	r3, [pc, #508]	; (80041b8 <HAL_RCC_OscConfig+0x4c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7e      	ldr	r2, [pc, #504]	; (80041b8 <HAL_RCC_OscConfig+0x4c8>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc6:	f7ff fadf 	bl	8003588 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fce:	f7ff fadb 	bl	8003588 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b64      	cmp	r3, #100	; 0x64
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e103      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	4b75      	ldr	r3, [pc, #468]	; (80041b8 <HAL_RCC_OscConfig+0x4c8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x312>
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6213      	str	r3, [r2, #32]
 8004000:	e02d      	b.n	800405e <HAL_RCC_OscConfig+0x36e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x334>
 800400a:	4b6a      	ldr	r3, [pc, #424]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4a69      	ldr	r2, [pc, #420]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6213      	str	r3, [r2, #32]
 8004016:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a66      	ldr	r2, [pc, #408]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	6213      	str	r3, [r2, #32]
 8004022:	e01c      	b.n	800405e <HAL_RCC_OscConfig+0x36e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b05      	cmp	r3, #5
 800402a:	d10c      	bne.n	8004046 <HAL_RCC_OscConfig+0x356>
 800402c:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4a60      	ldr	r2, [pc, #384]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	f043 0304 	orr.w	r3, r3, #4
 8004036:	6213      	str	r3, [r2, #32]
 8004038:	4b5e      	ldr	r3, [pc, #376]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	4a5d      	ldr	r2, [pc, #372]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6213      	str	r3, [r2, #32]
 8004044:	e00b      	b.n	800405e <HAL_RCC_OscConfig+0x36e>
 8004046:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4a5a      	ldr	r2, [pc, #360]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6213      	str	r3, [r2, #32]
 8004052:	4b58      	ldr	r3, [pc, #352]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4a57      	ldr	r2, [pc, #348]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d015      	beq.n	8004092 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7ff fa8f 	bl	8003588 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7ff fa8b 	bl	8003588 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0b1      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004084:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ee      	beq.n	800406e <HAL_RCC_OscConfig+0x37e>
 8004090:	e014      	b.n	80040bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004092:	f7ff fa79 	bl	8003588 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7ff fa75 	bl	8003588 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e09b      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b0:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ee      	bne.n	800409a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d105      	bne.n	80040ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c2:	4b3c      	ldr	r3, [pc, #240]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	4a3b      	ldr	r2, [pc, #236]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8087 	beq.w	80041e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d8:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d061      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d146      	bne.n	800417a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ec:	4b33      	ldr	r3, [pc, #204]	; (80041bc <HAL_RCC_OscConfig+0x4cc>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f2:	f7ff fa49 	bl	8003588 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fa:	f7ff fa45 	bl	8003588 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e06d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410c:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004120:	d108      	bne.n	8004134 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	4921      	ldr	r1, [pc, #132]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004134:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a19      	ldr	r1, [r3, #32]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	430b      	orrs	r3, r1
 8004146:	491b      	ldr	r1, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x4cc>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7ff fa19 	bl	8003588 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7ff fa15 	bl	8003588 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e03d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x46a>
 8004178:	e035      	b.n	80041e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_OscConfig+0x4cc>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7ff fa02 	bl	8003588 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7ff f9fe 	bl	8003588 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e026      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x498>
 80041a6:	e01e      	b.n	80041e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e019      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCC_OscConfig+0x500>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000

080041f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0d0      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004208:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d910      	bls.n	8004238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b67      	ldr	r3, [pc, #412]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 0207 	bic.w	r2, r3, #7
 800421e:	4965      	ldr	r1, [pc, #404]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0b8      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d020      	beq.n	8004286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004250:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a58      	ldr	r2, [pc, #352]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800425a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a52      	ldr	r2, [pc, #328]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b50      	ldr	r3, [pc, #320]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	494d      	ldr	r1, [pc, #308]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d040      	beq.n	8004314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d115      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	4b41      	ldr	r3, [pc, #260]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e073      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c2:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e06b      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d2:	4b39      	ldr	r3, [pc, #228]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4936      	ldr	r1, [pc, #216]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e4:	f7ff f950 	bl	8003588 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7ff f94c 	bl	8003588 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e053      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	4b2d      	ldr	r3, [pc, #180]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 020c 	and.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	429a      	cmp	r2, r3
 8004312:	d1eb      	bne.n	80042ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004314:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d210      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 0207 	bic.w	r2, r3, #7
 800432a:	4922      	ldr	r1, [pc, #136]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e032      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4916      	ldr	r1, [pc, #88]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	490e      	ldr	r1, [pc, #56]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004382:	f000 f82d 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 8004386:	4602      	mov	r2, r0
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	490a      	ldr	r1, [pc, #40]	; (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004394:	5ccb      	ldrb	r3, [r1, r3]
 8004396:	fa22 f303 	lsr.w	r3, r2, r3
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1cc>)
 800439c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_ClockConfig+0x1d0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f8ae 	bl	8003504 <HAL_InitTick>

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40021000 	.word	0x40021000
 80043bc:	08006958 	.word	0x08006958
 80043c0:	20000004 	.word	0x20000004
 80043c4:	20000008 	.word	0x20000008

080043c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_RCC_EnableCSS+0x14>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	4242004c 	.word	0x4242004c

080043e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <HAL_RCC_GetSysClockFreq+0x94>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b04      	cmp	r3, #4
 8004408:	d002      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x30>
 800440a:	2b08      	cmp	r3, #8
 800440c:	d003      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0x36>
 800440e:	e027      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_RCC_GetSysClockFreq+0x98>)
 8004412:	613b      	str	r3, [r7, #16]
      break;
 8004414:	e027      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	0c9b      	lsrs	r3, r3, #18
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004420:	5cd3      	ldrb	r3, [r2, r3]
 8004422:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d010      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <HAL_RCC_GetSysClockFreq+0x94>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	0c5b      	lsrs	r3, r3, #17
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	4a11      	ldr	r2, [pc, #68]	; (8004480 <HAL_RCC_GetSysClockFreq+0xa0>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <HAL_RCC_GetSysClockFreq+0x98>)
 8004442:	fb03 f202 	mul.w	r2, r3, r2
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e004      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a0c      	ldr	r2, [pc, #48]	; (8004484 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	613b      	str	r3, [r7, #16]
      break;
 800445e:	e002      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetSysClockFreq+0x98>)
 8004462:	613b      	str	r3, [r7, #16]
      break;
 8004464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004466:	693b      	ldr	r3, [r7, #16]
}
 8004468:	4618      	mov	r0, r3
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	007a1200 	.word	0x007a1200
 800447c:	08006970 	.word	0x08006970
 8004480:	08006980 	.word	0x08006980
 8004484:	003d0900 	.word	0x003d0900

08004488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800448c:	4b02      	ldr	r3, [pc, #8]	; (8004498 <HAL_RCC_GetHCLKFreq+0x10>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	20000004 	.word	0x20000004

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a0:	f7ff fff2 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	4903      	ldr	r1, [pc, #12]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000
 80044c0:	08006968 	.word	0x08006968

080044c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044c8:	f7ff ffde 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	0adb      	lsrs	r3, r3, #11
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4903      	ldr	r1, [pc, #12]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08006968 	.word	0x08006968

080044ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <RCC_Delay+0x34>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <RCC_Delay+0x38>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	0a5b      	lsrs	r3, r3, #9
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004508:	bf00      	nop
  }
  while (Delay --);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1e5a      	subs	r2, r3, #1
 800450e:	60fa      	str	r2, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f9      	bne.n	8004508 <RCC_Delay+0x1c>
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	20000004 	.word	0x20000004
 8004524:	10624dd3 	.word	0x10624dd3

08004528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e076      	b.n	8004628 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454a:	d009      	beq.n	8004560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
 8004552:	e005      	b.n	8004560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fe fd46 	bl	800300c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	ea42 0103 	orr.w	r1, r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	0c1a      	lsrs	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f002 0204 	and.w	r2, r2, #4
 8004606:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004616:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	; 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800463e:	2301      	movs	r3, #1
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x26>
 8004652:	2302      	movs	r3, #2
 8004654:	e198      	b.n	8004988 <HAL_SPI_TransmitReceive+0x358>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800465e:	f7fe ff93 	bl	8003588 <HAL_GetTick>
 8004662:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800467c:	2b01      	cmp	r3, #1
 800467e:	d00f      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x70>
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004686:	d107      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x68>
 8004690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004694:	2b04      	cmp	r3, #4
 8004696:	d003      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004698:	2302      	movs	r3, #2
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800469e:	e16d      	b.n	800497c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x82>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x82>
 80046ac:	887b      	ldrh	r3, [r7, #2]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046b8:	e160      	b.n	800497c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d003      	beq.n	80046ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2205      	movs	r2, #5
 80046ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	887a      	ldrh	r2, [r7, #2]
 80046de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	887a      	ldrh	r2, [r7, #2]
 80046e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	887a      	ldrh	r2, [r7, #2]
 80046f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d007      	beq.n	8004722 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472a:	d17c      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_SPI_TransmitReceive+0x10a>
 8004734:	8b7b      	ldrh	r3, [r7, #26]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d16a      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	881a      	ldrh	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	1c9a      	adds	r2, r3, #2
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475e:	e057      	b.n	8004810 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d11b      	bne.n	80047a6 <HAL_SPI_TransmitReceive+0x176>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d016      	beq.n	80047a6 <HAL_SPI_TransmitReceive+0x176>
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d113      	bne.n	80047a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	881a      	ldrh	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d119      	bne.n	80047e8 <HAL_SPI_TransmitReceive+0x1b8>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d014      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	b292      	uxth	r2, r2
 80047ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	1c9a      	adds	r2, r3, #2
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047e4:	2301      	movs	r3, #1
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047e8:	f7fe fece 	bl	8003588 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d80b      	bhi.n	8004810 <HAL_SPI_TransmitReceive+0x1e0>
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047fe:	d007      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800480e:	e0b5      	b.n	800497c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1a2      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x130>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d19d      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x130>
 8004824:	e080      	b.n	8004928 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_SPI_TransmitReceive+0x204>
 800482e:	8b7b      	ldrh	r3, [r7, #26]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d16f      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	7812      	ldrb	r2, [r2, #0]
 8004840:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800485a:	e05b      	b.n	8004914 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d11c      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x274>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d017      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x274>
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d114      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d119      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x2b6>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d014      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048e2:	2301      	movs	r3, #1
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048e6:	f7fe fe4f 	bl	8003588 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d803      	bhi.n	80048fe <HAL_SPI_TransmitReceive+0x2ce>
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048fc:	d102      	bne.n	8004904 <HAL_SPI_TransmitReceive+0x2d4>
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	2b00      	cmp	r3, #0
 8004902:	d107      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004912:	e033      	b.n	800497c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d19e      	bne.n	800485c <HAL_SPI_TransmitReceive+0x22c>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d199      	bne.n	800485c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f9b3 	bl	8004c98 <SPI_EndRxTxTransaction>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d006      	beq.n	8004946 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004944:	e01a      	b.n	800497c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004972:	e003      	b.n	800497c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004988:	4618      	mov	r0, r3
 800498a:	3730      	adds	r7, #48	; 0x30
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10e      	bne.n	80049d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
    return;
 80049ce:	e0b7      	b.n	8004b40 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_SPI_IRQHandler+0x5e>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
    return;
 80049ec:	e0a8      	b.n	8004b40 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <HAL_SPI_IRQHandler+0x74>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 809e 	beq.w	8004b40 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8098 	beq.w	8004b40 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d023      	beq.n	8004a62 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d011      	beq.n	8004a4a <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	f043 0204 	orr.w	r2, r3, #4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	e00b      	b.n	8004a62 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	693b      	ldr	r3, [r7, #16]
        return;
 8004a60:	e06e      	b.n	8004b40 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d014      	beq.n	8004a96 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	f043 0201 	orr.w	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04f      	beq.n	8004b3e <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aac:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d104      	bne.n	8004aca <HAL_SPI_IRQHandler+0x13a>
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d034      	beq.n	8004b34 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0203 	bic.w	r2, r2, #3
 8004ad8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d011      	beq.n	8004b06 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_SPI_IRQHandler+0x1b8>)
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fec0 	bl	8003874 <HAL_DMA_Abort_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d016      	beq.n	8004b3c <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b12:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <HAL_SPI_IRQHandler+0x1b8>)
 8004b14:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe feaa 	bl	8003874 <HAL_DMA_Abort_IT>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004b32:	e003      	b.n	8004b3c <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f809 	bl	8004b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b3a:	e000      	b.n	8004b3e <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8004b3c:	bf00      	nop
    return;
 8004b3e:	bf00      	nop
  }
}
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	08004b5f 	.word	0x08004b5f

08004b4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff ffe7 	bl	8004b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b98:	f7fe fcf6 	bl	8003588 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ba8:	f7fe fcee 	bl	8003588 <HAL_GetTick>
 8004bac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bae:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	015b      	lsls	r3, r3, #5
 8004bb4:	0d1b      	lsrs	r3, r3, #20
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bbe:	e054      	b.n	8004c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc6:	d050      	beq.n	8004c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bc8:	f7fe fcde 	bl	8003588 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d902      	bls.n	8004bde <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d13d      	bne.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf6:	d111      	bne.n	8004c1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c00:	d004      	beq.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0a:	d107      	bne.n	8004c1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c24:	d10f      	bne.n	8004c46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e017      	b.n	8004c8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d19b      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000004 	.word	0x20000004

08004c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff ff6a 	bl	8004b88 <SPI_WaitFlagStateUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e000      	b.n	8004ccc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e041      	b.n	8004d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f839 	bl	8004d72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f000 fbee 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d001      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e035      	b.n	8004e08 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_TIM_Base_Start_IT+0x90>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_TIM_Base_Start_IT+0x4e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d004      	beq.n	8004dd2 <HAL_TIM_Base_Start_IT+0x4e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <HAL_TIM_Base_Start_IT+0x94>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d010      	beq.n	8004e06 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	e007      	b.n	8004e06 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40000400 	.word	0x40000400

08004e1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10f      	bne.n	8004e64 <HAL_TIM_Base_Stop_IT+0x48>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	f240 4344 	movw	r3, #1092	; 0x444
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_Base_Stop_IT+0x48>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e041      	b.n	8004f0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fe f916 	bl	80030d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f000 fb1c 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <HAL_TIM_PWM_Start+0x24>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e022      	b.n	8004f82 <HAL_TIM_PWM_Start+0x6a>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d109      	bne.n	8004f56 <HAL_TIM_PWM_Start+0x3e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	e015      	b.n	8004f82 <HAL_TIM_PWM_Start+0x6a>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d109      	bne.n	8004f70 <HAL_TIM_PWM_Start+0x58>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	bf14      	ite	ne
 8004f68:	2301      	movne	r3, #1
 8004f6a:	2300      	moveq	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e008      	b.n	8004f82 <HAL_TIM_PWM_Start+0x6a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	bf14      	ite	ne
 8004f7c:	2301      	movne	r3, #1
 8004f7e:	2300      	moveq	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e059      	b.n	800503e <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0x82>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f98:	e013      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xaa>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0x92>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa8:	e00b      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xaa>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xa2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb8:	e003      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fc72 	bl	80058b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <HAL_TIM_PWM_Start+0x130>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d107      	bne.n	8004fea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_TIM_PWM_Start+0x130>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <HAL_TIM_PWM_Start+0xf0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d004      	beq.n	8005008 <HAL_TIM_PWM_Start+0xf0>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <HAL_TIM_PWM_Start+0x134>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d111      	bne.n	800502c <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b06      	cmp	r3, #6
 8005018:	d010      	beq.n	800503c <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502a:	e007      	b.n	800503c <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40000400 	.word	0x40000400

08005050 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fc26 	bl	80058b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a29      	ldr	r2, [pc, #164]	; (8005114 <HAL_TIM_PWM_Stop+0xc4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d117      	bne.n	80050a2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	f241 1311 	movw	r3, #4369	; 0x1111
 800507c:	4013      	ands	r3, r2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10f      	bne.n	80050a2 <HAL_TIM_PWM_Stop+0x52>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a1a      	ldr	r2, [r3, #32]
 8005088:	f240 4344 	movw	r3, #1092	; 0x444
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d107      	bne.n	80050a2 <HAL_TIM_PWM_Stop+0x52>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a1a      	ldr	r2, [r3, #32]
 80050a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10f      	bne.n	80050d2 <HAL_TIM_PWM_Stop+0x82>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	f240 4344 	movw	r3, #1092	; 0x444
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d107      	bne.n	80050d2 <HAL_TIM_PWM_Stop+0x82>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_PWM_Stop+0x92>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e0:	e013      	b.n	800510a <HAL_TIM_PWM_Stop+0xba>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_PWM_Stop+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f0:	e00b      	b.n	800510a <HAL_TIM_PWM_Stop+0xba>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_PWM_Stop+0xb2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005100:	e003      	b.n	800510a <HAL_TIM_PWM_Stop+0xba>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40012c00 	.word	0x40012c00

08005118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b02      	cmp	r3, #2
 800512c:	d122      	bne.n	8005174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d11b      	bne.n	8005174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0202 	mvn.w	r2, #2
 8005144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9af 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f9a2 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f9b1 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b04      	cmp	r3, #4
 8005180:	d122      	bne.n	80051c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b04      	cmp	r3, #4
 800518e:	d11b      	bne.n	80051c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0204 	mvn.w	r2, #4
 8005198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f985 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 80051b4:	e005      	b.n	80051c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f978 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f987 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0208 	mvn.w	r2, #8
 80051ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2204      	movs	r2, #4
 80051f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f95b 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f94e 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f95d 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b10      	cmp	r3, #16
 8005228:	d122      	bne.n	8005270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b10      	cmp	r3, #16
 8005236:	d11b      	bne.n	8005270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0210 	mvn.w	r2, #16
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2208      	movs	r2, #8
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f931 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f924 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f933 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10e      	bne.n	800529c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b01      	cmp	r3, #1
 800528a:	d107      	bne.n	800529c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0201 	mvn.w	r2, #1
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fd fdd2 	bl	8002e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a6:	2b80      	cmp	r3, #128	; 0x80
 80052a8:	d10e      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d107      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fbcc 	bl	8005a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f8f7 	bl	80054e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b20      	cmp	r3, #32
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0220 	mvn.w	r2, #32
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fb97 	bl	8005a4e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005342:	2302      	movs	r3, #2
 8005344:	e0ae      	b.n	80054a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b0c      	cmp	r3, #12
 8005352:	f200 809f 	bhi.w	8005494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	08005391 	.word	0x08005391
 8005360:	08005495 	.word	0x08005495
 8005364:	08005495 	.word	0x08005495
 8005368:	08005495 	.word	0x08005495
 800536c:	080053d1 	.word	0x080053d1
 8005370:	08005495 	.word	0x08005495
 8005374:	08005495 	.word	0x08005495
 8005378:	08005495 	.word	0x08005495
 800537c:	08005413 	.word	0x08005413
 8005380:	08005495 	.word	0x08005495
 8005384:	08005495 	.word	0x08005495
 8005388:	08005495 	.word	0x08005495
 800538c:	08005453 	.word	0x08005453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f904 	bl	80055a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0208 	orr.w	r2, r2, #8
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	619a      	str	r2, [r3, #24]
      break;
 80053ce:	e064      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f94a 	bl	8005670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	619a      	str	r2, [r3, #24]
      break;
 8005410:	e043      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f993 	bl	8005744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0208 	orr.w	r2, r2, #8
 800542c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0204 	bic.w	r2, r2, #4
 800543c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]
      break;
 8005450:	e023      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f9dd 	bl	8005818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
      break;
 8005492:	e002      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
      break;
 8005498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a25      	ldr	r2, [pc, #148]	; (800559c <TIM_Base_SetConfig+0xa8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d007      	beq.n	800551c <TIM_Base_SetConfig+0x28>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005512:	d003      	beq.n	800551c <TIM_Base_SetConfig+0x28>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <TIM_Base_SetConfig+0xac>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d108      	bne.n	800552e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <TIM_Base_SetConfig+0xa8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_Base_SetConfig+0x52>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0x52>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <TIM_Base_SetConfig+0xac>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d108      	bne.n	8005558 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a07      	ldr	r2, [pc, #28]	; (800559c <TIM_Base_SetConfig+0xa8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d103      	bne.n	800558c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	615a      	str	r2, [r3, #20]
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40000400 	.word	0x40000400

080055a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 0201 	bic.w	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 0302 	bic.w	r3, r3, #2
 80055ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <TIM_OC1_SetConfig+0xc8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10c      	bne.n	800561a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0308 	bic.w	r3, r3, #8
 8005606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a13      	ldr	r2, [pc, #76]	; (800566c <TIM_OC1_SetConfig+0xc8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d111      	bne.n	8005646 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	621a      	str	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00

08005670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f023 0210 	bic.w	r2, r3, #16
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <TIM_OC2_SetConfig+0xd0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10d      	bne.n	80056ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a14      	ldr	r2, [pc, #80]	; (8005740 <TIM_OC2_SetConfig+0xd0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d113      	bne.n	800571c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr
 8005740:	40012c00 	.word	0x40012c00

08005744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <TIM_OC3_SetConfig+0xd0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10d      	bne.n	80057be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <TIM_OC3_SetConfig+0xd0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d113      	bne.n	80057ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	621a      	str	r2, [r3, #32]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00

08005818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <TIM_OC4_SetConfig+0x98>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d109      	bne.n	800588c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800587e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	019b      	lsls	r3, r3, #6
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr
 80058b0:	40012c00 	.word	0x40012c00

080058b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2201      	movs	r2, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1a      	ldr	r2, [r3, #32]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	401a      	ands	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	431a      	orrs	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	621a      	str	r2, [r3, #32]
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e041      	b.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d004      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a10      	ldr	r2, [pc, #64]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40000400 	.word	0x40000400

080059ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e03d      	b.n	8005a44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e042      	b.n	8005b0a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7fd fbe7 	bl	800326c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2224      	movs	r2, #36	; 0x24
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fe48 	bl	800674c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ada:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e04a      	b.n	8005bba <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fd fb97 	bl	800326c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2224      	movs	r2, #36	; 0x24
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fdf8 	bl	800674c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005b7a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0208 	orr.w	r2, r2, #8
 8005b8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b08a      	sub	sp, #40	; 0x28
 8005bc6:	af02      	add	r7, sp, #8
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d16d      	bne.n	8005cbe <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_UART_Transmit+0x2c>
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e066      	b.n	8005cc0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2221      	movs	r2, #33	; 0x21
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c00:	f7fd fcc2 	bl	8003588 <HAL_GetTick>
 8005c04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	88fa      	ldrh	r2, [r7, #6]
 8005c0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1a:	d108      	bne.n	8005c2e <HAL_UART_Transmit+0x6c>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d104      	bne.n	8005c2e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	e003      	b.n	8005c36 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c36:	e02a      	b.n	8005c8e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2180      	movs	r1, #128	; 0x80
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fb3f 	bl	80062c6 <UART_WaitOnFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e036      	b.n	8005cc0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10b      	bne.n	8005c70 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c66:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e007      	b.n	8005c80 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	781a      	ldrb	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1cf      	bne.n	8005c38 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2140      	movs	r1, #64	; 0x40
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fb0f 	bl	80062c6 <UART_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e006      	b.n	8005cc0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e000      	b.n	8005cc0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
  }
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3720      	adds	r7, #32
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d112      	bne.n	8005d08 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_UART_Receive_IT+0x26>
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e00b      	b.n	8005d0a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fb4f 	bl	80063a2 <UART_Start_Receive_IT>
 8005d04:	4603      	mov	r3, r0
 8005d06:	e000      	b.n	8005d0a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b0ba      	sub	sp, #232	; 0xe8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10f      	bne.n	8005d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <HAL_UART_IRQHandler+0x66>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fc2b 	bl	80065ce <UART_Receive_IT>
      return;
 8005d78:	e25b      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80de 	beq.w	8005f40 <HAL_UART_IRQHandler+0x22c>
 8005d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80d1 	beq.w	8005f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xae>
 8005daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	f043 0201 	orr.w	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_UART_IRQHandler+0xd2>
 8005dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	f043 0202 	orr.w	r2, r3, #2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_UART_IRQHandler+0xf6>
 8005df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f043 0204 	orr.w	r2, r3, #4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d011      	beq.n	8005e3a <HAL_UART_IRQHandler+0x126>
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	f043 0208 	orr.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 81f2 	beq.w	8006228 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_UART_IRQHandler+0x14e>
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fbb6 	bl	80065ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bf14      	ite	ne
 8005e70:	2301      	movne	r3, #1
 8005e72:	2300      	moveq	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <HAL_UART_IRQHandler+0x17a>
 8005e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d04f      	beq.n	8005f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fac0 	bl	8006414 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d041      	beq.n	8005f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3314      	adds	r3, #20
 8005eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1d9      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d013      	beq.n	8005f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	4a7e      	ldr	r2, [pc, #504]	; (80060f4 <HAL_UART_IRQHandler+0x3e0>)
 8005efc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd fcb6 	bl	8003874 <HAL_DMA_Abort_IT>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e00e      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fc ff48 	bl	8002db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e00a      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fc ff44 	bl	8002db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e006      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fc ff40 	bl	8002db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005f3a:	e175      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	bf00      	nop
    return;
 8005f3e:	e173      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	f040 814f 	bne.w	80061e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8148 	beq.w	80061e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8141 	beq.w	80061e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 80b6 	beq.w	80060f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8145 	beq.w	800622c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f080 813e 	bcs.w	800622c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	f000 8088 	beq.w	80060d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ff0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ffc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1d9      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3314      	adds	r3, #20
 8006016:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006022:	f023 0301 	bic.w	r3, r3, #1
 8006026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006034:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006038:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800603c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e1      	bne.n	8006010 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3314      	adds	r3, #20
 8006052:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800605c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3314      	adds	r3, #20
 800606c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006070:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006072:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006076:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800607e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e3      	bne.n	800604c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a4:	f023 0310 	bic.w	r3, r3, #16
 80060a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80060b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e3      	bne.n	8006092 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fd fb95 	bl	80037fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f8ad 	bl	800624a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060f0:	e09c      	b.n	800622c <HAL_UART_IRQHandler+0x518>
 80060f2:	bf00      	nop
 80060f4:	080064d9 	.word	0x080064d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006100:	b29b      	uxth	r3, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 808e 	beq.w	8006230 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8089 	beq.w	8006230 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006142:	647a      	str	r2, [r7, #68]	; 0x44
 8006144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e3      	bne.n	800611e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3314      	adds	r3, #20
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	623b      	str	r3, [r7, #32]
   return(result);
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3314      	adds	r3, #20
 8006176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800617a:	633a      	str	r2, [r7, #48]	; 0x30
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e3      	bne.n	8006156 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0310 	bic.w	r3, r3, #16
 80061b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061c0:	61fa      	str	r2, [r7, #28]
 80061c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	617b      	str	r3, [r7, #20]
   return(result);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e3      	bne.n	800619c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f832 	bl	800624a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061e6:	e023      	b.n	8006230 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <HAL_UART_IRQHandler+0x4f4>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f97d 	bl	8006500 <UART_Transmit_IT>
    return;
 8006206:	e014      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00e      	beq.n	8006232 <HAL_UART_IRQHandler+0x51e>
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f9bc 	bl	800659e <UART_EndTransmit_IT>
    return;
 8006226:	e004      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
    return;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
      return;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
      return;
 8006230:	bf00      	nop
  }
}
 8006232:	37e8      	adds	r7, #232	; 0xe8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006276:	2302      	movs	r3, #2
 8006278:	e020      	b.n	80062bc <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2224      	movs	r2, #36	; 0x24
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f023 030c 	bic.w	r3, r3, #12
 8006298:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f043 0308 	orr.w	r3, r3, #8
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bc80      	pop	{r7}
 80062c4:	4770      	bx	lr

080062c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b090      	sub	sp, #64	; 0x40
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	603b      	str	r3, [r7, #0]
 80062d2:	4613      	mov	r3, r2
 80062d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d6:	e050      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062de:	d04c      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80062e6:	f7fd f94f 	bl	8003588 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d241      	bcs.n	800637a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	330c      	adds	r3, #12
 8006314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006316:	637a      	str	r2, [r7, #52]	; 0x34
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800631c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e5      	bne.n	80062f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3314      	adds	r3, #20
 8006330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	613b      	str	r3, [r7, #16]
   return(result);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	63bb      	str	r3, [r7, #56]	; 0x38
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3314      	adds	r3, #20
 8006348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800634a:	623a      	str	r2, [r7, #32]
 800634c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	69f9      	ldr	r1, [r7, #28]
 8006350:	6a3a      	ldr	r2, [r7, #32]
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	61bb      	str	r3, [r7, #24]
   return(result);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e5      	bne.n	800632a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e00f      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4013      	ands	r3, r2
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	429a      	cmp	r2, r3
 8006388:	bf0c      	ite	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	2300      	movne	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	461a      	mov	r2, r3
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	429a      	cmp	r2, r3
 8006396:	d09f      	beq.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3740      	adds	r7, #64	; 0x40
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	4613      	mov	r3, r2
 80063ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	88fa      	ldrh	r2, [r7, #6]
 80063ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2222      	movs	r2, #34	; 0x22
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0220 	orr.w	r2, r2, #32
 8006406:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr

08006414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b095      	sub	sp, #84	; 0x54
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	330c      	adds	r3, #12
 800643a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800643c:	643a      	str	r2, [r7, #64]	; 0x40
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e5      	bne.n	800641c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3314      	adds	r3, #20
 8006456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	64bb      	str	r3, [r7, #72]	; 0x48
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3314      	adds	r3, #20
 800646e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006470:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e5      	bne.n	8006450 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	2b01      	cmp	r3, #1
 800648a:	d119      	bne.n	80064c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	60bb      	str	r3, [r7, #8]
   return(result);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f023 0310 	bic.w	r3, r3, #16
 80064a2:	647b      	str	r3, [r7, #68]	; 0x44
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	330c      	adds	r3, #12
 80064aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ac:	61ba      	str	r2, [r7, #24]
 80064ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6979      	ldr	r1, [r7, #20]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e5      	bne.n	800648c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064ce:	bf00      	nop
 80064d0:	3754      	adds	r7, #84	; 0x54
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7fc fc5e 	bl	8002db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b21      	cmp	r3, #33	; 0x21
 8006512:	d13e      	bne.n	8006592 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651c:	d114      	bne.n	8006548 <UART_Transmit_IT+0x48>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d110      	bne.n	8006548 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800653a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	1c9a      	adds	r2, r3, #2
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]
 8006546:	e008      	b.n	800655a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6211      	str	r1, [r2, #32]
 8006552:	781a      	ldrb	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29b      	uxth	r3, r3
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4619      	mov	r1, r3
 8006568:	84d1      	strh	r1, [r2, #38]	; 0x26
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800657c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e000      	b.n	8006594 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006592:	2302      	movs	r3, #2
  }
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fe3a 	bl	8006238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b08c      	sub	sp, #48	; 0x30
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b22      	cmp	r3, #34	; 0x22
 80065e0:	f040 80ae 	bne.w	8006740 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d117      	bne.n	800661e <UART_Receive_IT+0x50>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d113      	bne.n	800661e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	b29a      	uxth	r2, r3
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	1c9a      	adds	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28
 800661c:	e026      	b.n	800666c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006630:	d007      	beq.n	8006642 <UART_Receive_IT+0x74>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <UART_Receive_IT+0x82>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e008      	b.n	8006662 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4619      	mov	r1, r3
 800667a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800667c:	2b00      	cmp	r3, #0
 800667e:	d15d      	bne.n	800673c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0220 	bic.w	r2, r2, #32
 800668e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800669e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d135      	bne.n	8006732 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	613b      	str	r3, [r7, #16]
   return(result);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f023 0310 	bic.w	r3, r3, #16
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ec:	623a      	str	r2, [r7, #32]
 80066ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	69f9      	ldr	r1, [r7, #28]
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b10      	cmp	r3, #16
 800670c:	d10a      	bne.n	8006724 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff fd8d 	bl	800624a <HAL_UARTEx_RxEventCallback>
 8006730:	e002      	b.n	8006738 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fc fa88 	bl	8002c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e002      	b.n	8006742 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e000      	b.n	8006742 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	3730      	adds	r7, #48	; 0x30
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006786:	f023 030c 	bic.w	r3, r3, #12
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	430b      	orrs	r3, r1
 8006792:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2c      	ldr	r2, [pc, #176]	; (8006860 <UART_SetConfig+0x114>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d103      	bne.n	80067bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7fd fe86 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	e002      	b.n	80067c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067bc:	f7fd fe6e 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 80067c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009a      	lsls	r2, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	4a22      	ldr	r2, [pc, #136]	; (8006864 <UART_SetConfig+0x118>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	0119      	lsls	r1, r3, #4
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009a      	lsls	r2, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f8:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <UART_SetConfig+0x118>)
 80067fa:	fba3 0302 	umull	r0, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	2064      	movs	r0, #100	; 0x64
 8006802:	fb00 f303 	mul.w	r3, r0, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	3332      	adds	r3, #50	; 0x32
 800680c:	4a15      	ldr	r2, [pc, #84]	; (8006864 <UART_SetConfig+0x118>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006818:	4419      	add	r1, r3
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009a      	lsls	r2, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <UART_SetConfig+0x118>)
 8006832:	fba3 0302 	umull	r0, r3, r3, r2
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	2064      	movs	r0, #100	; 0x64
 800683a:	fb00 f303 	mul.w	r3, r0, r3
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	3332      	adds	r3, #50	; 0x32
 8006844:	4a07      	ldr	r2, [pc, #28]	; (8006864 <UART_SetConfig+0x118>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	f003 020f 	and.w	r2, r3, #15
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	440a      	add	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40013800 	.word	0x40013800
 8006864:	51eb851f 	.word	0x51eb851f

08006868 <ceilf>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800686e:	3d7f      	subs	r5, #127	; 0x7f
 8006870:	2d16      	cmp	r5, #22
 8006872:	4601      	mov	r1, r0
 8006874:	4604      	mov	r4, r0
 8006876:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800687a:	dc25      	bgt.n	80068c8 <ceilf+0x60>
 800687c:	2d00      	cmp	r5, #0
 800687e:	da0e      	bge.n	800689e <ceilf+0x36>
 8006880:	4917      	ldr	r1, [pc, #92]	; (80068e0 <ceilf+0x78>)
 8006882:	f7fa f887 	bl	8000994 <__addsf3>
 8006886:	2100      	movs	r1, #0
 8006888:	f7fa fb48 	bl	8000f1c <__aeabi_fcmpgt>
 800688c:	b128      	cbz	r0, 800689a <ceilf+0x32>
 800688e:	2c00      	cmp	r4, #0
 8006890:	db22      	blt.n	80068d8 <ceilf+0x70>
 8006892:	2e00      	cmp	r6, #0
 8006894:	bf18      	it	ne
 8006896:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800689a:	4621      	mov	r1, r4
 800689c:	e01a      	b.n	80068d4 <ceilf+0x6c>
 800689e:	4e11      	ldr	r6, [pc, #68]	; (80068e4 <ceilf+0x7c>)
 80068a0:	412e      	asrs	r6, r5
 80068a2:	4230      	tst	r0, r6
 80068a4:	d016      	beq.n	80068d4 <ceilf+0x6c>
 80068a6:	490e      	ldr	r1, [pc, #56]	; (80068e0 <ceilf+0x78>)
 80068a8:	f7fa f874 	bl	8000994 <__addsf3>
 80068ac:	2100      	movs	r1, #0
 80068ae:	f7fa fb35 	bl	8000f1c <__aeabi_fcmpgt>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d0f1      	beq.n	800689a <ceilf+0x32>
 80068b6:	2c00      	cmp	r4, #0
 80068b8:	bfc2      	ittt	gt
 80068ba:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 80068be:	412b      	asrgt	r3, r5
 80068c0:	18e4      	addgt	r4, r4, r3
 80068c2:	ea24 0406 	bic.w	r4, r4, r6
 80068c6:	e7e8      	b.n	800689a <ceilf+0x32>
 80068c8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80068cc:	d302      	bcc.n	80068d4 <ceilf+0x6c>
 80068ce:	f7fa f861 	bl	8000994 <__addsf3>
 80068d2:	4601      	mov	r1, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80068dc:	e7dd      	b.n	800689a <ceilf+0x32>
 80068de:	bf00      	nop
 80068e0:	7149f2ca 	.word	0x7149f2ca
 80068e4:	007fffff 	.word	0x007fffff

080068e8 <memset>:
 80068e8:	4603      	mov	r3, r0
 80068ea:	4402      	add	r2, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	2600      	movs	r6, #0
 80068fc:	4d0c      	ldr	r5, [pc, #48]	; (8006930 <__libc_init_array+0x38>)
 80068fe:	4c0d      	ldr	r4, [pc, #52]	; (8006934 <__libc_init_array+0x3c>)
 8006900:	1b64      	subs	r4, r4, r5
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	42a6      	cmp	r6, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	f000 f81a 	bl	8006940 <_init>
 800690c:	2600      	movs	r6, #0
 800690e:	4d0a      	ldr	r5, [pc, #40]	; (8006938 <__libc_init_array+0x40>)
 8006910:	4c0a      	ldr	r4, [pc, #40]	; (800693c <__libc_init_array+0x44>)
 8006912:	1b64      	subs	r4, r4, r5
 8006914:	10a4      	asrs	r4, r4, #2
 8006916:	42a6      	cmp	r6, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006920:	4798      	blx	r3
 8006922:	3601      	adds	r6, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f855 3b04 	ldr.w	r3, [r5], #4
 800692a:	4798      	blx	r3
 800692c:	3601      	adds	r6, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	08006984 	.word	0x08006984
 8006934:	08006984 	.word	0x08006984
 8006938:	08006984 	.word	0x08006984
 800693c:	0800698c 	.word	0x0800698c

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
