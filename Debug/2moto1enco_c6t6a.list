
2moto1enco_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f0  080077f0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080077f0  080077f0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077f0  080077f0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080077fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000020  0800781c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800781c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018aac  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003160  00000000  00000000  00038b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  0003bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d15  00000000  00000000  0003cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b398  00000000  00000000  0003da6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a5e  00000000  00000000  00058e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fe59  00000000  00000000  0006b863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a0c  00000000  00000000  000fb6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001000c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	080077ac 	.word	0x080077ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	080077ac 	.word	0x080077ac

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_frsub>:
 8000a98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a9c:	e002      	b.n	8000aa4 <__addsf3>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_fsub>:
 8000aa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa4 <__addsf3>:
 8000aa4:	0042      	lsls	r2, r0, #1
 8000aa6:	bf1f      	itttt	ne
 8000aa8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aac:	ea92 0f03 	teqne	r2, r3
 8000ab0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab8:	d06a      	beq.n	8000b90 <__addsf3+0xec>
 8000aba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000abe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac2:	bfc1      	itttt	gt
 8000ac4:	18d2      	addgt	r2, r2, r3
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	4048      	eorgt	r0, r1
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	bfb8      	it	lt
 8000ace:	425b      	neglt	r3, r3
 8000ad0:	2b19      	cmp	r3, #25
 8000ad2:	bf88      	it	hi
 8000ad4:	4770      	bxhi	lr
 8000ad6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ade:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4249      	negne	r1, r1
 8000af6:	ea92 0f03 	teq	r2, r3
 8000afa:	d03f      	beq.n	8000b7c <__addsf3+0xd8>
 8000afc:	f1a2 0201 	sub.w	r2, r2, #1
 8000b00:	fa41 fc03 	asr.w	ip, r1, r3
 8000b04:	eb10 000c 	adds.w	r0, r0, ip
 8000b08:	f1c3 0320 	rsb	r3, r3, #32
 8000b0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	d502      	bpl.n	8000b1c <__addsf3+0x78>
 8000b16:	4249      	negs	r1, r1
 8000b18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b20:	d313      	bcc.n	8000b4a <__addsf3+0xa6>
 8000b22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b26:	d306      	bcc.n	8000b36 <__addsf3+0x92>
 8000b28:	0840      	lsrs	r0, r0, #1
 8000b2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2e:	f102 0201 	add.w	r2, r2, #1
 8000b32:	2afe      	cmp	r2, #254	; 0xfe
 8000b34:	d251      	bcs.n	8000bda <__addsf3+0x136>
 8000b36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3e:	bf08      	it	eq
 8000b40:	f020 0001 	biceq.w	r0, r0, #1
 8000b44:	ea40 0003 	orr.w	r0, r0, r3
 8000b48:	4770      	bx	lr
 8000b4a:	0049      	lsls	r1, r1, #1
 8000b4c:	eb40 0000 	adc.w	r0, r0, r0
 8000b50:	3a01      	subs	r2, #1
 8000b52:	bf28      	it	cs
 8000b54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b58:	d2ed      	bcs.n	8000b36 <__addsf3+0x92>
 8000b5a:	fab0 fc80 	clz	ip, r0
 8000b5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b62:	ebb2 020c 	subs.w	r2, r2, ip
 8000b66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6a:	bfaa      	itet	ge
 8000b6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b70:	4252      	neglt	r2, r2
 8000b72:	4318      	orrge	r0, r3
 8000b74:	bfbc      	itt	lt
 8000b76:	40d0      	lsrlt	r0, r2
 8000b78:	4318      	orrlt	r0, r3
 8000b7a:	4770      	bx	lr
 8000b7c:	f092 0f00 	teq	r2, #0
 8000b80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b84:	bf06      	itte	eq
 8000b86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8a:	3201      	addeq	r2, #1
 8000b8c:	3b01      	subne	r3, #1
 8000b8e:	e7b5      	b.n	8000afc <__addsf3+0x58>
 8000b90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b98:	bf18      	it	ne
 8000b9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9e:	d021      	beq.n	8000be4 <__addsf3+0x140>
 8000ba0:	ea92 0f03 	teq	r2, r3
 8000ba4:	d004      	beq.n	8000bb0 <__addsf3+0x10c>
 8000ba6:	f092 0f00 	teq	r2, #0
 8000baa:	bf08      	it	eq
 8000bac:	4608      	moveq	r0, r1
 8000bae:	4770      	bx	lr
 8000bb0:	ea90 0f01 	teq	r0, r1
 8000bb4:	bf1c      	itt	ne
 8000bb6:	2000      	movne	r0, #0
 8000bb8:	4770      	bxne	lr
 8000bba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bbe:	d104      	bne.n	8000bca <__addsf3+0x126>
 8000bc0:	0040      	lsls	r0, r0, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	4770      	bx	lr
 8000bca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bce:	bf3c      	itt	cc
 8000bd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bxcc	lr
 8000bd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	4770      	bx	lr
 8000be4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be8:	bf16      	itet	ne
 8000bea:	4608      	movne	r0, r1
 8000bec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf0:	4601      	movne	r1, r0
 8000bf2:	0242      	lsls	r2, r0, #9
 8000bf4:	bf06      	itte	eq
 8000bf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfa:	ea90 0f01 	teqeq	r0, r1
 8000bfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_ui2f>:
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e004      	b.n	8000c14 <__aeabi_i2f+0x8>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_i2f>:
 8000c0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c10:	bf48      	it	mi
 8000c12:	4240      	negmi	r0, r0
 8000c14:	ea5f 0c00 	movs.w	ip, r0
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c20:	4601      	mov	r1, r0
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	e01c      	b.n	8000c62 <__aeabi_l2f+0x2a>

08000c28 <__aeabi_ul2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e00a      	b.n	8000c4c <__aeabi_l2f+0x14>
 8000c36:	bf00      	nop

08000c38 <__aeabi_l2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c44:	d502      	bpl.n	8000c4c <__aeabi_l2f+0x14>
 8000c46:	4240      	negs	r0, r0
 8000c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4c:	ea5f 0c01 	movs.w	ip, r1
 8000c50:	bf02      	ittt	eq
 8000c52:	4684      	moveq	ip, r0
 8000c54:	4601      	moveq	r1, r0
 8000c56:	2000      	moveq	r0, #0
 8000c58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c5c:	bf08      	it	eq
 8000c5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c66:	fabc f28c 	clz	r2, ip
 8000c6a:	3a08      	subs	r2, #8
 8000c6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c70:	db10      	blt.n	8000c94 <__aeabi_l2f+0x5c>
 8000c72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c76:	4463      	add	r3, ip
 8000c78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c84:	fa20 f202 	lsr.w	r2, r0, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	f020 0001 	biceq.w	r0, r0, #1
 8000c92:	4770      	bx	lr
 8000c94:	f102 0220 	add.w	r2, r2, #32
 8000c98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_fmul>:
 8000cb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc2:	ea92 0f0c 	teqne	r2, ip
 8000cc6:	ea93 0f0c 	teqne	r3, ip
 8000cca:	d06f      	beq.n	8000dac <__aeabi_fmul+0xf8>
 8000ccc:	441a      	add	r2, r3
 8000cce:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd2:	0240      	lsls	r0, r0, #9
 8000cd4:	bf18      	it	ne
 8000cd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cda:	d01e      	beq.n	8000d1a <__aeabi_fmul+0x66>
 8000cdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf4:	bf3e      	ittt	cc
 8000cf6:	0049      	lslcc	r1, r1, #1
 8000cf8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	ea40 0001 	orr.w	r0, r0, r1
 8000d02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d06:	2afd      	cmp	r2, #253	; 0xfd
 8000d08:	d81d      	bhi.n	8000d46 <__aeabi_fmul+0x92>
 8000d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d12:	bf08      	it	eq
 8000d14:	f020 0001 	biceq.w	r0, r0, #1
 8000d18:	4770      	bx	lr
 8000d1a:	f090 0f00 	teq	r0, #0
 8000d1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d22:	bf08      	it	eq
 8000d24:	0249      	lsleq	r1, r1, #9
 8000d26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2e:	3a7f      	subs	r2, #127	; 0x7f
 8000d30:	bfc2      	ittt	gt
 8000d32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3a:	4770      	bxgt	lr
 8000d3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	3a01      	subs	r2, #1
 8000d46:	dc5d      	bgt.n	8000e04 <__aeabi_fmul+0x150>
 8000d48:	f112 0f19 	cmn.w	r2, #25
 8000d4c:	bfdc      	itt	le
 8000d4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d52:	4770      	bxle	lr
 8000d54:	f1c2 0200 	rsb	r2, r2, #0
 8000d58:	0041      	lsls	r1, r0, #1
 8000d5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5e:	f1c2 0220 	rsb	r2, r2, #32
 8000d62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6a:	f140 0000 	adc.w	r0, r0, #0
 8000d6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d72:	bf08      	it	eq
 8000d74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d78:	4770      	bx	lr
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fmul+0xce>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fmul+0xe6>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e78f      	b.n	8000ccc <__aeabi_fmul+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	bf18      	it	ne
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d00a      	beq.n	8000dd2 <__aeabi_fmul+0x11e>
 8000dbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc0:	bf18      	it	ne
 8000dc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc6:	d1d8      	bne.n	8000d7a <__aeabi_fmul+0xc6>
 8000dc8:	ea80 0001 	eor.w	r0, r0, r1
 8000dcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	bf17      	itett	ne
 8000dd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	f091 0f00 	teqne	r1, #0
 8000de2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de6:	d014      	beq.n	8000e12 <__aeabi_fmul+0x15e>
 8000de8:	ea92 0f0c 	teq	r2, ip
 8000dec:	d101      	bne.n	8000df2 <__aeabi_fmul+0x13e>
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	d10f      	bne.n	8000e12 <__aeabi_fmul+0x15e>
 8000df2:	ea93 0f0c 	teq	r3, ip
 8000df6:	d103      	bne.n	8000e00 <__aeabi_fmul+0x14c>
 8000df8:	024b      	lsls	r3, r1, #9
 8000dfa:	bf18      	it	ne
 8000dfc:	4608      	movne	r0, r1
 8000dfe:	d108      	bne.n	8000e12 <__aeabi_fmul+0x15e>
 8000e00:	ea80 0001 	eor.w	r0, r0, r1
 8000e04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	4770      	bx	lr
 8000e12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fdiv>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d069      	beq.n	8000f08 <__aeabi_fdiv+0xec>
 8000e34:	eba2 0203 	sub.w	r2, r2, r3
 8000e38:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3c:	0249      	lsls	r1, r1, #9
 8000e3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e42:	d037      	beq.n	8000eb4 <__aeabi_fdiv+0x98>
 8000e44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e54:	428b      	cmp	r3, r1
 8000e56:	bf38      	it	cc
 8000e58:	005b      	lslcc	r3, r3, #1
 8000e5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e62:	428b      	cmp	r3, r1
 8000e64:	bf24      	itt	cs
 8000e66:	1a5b      	subcs	r3, r3, r1
 8000e68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e70:	bf24      	itt	cs
 8000e72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7e:	bf24      	itt	cs
 8000e80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e8c:	bf24      	itt	cs
 8000e8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9e:	d1e0      	bne.n	8000e62 <__aeabi_fdiv+0x46>
 8000ea0:	2afd      	cmp	r2, #253	; 0xfd
 8000ea2:	f63f af50 	bhi.w	8000d46 <__aeabi_fmul+0x92>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ebc:	327f      	adds	r2, #127	; 0x7f
 8000ebe:	bfc2      	ittt	gt
 8000ec0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec8:	4770      	bxgt	lr
 8000eca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	3a01      	subs	r2, #1
 8000ed4:	e737      	b.n	8000d46 <__aeabi_fmul+0x92>
 8000ed6:	f092 0f00 	teq	r2, #0
 8000eda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0040      	lsleq	r0, r0, #1
 8000ee2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee6:	3a01      	subeq	r2, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fdiv+0xc2>
 8000eea:	ea40 000c 	orr.w	r0, r0, ip
 8000eee:	f093 0f00 	teq	r3, #0
 8000ef2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0049      	lsleq	r1, r1, #1
 8000efa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efe:	3b01      	subeq	r3, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fdiv+0xda>
 8000f02:	ea41 010c 	orr.w	r1, r1, ip
 8000f06:	e795      	b.n	8000e34 <__aeabi_fdiv+0x18>
 8000f08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	d108      	bne.n	8000f24 <__aeabi_fdiv+0x108>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	f47f af7d 	bne.w	8000e12 <__aeabi_fmul+0x15e>
 8000f18:	ea93 0f0c 	teq	r3, ip
 8000f1c:	f47f af70 	bne.w	8000e00 <__aeabi_fmul+0x14c>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e776      	b.n	8000e12 <__aeabi_fmul+0x15e>
 8000f24:	ea93 0f0c 	teq	r3, ip
 8000f28:	d104      	bne.n	8000f34 <__aeabi_fdiv+0x118>
 8000f2a:	024b      	lsls	r3, r1, #9
 8000f2c:	f43f af4c 	beq.w	8000dc8 <__aeabi_fmul+0x114>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e76e      	b.n	8000e12 <__aeabi_fmul+0x15e>
 8000f34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f38:	bf18      	it	ne
 8000f3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3e:	d1ca      	bne.n	8000ed6 <__aeabi_fdiv+0xba>
 8000f40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f44:	f47f af5c 	bne.w	8000e00 <__aeabi_fmul+0x14c>
 8000f48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f4c:	f47f af3c 	bne.w	8000dc8 <__aeabi_fmul+0x114>
 8000f50:	e75f      	b.n	8000e12 <__aeabi_fmul+0x15e>
 8000f52:	bf00      	nop

08000f54 <__gesf2>:
 8000f54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f58:	e006      	b.n	8000f68 <__cmpsf2+0x4>
 8000f5a:	bf00      	nop

08000f5c <__lesf2>:
 8000f5c:	f04f 0c01 	mov.w	ip, #1
 8000f60:	e002      	b.n	8000f68 <__cmpsf2+0x4>
 8000f62:	bf00      	nop

08000f64 <__cmpsf2>:
 8000f64:	f04f 0c01 	mov.w	ip, #1
 8000f68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f78:	bf18      	it	ne
 8000f7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7e:	d011      	beq.n	8000fa4 <__cmpsf2+0x40>
 8000f80:	b001      	add	sp, #4
 8000f82:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f86:	bf18      	it	ne
 8000f88:	ea90 0f01 	teqne	r0, r1
 8000f8c:	bf58      	it	pl
 8000f8e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f92:	bf88      	it	hi
 8000f94:	17c8      	asrhi	r0, r1, #31
 8000f96:	bf38      	it	cc
 8000f98:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f9c:	bf18      	it	ne
 8000f9e:	f040 0001 	orrne.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	d102      	bne.n	8000fb0 <__cmpsf2+0x4c>
 8000faa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fae:	d105      	bne.n	8000fbc <__cmpsf2+0x58>
 8000fb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb4:	d1e4      	bne.n	8000f80 <__cmpsf2+0x1c>
 8000fb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fba:	d0e1      	beq.n	8000f80 <__cmpsf2+0x1c>
 8000fbc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_cfrcmple>:
 8000fc4:	4684      	mov	ip, r0
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	4661      	mov	r1, ip
 8000fca:	e7ff      	b.n	8000fcc <__aeabi_cfcmpeq>

08000fcc <__aeabi_cfcmpeq>:
 8000fcc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fce:	f7ff ffc9 	bl	8000f64 <__cmpsf2>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	bf48      	it	mi
 8000fd6:	f110 0f00 	cmnmi.w	r0, #0
 8000fda:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fdc <__aeabi_fcmpeq>:
 8000fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe0:	f7ff fff4 	bl	8000fcc <__aeabi_cfcmpeq>
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2001      	moveq	r0, #1
 8000fe8:	2000      	movne	r0, #0
 8000fea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fee:	bf00      	nop

08000ff0 <__aeabi_fcmplt>:
 8000ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff4:	f7ff ffea 	bl	8000fcc <__aeabi_cfcmpeq>
 8000ff8:	bf34      	ite	cc
 8000ffa:	2001      	movcc	r0, #1
 8000ffc:	2000      	movcs	r0, #0
 8000ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001002:	bf00      	nop

08001004 <__aeabi_fcmple>:
 8001004:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001008:	f7ff ffe0 	bl	8000fcc <__aeabi_cfcmpeq>
 800100c:	bf94      	ite	ls
 800100e:	2001      	movls	r0, #1
 8001010:	2000      	movhi	r0, #0
 8001012:	f85d fb08 	ldr.w	pc, [sp], #8
 8001016:	bf00      	nop

08001018 <__aeabi_fcmpge>:
 8001018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800101c:	f7ff ffd2 	bl	8000fc4 <__aeabi_cfrcmple>
 8001020:	bf94      	ite	ls
 8001022:	2001      	movls	r0, #1
 8001024:	2000      	movhi	r0, #0
 8001026:	f85d fb08 	ldr.w	pc, [sp], #8
 800102a:	bf00      	nop

0800102c <__aeabi_fcmpgt>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff ffc8 	bl	8000fc4 <__aeabi_cfrcmple>
 8001034:	bf34      	ite	cc
 8001036:	2001      	movcc	r0, #1
 8001038:	2000      	movcs	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_f2uiz>:
 8001040:	0042      	lsls	r2, r0, #1
 8001042:	d20e      	bcs.n	8001062 <__aeabi_f2uiz+0x22>
 8001044:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001048:	d30b      	bcc.n	8001062 <__aeabi_f2uiz+0x22>
 800104a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800104e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001052:	d409      	bmi.n	8001068 <__aeabi_f2uiz+0x28>
 8001054:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800105c:	fa23 f002 	lsr.w	r0, r3, r2
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr
 8001068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800106c:	d101      	bne.n	8001072 <__aeabi_f2uiz+0x32>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	d102      	bne.n	8001078 <__aeabi_f2uiz+0x38>
 8001072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001076:	4770      	bx	lr
 8001078:	f04f 0000 	mov.w	r0, #0
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8001090:	787a      	ldrb	r2, [r7, #1]
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f003 fd07 	bl	8004aaa <HAL_GPIO_WritePin>

}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	461a      	mov	r2, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	72fb      	strb	r3, [r7, #11]
 80010b4:	4613      	mov	r3, r2
 80010b6:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffde 	bl	8001080 <setCSLine>
	delay(docDelay);
 80010c4:	2004      	movs	r0, #4
 80010c6:	f000 f923 	bl	8001310 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 80010ca:	f107 0217 	add.w	r2, r7, #23
 80010ce:	f107 010b 	add.w	r1, r7, #11
 80010d2:	230a      	movs	r3, #10
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f004 f9cf 	bl	800547c <HAL_SPI_TransmitReceive>
	delay(docDelay);
 80010de:	2004      	movs	r0, #4
 80010e0:	f000 f916 	bl	8001310 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 80010e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010e8:	893b      	ldrh	r3, [r7, #8]
 80010ea:	4619      	mov	r1, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffc7 	bl	8001080 <setCSLine>
	return data;
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	; 0x30
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	460b      	mov	r3, r1
 800110c:	80fb      	strh	r3, [r7, #6]
 800110e:	4613      	mov	r3, r2
 8001110:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001112:	f000 f90f 	bl	8001334 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	2200      	movs	r2, #0
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	2100      	movs	r1, #0
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ffbd 	bl	80010a4 <spiWriteRead>
 800112a:	4603      	mov	r3, r0
 800112c:	b29b      	uxth	r3, r3
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001132:	2004      	movs	r0, #4
 8001134:	f000 f8ec 	bl	8001310 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	2201      	movs	r2, #1
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	2100      	movs	r1, #0
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff ffae 	bl	80010a4 <spiWriteRead>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800114e:	4313      	orrs	r3, r2
 8001150:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	e010      	b.n	800117a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8001158:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	fa42 f303 	asr.w	r3, r2, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	b2d9      	uxtb	r1, r3
 8001168:	f107 0210 	add.w	r2, r7, #16
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	4413      	add	r3, r2
 8001170:	460a      	mov	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	3301      	adds	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	ddeb      	ble.n	8001158 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001184:	7f7a      	ldrb	r2, [r7, #29]
 8001186:	7efb      	ldrb	r3, [r7, #27]
 8001188:	4053      	eors	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	7e7b      	ldrb	r3, [r7, #25]
 800118e:	4053      	eors	r3, r2
 8001190:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001192:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001194:	4053      	eors	r3, r2
 8001196:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001198:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800119a:	4053      	eors	r3, r2
 800119c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800119e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011a0:	4053      	eors	r3, r2
 80011a2:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 80011a4:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80011b0:	4299      	cmp	r1, r3
 80011b2:	d11e      	bne.n	80011f2 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80011b4:	7fbb      	ldrb	r3, [r7, #30]
 80011b6:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011b8:	7f3a      	ldrb	r2, [r7, #28]
 80011ba:	7ebb      	ldrb	r3, [r7, #26]
 80011bc:	4053      	eors	r3, r2
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	4053      	eors	r3, r2
 80011c4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80011c6:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011c8:	4053      	eors	r3, r2
 80011ca:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011ce:	4053      	eors	r3, r2
 80011d0:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80011d2:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011d4:	4053      	eors	r3, r2
 80011d6:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80011d8:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011da:	429a      	cmp	r2, r3
 80011dc:	bf0c      	ite	eq
 80011de:	2301      	moveq	r3, #1
 80011e0:	2300      	movne	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 80011e4:	4299      	cmp	r1, r3
 80011e6:	d104      	bne.n	80011f2 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 80011e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80011ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011f0:	e002      	b.n	80011f8 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 80011f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f6:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d107      	bne.n	800120e <getPositionSPI+0x112>
 80011fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001204:	4293      	cmp	r3, r2
 8001206:	d002      	beq.n	800120e <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 8001208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 800120e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001210:	4618      	mov	r0, r3
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	4613      	mov	r3, r2
 8001224:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	2200      	movs	r2, #0
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	2100      	movs	r1, #0
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff ff37 	bl	80010a4 <spiWriteRead>
	delay( docDelay);
 8001236:	2004      	movs	r0, #4
 8001238:	f000 f86a 	bl	8001310 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	2201      	movs	r2, #1
 8001240:	9200      	str	r2, [sp, #0]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	2170      	movs	r1, #112	; 0x70
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff ff2c 	bl	80010a4 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 800124c:	2078      	movs	r0, #120	; 0x78
 800124e:	f000 f85f 	bl	8001310 <delay>

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	4613      	mov	r3, r2
 800126a:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d11e      	bne.n	80012b6 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fcc2 	bl	8000c04 <__aeabi_ui2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f8c6 	bl	8000414 <__aeabi_f2d>
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <calculateAngle+0xa8>)
 800128e:	f7ff f919 	bl	80004c4 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <calculateAngle+0xac>)
 80012a0:	f7ff fa3a 	bl	8000718 <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fba4 	bl	80009f8 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e020      	b.n	80012f8 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 80012b6:	797b      	ldrb	r3, [r7, #5]
 80012b8:	2b0e      	cmp	r3, #14
 80012ba:	d11d      	bne.n	80012f8 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fca0 	bl	8000c04 <__aeabi_ui2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f8a4 	bl	8000414 <__aeabi_f2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <calculateAngle+0xa8>)
 80012d2:	f7ff f8f7 	bl	80004c4 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <calculateAngle+0xb0>)
 80012e4:	f7ff fa18 	bl	8000718 <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fb82 	bl	80009f8 <__aeabi_d2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 80012f8:	68fb      	ldr	r3, [r7, #12]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40768000 	.word	0x40768000
 8001308:	40b00000 	.word	0x40b00000
 800130c:	40d00000 	.word	0x40d00000

08001310 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f83b 	bl	8001394 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <startDWT>:

int startDWT(){
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 800132a:	f000 f803 	bl	8001334 <DWT_Delay_Init>

}
 800132e:	bf00      	nop
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}

08001334 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <DWT_Delay_Init+0x58>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4a13      	ldr	r2, [pc, #76]	; (800138c <DWT_Delay_Init+0x58>)
 800133e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001342:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <DWT_Delay_Init+0x58>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a10      	ldr	r2, [pc, #64]	; (800138c <DWT_Delay_Init+0x58>)
 800134a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <DWT_Delay_Init+0x5c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <DWT_Delay_Init+0x5c>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800136e:	bf00      	nop
    __ASM volatile ("NOP");
 8001370:	bf00      	nop
    __ASM volatile ("NOP");
 8001372:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800137c:	2300      	movs	r3, #0
 800137e:	e000      	b.n	8001382 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001380:	2301      	movs	r3, #1
    }
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000edf0 	.word	0xe000edf0
 8001390:	e0001000 	.word	0xe0001000

08001394 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <DWT_Delay_us+0x48>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80013a2:	f003 ff97 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <DWT_Delay_us+0x4c>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80013bc:	bf00      	nop
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <DWT_Delay_us+0x48>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad2      	subs	r2, r2, r3
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1acb      	subs	r3, r1, r3
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3f6      	bcc.n	80013be <DWT_Delay_us+0x2a>
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e0001000 	.word	0xe0001000
 80013e0:	431bde83 	.word	0x431bde83

080013e4 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	e9c7 0100 	strd	r0, r1, [r7]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f006 f956 	bl	80076d4 <ceilf>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <_ZN7RoboArmC1Eff>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(float defaultAngleT, float defaultDistanseT) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2210      	movs	r2, #16
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fbdb 	bl	8000c0c <__aeabi_i2f>
 8001456:	4602      	mov	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	441a      	add	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	675a      	str	r2, [r3, #116]	; 0x74
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	679a      	str	r2, [r3, #120]	; 0x78
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4a30      	ldr	r2, [pc, #192]	; (800153c <_ZN7RoboArmC1Eff+0x108>)
 800147a:	67da      	str	r2, [r3, #124]	; 0x7c
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <_ZN7RoboArmC1Eff+0x10c>)
 8001488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <_ZN7RoboArmC1Eff+0x110>)
 8001490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	220e      	movs	r2, #14
 8001498:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	33ac      	adds	r3, #172	; 0xac
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 feb3 	bl	800220c <_ZN7TMC2209C1Ev>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	33d4      	adds	r3, #212	; 0xd4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 feae 	bl	800220c <_ZN7TMC2209C1Ev>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	33fc      	adds	r3, #252	; 0xfc
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fea9 	bl	800220c <_ZN7TMC2209C1Ev>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	defaultAngle = defaultAngleT;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	defaultDistanse = defaultDistanseT;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

	startDWT();
 800152e:	f7ff fefa 	bl	8001326 <startDWT>
}
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	000105b8 	.word	0x000105b8
 8001540:	43520000 	.word	0x43520000
 8001544:	42400000 	.word	0x42400000

08001548 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001558:	2201      	movs	r2, #1
 800155a:	4619      	mov	r1, r3
 800155c:	f003 faa5 	bl	8004aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800156a:	2201      	movs	r2, #1
 800156c:	4619      	mov	r1, r3
 800156e:	f003 fa9c 	bl	8004aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f003 fa93 	bl	8004aaa <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fc86 	bl	8005e9c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2104      	movs	r1, #4
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fc80 	bl	8005e9c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	2108      	movs	r1, #8
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fc7a 	bl	8005e9c <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f004 fb5b 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 fb56 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fb51 	bl	8005c68 <HAL_TIM_Base_Stop_IT>

	return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_ZN7RoboArm11Move2MotorsEff>:
////    std::cout<<"== Поточна дистанція по енкодеру: "<<distPsteps/steps4OneMM<<" mm"<<std::endl; //поточна дистанція по енкодеру
//
//     return distPsteps/steps4OneMM;
// }

int RoboArm::Move2Motors(float angle, float distance) {
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08f      	sub	sp, #60	; 0x3c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fc5a 	bl	8005e9c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2104      	movs	r1, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fc54 	bl	8005e9c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);			// остановили прерывание таймеров
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fb35 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fb30 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
	// COMMENT 4
//	SetEnable(1, false);
//	SetEnable(2, false);

//	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
	lastPosAngle_Enc = GetAng();
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fcb3 	bl	8001f74 <_ZN7RoboArm6GetAngEv>
 800160e:	4602      	mov	r2, r0
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	lastPosLinear_Enc = GetLin();
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 fc30 	bl	8001e7c <_ZN7RoboArm6GetLinEv>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	float lastPosAngle = lastPosAngle_Enc;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lastPosLinear = lastPosLinear_Enc;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28

	float pos_ang = abs(lastPosAngle - angle);
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001638:	f7ff fa32 	bl	8000aa0 <__aeabi_fsub>
 800163c:	4603      	mov	r3, r0
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fedf 	bl	8001402 <_ZSt3absf>
 8001644:	6278      	str	r0, [r7, #36]	; 0x24
	float inverse_pos_ang = abs(360.0 - pos_ang);
 8001646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001648:	f7fe fee4 	bl	8000414 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	4975      	ldr	r1, [pc, #468]	; (800182c <_ZN7RoboArm11Move2MotorsEff+0x25c>)
 8001656:	f7fe fd7d 	bl	8000154 <__aeabi_dsub>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff febf 	bl	80013e4 <_ZSt3absd>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff f9c3 	bl	80009f8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	623b      	str	r3, [r7, #32]
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 8001676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001678:	6a38      	ldr	r0, [r7, #32]
 800167a:	f7ff fcb9 	bl	8000ff0 <__aeabi_fcmplt>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d014      	beq.n	80016ae <_ZN7RoboArm11Move2MotorsEff+0xde>
		actualPosAngle = inverse_pos_ang;
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800168c:	f7ff fcb0 	bl	8000ff0 <__aeabi_fcmplt>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <_ZN7RoboArm11Move2MotorsEff+0xd2>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.enableInverseMotorDirection();
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	33d4      	adds	r3, #212	; 0xd4
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fed2 	bl	8002444 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80016a0:	e019      	b.n	80016d6 <_ZN7RoboArm11Move2MotorsEff+0x106>
		} else {//if (lastPosAngle > angle) {
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);

			tmcd_angle.disableInverseMotorDirection();
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	33d4      	adds	r3, #212	; 0xd4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fedc 	bl	8002464 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80016ac:	e013      	b.n	80016d6 <_ZN7RoboArm11Move2MotorsEff+0x106>
		}
	} else {
		actualPosAngle = pos_ang;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016b6:	f7ff fc9b 	bl	8000ff0 <__aeabi_fcmplt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <_ZN7RoboArm11Move2MotorsEff+0xfc>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.disableInverseMotorDirection();
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	33d4      	adds	r3, #212	; 0xd4
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fecd 	bl	8002464 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80016ca:	e004      	b.n	80016d6 <_ZN7RoboArm11Move2MotorsEff+0x106>
		} else {//if (lastPosAngle > angle) {
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.enableInverseMotorDirection();
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	33d4      	adds	r3, #212	; 0xd4
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 feb7 	bl	8002444 <_ZN7TMC220927enableInverseMotorDirectionEv>
		}
	}

	if (lastPosLinear < distance) {
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016da:	f7ff fc89 	bl	8000ff0 <__aeabi_fcmplt>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <_ZN7RoboArm11Move2MotorsEff+0x120>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
		tmcd_linear.enableInverseMotorDirection();
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	33ac      	adds	r3, #172	; 0xac
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 feab 	bl	8002444 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80016ee:	e004      	b.n	80016fa <_ZN7RoboArm11Move2MotorsEff+0x12a>
	} else {//if (lastPosLinear > distance) {
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
		tmcd_linear.disableInverseMotorDirection();
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	33ac      	adds	r3, #172	; 0xac
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 feb5 	bl	8002464 <_ZN7TMC220928disableInverseMotorDirectionEv>
	}

	float actualPosDistance = abs(lastPosLinear - distance);
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016fe:	f7ff f9cf 	bl	8000aa0 <__aeabi_fsub>
 8001702:	4603      	mov	r3, r0
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fe7c 	bl	8001402 <_ZSt3absf>
 800170a:	61f8      	str	r0, [r7, #28]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fa77 	bl	8000c0c <__aeabi_i2f>
 800171e:	4603      	mov	r3, r0
 8001720:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fac6 	bl	8000cb4 <__aeabi_fmul>
 8001728:	4603      	mov	r3, r0
 800172a:	4941      	ldr	r1, [pc, #260]	; (8001830 <_ZN7RoboArm11Move2MotorsEff+0x260>)
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fb75 	bl	8000e1c <__aeabi_fdiv>
 8001732:	4603      	mov	r3, r0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc83 	bl	8001040 <__aeabi_f2uiz>
 800173a:	4602      	mov	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	679a      	str	r2, [r3, #120]	; 0x78

	distPsteps = actualPosDistance * steps4OneMM; //кількість кроків для такої дистанції
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fa61 	bl	8000c0c <__aeabi_i2f>
 800174a:	4603      	mov	r3, r0
 800174c:	69f9      	ldr	r1, [r7, #28]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fab0 	bl	8000cb4 <__aeabi_fmul>
 8001754:	4603      	mov	r3, r0
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fc72 	bl	8001040 <__aeabi_f2uiz>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	675a      	str	r2, [r3, #116]	; 0x74

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 30;
 8001762:	231e      	movs	r3, #30
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
	if (State == ArmCorrectPosition){
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800176c:	2b16      	cmp	r3, #22
 800176e:	d102      	bne.n	8001776 <_ZN7RoboArm11Move2MotorsEff+0x1a6>
		periodM1 = 600;
 8001770:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
	}
	uint32_t psc = 72 - 1;
 8001776:	2347      	movs	r3, #71	; 0x47
 8001778:	61bb      	str	r3, [r7, #24]

	float delimiter = 1;
 800177a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800177e:	617b      	str	r3, [r7, #20]
	float mnoj = 1;
 8001780:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001784:	613b      	str	r3, [r7, #16]

	if (anglePsteps >= distPsteps) {
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178e:	429a      	cmp	r2, r3
 8001790:	d350      	bcc.n	8001834 <_ZN7RoboArm11Move2MotorsEff+0x264>

		htim1M1->Instance->PSC = psc;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1 / 2;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ae:	0852      	lsrs	r2, r2, #1
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa24 	bl	8000c04 <__aeabi_ui2f>
 80017bc:	4604      	mov	r4, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fa1e 	bl	8000c04 <__aeabi_ui2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff fb25 	bl	8000e1c <__aeabi_fdiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 80017d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017d8:	f7ff fa14 	bl	8000c04 <__aeabi_ui2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	6979      	ldr	r1, [r7, #20]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fa67 	bl	8000cb4 <__aeabi_fmul>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fe16 	bl	800141a <_ZSt4ceilf>
 80017ee:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	681c      	ldr	r4, [r3, #0]
 8001800:	6938      	ldr	r0, [r7, #16]
 8001802:	f7ff fc1d 	bl	8001040 <__aeabi_f2uiz>
 8001806:	4603      	mov	r3, r0
 8001808:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 800180a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800180e:	6938      	ldr	r0, [r7, #16]
 8001810:	f7ff fb04 	bl	8000e1c <__aeabi_fdiv>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	681c      	ldr	r4, [r3, #0]
 800181e:	4610      	mov	r0, r2
 8001820:	f7ff fc0e 	bl	8001040 <__aeabi_f2uiz>
 8001824:	4603      	mov	r3, r0
 8001826:	63a3      	str	r3, [r4, #56]	; 0x38
 8001828:	e055      	b.n	80018d6 <_ZN7RoboArm11Move2MotorsEff+0x306>
 800182a:	bf00      	nop
 800182c:	40768000 	.word	0x40768000
 8001830:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183c:	429a      	cmp	r2, r3
 800183e:	d24a      	bcs.n	80018d6 <_ZN7RoboArm11Move2MotorsEff+0x306>

		htim2M2->Instance->PSC = psc;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800185c:	0852      	lsrs	r2, r2, #1
 800185e:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f9cd 	bl	8000c04 <__aeabi_ui2f>
 800186a:	4604      	mov	r4, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff f9c7 	bl	8000c04 <__aeabi_ui2f>
 8001876:	4603      	mov	r3, r0
 8001878:	4619      	mov	r1, r3
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff face 	bl	8000e1c <__aeabi_fdiv>
 8001880:	4603      	mov	r3, r0
 8001882:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001886:	f7ff f9bd 	bl	8000c04 <__aeabi_ui2f>
 800188a:	4603      	mov	r3, r0
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa10 	bl	8000cb4 <__aeabi_fmul>
 8001894:	4603      	mov	r3, r0
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fdbf 	bl	800141a <_ZSt4ceilf>
 800189c:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	681c      	ldr	r4, [r3, #0]
 80018ae:	6938      	ldr	r0, [r7, #16]
 80018b0:	f7ff fbc6 	bl	8001040 <__aeabi_f2uiz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 80018b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018bc:	6938      	ldr	r0, [r7, #16]
 80018be:	f7ff faad 	bl	8000e1c <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	681c      	ldr	r4, [r3, #0]
 80018cc:	4610      	mov	r0, r2
 80018ce:	f7ff fbb7 	bl	8001040 <__aeabi_f2uiz>
 80018d2:	4603      	mov	r3, r0
 80018d4:	6363      	str	r3, [r4, #52]	; 0x34
	}

	stateMoveM1 = true;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	stateMoveM2 = true;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// COMMENT 5
//	SetEnable(1, true);
//	SetEnable(2, true);

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 fa39 	bl	8005d64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	2104      	movs	r1, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fa33 	bl	8005d64 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4618      	mov	r0, r3
 8001904:	f004 f964 	bl	8005bd0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	4618      	mov	r0, r3
 800190e:	f004 f95f 	bl	8005bd0 <HAL_TIM_Base_Start_IT>

	return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	373c      	adds	r7, #60	; 0x3c
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}

0800191c <_ZN7RoboArm14Set2StepMotorsEfifi>:

int RoboArm::Set2StepMotors(float stepLinT, int periodLinT, float stepAngleT,
		int periodAngleT) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
//	if (stepAngleT < 0) {
//		temp_val = -1.0*stepAngleT;
//	}


	anglePsteps=abs(stepAngleT);
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f7ff fd69 	bl	8001402 <_ZSt3absf>
 8001930:	4603      	mov	r3, r0
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb84 	bl	8001040 <__aeabi_f2uiz>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	679a      	str	r2, [r3, #120]	; 0x78
	distPsteps=abs(stepLinT);
 800193e:	68b8      	ldr	r0, [r7, #8]
 8001940:	f7ff fd5f 	bl	8001402 <_ZSt3absf>
 8001944:	4603      	mov	r3, r0
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fb7a 	bl	8001040 <__aeabi_f2uiz>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	675a      	str	r2, [r3, #116]	; 0x74

	uint32_t psc = 72 - 1;
 8001952:	2347      	movs	r3, #71	; 0x47
 8001954:	61fb      	str	r3, [r7, #28]

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fa9d 	bl	8005e9c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2104      	movs	r1, #4
 8001968:	4618      	mov	r0, r3
 800196a:	f004 fa97 	bl	8005e9c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT (htim1M1);			// остановили прерывание таймеров
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4618      	mov	r0, r3
 8001974:	f004 f978 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (htim2M2);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4618      	mov	r0, r3
 800197e:	f004 f973 	bl	8005c68 <HAL_TIM_Base_Stop_IT>

	//COMMENT 6
//	SetEnable(1, false);
//	SetEnable(2, false);

	float tempAngDir = 0, tempLinDir = 0;
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
	if (stepAngleT < 0) {
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	6838      	ldr	r0, [r7, #0]
 8001994:	f7ff fb2c 	bl	8000ff0 <__aeabi_fcmplt>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <_ZN7RoboArm14Set2StepMotorsEfifi+0x8e>
		tmcd_angle.enableInverseMotorDirection();
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	33d4      	adds	r3, #212	; 0xd4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd4e 	bl	8002444 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80019a8:	e004      	b.n	80019b4 <_ZN7RoboArm14Set2StepMotorsEfifi+0x98>
//		tempAngDir = -1;
	} else {//if (stepAngleT > 0) {
		tmcd_angle.disableInverseMotorDirection();
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	33d4      	adds	r3, #212	; 0xd4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fd58 	bl	8002464 <_ZN7TMC220928disableInverseMotorDirectionEv>
//		tempAngDir = 1;
	}

	if (stepLinT < 0) {
 80019b4:	f04f 0100 	mov.w	r1, #0
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f7ff fb19 	bl	8000ff0 <__aeabi_fcmplt>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <_ZN7RoboArm14Set2StepMotorsEfifi+0xb4>
		tmcd_linear.enableInverseMotorDirection();
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	33ac      	adds	r3, #172	; 0xac
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fd3b 	bl	8002444 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80019ce:	e004      	b.n	80019da <_ZN7RoboArm14Set2StepMotorsEfifi+0xbe>
//		tempLinDir = -1;
	} else {//if (stepLinT > 0) {
		tmcd_linear.disableInverseMotorDirection();
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	33ac      	adds	r3, #172	; 0xac
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fd45 	bl	8002464 <_ZN7TMC220928disableInverseMotorDirectionEv>
//		tempLinDir = 1;
	}

	if (periodAngleT % 2 != 0) { periodAngleT += 1;}
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <_ZN7RoboArm14Set2StepMotorsEfifi+0xce>
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	3301      	adds	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (periodLinT % 2 != 0) { periodLinT += 1;}
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <_ZN7RoboArm14Set2StepMotorsEfifi+0xde>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]

	htim1M1->Instance->PSC = psc;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
	htim1M1->Instance->ARR = periodAngleT;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1M1->Instance->CCR1 = periodAngleT / 2;
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	0fda      	lsrs	r2, r3, #31
 8001a12:	4413      	add	r3, r2
 8001a14:	105b      	asrs	r3, r3, #1
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	635a      	str	r2, [r3, #52]	; 0x34

	htim2M2->Instance->PSC = psc;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
	htim2M2->Instance->ARR = periodLinT;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
	htim2M2->Instance->CCR2 = periodLinT / 2;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0fda      	lsrs	r2, r3, #31
 8001a38:	4413      	add	r3, r2
 8001a3a:	105b      	asrs	r3, r3, #1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38


	return 0;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_ZN7RoboArm15Move2StepMotorsEv>:

int RoboArm::Move2StepMotors(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

	stateMoveM1 = true;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	stateMoveM2 = true;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// COMMENT 7
//	SetEnable(1, true);
//	SetEnable(2, true);

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 f978 	bl	8005d64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	2104      	movs	r1, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 f972 	bl	8005d64 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f004 f8a3 	bl	8005bd0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 f89e 	bl	8005bd0 <HAL_TIM_Base_Start_IT>

	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_ZN7RoboArm13SetBuserStateEi>:
return 0;
}



int RoboArm::SetBuserState(int State) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
	//State 1......9
	if (State > 0 && State < 10) {
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	dd24      	ble.n	8001af8 <_ZN7RoboArm13SetBuserStateEi+0x5a>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	dc21      	bgt.n	8001af8 <_ZN7RoboArm13SetBuserStateEi+0x5a>
		for (int t = 0; t <= State; t++) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	e01a      	b.n	8001af0 <_ZN7RoboArm13SetBuserStateEi+0x52>
			for (int i = 0; i <= 200; i++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	e00e      	b.n	8001ade <_ZN7RoboArm13SetBuserStateEi+0x40>
				HAL_GPIO_TogglePin(Buser_GPIO_Port_Ind, Buser_Pin_Ind);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f003 f804 	bl	8004ada <HAL_GPIO_TogglePin>
				HAL_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f002 fc72 	bl	80043bc <HAL_Delay>
			for (int i = 0; i <= 200; i++) {
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2bc8      	cmp	r3, #200	; 0xc8
 8001ae2:	dded      	ble.n	8001ac0 <_ZN7RoboArm13SetBuserStateEi+0x22>
			}
			HAL_Delay(100);
 8001ae4:	2064      	movs	r0, #100	; 0x64
 8001ae6:	f002 fc69 	bl	80043bc <HAL_Delay>
		for (int t = 0; t <= State; t++) {
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dde0      	ble.n	8001aba <_ZN7RoboArm13SetBuserStateEi+0x1c>
		}
	}
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_ZN7RoboArm15GetGripperStateEv>:
	posNowDistance = defaultDistanse;

	return 0;
}

int RoboArm::GetGripperState() {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	//EndCap1_Pin - зацеп зацеплен - ВЕРХНИЙ НАЖАт
	//EndCap2_Pin - зацеп расцеплен, можно двигать рукой - НИЖНИЙ

	GPIO_PinState pin_UP, pin_DOWN;

	pin_UP = HAL_GPIO_ReadPin(EndCap1_GPIO_PortG, EndCap1_PinG);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f002 ffb0 	bl	8004a7c <HAL_GPIO_ReadPin>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73fb      	strb	r3, [r7, #15]
	pin_DOWN = HAL_GPIO_ReadPin(EndCap2_GPIO_PortG, EndCap2_PinG);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	f002 ffa5 	bl	8004a7c <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	73bb      	strb	r3, [r7, #14]

	if (pin_UP == GPIO_PIN_SET && pin_DOWN == GPIO_PIN_RESET) {
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d104      	bne.n	8001b46 <_ZN7RoboArm15GetGripperStateEv+0x44>
 8001b3c:	7bbb      	ldrb	r3, [r7, #14]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <_ZN7RoboArm15GetGripperStateEv+0x44>
		return 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e008      	b.n	8001b58 <_ZN7RoboArm15GetGripperStateEv+0x56>
	} else if (pin_DOWN == GPIO_PIN_SET && pin_UP == GPIO_PIN_RESET) {
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d104      	bne.n	8001b56 <_ZN7RoboArm15GetGripperStateEv+0x54>
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <_ZN7RoboArm15GetGripperStateEv+0x54>
		return 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <_ZN7RoboArm15GetGripperStateEv+0x56>
	} else {
		return 3; //error
 8001b56:	2303      	movs	r3, #3
	}
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>:

int RoboArm::SetSettGripper(GPIO_TypeDef *EndCap1_GPIO_PortT,
		uint16_t EndCap1_PinT, GPIO_TypeDef *EndCap2_GPIO_PortT,
		uint16_t EndCap2_PinT, GPIO_TypeDef *EndCap3_GPIO_PortT,
		uint16_t EndCap3_PinT, GPIO_TypeDef *EndCap4_GPIO_PortT,
		uint16_t EndCap4_PinT) {
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	80fb      	strh	r3, [r7, #6]

	EndCap1_GPIO_PortG = EndCap1_GPIO_PortT;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	64da      	str	r2, [r3, #76]	; 0x4c
	EndCap1_PinG = EndCap1_PinT;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	EndCap2_GPIO_PortG = EndCap2_GPIO_PortT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
	EndCap2_PinG = EndCap2_PinT;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8b3a      	ldrh	r2, [r7, #24]
 8001b88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	EndCap3_GPIO_PortG = EndCap3_GPIO_PortT;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	65da      	str	r2, [r3, #92]	; 0x5c
	EndCap3_PinG = EndCap3_PinT;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8c3a      	ldrh	r2, [r7, #32]
 8001b96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	EndCap4_GPIO_PortG = EndCap4_GPIO_PortT;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	665a      	str	r2, [r3, #100]	; 0x64
	EndCap4_PinG = EndCap4_PinT;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ba4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <_ZN7RoboArm10SetGripperEi>:

int RoboArm::SetGripper(int opcl) {
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]

	//Встановити захват
	//TODO додати перевірку чи точно зупинились мотори
	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 f969 	bl	8005e9c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2104      	movs	r1, #4
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 f963 	bl	8005e9c <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 f844 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 f83f 	bl	8005c68 <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_2);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 f953 	bl	8005e9c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim3M3);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 f834 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
	// COMMENT 8
//	SetEnable(3, false);

	//Зупинили все, 1 та 2й на утриманні
	//Обираэмо напрям
	if (opcl == 1) {
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d108      	bne.n	8001c18 <_ZN7RoboArm10SetGripperEi+0x64>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_SET);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4619      	mov	r1, r3
 8001c12:	f002 ff4a 	bl	8004aaa <HAL_GPIO_WritePin>
 8001c16:	e00a      	b.n	8001c2e <_ZN7RoboArm10SetGripperEi+0x7a>
	} else if (opcl == 0) {
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <_ZN7RoboArm10SetGripperEi+0x7a>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_RESET);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c26:	2200      	movs	r2, #0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f002 ff3e 	bl	8004aaa <HAL_GPIO_WritePin>
	}

	//Підібрати кроки та швидкість
	float periodM3 = 30.00;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <_ZN7RoboArm10SetGripperEi+0xdc>)
 8001c30:	60fb      	str	r3, [r7, #12]
	uint32_t psc3 = 72 - 1;
 8001c32:	2347      	movs	r3, #71	; 0x47
 8001c34:	60bb      	str	r3, [r7, #8]
	htim3M3->Instance->PSC = psc3;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
	htim3M3->Instance->ARR = periodM3;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	681c      	ldr	r4, [r3, #0]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7ff f9fa 	bl	8001040 <__aeabi_f2uiz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3M3->Instance->CCR2 = periodM3 / 2;
 8001c50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff f8e1 	bl	8000e1c <__aeabi_fdiv>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	681c      	ldr	r4, [r3, #0]
 8001c64:	4610      	mov	r0, r2
 8001c66:	f7ff f9eb 	bl	8001040 <__aeabi_f2uiz>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	63a3      	str	r3, [r4, #56]	; 0x38

	// COMMENT 9
//	SetEnable(3, true);
	HAL_TIM_PWM_Start(htim3M3, TIM_CHANNEL_2);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2104      	movs	r1, #4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 f875 	bl	8005d64 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim3M3);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 ffa6 	bl	8005bd0 <HAL_TIM_Base_Start_IT>
	return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	41f00000 	.word	0x41f00000

08001c94 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::setPrintState(bool state) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8001cae:	e003      	b.n	8001cb8 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	}
	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 8001cda:	2300      	movs	r3, #0
	}
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <_ZN7RoboArm17SetMicrosteps4AllEh>:

int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step) {
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	33d4      	adds	r3, #212	; 0xd4
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fb06 	bl	800230c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	33fc      	adds	r3, #252	; 0xfc
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 faff 	bl	800230c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	33ac      	adds	r3, #172	; 0xac
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 faf8 	bl	800230c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>:

int RoboArm::SetLinAngMicrostepsAndParams(uint8_t microsteps_per_step) {
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	33d4      	adds	r3, #212	; 0xd4
 8001d36:	78fa      	ldrb	r2, [r7, #3]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fae6 	bl	800230c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
//	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	33ac      	adds	r3, #172	; 0xac
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fadf 	bl	800230c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	int steps = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<microsteps_per_step; i++){
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	e005      	b.n	8001d64 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh+0x3e>
		steps *= 2;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<microsteps_per_step; i++){
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3301      	adds	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf5      	blt.n	8001d58 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh+0x32>
	}

	drvMicroSteps = steps;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	601a      	str	r2, [r3, #0]
//	gripperPsteps = 523*arm.drvMicroSteps;
	steps4OneMM = motorStep * drvMicroSteps / (beltRatio * spoolStep);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	441a      	add	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]

	return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8bba      	ldrh	r2, [r7, #28]
 8001db4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ResolutionEncoders = ResolutionEncodersT;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dc6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	return 0;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f7ff fa35 	bl	800125c <calculateAngle>
 8001df2:	4603      	mov	r3, r0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZN7RoboArm14GetPosEncodersEh>:
	}
	pos = ang * distMax / 360.0;
	return pos;
}

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d002      	beq.n	8001e14 <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d017      	beq.n	8001e42 <_ZN7RoboArm14GetPosEncodersEh+0x46>
 8001e12:	e02d      	b.n	8001e70 <_ZN7RoboArm14GetPosEncodersEh+0x74>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001e2c:	f7ff f966 	bl	80010fc <getPositionSPI>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				ResolutionEncoders);
		return posNowEnc1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e40:	e017      	b.n	8001e72 <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001e5a:	f7ff f94f 	bl	80010fc <getPositionSPI>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				ResolutionEncoders);
		return posNowEnc2;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001e6e:	e000      	b.n	8001e72 <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	default:
		return 1;
 8001e70:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <_ZN7RoboArm6GetLinEv>:

float RoboArm::GetLin() {
 8001e7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ffb5 	bl	8001dfc <_ZN7RoboArm14GetPosEncodersEh>
 8001e92:	6138      	str	r0, [r7, #16]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001e94:	e004      	b.n	8001ea0 <_ZN7RoboArm6GetLinEv+0x24>
		posnowT_2 = GetPosEncoders(2); //try again
 8001e96:	2102      	movs	r1, #2
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffaf 	bl	8001dfc <_ZN7RoboArm14GetPosEncodersEh>
 8001e9e:	6138      	str	r0, [r7, #16]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d107      	bne.n	8001eba <_ZN7RoboArm6GetLinEv+0x3e>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	dc01      	bgt.n	8001eba <_ZN7RoboArm6GetLinEv+0x3e>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <_ZN7RoboArm6GetLinEv+0x40>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ea      	bne.n	8001e96 <_ZN7RoboArm6GetLinEv+0x1a>

	float pos = -1.0;
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <_ZN7RoboArm6GetLinEv+0xec>)
 8001ec2:	60fb      	str	r3, [r7, #12]
	float enc2mm = 16384.0 / (2.0 * 20.0 * 33.0 * 33.0 / (13.0 * 13.0)); //число одиниць енкодера на 1 мм лінійного руху
 8001ec4:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <_ZN7RoboArm6GetLinEv+0xf0>)
 8001ec6:	60bb      	str	r3, [r7, #8]

	// 0-5000 on encoder = 124mm-48mm;
	if (posnowT_2 <= 5000) {
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d812      	bhi.n	8001ef8 <_ZN7RoboArm6GetLinEv+0x7c>
		//the motor is somewhere between 48mm and 124mm
		pos = defaultDistanse - float(posnowT_2) / enc2mm;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
 8001ed8:	6938      	ldr	r0, [r7, #16]
 8001eda:	f7fe fe93 	bl	8000c04 <__aeabi_ui2f>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ff9a 	bl	8000e1c <__aeabi_fdiv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7fe fdd7 	bl	8000aa0 <__aeabi_fsub>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e030      	b.n	8001f5a <_ZN7RoboArm6GetLinEv+0xde>

	} else { //if (posnowT_2 <= 9000){ //приблизно по факту десь +- 8963
		pos = defaultDistanse + (16384.0 - float(posnowT_2)) / enc2mm;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fa88 	bl	8000414 <__aeabi_f2d>
 8001f04:	4604      	mov	r4, r0
 8001f06:	460d      	mov	r5, r1
 8001f08:	6938      	ldr	r0, [r7, #16]
 8001f0a:	f7fe fe7b 	bl	8000c04 <__aeabi_ui2f>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fa7f 	bl	8000414 <__aeabi_f2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	f04f 0000 	mov.w	r0, #0
 8001f1e:	4914      	ldr	r1, [pc, #80]	; (8001f70 <_ZN7RoboArm6GetLinEv+0xf4>)
 8001f20:	f7fe f918 	bl	8000154 <__aeabi_dsub>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4690      	mov	r8, r2
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	68b8      	ldr	r0, [r7, #8]
 8001f2e:	f7fe fa71 	bl	8000414 <__aeabi_f2d>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4640      	mov	r0, r8
 8001f38:	4649      	mov	r1, r9
 8001f3a:	f7fe fbed 	bl	8000718 <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe f907 	bl	8000158 <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fd51 	bl	80009f8 <__aeabi_d2f>
 8001f56:	4603      	mov	r3, r0
 8001f58:	60fb      	str	r3, [r7, #12]
		// the motor is somewhere 124...end of the hand

	}


	return pos;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f66:	bf00      	nop
 8001f68:	bf800000 	.word	0xbf800000
 8001f6c:	427e42ab 	.word	0x427e42ab
 8001f70:	40d00000 	.word	0x40d00000

08001f74 <_ZN7RoboArm6GetAngEv>:

float RoboArm::GetAng() {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001f80:	2101      	movs	r1, #1
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ff3a 	bl	8001dfc <_ZN7RoboArm14GetPosEncodersEh>
 8001f88:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 8001f8a:	e004      	b.n	8001f96 <_ZN7RoboArm6GetAngEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ff34 	bl	8001dfc <_ZN7RoboArm14GetPosEncodersEh>
 8001f94:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d107      	bne.n	8001fb0 <_ZN7RoboArm6GetAngEv+0x3c>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	dc01      	bgt.n	8001fb0 <_ZN7RoboArm6GetAngEv+0x3c>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <_ZN7RoboArm6GetAngEv+0x3e>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ea      	bne.n	8001f8c <_ZN7RoboArm6GetAngEv+0x18>

//	if (posnowT_1 == 0xFFFF) {
//			return -1;
//	}

	float ang_actual = GetAngleEncoders(posnowT_1);
 8001fb6:	6939      	ldr	r1, [r7, #16]
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff0c 	bl	8001dd6 <_ZN7RoboArm16GetAngleEncodersEm>
 8001fbe:	60b8      	str	r0, [r7, #8]
	float ang = ang_actual + defaultAngle; //arm.ShiftZeroAng(ang_actual);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	68b8      	ldr	r0, [r7, #8]
 8001fca:	f7fe fd6b 	bl	8000aa4 <__addsf3>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	60fb      	str	r3, [r7, #12]
	if (ang > 360.0)
 8001fd2:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <_ZN7RoboArm6GetAngEv+0x84>)
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7ff f829 	bl	800102c <__aeabi_fcmpgt>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <_ZN7RoboArm6GetAngEv+0x78>
		ang -= 360.0;
 8001fe0:	4905      	ldr	r1, [pc, #20]	; (8001ff8 <_ZN7RoboArm6GetAngEv+0x84>)
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7fe fd5c 	bl	8000aa0 <__aeabi_fsub>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60fb      	str	r3, [r7, #12]
	return ang;
 8001fec:	68fb      	ldr	r3, [r7, #12]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	43b40000 	.word	0x43b40000

08001ffc <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	HAL_Delay(300);
 8002004:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002008:	f002 f9d8 	bl	80043bc <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002024:	f7ff f86a 	bl	80010fc <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002040:	f7ff f85c 	bl	80010fc <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8002056:	461a      	mov	r2, r3
 8002058:	f7ff f8de 	bl	8001218 <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800206e:	461a      	mov	r2, r3
 8002070:	f7ff f8d2 	bl	8001218 <setZeroSPI>
	HAL_Delay(250);
 8002074:	20fa      	movs	r0, #250	; 0xfa
 8002076:	f002 f9a1 	bl	80043bc <HAL_Delay>
	return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>:
		uint16_t Dir2_Pin_M2T, GPIO_TypeDef *Dir3_GPIO_Port_M3T,
		uint16_t Dir3_Pin_M3T, GPIO_TypeDef *En1_GPIO_Port_M1T,
		uint16_t En1_Pin_M1T, GPIO_TypeDef *En2_GPIO_Port_M2T,
		uint16_t En2_Pin_M2T, GPIO_TypeDef *En3_GPIO_Port_M3T,
		uint16_t En3_Pin_M3T, GPIO_TypeDef *Buser_GPIO_Port_IndT,
		uint16_t Buser_Pin_IndT) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]
	htim2M2 = &htim2;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	611a      	str	r2, [r3, #16]
	htim3M3 = &htim3;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	615a      	str	r2, [r3, #20]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	61da      	str	r2, [r3, #28]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8c3a      	ldrh	r2, [r7, #32]
 80020ae:	841a      	strh	r2, [r3, #32]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020ba:	851a      	strh	r2, [r3, #40]	; 0x28
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80020c6:	861a      	strh	r2, [r3, #48]	; 0x30

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34
	En1_Pin_M1 = En1_Pin_M1T;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80020d2:	871a      	strh	r2, [r3, #56]	; 0x38
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c
	En2_Pin_M2 = En2_Pin_M2T;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80020e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
	En3_Pin_M3 = En3_Pin_M3T;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80020f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
	En3_Pin_M3 = En3_Pin_M3T;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002100:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	Buser_GPIO_Port_Ind = Buser_GPIO_Port_IndT;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002108:	66da      	str	r2, [r3, #108]	; 0x6c
	Buser_Pin_Ind = Buser_Pin_IndT;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002110:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	SetEnable(1, true);
 8002114:	2201      	movs	r2, #1
 8002116:	2101      	movs	r1, #1
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f83d 	bl	8002198 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 800211e:	2201      	movs	r2, #1
 8002120:	2102      	movs	r1, #2
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f838 	bl	8002198 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 8002128:	2201      	movs	r2, #1
 800212a:	2103      	movs	r1, #3
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f833 	bl	8002198 <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 8002138:	2300      	movs	r3, #0
 800213a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	f000 f880 	bl	8002244 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_2);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 800214a:	2302      	movs	r3, #2
 800214c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	f000 f877 	bl	8002244 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_1);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f103 00ac 	add.w	r0, r3, #172	; 0xac
 800215c:	2301      	movs	r3, #1
 800215e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	f000 f86e 	bl	8002244 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	33d4      	adds	r3, #212	; 0xd4
 800216c:	4618      	mov	r0, r3
 800216e:	f000 f87d 	bl	800226c <_ZN7TMC22096enableEv>
	tmcd_gripper.enable();
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	33fc      	adds	r3, #252	; 0xfc
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f878 	bl	800226c <_ZN7TMC22096enableEv>
	tmcd_linear.enable();
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	33ac      	adds	r3, #172	; 0xac
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f873 	bl	800226c <_ZN7TMC22096enableEv>

	SetMicrosteps4All(7);
 8002186:	2107      	movs	r1, #7
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff fdac 	bl	8001ce6 <_ZN7RoboArm17SetMicrosteps4AllEh>
	// COMMENT 1
//	SetEnable(1, false);
//	SetEnable(2, false);
//	SetEnable(3, false);

	return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e001      	b.n	80021b8 <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f002 fc6e 	bl	8004aaa <HAL_GPIO_WritePin>
 80021ce:	e018      	b.n	8002202 <_ZN7RoboArm9SetEnableEtb+0x6a>
	} else if (numMotor == 2) {
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d109      	bne.n	80021ea <_ZN7RoboArm9SetEnableEtb+0x52>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	4619      	mov	r1, r3
 80021e4:	f002 fc61 	bl	8004aaa <HAL_GPIO_WritePin>
 80021e8:	e00b      	b.n	8002202 <_ZN7RoboArm9SetEnableEtb+0x6a>
	} else if (numMotor == 3) {
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d108      	bne.n	8002202 <_ZN7RoboArm9SetEnableEtb+0x6a>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f002 fc54 	bl	8004aaa <HAL_GPIO_WritePin>
	}

	return 0;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002222:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2203      	movs	r2, #3
 8002228:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002230:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	461a      	mov	r2, r3
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f910 	bl	8002484 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_ZN7TMC22096enableEv>:
//
////  pinMode(hardware_enable_pin_, OUTPUT);
////  digitalWrite(hardware_enable_pin_, HIGH);
//}
//
void TMC2209::enable() {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0f      	blt.n	800229e <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	2120      	movs	r1, #32
 8002282:	4810      	ldr	r0, [pc, #64]	; (80022c4 <_ZN7TMC22096enableEv+0x58>)
 8002284:	f002 fc11 	bl	8004aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	2101      	movs	r1, #1
 800228c:	480d      	ldr	r0, [pc, #52]	; (80022c4 <_ZN7TMC22096enableEv+0x58>)
 800228e:	f002 fc0c 	bl	8004aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <_ZN7TMC22096enableEv+0x5c>)
 800229a:	f002 fc06 	bl	8004aaa <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	b2d9      	uxtb	r1, r3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	7f13      	ldrb	r3, [r2, #28]
 80022ae:	f361 0303 	bfi	r3, r1, #0, #4
 80022b2:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fa89 	bl	80027cc <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40010800 	.word	0x40010800
 80022c8:	40010c00 	.word	0x40010c00

080022cc <_ZN7TMC22099constrainEttt>:
	}
	chopper_config_.toff = TOFF_DISABLE;
	writeStoredChopperConfig();
}
//
uint16_t TMC2209::constrain(uint16_t x, uint16_t y, uint16_t z) {
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	817b      	strh	r3, [r7, #10]
 80022de:	460b      	mov	r3, r1
 80022e0:	813b      	strh	r3, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
	if (x < y) {
 80022e6:	897a      	ldrh	r2, [r7, #10]
 80022e8:	893b      	ldrh	r3, [r7, #8]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d201      	bcs.n	80022f2 <_ZN7TMC22099constrainEttt+0x26>
		return y;
 80022ee:	893b      	ldrh	r3, [r7, #8]
 80022f0:	e006      	b.n	8002300 <_ZN7TMC22099constrainEttt+0x34>
	} else if (x > z) {
 80022f2:	897a      	ldrh	r2, [r7, #10]
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d901      	bls.n	80022fe <_ZN7TMC22099constrainEttt+0x32>
		return z;
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	e000      	b.n	8002300 <_ZN7TMC22099constrainEttt+0x34>
	} else {
		return x;
 80022fe:	897b      	ldrh	r3, [r7, #10]
	}
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
	...

0800230c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
//		++exponent;
//	}
//	setMicrostepsPerStepPowerOfTwo(exponent);
//}
//
void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	2b07      	cmp	r3, #7
 800231c:	d84a      	bhi.n	80023b4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002345 	.word	0x08002345
 8002328:	08002353 	.word	0x08002353
 800232c:	08002361 	.word	0x08002361
 8002330:	0800236f 	.word	0x0800236f
 8002334:	0800237d 	.word	0x0800237d
 8002338:	0800238b 	.word	0x0800238b
 800233c:	08002399 	.word	0x08002399
 8002340:	080023a7 	.word	0x080023a7
	case 0: {
		chopper_config_.mres = MRES_001;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	7fd3      	ldrb	r3, [r2, #31]
 8002348:	2108      	movs	r1, #8
 800234a:	f361 0303 	bfi	r3, r1, #0, #4
 800234e:	77d3      	strb	r3, [r2, #31]
		break;
 8002350:	e036      	b.n	80023c0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	7fd3      	ldrb	r3, [r2, #31]
 8002356:	2107      	movs	r1, #7
 8002358:	f361 0303 	bfi	r3, r1, #0, #4
 800235c:	77d3      	strb	r3, [r2, #31]
		break;
 800235e:	e02f      	b.n	80023c0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	7fd3      	ldrb	r3, [r2, #31]
 8002364:	2106      	movs	r1, #6
 8002366:	f361 0303 	bfi	r3, r1, #0, #4
 800236a:	77d3      	strb	r3, [r2, #31]
		break;
 800236c:	e028      	b.n	80023c0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	7fd3      	ldrb	r3, [r2, #31]
 8002372:	2105      	movs	r1, #5
 8002374:	f361 0303 	bfi	r3, r1, #0, #4
 8002378:	77d3      	strb	r3, [r2, #31]
		break;
 800237a:	e021      	b.n	80023c0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	7fd3      	ldrb	r3, [r2, #31]
 8002380:	2104      	movs	r1, #4
 8002382:	f361 0303 	bfi	r3, r1, #0, #4
 8002386:	77d3      	strb	r3, [r2, #31]
		break;
 8002388:	e01a      	b.n	80023c0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	7fd3      	ldrb	r3, [r2, #31]
 800238e:	2103      	movs	r1, #3
 8002390:	f361 0303 	bfi	r3, r1, #0, #4
 8002394:	77d3      	strb	r3, [r2, #31]
		break;
 8002396:	e013      	b.n	80023c0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	7fd3      	ldrb	r3, [r2, #31]
 800239c:	2102      	movs	r1, #2
 800239e:	f361 0303 	bfi	r3, r1, #0, #4
 80023a2:	77d3      	strb	r3, [r2, #31]
		break;
 80023a4:	e00c      	b.n	80023c0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	7fd3      	ldrb	r3, [r2, #31]
 80023aa:	2101      	movs	r1, #1
 80023ac:	f361 0303 	bfi	r3, r1, #0, #4
 80023b0:	77d3      	strb	r3, [r2, #31]
		break;
 80023b2:	e005      	b.n	80023c0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	7fd3      	ldrb	r3, [r2, #31]
 80023b8:	f36f 0303 	bfc	r3, #0, #4
 80023bc:	77d3      	strb	r3, [r2, #31]
		break;
 80023be:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fa03 	bl	80027cc <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop

080023d0 <_ZN7TMC220913setRunCurrentEh>:

void TMC2209::setRunCurrent(uint8_t percent) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
	uint8_t run_current = percentToCurrentSetting(percent);
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f975 	bl	80026d0 <_ZN7TMC220923percentToCurrentSettingEh>
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
	driver_current_.irun = run_current;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	b2d9      	uxtb	r1, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	7c53      	ldrb	r3, [r2, #17]
 80023f6:	f361 0304 	bfi	r3, r1, #0, #5
 80023fa:	7453      	strb	r3, [r2, #17]
	writeStoredDriverCurrent();
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f9b9 	bl	8002774 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZN7TMC220914setHoldCurrentEh>:
//
void TMC2209::setHoldCurrent(uint8_t percent) {
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	70fb      	strb	r3, [r7, #3]
	uint8_t hold_current = percentToCurrentSetting(percent);
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f958 	bl	80026d0 <_ZN7TMC220923percentToCurrentSettingEh>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]

	driver_current_.ihold = hold_current;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	b2d9      	uxtb	r1, r3
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	7c13      	ldrb	r3, [r2, #16]
 8002430:	f361 0304 	bfi	r3, r1, #0, #5
 8002434:	7413      	strb	r3, [r2, #16]
	writeStoredDriverCurrent();
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f99c 	bl	8002774 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_ZN7TMC220927enableInverseMotorDirectionEv>:
//	driver_current_.ihold = hold_current;
//	driver_current_.iholddelay = hold_delay;
//	writeStoredDriverCurrent();
//}
//
void TMC2209::enableInverseMotorDirection() {
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	7b13      	ldrb	r3, [r2, #12]
 8002450:	f043 0308 	orr.w	r3, r3, #8
 8002454:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f97d 	bl	8002756 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	7b13      	ldrb	r3, [r2, #12]
 8002470:	f36f 03c3 	bfc	r3, #3, #1
 8002474:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f96d 	bl	8002756 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
//	return read(ADDRESS_MSCNT);
//}
//
//// private
///* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4619      	mov	r1, r3
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f80f 	bl	80024c0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f834 	bl	8002510 <_ZN7TMC220922setRegistersToDefaultsEv>

	//minimizeMotorCurrent();
	setRunCurrent(70);
 80024a8:	2146      	movs	r1, #70	; 0x46
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff ff90 	bl	80023d0 <_ZN7TMC220913setRunCurrentEh>
	setHoldCurrent(20);
 80024b0:	2114      	movs	r1, #20
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f7ff ffa9 	bl	800240a <_ZN7TMC220914setHoldCurrentEh>
//	disable();
//	disableAutomaticCurrentScaling();
//	disableAutomaticGradientAdaptation();
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:
//
////	  tmcuart->RxXferCount = 0;
//
//}
//
void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	7b13      	ldrb	r3, [r2, #12]
 80024dc:	f36f 0300 	bfc	r3, #0, #1
 80024e0:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	7b13      	ldrb	r3, [r2, #12]
 80024e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ea:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	7b13      	ldrb	r3, [r2, #12]
 80024f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f4:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	7b53      	ldrb	r3, [r2, #13]
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f928 	bl	8002756 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	7c13      	ldrb	r3, [r2, #16]
 8002522:	2110      	movs	r1, #16
 8002524:	f361 0304 	bfi	r3, r1, #0, #5
 8002528:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	7c53      	ldrb	r3, [r2, #17]
 800252e:	f043 031f 	orr.w	r3, r3, #31
 8002532:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	7c93      	ldrb	r3, [r2, #18]
 8002538:	2101      	movs	r1, #1
 800253a:	f361 0303 	bfi	r3, r1, #0, #4
 800253e:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	461a      	mov	r2, r3
 8002546:	2110      	movs	r1, #16
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f885 	bl	8002658 <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a2a      	ldr	r2, [pc, #168]	; (80025fc <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 8002552:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	69d3      	ldr	r3, [r2, #28]
 8002558:	2102      	movs	r1, #2
 800255a:	f361 33d0 	bfi	r3, r1, #15, #2
 800255e:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	8b93      	ldrh	r3, [r2, #28]
 8002564:	f36f 13ca 	bfc	r3, #7, #4
 8002568:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	7f13      	ldrb	r3, [r2, #28]
 800256e:	2105      	movs	r1, #5
 8002570:	f361 1306 	bfi	r3, r1, #4, #3
 8002574:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	7f13      	ldrb	r3, [r2, #28]
 800257a:	2103      	movs	r1, #3
 800257c:	f361 0303 	bfi	r3, r1, #0, #4
 8002580:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	461a      	mov	r2, r3
 8002588:	216c      	movs	r1, #108	; 0x6c
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f864 	bl	8002658 <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	461a      	mov	r2, r3
 800259c:	2170      	movs	r1, #112	; 0x70
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f85a 	bl	8002658 <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	461a      	mov	r2, r3
 80025b0:	2142      	movs	r1, #66	; 0x42
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f850 	bl	8002658 <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 80025b8:	2214      	movs	r2, #20
 80025ba:	2111      	movs	r1, #17
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f84b 	bl	8002658 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2113      	movs	r1, #19
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f846 	bl	8002658 <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2122      	movs	r1, #34	; 0x22
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f841 	bl	8002658 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2114      	movs	r1, #20
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f83c 	bl	8002658 <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f837 	bl	8002658 <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2142      	movs	r1, #66	; 0x42
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f832 	bl	8002658 <_ZN7TMC22095writeEhm>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	10000053 	.word	0x10000053
 8002600:	c10d0024 	.word	0xc10d0024

08002604 <_ZN7TMC220911reverseDataEm>:
//	driver_current_.irun = CURRENT_SETTING_MIN;
//	driver_current_.ihold = CURRENT_SETTING_MIN;
//	writeStoredDriverCurrent();
//}
//
uint32_t TMC2209::reverseData(uint32_t data) {
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002612:	2300      	movs	r3, #0
 8002614:	72fb      	strb	r3, [r7, #11]
 8002616:	e016      	b.n	8002646 <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002618:	7afb      	ldrb	r3, [r7, #11]
 800261a:	f1c3 0303 	rsb	r3, r3, #3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8002624:	7afb      	ldrb	r3, [r7, #11]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800262a:	7abb      	ldrb	r3, [r7, #10]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	b2da      	uxtb	r2, r3
 8002634:	7a7b      	ldrb	r3, [r7, #9]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002640:	7afb      	ldrb	r3, [r7, #11]
 8002642:	3301      	adds	r3, #1
 8002644:	72fb      	strb	r3, [r7, #11]
 8002646:	7afb      	ldrb	r3, [r7, #11]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d9e5      	bls.n	8002618 <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 800264c:	68fb      	ldr	r3, [r7, #12]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <_ZN7TMC22095writeEhm>:
//	for (uint8_t i = 0; i < datagram_size; ++i) {
//		byte = serialRead();
//	}*/
//}
//
void TMC2209::write(uint8_t register_address, uint32_t data) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	460b      	mov	r3, r1
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8002672:	7c3b      	ldrb	r3, [r7, #16]
 8002674:	2205      	movs	r2, #5
 8002676:	f362 0303 	bfi	r3, r2, #0, #4
 800267a:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	791b      	ldrb	r3, [r3, #4]
 8002680:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8002682:	7afb      	ldrb	r3, [r7, #11]
 8002684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002688:	b2da      	uxtb	r2, r3
 800268a:	7cbb      	ldrb	r3, [r7, #18]
 800268c:	f362 0306 	bfi	r3, r2, #0, #7
 8002690:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002692:	7cbb      	ldrb	r3, [r7, #18]
 8002694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002698:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff ffb1 	bl	8002604 <_ZN7TMC220911reverseDataEm>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	2208      	movs	r2, #8
 80026ae:	4619      	mov	r1, r3
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f89a 	bl	80027ea <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 80026b6:	4603      	mov	r3, r0
 80026b8:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	2208      	movs	r2, #8
 80026c0:	4619      	mov	r1, r3
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f8e0 	bl	8002888 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 80026c8:	bf00      	nop
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_ZN7TMC220923percentToCurrentSettingEh>:
//	}
//
//	return reverseData(read_reply_datagram.data);
//}
//
uint8_t TMC2209::percentToCurrentSetting(uint8_t percent) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	b299      	uxth	r1, r3
 80026e0:	2364      	movs	r3, #100	; 0x64
 80026e2:	2200      	movs	r2, #0
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fdf1 	bl	80022cc <_ZN7TMC22099constrainEttt>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]
	uint8_t current_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX,
 80026ee:	7bf9      	ldrb	r1, [r7, #15]
 80026f0:	231f      	movs	r3, #31
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	2300      	movs	r3, #0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2364      	movs	r3, #100	; 0x64
 80026fa:	2200      	movs	r2, #0
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f807 	bl	8002710 <_ZN7TMC22093mapEhhhhh>
 8002702:	4603      	mov	r3, r0
 8002704:	73bb      	strb	r3, [r7, #14]
			CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
	return current_setting;
 8002706:	7bbb      	ldrb	r3, [r7, #14]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_ZN7TMC22093mapEhhhhh>:
//	uint8_t percent = map(current_setting, CURRENT_SETTING_MIN,
//			CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
uint8_t TMC2209::map(uint8_t x, uint8_t in_min,  uint8_t in_max, uint8_t out_min, uint8_t out_max){
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	70fb      	strb	r3, [r7, #3]
 8002722:	460b      	mov	r3, r1
 8002724:	70bb      	strb	r3, [r7, #2]
 8002726:	4613      	mov	r3, r2
 8002728:	707b      	strb	r3, [r7, #1]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	78bb      	ldrb	r3, [r7, #2]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	7d39      	ldrb	r1, [r7, #20]
 8002732:	7c3a      	ldrb	r2, [r7, #16]
 8002734:	1a8a      	subs	r2, r1, r2
 8002736:	fb03 f202 	mul.w	r2, r3, r2
 800273a:	7879      	ldrb	r1, [r7, #1]
 800273c:	78bb      	ldrb	r3, [r7, #2]
 800273e:	1acb      	subs	r3, r1, r3
 8002740:	fb92 f3f3 	sdiv	r3, r2, r3
 8002744:	b2da      	uxtb	r2, r3
 8002746:	7c3b      	ldrb	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	b2db      	uxtb	r3, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <_ZN7TMC220923writeStoredGlobalConfigEv>:
//uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
//	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
void TMC2209::writeStoredGlobalConfig() {
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	461a      	mov	r2, r3
 8002764:	2100      	movs	r1, #0
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff76 	bl	8002658 <_ZN7TMC22095writeEhm>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZN7TMC220924writeStoredDriverCurrentEv>:
//
//uint32_t TMC2209::readGlobalConfigBytes() {
//	return read(ADDRESS_GCONF);
//}
//
void TMC2209::writeStoredDriverCurrent() {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	461a      	mov	r2, r3
 8002782:	2110      	movs	r1, #16
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff67 	bl	8002658 <_ZN7TMC22095writeEhm>

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7c5b      	ldrb	r3, [r3, #17]
 800278e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b13      	cmp	r3, #19
 8002796:	d905      	bls.n	80027a4 <_ZN7TMC220924writeStoredDriverCurrentEv+0x30>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	7d53      	ldrb	r3, [r2, #21]
 800279c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a0:	7553      	strb	r3, [r2, #21]
 80027a2:	e004      	b.n	80027ae <_ZN7TMC220924writeStoredDriverCurrentEv+0x3a>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	7d53      	ldrb	r3, [r2, #21]
 80027a8:	f36f 13c7 	bfc	r3, #7, #1
 80027ac:	7553      	strb	r3, [r2, #21]
	}
	if (cool_step_enabled_) {
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7e1b      	ldrb	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <_ZN7TMC220924writeStoredDriverCurrentEv+0x50>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	461a      	mov	r2, r3
 80027bc:	2142      	movs	r1, #66	; 0x42
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff4a 	bl	8002658 <_ZN7TMC22095writeEhm>
	}
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_ZN7TMC220924writeStoredChopperConfigEv>:
//
void TMC2209::writeStoredChopperConfig() {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	461a      	mov	r2, r3
 80027da:	216c      	movs	r1, #108	; 0x6c
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff3b 	bl	8002658 <_ZN7TMC22095writeEhm>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 80027ea:	b4f0      	push	{r4, r5, r6, r7}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	757b      	strb	r3, [r7, #21]
 8002800:	e037      	b.n	8002872 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	7d79      	ldrb	r1, [r7, #21]
 800280a:	00c9      	lsls	r1, r1, #3
 800280c:	f1c1 0620 	rsb	r6, r1, #32
 8002810:	f1a1 0020 	sub.w	r0, r1, #32
 8002814:	fa22 f401 	lsr.w	r4, r2, r1
 8002818:	fa03 f606 	lsl.w	r6, r3, r6
 800281c:	4334      	orrs	r4, r6
 800281e:	fa23 f000 	lsr.w	r0, r3, r0
 8002822:	4304      	orrs	r4, r0
 8002824:	fa23 f501 	lsr.w	r5, r3, r1
 8002828:	4623      	mov	r3, r4
 800282a:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 800282c:	2300      	movs	r3, #0
 800282e:	753b      	strb	r3, [r7, #20]
 8002830:	e019      	b.n	8002866 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	09db      	lsrs	r3, r3, #7
 8002836:	b2da      	uxtb	r2, r3
 8002838:	7dbb      	ldrb	r3, [r7, #22]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	429a      	cmp	r2, r3
 8002842:	d007      	beq.n	8002854 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	b25b      	sxtb	r3, r3
 800284a:	f083 0307 	eor.w	r3, r3, #7
 800284e:	b25b      	sxtb	r3, r3
 8002850:	75fb      	strb	r3, [r7, #23]
 8002852:	e002      	b.n	800285a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 800285a:	7dbb      	ldrb	r3, [r7, #22]
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002860:	7d3b      	ldrb	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	753b      	strb	r3, [r7, #20]
 8002866:	7d3b      	ldrb	r3, [r7, #20]
 8002868:	2b07      	cmp	r3, #7
 800286a:	d9e2      	bls.n	8002832 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 800286c:	7d7b      	ldrb	r3, [r7, #21]
 800286e:	3301      	adds	r3, #1
 8002870:	757b      	strb	r3, [r7, #21]
 8002872:	7d7a      	ldrb	r2, [r7, #21]
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	3b01      	subs	r3, #1
 8002878:	429a      	cmp	r2, r3
 800287a:	dbc2      	blt.n	8002802 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 800287c:	7dfb      	ldrb	r3, [r7, #23]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bcf0      	pop	{r4, r5, r6, r7}
 8002886:	4770      	bx	lr

08002888 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fc06 	bl	80070ac <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6898      	ldr	r0, [r3, #8]
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	f004 f8ae 	bl	8006a0e <HAL_UART_Transmit>
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80028bc:	b5b0      	push	{r4, r5, r7, lr}
 80028be:	b09c      	sub	sp, #112	; 0x70
 80028c0:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80028c2:	f001 fd19 	bl	80042f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80028c6:	f000 fc01 	bl	80030cc <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80028ca:	f000 fe51 	bl	8003570 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80028ce:	f000 fdf3 	bl	80034b8 <_ZL19MX_USART1_UART_Initv>
	MX_TIM1_Init();
 80028d2:	f000 fc89 	bl	80031e8 <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 80028d6:	f000 fd1f 	bl	8003318 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 80028da:	f000 fd85 	bl	80033e8 <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 80028de:	f000 fe19 	bl	8003514 <_ZL19MX_USART2_UART_Initv>
	MX_SPI1_Init();
 80028e2:	f000 fc45 	bl	8003170 <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim1);
 80028e6:	4857      	ldr	r0, [pc, #348]	; (8002a44 <main+0x188>)
 80028e8:	f003 f91a 	bl	8005b20 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 80028ec:	4856      	ldr	r0, [pc, #344]	; (8002a48 <main+0x18c>)
 80028ee:	f003 f917 	bl	8005b20 <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2, htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 80028f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f6:	930e      	str	r3, [sp, #56]	; 0x38
 80028f8:	4b54      	ldr	r3, [pc, #336]	; (8002a4c <main+0x190>)
 80028fa:	930d      	str	r3, [sp, #52]	; 0x34
 80028fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002900:	930c      	str	r3, [sp, #48]	; 0x30
 8002902:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <main+0x194>)
 8002904:	930b      	str	r3, [sp, #44]	; 0x2c
 8002906:	2301      	movs	r3, #1
 8002908:	930a      	str	r3, [sp, #40]	; 0x28
 800290a:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <main+0x190>)
 800290c:	9309      	str	r3, [sp, #36]	; 0x24
 800290e:	2320      	movs	r3, #32
 8002910:	9308      	str	r3, [sp, #32]
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <main+0x190>)
 8002914:	9307      	str	r3, [sp, #28]
 8002916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291a:	9306      	str	r3, [sp, #24]
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <main+0x194>)
 800291e:	9305      	str	r3, [sp, #20]
 8002920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002924:	9304      	str	r3, [sp, #16]
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <main+0x194>)
 8002928:	9303      	str	r3, [sp, #12]
 800292a:	2340      	movs	r3, #64	; 0x40
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <main+0x190>)
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <main+0x198>)
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	4b44      	ldr	r3, [pc, #272]	; (8002a48 <main+0x18c>)
 8002938:	4a42      	ldr	r2, [pc, #264]	; (8002a44 <main+0x188>)
 800293a:	4947      	ldr	r1, [pc, #284]	; (8002a58 <main+0x19c>)
 800293c:	4847      	ldr	r0, [pc, #284]	; (8002a5c <main+0x1a0>)
 800293e:	f7ff fba1 	bl	8002084 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>
	Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
	En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin,
	Buser_GPIO_Port, Buser_Pin);
	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 8002942:	230e      	movs	r3, #14
 8002944:	9302      	str	r3, [sp, #8]
 8002946:	2302      	movs	r3, #2
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <main+0x194>)
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2301      	movs	r3, #1
 8002950:	4a3f      	ldr	r2, [pc, #252]	; (8002a50 <main+0x194>)
 8002952:	4943      	ldr	r1, [pc, #268]	; (8002a60 <main+0x1a4>)
 8002954:	4841      	ldr	r0, [pc, #260]	; (8002a5c <main+0x1a0>)
 8002956:	f7ff fa18 	bl	8001d8a <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
			14);

	//Додано функція
	arm.SetSettGripper(EndCap1_GPIO_Port, EndCap1_Pin, EndCap2_GPIO_Port,
 800295a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800295e:	9304      	str	r3, [sp, #16]
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <main+0x190>)
 8002962:	9303      	str	r3, [sp, #12]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <main+0x194>)
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <main+0x194>)
 8002974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002978:	4935      	ldr	r1, [pc, #212]	; (8002a50 <main+0x194>)
 800297a:	4838      	ldr	r0, [pc, #224]	; (8002a5c <main+0x1a0>)
 800297c:	f7ff f8f0 	bl	8001b60 <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT (&huart1, str, 1);
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002980:	221c      	movs	r2, #28
 8002982:	4938      	ldr	r1, [pc, #224]	; (8002a64 <main+0x1a8>)
 8002984:	4838      	ldr	r0, [pc, #224]	; (8002a68 <main+0x1ac>)
 8002986:	f004 f8c5 	bl	8006b14 <HAL_UART_Receive_IT>
	arm.setPrintState(true);
 800298a:	2101      	movs	r1, #1
 800298c:	4833      	ldr	r0, [pc, #204]	; (8002a5c <main+0x1a0>)
 800298e:	f7ff f981 	bl	8001c94 <_ZN7RoboArm13setPrintStateEb>

	arm.SetBuserState(8);
 8002992:	2108      	movs	r1, #8
 8002994:	4831      	ldr	r0, [pc, #196]	; (8002a5c <main+0x1a0>)
 8002996:	f7ff f882 	bl	8001a9e <_ZN7RoboArm13SetBuserStateEi>
//	arm.SetBuserState(4);

//В останне запишемо поточне положення зачепа
	arm.lastGripState = arm.GetGripperState();
 800299a:	4830      	ldr	r0, [pc, #192]	; (8002a5c <main+0x1a0>)
 800299c:	f7ff f8b1 	bl	8001b02 <_ZN7RoboArm15GetGripperStateEv>
 80029a0:	4603      	mov	r3, r0
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <main+0x1a0>)
 80029a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	arm.State = arm.ArmSTAND;
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <main+0x1a0>)
 80029ac:	2206      	movs	r2, #6
 80029ae:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

	for (int i=0; i<3; i++){
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b6:	e00b      	b.n	80029d0 <main+0x114>
		arm.GetLin();
 80029b8:	4828      	ldr	r0, [pc, #160]	; (8002a5c <main+0x1a0>)
 80029ba:	f7ff fa5f 	bl	8001e7c <_ZN7RoboArm6GetLinEv>
		HAL_Delay(10);
 80029be:	200a      	movs	r0, #10
 80029c0:	f001 fcfc 	bl	80043bc <HAL_Delay>
		arm.GetAng();
 80029c4:	4825      	ldr	r0, [pc, #148]	; (8002a5c <main+0x1a0>)
 80029c6:	f7ff fad5 	bl	8001f74 <_ZN7RoboArm6GetAngEv>
	for (int i=0; i<3; i++){
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	3301      	adds	r3, #1
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	ddf0      	ble.n	80029b8 <main+0xfc>
	}

	arm.SetLinAngMicrostepsAndParams(4);
 80029d6:	2104      	movs	r1, #4
 80029d8:	4820      	ldr	r0, [pc, #128]	; (8002a5c <main+0x1a0>)
 80029da:	f7ff f9a4 	bl	8001d26 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>
				HAL_Delay(1);
			}
		}

		//!!!!!!!!!ЯКЩО зараз йде рух зацепа то ми постійно в цій умові перевіряємо стан зацепа і виставляємо флаг
		if (arm.State == arm.ArmGripPreMOVE || arm.State == arm.ArmGripMOVE || arm.State == arm.ArmGripMOVERetry) {
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <main+0x1a0>)
 80029e0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80029e4:	2b0a      	cmp	r3, #10
 80029e6:	d009      	beq.n	80029fc <main+0x140>
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <main+0x1a0>)
 80029ea:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d004      	beq.n	80029fc <main+0x140>
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <main+0x1a0>)
 80029f4:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80029f8:	2b14      	cmp	r3, #20
 80029fa:	d101      	bne.n	8002a00 <main+0x144>

			debounce_check_pins_and_set_flag();
 80029fc:	f000 ffd6 	bl	80039ac <_Z32debounce_check_pins_and_set_flagv>

		}

		// +2 початок руху якщо прийшли нові дані
		if (arm.State == arm.ArmSTART) {
 8002a00:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <main+0x1a0>)
 8002a02:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d136      	bne.n	8002a78 <main+0x1bc>
			arm.State = arm.ArmSTAND;
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <main+0x1a0>)
 8002a0c:	2206      	movs	r2, #6
 8002a0e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			//перевіряємо статус зацепа якщо він зачеплений то ОПУСКАЄМО (це не вірна логіка)
			//+1
			int tempGripState = arm.GetGripperState();
 8002a12:	4812      	ldr	r0, [pc, #72]	; (8002a5c <main+0x1a0>)
 8002a14:	f7ff f875 	bl	8001b02 <_ZN7RoboArm15GetGripperStateEv>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24
			//Зберігли попередній стан

			if (tempGripState == 1 && un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d127      	bne.n	8002a70 <main+0x1b4>
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <main+0x1b0>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d123      	bne.n	8002a70 <main+0x1b4>
//			if (un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
				arm.State = arm.ArmGripPreMOVE;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <main+0x1a0>)
 8002a2a:	220a      	movs	r2, #10
 8002a2c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				arm.lastGripState = tempGripState; //записали поточне положеня
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <main+0x1a0>)
 8002a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
				arm.SetGripper(0);
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4807      	ldr	r0, [pc, #28]	; (8002a5c <main+0x1a0>)
 8002a3e:	f7ff f8b9 	bl	8001bb4 <_ZN7RoboArm10SetGripperEi>
 8002a42:	e019      	b.n	8002a78 <main+0x1bc>
 8002a44:	20000094 	.word	0x20000094
 8002a48:	200000dc 	.word	0x200000dc
 8002a4c:	40010800 	.word	0x40010800
 8002a50:	40010c00 	.word	0x40010c00
 8002a54:	20000124 	.word	0x20000124
 8002a58:	200001b4 	.word	0x200001b4
 8002a5c:	2000028c 	.word	0x2000028c
 8002a60:	2000003c 	.word	0x2000003c
 8002a64:	200001fc 	.word	0x200001fc
 8002a68:	2000016c 	.word	0x2000016c
 8002a6c:	2000025c 	.word	0x2000025c
			} else { //if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
				//+3
				arm.State = arm.ArmGripPreENDMOVE;
 8002a70:	4ba4      	ldr	r3, [pc, #656]	; (8002d04 <main+0x448>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			}
		}

		//обробка кількість кроків та періоди.
		if (arm.State == arm.ArmStepSTART) {
 8002a78:	4ba2      	ldr	r3, [pc, #648]	; (8002d04 <main+0x448>)
 8002a7a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d114      	bne.n	8002aac <main+0x1f0>
			arm.State = arm.ArmSTAND;
 8002a82:	4ba0      	ldr	r3, [pc, #640]	; (8002d04 <main+0x448>)
 8002a84:	2206      	movs	r2, #6
 8002a86:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			arm.Set2StepMotors(un_to.params.lin, un_to.params.PoT_lin,
 8002a8a:	4b9f      	ldr	r3, [pc, #636]	; (8002d08 <main+0x44c>)
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	4b9e      	ldr	r3, [pc, #632]	; (8002d08 <main+0x44c>)
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	4b9d      	ldr	r3, [pc, #628]	; (8002d08 <main+0x44c>)
 8002a94:	6858      	ldr	r0, [r3, #4]
 8002a96:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <main+0x44c>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4899      	ldr	r0, [pc, #612]	; (8002d04 <main+0x448>)
 8002aa0:	f7fe ff3c 	bl	800191c <_ZN7RoboArm14Set2StepMotorsEfifi>
					un_to.params.ang, un_to.params.PoT_ang);
			arm.State = arm.ArmStepWaitMOVE;
 8002aa4:	4b97      	ldr	r3, [pc, #604]	; (8002d04 <main+0x448>)
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
		}

		if (arm.State == arm.ArmStepWaitMOVE) {
 8002aac:	4b95      	ldr	r3, [pc, #596]	; (8002d04 <main+0x448>)
 8002aae:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d122      	bne.n	8002afc <main+0x240>
//			stepsSetFlagSent = true;
			arm.State = arm.ArmSTAND;
 8002ab6:	4b93      	ldr	r3, [pc, #588]	; (8002d04 <main+0x448>)
 8002ab8:	2206      	movs	r2, #6
 8002aba:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			un_send.params.lin = 0.0;
 8002abe:	4b93      	ldr	r3, [pc, #588]	; (8002d0c <main+0x450>)
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0.0;
 8002ac6:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <main+0x450>)
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
			un_send.params.PoT_lin = 0;
 8002ace:	4b8f      	ldr	r3, [pc, #572]	; (8002d0c <main+0x450>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002ad4:	4b8d      	ldr	r3, [pc, #564]	; (8002d0c <main+0x450>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
			un_send.params.lin_2 = 0;
 8002ada:	4b8c      	ldr	r3, [pc, #560]	; (8002d0c <main+0x450>)
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8002ae2:	4b8a      	ldr	r3, [pc, #552]	; (8002d0c <main+0x450>)
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
			un_send.params.hold = 10;
 8002aea:	4b88      	ldr	r3, [pc, #544]	; (8002d0c <main+0x450>)
 8002aec:	220a      	movs	r2, #10
 8002aee:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002af0:	230c      	movs	r3, #12
 8002af2:	221c      	movs	r2, #28
 8002af4:	4985      	ldr	r1, [pc, #532]	; (8002d0c <main+0x450>)
 8002af6:	4886      	ldr	r0, [pc, #536]	; (8002d10 <main+0x454>)
 8002af8:	f003 ff89 	bl	8006a0e <HAL_UART_Transmit>
					12);
		}

		if (arm.State == arm.ArmStepStartMOVE) {
 8002afc:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <main+0x448>)
 8002afe:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d10e      	bne.n	8002b24 <main+0x268>
			arm.State = arm.ArmStepMOVE;
 8002b06:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <main+0x448>)
 8002b08:	2204      	movs	r2, #4
 8002b0a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			//В останне запишемо поточне положення зачепа
			arm.lastGripState = arm.GetGripperState();
 8002b0e:	487d      	ldr	r0, [pc, #500]	; (8002d04 <main+0x448>)
 8002b10:	f7fe fff7 	bl	8001b02 <_ZN7RoboArm15GetGripperStateEv>
 8002b14:	4603      	mov	r3, r0
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	4b7a      	ldr	r3, [pc, #488]	; (8002d04 <main+0x448>)
 8002b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
//			} else { //if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
//				//+3
//				arm.State = arm.ArmGripPreENDMOVEStep;
//			}

			arm.Move2StepMotors();
 8002b1e:	4879      	ldr	r0, [pc, #484]	; (8002d04 <main+0x448>)
 8002b20:	f7fe ff96 	bl	8001a50 <_ZN7RoboArm15Move2StepMotorsEv>
//			stepsSetFlagSent = false;
		}

		//+4 опустили якщо треба було або починаємо одночасний рух моторів.
		if (arm.State == arm.ArmGripPreENDMOVE) {
 8002b24:	4b77      	ldr	r3, [pc, #476]	; (8002d04 <main+0x448>)
 8002b26:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d10b      	bne.n	8002b46 <main+0x28a>
			arm.State = arm.ArmMOVE;
 8002b2e:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <main+0x448>)
 8002b30:	2205      	movs	r2, #5
 8002b32:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002b36:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <main+0x44c>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <main+0x44c>)
 8002b3c:	6912      	ldr	r2, [r2, #16]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4870      	ldr	r0, [pc, #448]	; (8002d04 <main+0x448>)
 8002b42:	f7fe fd45 	bl	80015d0 <_ZN7RoboArm11Move2MotorsEff>
		}

		if (arm.State == arm.ArmGripPreENDMOVEStep) {
 8002b46:	4b6f      	ldr	r3, [pc, #444]	; (8002d04 <main+0x448>)
 8002b48:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002b4c:	2b0d      	cmp	r3, #13
 8002b4e:	d106      	bne.n	8002b5e <main+0x2a2>
			arm.State = arm.ArmMOVE;
 8002b50:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <main+0x448>)
 8002b52:	2205      	movs	r2, #5
 8002b54:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			arm.Move2StepMotors();
 8002b58:	486a      	ldr	r0, [pc, #424]	; (8002d04 <main+0x448>)
 8002b5a:	f7fe ff79 	bl	8001a50 <_ZN7RoboArm15Move2StepMotorsEv>
		}

		if (arm.anglePsteps == 0 && (arm.State == arm.ArmMOVE || arm.State == arm.ArmStepMOVE || arm.State == arm.ArmCorrectPosition)){
 8002b5e:	4b69      	ldr	r3, [pc, #420]	; (8002d04 <main+0x448>)
 8002b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11b      	bne.n	8002b9e <main+0x2e2>
 8002b66:	4b67      	ldr	r3, [pc, #412]	; (8002d04 <main+0x448>)
 8002b68:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d009      	beq.n	8002b84 <main+0x2c8>
 8002b70:	4b64      	ldr	r3, [pc, #400]	; (8002d04 <main+0x448>)
 8002b72:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d004      	beq.n	8002b84 <main+0x2c8>
 8002b7a:	4b62      	ldr	r3, [pc, #392]	; (8002d04 <main+0x448>)
 8002b7c:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002b80:	2b16      	cmp	r3, #22
 8002b82:	d10c      	bne.n	8002b9e <main+0x2e2>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002b84:	2100      	movs	r1, #0
 8002b86:	4863      	ldr	r0, [pc, #396]	; (8002d14 <main+0x458>)
 8002b88:	f003 f988 	bl	8005e9c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002b8c:	4861      	ldr	r0, [pc, #388]	; (8002d14 <main+0x458>)
 8002b8e:	f003 f86b 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
			cntImpulse1 = 0;
 8002b92:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <main+0x45c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
			timerFT1 = true;
 8002b98:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <main+0x460>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
		}

		if (arm.distPsteps == 0 && (arm.State == arm.ArmMOVE || arm.State == arm.ArmStepMOVE || arm.State == arm.ArmCorrectPosition)){
 8002b9e:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <main+0x448>)
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11b      	bne.n	8002bde <main+0x322>
 8002ba6:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <main+0x448>)
 8002ba8:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d009      	beq.n	8002bc4 <main+0x308>
 8002bb0:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <main+0x448>)
 8002bb2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d004      	beq.n	8002bc4 <main+0x308>
 8002bba:	4b52      	ldr	r3, [pc, #328]	; (8002d04 <main+0x448>)
 8002bbc:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002bc0:	2b16      	cmp	r3, #22
 8002bc2:	d10c      	bne.n	8002bde <main+0x322>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	4856      	ldr	r0, [pc, #344]	; (8002d20 <main+0x464>)
 8002bc8:	f003 f968 	bl	8005e9c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002bcc:	4854      	ldr	r0, [pc, #336]	; (8002d20 <main+0x464>)
 8002bce:	f003 f84b 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
			cntImpulse2 = 0;
 8002bd2:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <main+0x468>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
			timerFT2 = true;
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <main+0x46c>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
		}

		if (timerFT1 && timerFT2 && arm.State == arm.ArmMOVE) {
 8002bde:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <main+0x460>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d030      	beq.n	8002c48 <main+0x38c>
 8002be6:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <main+0x46c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d02c      	beq.n	8002c48 <main+0x38c>
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <main+0x448>)
 8002bf0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d127      	bne.n	8002c48 <main+0x38c>
			timerFT1 = false;
 8002bf8:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <main+0x460>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <main+0x46c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
			arm.State = arm.ArmCorrectPosition;
 8002c04:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <main+0x448>)
 8002c06:	2216      	movs	r2, #22
 8002c08:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			current_correctAttempt = 0;
 8002c0c:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <main+0x470>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

			lin_beforeCorrect = arm.GetLin();
 8002c12:	483c      	ldr	r0, [pc, #240]	; (8002d04 <main+0x448>)
 8002c14:	f7ff f932 	bl	8001e7c <_ZN7RoboArm6GetLinEv>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4a45      	ldr	r2, [pc, #276]	; (8002d30 <main+0x474>)
 8002c1c:	6013      	str	r3, [r2, #0]
//			un_send.params.lin = 0;
//			un_send.params.lin_2 = lin;
			HAL_Delay(10);
 8002c1e:	200a      	movs	r0, #10
 8002c20:	f001 fbcc 	bl	80043bc <HAL_Delay>
			ang_beforeCorrect = arm.GetAng();
 8002c24:	4837      	ldr	r0, [pc, #220]	; (8002d04 <main+0x448>)
 8002c26:	f7ff f9a5 	bl	8001f74 <_ZN7RoboArm6GetAngEv>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4a41      	ldr	r2, [pc, #260]	; (8002d34 <main+0x478>)
 8002c2e:	6013      	str	r3, [r2, #0]

//			arm.drvMicroSteps = 128;
//			arm.gripperPsteps = 523*arm.drvMicroSteps;
//			arm.steps4OneMM = motorStep * arm.drvMicroSteps / (beltRatio * spoolStep);

			arm.SetLinAngMicrostepsAndParams(7);
 8002c30:	2107      	movs	r1, #7
 8002c32:	4834      	ldr	r0, [pc, #208]	; (8002d04 <main+0x448>)
 8002c34:	f7ff f877 	bl	8001d26 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>

			// TODO change microsteps to 128
			// UPDATE VALUES FOR ARM, LIKE STEPS FOR 1 MM
//			arm.SetBuserState(2);
			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <main+0x44c>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	4a32      	ldr	r2, [pc, #200]	; (8002d08 <main+0x44c>)
 8002c3e:	6912      	ldr	r2, [r2, #16]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4830      	ldr	r0, [pc, #192]	; (8002d04 <main+0x448>)
 8002c44:	f7fe fcc4 	bl	80015d0 <_ZN7RoboArm11Move2MotorsEff>
		}



		//+5 обидва мотори доїхали по статусам в таймерах
		if (timerFT1 && timerFT2 && arm.State == arm.ArmStepMOVE) {
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <main+0x460>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d030      	beq.n	8002cb2 <main+0x3f6>
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <main+0x46c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02c      	beq.n	8002cb2 <main+0x3f6>
 8002c58:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <main+0x448>)
 8002c5a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d127      	bne.n	8002cb2 <main+0x3f6>
			timerFT1 = false;
 8002c62:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <main+0x460>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002c68:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <main+0x46c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
			arm.State = arm.ArmCorrectPosition;
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <main+0x448>)
 8002c70:	2216      	movs	r2, #22
 8002c72:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			current_correctAttempt = 0;
 8002c76:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <main+0x470>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

			lin_beforeCorrect = arm.GetLin();
 8002c7c:	4821      	ldr	r0, [pc, #132]	; (8002d04 <main+0x448>)
 8002c7e:	f7ff f8fd 	bl	8001e7c <_ZN7RoboArm6GetLinEv>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <main+0x474>)
 8002c86:	6013      	str	r3, [r2, #0]
			HAL_Delay(10);
 8002c88:	200a      	movs	r0, #10
 8002c8a:	f001 fb97 	bl	80043bc <HAL_Delay>
			ang_beforeCorrect = arm.GetAng();
 8002c8e:	481d      	ldr	r0, [pc, #116]	; (8002d04 <main+0x448>)
 8002c90:	f7ff f970 	bl	8001f74 <_ZN7RoboArm6GetAngEv>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <main+0x478>)
 8002c98:	6013      	str	r3, [r2, #0]

			arm.SetLinAngMicrostepsAndParams(7);
 8002c9a:	2107      	movs	r1, #7
 8002c9c:	4819      	ldr	r0, [pc, #100]	; (8002d04 <main+0x448>)
 8002c9e:	f7ff f842 	bl	8001d26 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>

			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <main+0x44c>)
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <main+0x44c>)
 8002ca8:	6912      	ldr	r2, [r2, #16]
 8002caa:	4619      	mov	r1, r3
 8002cac:	4815      	ldr	r0, [pc, #84]	; (8002d04 <main+0x448>)
 8002cae:	f7fe fc8f 	bl	80015d0 <_ZN7RoboArm11Move2MotorsEff>
		}
		if (timerFT1 && timerFT2	&& arm.State == arm.ArmCorrectPosition) {
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <main+0x460>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 809b 	beq.w	8002df2 <main+0x536>
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <main+0x46c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8096 	beq.w	8002df2 <main+0x536>
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <main+0x448>)
 8002cc8:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002ccc:	2b16      	cmp	r3, #22
 8002cce:	f040 8090 	bne.w	8002df2 <main+0x536>
//			arm.SetBuserState(3);
			timerFT1 = false;
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <main+0x460>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <main+0x46c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]

			float lin = arm.GetLin();
 8002cde:	4809      	ldr	r0, [pc, #36]	; (8002d04 <main+0x448>)
 8002ce0:	f7ff f8cc 	bl	8001e7c <_ZN7RoboArm6GetLinEv>
 8002ce4:	6238      	str	r0, [r7, #32]
			float ang = arm.GetAng();
 8002ce6:	4807      	ldr	r0, [pc, #28]	; (8002d04 <main+0x448>)
 8002ce8:	f7ff f944 	bl	8001f74 <_ZN7RoboArm6GetAngEv>
 8002cec:	61f8      	str	r0, [r7, #28]
			float delta_lin = abs(lin - un_to.params.lin_2);
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <main+0x44c>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6a38      	ldr	r0, [r7, #32]
 8002cf6:	f7fd fed3 	bl	8000aa0 <__aeabi_fsub>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fb80 	bl	8001402 <_ZSt3absf>
 8002d02:	e019      	b.n	8002d38 <main+0x47c>
 8002d04:	2000028c 	.word	0x2000028c
 8002d08:	2000025c 	.word	0x2000025c
 8002d0c:	20000240 	.word	0x20000240
 8002d10:	2000016c 	.word	0x2000016c
 8002d14:	20000094 	.word	0x20000094
 8002d18:	20000280 	.word	0x20000280
 8002d1c:	20000219 	.word	0x20000219
 8002d20:	200000dc 	.word	0x200000dc
 8002d24:	20000284 	.word	0x20000284
 8002d28:	2000021a 	.word	0x2000021a
 8002d2c:	20000220 	.word	0x20000220
 8002d30:	20000278 	.word	0x20000278
 8002d34:	2000027c 	.word	0x2000027c
 8002d38:	61b8      	str	r0, [r7, #24]
			float delta_ang = abs(ang - un_to.params.ang_2);
 8002d3a:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <main+0x64c>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	69f8      	ldr	r0, [r7, #28]
 8002d42:	f7fd fead 	bl	8000aa0 <__aeabi_fsub>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fb5a 	bl	8001402 <_ZSt3absf>
 8002d4e:	62b8      	str	r0, [r7, #40]	; 0x28
			if (360.0 - delta_ang < delta_ang){
 8002d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d52:	f7fd fb5f 	bl	8000414 <__aeabi_f2d>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	f04f 0000 	mov.w	r0, #0
 8002d5e:	496b      	ldr	r1, [pc, #428]	; (8002f0c <main+0x650>)
 8002d60:	f7fd f9f8 	bl	8000154 <__aeabi_dsub>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4614      	mov	r4, r2
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d6e:	f7fd fb51 	bl	8000414 <__aeabi_f2d>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fe15 	bl	80009a8 <__aeabi_dcmplt>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <main+0x4d4>
				delta_ang = 360.0 - delta_ang;
 8002d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d86:	4862      	ldr	r0, [pc, #392]	; (8002f10 <main+0x654>)
 8002d88:	f7fd fe8a 	bl	8000aa0 <__aeabi_fsub>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			if (((delta_lin <= accuracy) && (delta_ang <= accuracy)) || current_correctAttempt >= max_correctAttempts){
 8002d90:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <main+0x658>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	69b8      	ldr	r0, [r7, #24]
 8002d98:	f7fe f934 	bl	8001004 <__aeabi_fcmple>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <main+0x4f8>
 8002da2:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <main+0x658>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002daa:	f7fe f92b 	bl	8001004 <__aeabi_fcmple>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <main+0x504>
 8002db4:	4b58      	ldr	r3, [pc, #352]	; (8002f18 <main+0x65c>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <main+0x660>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	db0b      	blt.n	8002dd8 <main+0x51c>
//				timerFT1 = false;
//				timerFT2 = false;
				arm.State = arm.ArmGripPermit;
 8002dc0:	4b57      	ldr	r3, [pc, #348]	; (8002f20 <main+0x664>)
 8002dc2:	2215      	movs	r2, #21
 8002dc4:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				current_correctAttempt = 0;
 8002dc8:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <main+0x65c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
				arm.SetLinAngMicrostepsAndParams(4);
 8002dce:	2104      	movs	r1, #4
 8002dd0:	4853      	ldr	r0, [pc, #332]	; (8002f20 <main+0x664>)
 8002dd2:	f7fe ffa8 	bl	8001d26 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>
 8002dd6:	e00c      	b.n	8002df2 <main+0x536>
			} else {
				current_correctAttempt += 1;
 8002dd8:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <main+0x65c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <main+0x65c>)
 8002de0:	6013      	str	r3, [r2, #0]
				arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002de2:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <main+0x64c>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <main+0x64c>)
 8002de8:	6912      	ldr	r2, [r2, #16]
 8002dea:	4619      	mov	r1, r3
 8002dec:	484c      	ldr	r0, [pc, #304]	; (8002f20 <main+0x664>)
 8002dee:	f7fe fbef 	bl	80015d0 <_ZN7RoboArm11Move2MotorsEff>
////			arm.gripperPsteps = 523*arm.drvMicroSteps;
////			arm.steps4OneMM = motorStep * arm.drvMicroSteps / (beltRatio * spoolStep);
//			arm.SetLinAngMicrostepsAndParams(4);
		}

		if (arm.State == arm.ArmGripPermit) {
 8002df2:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <main+0x664>)
 8002df4:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002df8:	2b15      	cmp	r3, #21
 8002dfa:	d12f      	bne.n	8002e5c <main+0x5a0>
			//+6 Перевірка статуса зацепа чи він не посередині і встановлюємо потрібний опускаємо
//			arm.SetBuserState(1);
			int tempGripState = arm.GetGripperState();
 8002dfc:	4848      	ldr	r0, [pc, #288]	; (8002f20 <main+0x664>)
 8002dfe:	f7fe fe80 	bl	8001b02 <_ZN7RoboArm15GetGripperStateEv>
 8002e02:	6178      	str	r0, [r7, #20]
			if ((tempGripState == 1 || tempGripState == 0)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d002      	beq.n	8002e10 <main+0x554>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d114      	bne.n	8002e3a <main+0x57e>
					&& (tempGripState != un_to.params.hold)) {
 8002e10:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <main+0x64c>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d00f      	beq.n	8002e3a <main+0x57e>

				arm.lastGripState = tempGripState; //записали поточне положеня
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <main+0x664>)
 8002e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

				arm.State = arm.ArmGripMOVE;
 8002e24:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <main+0x664>)
 8002e26:	2208      	movs	r2, #8
 8002e28:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				arm.SetGripper(un_to.params.hold);
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <main+0x64c>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4619      	mov	r1, r3
 8002e32:	483b      	ldr	r0, [pc, #236]	; (8002f20 <main+0x664>)
 8002e34:	f7fe febe 	bl	8001bb4 <_ZN7RoboArm10SetGripperEi>
 8002e38:	e010      	b.n	8002e5c <main+0x5a0>
			} else if (tempGripState == un_to.params.hold) {
 8002e3a:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <main+0x64c>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d104      	bne.n	8002e4e <main+0x592>
				arm.State = arm.ArmGripENDMOVE;
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <main+0x664>)
 8002e46:	2209      	movs	r2, #9
 8002e48:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8002e4c:	e006      	b.n	8002e5c <main+0x5a0>
			} else if (tempGripState == 3) {
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d103      	bne.n	8002e5c <main+0x5a0>
				arm.State = arm.ArmGripMOVEError;  //!!!!!!!!!!!!!!!! УВАГА ТУТ
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <main+0x664>)
 8002e56:	2213      	movs	r2, #19
 8002e58:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			}
		}

		//якщо кроки закінчились а кінцевік не спрацював
		if (arm.State == arm.ArmGripMOVEError) {
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <main+0x664>)
 8002e5e:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002e62:	2b13      	cmp	r3, #19
 8002e64:	d107      	bne.n	8002e76 <main+0x5ba>
			arm.State = arm.ArmGripMOVERetry;
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <main+0x664>)
 8002e68:	2214      	movs	r2, #20
 8002e6a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			//їдемо в протилежну сторону
			arm.SetGripper(0); // TODO to last stable position
 8002e6e:	2100      	movs	r1, #0
 8002e70:	482b      	ldr	r0, [pc, #172]	; (8002f20 <main+0x664>)
 8002e72:	f7fe fe9f 	bl	8001bb4 <_ZN7RoboArm10SetGripperEi>
//		if (arm.GetGripperState()==un_to.params.hold && arm.State = arm.ArmGripENDMOVE){
//			arm.State = arm.ArmGripENDMOVE;
//		}

		// +7 закінчили рух зацепа
		if (arm.State == arm.ArmGripENDMOVE) {
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <main+0x664>)
 8002e78:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002e7c:	2b09      	cmp	r3, #9
 8002e7e:	d135      	bne.n	8002eec <main+0x630>
			arm.State = arm.ArmSTAND;
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <main+0x664>)
 8002e82:	2206      	movs	r2, #6
 8002e84:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			float lin = arm.GetLin();
 8002e88:	4825      	ldr	r0, [pc, #148]	; (8002f20 <main+0x664>)
 8002e8a:	f7fe fff7 	bl	8001e7c <_ZN7RoboArm6GetLinEv>
 8002e8e:	6138      	str	r0, [r7, #16]
//			un_send.params.lin = 0;
			un_send.params.lin = lin_beforeCorrect;
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <main+0x668>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <main+0x66c>)
 8002e96:	6013      	str	r3, [r2, #0]
			un_send.params.lin_2 = lin;
 8002e98:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <main+0x66c>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6113      	str	r3, [r2, #16]
			HAL_Delay(10);
 8002e9e:	200a      	movs	r0, #10
 8002ea0:	f001 fa8c 	bl	80043bc <HAL_Delay>
			float ang = arm.GetAng();
 8002ea4:	481e      	ldr	r0, [pc, #120]	; (8002f20 <main+0x664>)
 8002ea6:	f7ff f865 	bl	8001f74 <_ZN7RoboArm6GetAngEv>
 8002eaa:	60f8      	str	r0, [r7, #12]
//			un_send.params.ang = 0;
			un_send.params.ang = ang_beforeCorrect;
 8002eac:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <main+0x670>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <main+0x66c>)
 8002eb2:	6053      	str	r3, [r2, #4]
			un_send.params.ang_2 = ang;
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <main+0x66c>)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6153      	str	r3, [r2, #20]
			un_send.params.hold = arm.GetGripperState()+10;
 8002eba:	4819      	ldr	r0, [pc, #100]	; (8002f20 <main+0x664>)
 8002ebc:	f7fe fe21 	bl	8001b02 <_ZN7RoboArm15GetGripperStateEv>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	330a      	adds	r3, #10
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <main+0x66c>)
 8002ec6:	6193      	str	r3, [r2, #24]
			un_send.params.PoT_lin = 0;
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <main+0x66c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <main+0x66c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	60da      	str	r2, [r3, #12]

			gripperMoveFinished = false;
 8002ed4:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <main+0x674>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
			moveFinished = false;
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <main+0x678>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),12);
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	221c      	movs	r2, #28
 8002ee4:	4910      	ldr	r1, [pc, #64]	; (8002f28 <main+0x66c>)
 8002ee6:	4814      	ldr	r0, [pc, #80]	; (8002f38 <main+0x67c>)
 8002ee8:	f003 fd91 	bl	8006a0e <HAL_UART_Transmit>

		}

		//запит на читання координат
		if (arm.getPrintState() && arm.State == arm.ArmGetData) {
 8002eec:	480c      	ldr	r0, [pc, #48]	; (8002f20 <main+0x664>)
 8002eee:	f7fe fee9 	bl	8001cc4 <_ZN7RoboArm13getPrintStateEv>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d021      	beq.n	8002f3c <main+0x680>
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <main+0x664>)
 8002efa:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d11c      	bne.n	8002f3c <main+0x680>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e01b      	b.n	8002f3e <main+0x682>
 8002f06:	bf00      	nop
 8002f08:	2000025c 	.word	0x2000025c
 8002f0c:	40768000 	.word	0x40768000
 8002f10:	43b40000 	.word	0x43b40000
 8002f14:	20000004 	.word	0x20000004
 8002f18:	20000220 	.word	0x20000220
 8002f1c:	20000008 	.word	0x20000008
 8002f20:	2000028c 	.word	0x2000028c
 8002f24:	20000278 	.word	0x20000278
 8002f28:	20000240 	.word	0x20000240
 8002f2c:	2000027c 	.word	0x2000027c
 8002f30:	20000000 	.word	0x20000000
 8002f34:	2000021d 	.word	0x2000021d
 8002f38:	2000016c 	.word	0x2000016c
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d02e      	beq.n	8002fa0 <main+0x6e4>
			arm.State = arm.ArmSTAND;
 8002f42:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <main+0x7fc>)
 8002f44:	2206      	movs	r2, #6
 8002f46:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			float lin = arm.GetLin();
 8002f4a:	485b      	ldr	r0, [pc, #364]	; (80030b8 <main+0x7fc>)
 8002f4c:	f7fe ff96 	bl	8001e7c <_ZN7RoboArm6GetLinEv>
 8002f50:	60b8      	str	r0, [r7, #8]
			un_send.params.lin = 0;
 8002f52:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <main+0x800>)
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
			un_send.params.lin_2 = lin;
 8002f5a:	4a58      	ldr	r2, [pc, #352]	; (80030bc <main+0x800>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6113      	str	r3, [r2, #16]
//		  un_send.params.lin = arm.ShiftZeroLin(lin); //це для АМТ223С-V
			HAL_Delay(10);
 8002f60:	200a      	movs	r0, #10
 8002f62:	f001 fa2b 	bl	80043bc <HAL_Delay>
			float ang = arm.GetAng();
 8002f66:	4854      	ldr	r0, [pc, #336]	; (80030b8 <main+0x7fc>)
 8002f68:	f7ff f804 	bl	8001f74 <_ZN7RoboArm6GetAngEv>
 8002f6c:	6078      	str	r0, [r7, #4]
			un_send.params.ang = 0;
 8002f6e:	4b53      	ldr	r3, [pc, #332]	; (80030bc <main+0x800>)
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	605a      	str	r2, [r3, #4]
			un_send.params.ang_2 = ang;
 8002f76:	4a51      	ldr	r2, [pc, #324]	; (80030bc <main+0x800>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6153      	str	r3, [r2, #20]
//		  un_send.params.ang = arm.ShiftZeroAng(ang); //це для АМТ223С-V
			un_send.params.hold = arm.GetGripperState();
 8002f7c:	484e      	ldr	r0, [pc, #312]	; (80030b8 <main+0x7fc>)
 8002f7e:	f7fe fdc0 	bl	8001b02 <_ZN7RoboArm15GetGripperStateEv>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <main+0x800>)
 8002f86:	6193      	str	r3, [r2, #24]
			un_send.params.PoT_lin = 0;
 8002f88:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <main+0x800>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <main+0x800>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002f94:	230c      	movs	r3, #12
 8002f96:	221c      	movs	r2, #28
 8002f98:	4948      	ldr	r1, [pc, #288]	; (80030bc <main+0x800>)
 8002f9a:	4849      	ldr	r0, [pc, #292]	; (80030c0 <main+0x804>)
 8002f9c:	f003 fd37 	bl	8006a0e <HAL_UART_Transmit>
					12);
		}

		//екстренна зупинка
		if (arm.State == arm.ArmSTOP) {
 8002fa0:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <main+0x7fc>)
 8002fa2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002fa6:	2b0f      	cmp	r3, #15
 8002fa8:	d128      	bne.n	8002ffc <main+0x740>
			stopHand = false;
 8002faa:	4b46      	ldr	r3, [pc, #280]	; (80030c4 <main+0x808>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 8002fb0:	4841      	ldr	r0, [pc, #260]	; (80030b8 <main+0x7fc>)
 8002fb2:	f7fe fac9 	bl	8001548 <_ZN7RoboArm13EmergencyStopEv>

			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <main+0x800>)
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <main+0x800>)
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	; (80030bc <main+0x800>)
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8002fce:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <main+0x800>)
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 8002fd6:	4b39      	ldr	r3, [pc, #228]	; (80030bc <main+0x800>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002fdc:	4b37      	ldr	r3, [pc, #220]	; (80030bc <main+0x800>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
			un_send.params.hold = 10;
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <main+0x800>)
 8002fe4:	220a      	movs	r2, #10
 8002fe6:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002fe8:	230c      	movs	r3, #12
 8002fea:	221c      	movs	r2, #28
 8002fec:	4933      	ldr	r1, [pc, #204]	; (80030bc <main+0x800>)
 8002fee:	4834      	ldr	r0, [pc, #208]	; (80030c0 <main+0x804>)
 8002ff0:	f003 fd0d 	bl	8006a0e <HAL_UART_Transmit>
					12);
			arm.State = arm.ArmSTAND;
 8002ff4:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <main+0x7fc>)
 8002ff6:	2206      	movs	r2, #6
 8002ff8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
		}

		//встановлення нуля
		if (arm.State == arm.ArmSetZero) {
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <main+0x7fc>)
 8002ffe:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003002:	2b11      	cmp	r3, #17
 8003004:	d12d      	bne.n	8003062 <main+0x7a6>
			arm.State = arm.ArmSTAND;
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <main+0x7fc>)
 8003008:	2206      	movs	r2, #6
 800300a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			arm.SetZeroEncoders();
 800300e:	482a      	ldr	r0, [pc, #168]	; (80030b8 <main+0x7fc>)
 8003010:	f7fe fff4 	bl	8001ffc <_ZN7RoboArm15SetZeroEncodersEv>
//		  arm.SetSoftwareZero();
			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <main+0x800>)
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <main+0x800>)
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <main+0x800>)
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 800302c:	4b23      	ldr	r3, [pc, #140]	; (80030bc <main+0x800>)
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <main+0x800>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <main+0x800>)
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
			un_send.params.lin_2 = 0;
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <main+0x800>)
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <main+0x800>)
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	615a      	str	r2, [r3, #20]
			un_send.params.hold = 10;
 8003050:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <main+0x800>)
 8003052:	220a      	movs	r2, #10
 8003054:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8003056:	230c      	movs	r3, #12
 8003058:	221c      	movs	r2, #28
 800305a:	4918      	ldr	r1, [pc, #96]	; (80030bc <main+0x800>)
 800305c:	4818      	ldr	r0, [pc, #96]	; (80030c0 <main+0x804>)
 800305e:	f003 fcd6 	bl	8006a0e <HAL_UART_Transmit>
					12);

//			arm.State = arm.ArmSTAND;
		}

		if (arm.State == arm.ArmGetVers) {
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <main+0x7fc>)
 8003064:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003068:	2b12      	cmp	r3, #18
 800306a:	f47f acb8 	bne.w	80029de <main+0x122>
			arm.State = arm.ArmSTAND;
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <main+0x7fc>)
 8003070:	2206      	movs	r2, #6
 8003072:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			un_send.params.lin = 0;
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <main+0x800>)
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <main+0x800>)
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <main+0x800>)
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <main+0x800>)
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <main+0x800>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 800309c:	4b07      	ldr	r3, [pc, #28]	; (80030bc <main+0x800>)
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]
			un_send.params.hold = version;
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <main+0x80c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a05      	ldr	r2, [pc, #20]	; (80030bc <main+0x800>)
 80030a8:	6193      	str	r3, [r2, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80030aa:	230c      	movs	r3, #12
 80030ac:	221c      	movs	r2, #28
 80030ae:	4903      	ldr	r1, [pc, #12]	; (80030bc <main+0x800>)
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <main+0x804>)
 80030b2:	f003 fcac 	bl	8006a0e <HAL_UART_Transmit>
					12);
		}
	}
 80030b6:	e492      	b.n	80029de <main+0x122>
 80030b8:	2000028c 	.word	0x2000028c
 80030bc:	20000240 	.word	0x20000240
 80030c0:	2000016c 	.word	0x2000016c
 80030c4:	20000218 	.word	0x20000218
 80030c8:	2000000c 	.word	0x2000000c

080030cc <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b090      	sub	sp, #64	; 0x40
 80030d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80030d2:	f107 0318 	add.w	r3, r7, #24
 80030d6:	2228      	movs	r2, #40	; 0x28
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f004 fb3a 	bl	8007754 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030f8:	2300      	movs	r3, #0
 80030fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030fc:	2301      	movs	r3, #1
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003100:	2302      	movs	r3, #2
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003108:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800310a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003110:	f107 0318 	add.w	r3, r7, #24
 8003114:	4618      	mov	r0, r3
 8003116:	f001 fd11 	bl	8004b3c <HAL_RCC_OscConfig>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 800312a:	f000 fdfb 	bl	8003d24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800312e:	230f      	movs	r3, #15
 8003130:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003132:	2302      	movs	r3, #2
 8003134:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800313a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	2102      	movs	r1, #2
 8003148:	4618      	mov	r0, r3
 800314a:	f001 ff79 	bl	8005040 <HAL_RCC_ClockConfig>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 800315e:	f000 fde1 	bl	8003d24 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8003162:	f002 f857 	bl	8005214 <HAL_RCC_EnableCSS>
}
 8003166:	bf00      	nop
 8003168:	3740      	adds	r7, #64	; 0x40
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None HAL_Delay(1);
 }
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 8003176:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <_ZL12MX_SPI1_Initv+0x74>)
 8003178:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 800317c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003180:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 8003196:	2200      	movs	r2, #0
 8003198:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 800319c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 80031a4:	2218      	movs	r2, #24
 80031a6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 80031bc:	220a      	movs	r2, #10
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80031c0:	4807      	ldr	r0, [pc, #28]	; (80031e0 <_ZL12MX_SPI1_Initv+0x70>)
 80031c2:	f002 f8d7 	bl	8005374 <HAL_SPI_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 80031d6:	f000 fda5 	bl	8003d24 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000003c 	.word	0x2000003c
 80031e4:	40013000 	.word	0x40013000

080031e8 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b092      	sub	sp, #72	; 0x48
 80031ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80031f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	615a      	str	r2, [r3, #20]
 800320a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2220      	movs	r2, #32
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f004 fa9e 	bl	8007754 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003218:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 800321a:	4a3e      	ldr	r2, [pc, #248]	; (8003314 <_ZL12MX_TIM1_Initv+0x12c>)
 800321c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 8003220:	2248      	movs	r2, #72	; 0x48
 8003222:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003224:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 800322c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003230:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003232:	4b37      	ldr	r3, [pc, #220]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003238:	4b35      	ldr	r3, [pc, #212]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 800323a:	2200      	movs	r2, #0
 800323c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800323e:	4b34      	ldr	r3, [pc, #208]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003244:	4832      	ldr	r0, [pc, #200]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 8003246:	f002 fd3d 	bl	8005cc4 <HAL_TIM_PWM_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800325a:	f000 fd63 	bl	8003d24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800326a:	4619      	mov	r1, r3
 800326c:	4828      	ldr	r0, [pc, #160]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 800326e:	f003 fa6b 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 8003272:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 8003282:	f000 fd4f 	bl	8003d24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003286:	2360      	movs	r3, #96	; 0x60
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800328e:	2300      	movs	r3, #0
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003292:	2300      	movs	r3, #0
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80032a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a6:	2200      	movs	r2, #0
 80032a8:	4619      	mov	r1, r3
 80032aa:	4819      	ldr	r0, [pc, #100]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 80032ac:	f002 ff62 	bl	8006174 <HAL_TIM_PWM_ConfigChannel>
 80032b0:	4603      	mov	r3, r0
			!= HAL_OK) {
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 80032c0:	f000 fd30 	bl	8003d24 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032dc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	480a      	ldr	r0, [pc, #40]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 80032e8:	f003 fa86 	bl	80067f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80032ec:	4603      	mov	r3, r0
			!= HAL_OK) {
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <_ZL12MX_TIM1_Initv+0x118>
		Error_Handler();
 80032fc:	f000 fd12 	bl	8003d24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <_ZL12MX_TIM1_Initv+0x128>)
 8003302:	f000 fe51 	bl	8003fa8 <HAL_TIM_MspPostInit>

}
 8003306:	bf00      	nop
 8003308:	3748      	adds	r7, #72	; 0x48
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000094 	.word	0x20000094
 8003314:	40012c00 	.word	0x40012c00

08003318 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800331e:	f107 0320 	add.w	r3, r7, #32
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	615a      	str	r2, [r3, #20]
 8003338:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800333a:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800333c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003340:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8003342:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8003344:	2248      	movs	r2, #72	; 0x48
 8003346:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003348:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 800334e:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8003350:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003354:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003356:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335c:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8003362:	4820      	ldr	r0, [pc, #128]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8003364:	f002 fcae 	bl	8005cc4 <HAL_TIM_PWM_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 8003378:	f000 fcd4 	bl	8003d24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337c:	2300      	movs	r3, #0
 800337e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003384:	f107 0320 	add.w	r3, r7, #32
 8003388:	4619      	mov	r1, r3
 800338a:	4816      	ldr	r0, [pc, #88]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800338c:	f003 f9dc 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 8003390:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 80033a0:	f000 fcc0 	bl	8003d24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033a4:	2360      	movs	r3, #96	; 0x60
 80033a6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2204      	movs	r2, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	480a      	ldr	r0, [pc, #40]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 80033bc:	f002 feda 	bl	8006174 <HAL_TIM_PWM_ConfigChannel>
 80033c0:	4603      	mov	r3, r0
			!= HAL_OK) {
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <_ZL12MX_TIM2_Initv+0xbc>
		Error_Handler();
 80033d0:	f000 fca8 	bl	8003d24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80033d4:	4803      	ldr	r0, [pc, #12]	; (80033e4 <_ZL12MX_TIM2_Initv+0xcc>)
 80033d6:	f000 fde7 	bl	8003fa8 <HAL_TIM_MspPostInit>

}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200000dc 	.word	0x200000dc

080033e8 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80033ee:	f107 0320 	add.w	r3, r7, #32
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	611a      	str	r2, [r3, #16]
 8003406:	615a      	str	r2, [r3, #20]
 8003408:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <_ZL12MX_TIM3_Initv+0xcc>)
 800340e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72;
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003412:	2248      	movs	r2, #72	; 0x48
 8003414:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800341e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003422:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003424:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800342a:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8003430:	481f      	ldr	r0, [pc, #124]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003432:	f002 fc47 	bl	8005cc4 <HAL_TIM_PWM_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <_ZL12MX_TIM3_Initv+0x62>
		Error_Handler();
 8003446:	f000 fc6d 	bl	8003d24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003452:	f107 0320 	add.w	r3, r7, #32
 8003456:	4619      	mov	r1, r3
 8003458:	4815      	ldr	r0, [pc, #84]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800345a:	f003 f975 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 800345e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <_ZL12MX_TIM3_Initv+0x8a>
		Error_Handler();
 800346e:	f000 fc59 	bl	8003d24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003472:	2360      	movs	r3, #96	; 0x60
 8003474:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	2204      	movs	r2, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4809      	ldr	r0, [pc, #36]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800348a:	f002 fe73 	bl	8006174 <HAL_TIM_PWM_ConfigChannel>
 800348e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <_ZL12MX_TIM3_Initv+0xba>
		Error_Handler();
 800349e:	f000 fc41 	bl	8003d24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80034a2:	4803      	ldr	r0, [pc, #12]	; (80034b0 <_ZL12MX_TIM3_Initv+0xc8>)
 80034a4:	f000 fd80 	bl	8003fa8 <HAL_TIM_MspPostInit>

}
 80034a8:	bf00      	nop
 80034aa:	3728      	adds	r7, #40	; 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000124 	.word	0x20000124
 80034b4:	40000400 	.word	0x40000400

080034b8 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034be:	4a14      	ldr	r2, [pc, #80]	; (8003510 <_ZL19MX_USART1_UART_Initv+0x58>)
 80034c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034de:	220c      	movs	r2, #12
 80034e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80034ee:	4807      	ldr	r0, [pc, #28]	; (800350c <_ZL19MX_USART1_UART_Initv+0x54>)
 80034f0:	f003 f9e5 	bl	80068be <HAL_UART_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8003504:	f000 fc0e 	bl	8003d24 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}
 800350c:	2000016c 	.word	0x2000016c
 8003510:	40013800 	.word	0x40013800

08003514 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
//
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <_ZL19MX_USART2_UART_Initv+0x58>)
 800351c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003524:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 800353a:	220c      	movs	r2, #12
 800353c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003546:	2200      	movs	r2, #0
 8003548:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 800354a:	4807      	ldr	r0, [pc, #28]	; (8003568 <_ZL19MX_USART2_UART_Initv+0x54>)
 800354c:	f003 fa07 	bl	800695e <HAL_HalfDuplex_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8003560:	f000 fbe0 	bl	8003d24 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
//
	/* USER CODE END USART2_Init 2 */

}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200001b4 	.word	0x200001b4
 800356c:	40004400 	.word	0x40004400

08003570 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003584:	4b4e      	ldr	r3, [pc, #312]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	4a4d      	ldr	r2, [pc, #308]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 800358a:	f043 0310 	orr.w	r3, r3, #16
 800358e:	6193      	str	r3, [r2, #24]
 8003590:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800359c:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	4a47      	ldr	r2, [pc, #284]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 80035a2:	f043 0320 	orr.w	r3, r3, #32
 80035a6:	6193      	str	r3, [r2, #24]
 80035a8:	4b45      	ldr	r3, [pc, #276]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4a41      	ldr	r2, [pc, #260]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 80035ba:	f043 0304 	orr.w	r3, r3, #4
 80035be:	6193      	str	r3, [r2, #24]
 80035c0:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80035cc:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	4a3b      	ldr	r2, [pc, #236]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 80035d2:	f043 0308 	orr.w	r3, r3, #8
 80035d6:	6193      	str	r3, [r2, #24]
 80035d8:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <_ZL12MX_GPIO_Initv+0x150>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80035e4:	2200      	movs	r2, #0
 80035e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035ea:	4836      	ldr	r0, [pc, #216]	; (80036c4 <_ZL12MX_GPIO_Initv+0x154>)
 80035ec:	f001 fa5d 	bl	8004aaa <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80035f0:	2200      	movs	r2, #0
 80035f2:	f241 0171 	movw	r1, #4209	; 0x1071
 80035f6:	4834      	ldr	r0, [pc, #208]	; (80036c8 <_ZL12MX_GPIO_Initv+0x158>)
 80035f8:	f001 fa57 	bl	8004aaa <HAL_GPIO_WritePin>
	En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80035fc:	2200      	movs	r2, #0
 80035fe:	f648 7143 	movw	r1, #36675	; 0x8f43
 8003602:	4832      	ldr	r0, [pc, #200]	; (80036cc <_ZL12MX_GPIO_Initv+0x15c>)
 8003604:	f001 fa51 	bl	8004aaa <HAL_GPIO_WritePin>
			CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin | S2_Pin | En3_Pin
					| Dir3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 8003608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800360c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360e:	2301      	movs	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2302      	movs	r3, #2
 8003618:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800361a:	f107 0310 	add.w	r3, r7, #16
 800361e:	4619      	mov	r1, r3
 8003620:	4828      	ldr	r0, [pc, #160]	; (80036c4 <_ZL12MX_GPIO_Initv+0x154>)
 8003622:	f001 f8af 	bl	8004784 <HAL_GPIO_Init>

	/*Configure GPIO pins : En2_Pin Button_Pin En1_Pin Dir1_Pin
	 Buser_Pin */
	GPIO_InitStruct.Pin = En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin;
 8003626:	f241 0371 	movw	r3, #4209	; 0x1071
 800362a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003634:	2302      	movs	r3, #2
 8003636:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	4619      	mov	r1, r3
 800363e:	4822      	ldr	r0, [pc, #136]	; (80036c8 <_ZL12MX_GPIO_Initv+0x158>)
 8003640:	f001 f8a0 	bl	8004784 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
	 S1_Pin S2_Pin En3_Pin Dir3_Pin */
	GPIO_InitStruct.Pin = CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin
 8003644:	f648 7343 	movw	r3, #36675	; 0x8f43
 8003648:	613b      	str	r3, [r7, #16]
			| S2_Pin | En3_Pin | Dir3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364a:	2301      	movs	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003652:	2302      	movs	r3, #2
 8003654:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	4619      	mov	r1, r3
 800365c:	481b      	ldr	r0, [pc, #108]	; (80036cc <_ZL12MX_GPIO_Initv+0x15c>)
 800365e:	f001 f891 	bl	8004784 <HAL_GPIO_Init>

	/*Configure GPIO pins : EndCap1_Pin EndCap2_Pin EndCap3_Pin */
	GPIO_InitStruct.Pin = EndCap1_Pin | EndCap2_Pin | EndCap3_Pin;
 8003662:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8003666:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <_ZL12MX_GPIO_Initv+0x160>)
 800366a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	4619      	mov	r1, r3
 8003676:	4815      	ldr	r0, [pc, #84]	; (80036cc <_ZL12MX_GPIO_Initv+0x15c>)
 8003678:	f001 f884 	bl	8004784 <HAL_GPIO_Init>

	/*Configure GPIO pin : EndCap4_Pin */
	GPIO_InitStruct.Pin = EndCap4_Pin;
 800367c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003680:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <_ZL12MX_GPIO_Initv+0x160>)
 8003684:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(EndCap4_GPIO_Port, &GPIO_InitStruct);
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4619      	mov	r1, r3
 8003690:	480d      	ldr	r0, [pc, #52]	; (80036c8 <_ZL12MX_GPIO_Initv+0x158>)
 8003692:	f001 f877 	bl	8004784 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2105      	movs	r1, #5
 800369a:	2017      	movs	r0, #23
 800369c:	f000 ff89 	bl	80045b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036a0:	2017      	movs	r0, #23
 80036a2:	f000 ffa2 	bl	80045ea <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2105      	movs	r1, #5
 80036aa:	2028      	movs	r0, #40	; 0x28
 80036ac:	f000 ff81 	bl	80045b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036b0:	2028      	movs	r0, #40	; 0x28
 80036b2:	f000 ff9a 	bl	80045ea <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80036b6:	bf00      	nop
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40011000 	.word	0x40011000
 80036c8:	40010800 	.word	0x40010800
 80036cc:	40010c00 	.word	0x40010c00
 80036d0:	10110000 	.word	0x10110000

080036d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80036d4:	b5b0      	push	{r4, r5, r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a84      	ldr	r2, [pc, #528]	; (80038f0 <HAL_UART_RxCpltCallback+0x21c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	f040 80fc 	bne.w	80038de <HAL_UART_RxCpltCallback+0x20a>
		// копіюємо отримані дані у rx_buffer
		memcpy(un_get.bytes, rx_buffer, sizeof(rx_buffer));
 80036e6:	4a83      	ldr	r2, [pc, #524]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 80036e8:	4b83      	ldr	r3, [pc, #524]	; (80038f8 <HAL_UART_RxCpltCallback+0x224>)
 80036ea:	4614      	mov	r4, r2
 80036ec:	461d      	mov	r5, r3
 80036ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		switch (un_get.params.hold) {
 80036fa:	4b7e      	ldr	r3, [pc, #504]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	dc7a      	bgt.n	80037f8 <HAL_UART_RxCpltCallback+0x124>
 8003702:	2b00      	cmp	r3, #0
 8003704:	da7d      	bge.n	8003802 <HAL_UART_RxCpltCallback+0x12e>
 8003706:	e0e0      	b.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>
 8003708:	3b19      	subs	r3, #25
 800370a:	2b37      	cmp	r3, #55	; 0x37
 800370c:	f200 80dd 	bhi.w	80038ca <HAL_UART_RxCpltCallback+0x1f6>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <HAL_UART_RxCpltCallback+0x44>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003841 	.word	0x08003841
 800371c:	080038cb 	.word	0x080038cb
 8003720:	080038cb 	.word	0x080038cb
 8003724:	080038cb 	.word	0x080038cb
 8003728:	080038cb 	.word	0x080038cb
 800372c:	08003869 	.word	0x08003869
 8003730:	08003869 	.word	0x08003869
 8003734:	080038cb 	.word	0x080038cb
 8003738:	080038cb 	.word	0x080038cb
 800373c:	080038cb 	.word	0x080038cb
 8003740:	080038cb 	.word	0x080038cb
 8003744:	080038cb 	.word	0x080038cb
 8003748:	080038cb 	.word	0x080038cb
 800374c:	080038cb 	.word	0x080038cb
 8003750:	080038cb 	.word	0x080038cb
 8003754:	080038c1 	.word	0x080038c1
 8003758:	080038cb 	.word	0x080038cb
 800375c:	080038cb 	.word	0x080038cb
 8003760:	080038cb 	.word	0x080038cb
 8003764:	080038cb 	.word	0x080038cb
 8003768:	080038cb 	.word	0x080038cb
 800376c:	080038cb 	.word	0x080038cb
 8003770:	080038cb 	.word	0x080038cb
 8003774:	080038cb 	.word	0x080038cb
 8003778:	080038cb 	.word	0x080038cb
 800377c:	0800384b 	.word	0x0800384b
 8003780:	080038cb 	.word	0x080038cb
 8003784:	080038cb 	.word	0x080038cb
 8003788:	080038cb 	.word	0x080038cb
 800378c:	080038cb 	.word	0x080038cb
 8003790:	080038cb 	.word	0x080038cb
 8003794:	080038cb 	.word	0x080038cb
 8003798:	080038cb 	.word	0x080038cb
 800379c:	080038cb 	.word	0x080038cb
 80037a0:	080038cb 	.word	0x080038cb
 80037a4:	080038cb 	.word	0x080038cb
 80037a8:	080038cb 	.word	0x080038cb
 80037ac:	080038cb 	.word	0x080038cb
 80037b0:	080038cb 	.word	0x080038cb
 80037b4:	080038cb 	.word	0x080038cb
 80037b8:	080038cb 	.word	0x080038cb
 80037bc:	080038cb 	.word	0x080038cb
 80037c0:	080038cb 	.word	0x080038cb
 80037c4:	080038cb 	.word	0x080038cb
 80037c8:	080038cb 	.word	0x080038cb
 80037cc:	080038cb 	.word	0x080038cb
 80037d0:	080038cb 	.word	0x080038cb
 80037d4:	080038cb 	.word	0x080038cb
 80037d8:	080038cb 	.word	0x080038cb
 80037dc:	080038cb 	.word	0x080038cb
 80037e0:	08003855 	.word	0x08003855
 80037e4:	080038cb 	.word	0x080038cb
 80037e8:	080038cb 	.word	0x080038cb
 80037ec:	080038cb 	.word	0x080038cb
 80037f0:	080038cb 	.word	0x080038cb
 80037f4:	0800385f 	.word	0x0800385f
 80037f8:	2b50      	cmp	r3, #80	; 0x50
 80037fa:	dc66      	bgt.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>
 80037fc:	2b19      	cmp	r3, #25
 80037fe:	da83      	bge.n	8003708 <HAL_UART_RxCpltCallback+0x34>
 8003800:	e063      	b.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>
		case 1:
			// 0 або 1 у un_get.params.hold = прийшли нові координати
			//startFirstMove = true;

			//статус початку руху  +1
			arm.State = arm.ArmSTART;
 8003802:	4b3e      	ldr	r3, [pc, #248]	; (80038fc <HAL_UART_RxCpltCallback+0x228>)
 8003804:	2200      	movs	r2, #0
 8003806:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

			un_to.params.lin = un_get.params.lin;
 800380a:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 8003810:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang;
 8003812:	4b38      	ldr	r3, [pc, #224]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4a3a      	ldr	r2, [pc, #232]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 8003818:	6053      	str	r3, [r2, #4]
			un_to.params.PoT_ang = 0;
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]
			un_to.params.PoT_lin = 0;
 8003820:	4b37      	ldr	r3, [pc, #220]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 8003822:	2200      	movs	r2, #0
 8003824:	609a      	str	r2, [r3, #8]
			un_to.params.lin_2 = un_get.params.lin_2;
 8003826:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	4a35      	ldr	r2, [pc, #212]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 800382c:	6113      	str	r3, [r2, #16]
			un_to.params.ang_2 = un_get.params.ang_2;
 800382e:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4a33      	ldr	r2, [pc, #204]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 8003834:	6153      	str	r3, [r2, #20]
			un_to.params.hold = un_get.params.hold;
 8003836:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	4a31      	ldr	r2, [pc, #196]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 800383c:	6193      	str	r3, [r2, #24]
//			arm.moveGripper = un_get.params.hold;
			break;
 800383e:	e044      	b.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>

		case 25:
			//25 = екстренна зупинка

			arm.State = arm.ArmSTOP;
 8003840:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_UART_RxCpltCallback+0x228>)
 8003842:	220f      	movs	r2, #15
 8003844:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			//оце би на переривання якесь повісити, щоб якщо натиснули в дашборді - то остаточно вирубати.
			break;
 8003848:	e03f      	b.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>
		case 50:
			//50 = get-запит
			//sendDataFlag = true;
			arm.State = arm.ArmGetData;
 800384a:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_UART_RxCpltCallback+0x228>)
 800384c:	2210      	movs	r2, #16
 800384e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			break;
 8003852:	e03a      	b.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>
		case 75:
			//75 = встановлення нуля
			//	setZeroFlag = true;
			arm.State = arm.ArmSetZero;
 8003854:	4b29      	ldr	r3, [pc, #164]	; (80038fc <HAL_UART_RxCpltCallback+0x228>)
 8003856:	2211      	movs	r2, #17
 8003858:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			break;
 800385c:	e035      	b.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>
		case 80:
			arm.State = arm.ArmGetVers;
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <HAL_UART_RxCpltCallback+0x228>)
 8003860:	2212      	movs	r2, #18
 8003862:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			break;
 8003866:	e030      	b.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>

		case 31: //так робити погано але ладна)
		case 30:
			arm.State = arm.ArmStepSTART;
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_UART_RxCpltCallback+0x228>)
 800386a:	2201      	movs	r2, #1
 800386c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			un_to.params.lin = un_get.params.lin; //це кроки 1
 8003870:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a22      	ldr	r2, [pc, #136]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 8003876:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang; //це кроки 2
 8003878:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a20      	ldr	r2, [pc, #128]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 800387e:	6053      	str	r3, [r2, #4]
			un_to.params.PoT_ang = un_get.params.PoT_ang; //це період 2
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 8003886:	60d3      	str	r3, [r2, #12]
			un_to.params.PoT_lin = un_get.params.PoT_lin; //це період 1
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 800388e:	6093      	str	r3, [r2, #8]
			un_to.params.lin_2 = un_get.params.lin_2;
 8003890:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 8003896:	6113      	str	r3, [r2, #16]
			un_to.params.ang_2 = un_get.params.ang_2;
 8003898:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 800389e:	6153      	str	r3, [r2, #20]
			un_to.params.hold = un_get.params.hold % 10; //парсимо hold 0 або 1
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_UART_RxCpltCallback+0x220>)
 80038a2:	6999      	ldr	r1, [r3, #24]
 80038a4:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_UART_RxCpltCallback+0x230>)
 80038a6:	fb83 2301 	smull	r2, r3, r3, r1
 80038aa:	109a      	asrs	r2, r3, #2
 80038ac:	17cb      	asrs	r3, r1, #31
 80038ae:	1ad2      	subs	r2, r2, r3
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	1aca      	subs	r2, r1, r3
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_UART_RxCpltCallback+0x22c>)
 80038bc:	619a      	str	r2, [r3, #24]

			break;
 80038be:	e004      	b.n	80038ca <HAL_UART_RxCpltCallback+0x1f6>

		case 40:
			//перевірка чи були налаштовані таймери до цього для руху по крокам
			arm.State = arm.ArmStepStartMOVE;
 80038c0:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_UART_RxCpltCallback+0x228>)
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

			break;
 80038c8:	bf00      	nop

		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80038ca:	221c      	movs	r2, #28
 80038cc:	2100      	movs	r1, #0
 80038ce:	480a      	ldr	r0, [pc, #40]	; (80038f8 <HAL_UART_RxCpltCallback+0x224>)
 80038d0:	f003 ff40 	bl	8007754 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80038d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038d8:	480b      	ldr	r0, [pc, #44]	; (8003908 <HAL_UART_RxCpltCallback+0x234>)
 80038da:	f001 f8fe 	bl	8004ada <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80038de:	221c      	movs	r2, #28
 80038e0:	4905      	ldr	r1, [pc, #20]	; (80038f8 <HAL_UART_RxCpltCallback+0x224>)
 80038e2:	4803      	ldr	r0, [pc, #12]	; (80038f0 <HAL_UART_RxCpltCallback+0x21c>)
 80038e4:	f003 f916 	bl	8006b14 <HAL_UART_Receive_IT>
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bdb0      	pop	{r4, r5, r7, pc}
 80038f0:	2000016c 	.word	0x2000016c
 80038f4:	20000224 	.word	0x20000224
 80038f8:	200001fc 	.word	0x200001fc
 80038fc:	2000028c 	.word	0x2000028c
 8003900:	2000025c 	.word	0x2000025c
 8003904:	66666667 	.word	0x66666667
 8003908:	40011000 	.word	0x40011000

0800390c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	80fb      	strh	r3, [r7, #6]
		//	timerFT2 = true;
	}
//	else {
//		__NOP();
//	}
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_UART_ErrorCallback+0x84>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d133      	bne.n	800399a <HAL_UART_ErrorCallback+0x7a>
		if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	2b08      	cmp	r3, #8
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_UART_ErrorCallback+0x2c>
			// переполнение
			arm.SetBuserState(2);
 8003944:	2102      	movs	r1, #2
 8003946:	4818      	ldr	r0, [pc, #96]	; (80039a8 <HAL_UART_ErrorCallback+0x88>)
 8003948:	f7fe f8a9 	bl	8001a9e <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_PE) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	2b01      	cmp	r3, #1
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_UART_ErrorCallback+0x46>
			// Ошибка четности
			arm.SetBuserState(3);
 800395e:	2103      	movs	r1, #3
 8003960:	4811      	ldr	r0, [pc, #68]	; (80039a8 <HAL_UART_ErrorCallback+0x88>)
 8003962:	f7fe f89c 	bl	8001a9e <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_NE) {
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	2b02      	cmp	r3, #2
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_UART_ErrorCallback+0x60>
			// Ошибка зашумление
			arm.SetBuserState(4);
 8003978:	2104      	movs	r1, #4
 800397a:	480b      	ldr	r0, [pc, #44]	; (80039a8 <HAL_UART_ErrorCallback+0x88>)
 800397c:	f7fe f88f 	bl	8001a9e <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_FE) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	2b04      	cmp	r3, #4
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_UART_ErrorCallback+0x7a>
			// Ошибка кадрирования
			arm.SetBuserState(5);
 8003992:	2105      	movs	r1, #5
 8003994:	4804      	ldr	r0, [pc, #16]	; (80039a8 <HAL_UART_ErrorCallback+0x88>)
 8003996:	f7fe f882 	bl	8001a9e <_ZN7RoboArm13SetBuserStateEi>
		}
	}
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40013800 	.word	0x40013800
 80039a8:	2000028c 	.word	0x2000028c

080039ac <_Z32debounce_check_pins_and_set_flagv>:

void debounce_check_pins_and_set_flag() {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
	static bool checkFlag1 = false;
	static bool checkFlag2 = false;
//	static uint8_t last_EndCap1_state = GPIO_PIN_RESET;
//	static uint8_t last_EndCap2_state = GPIO_PIN_RESET;
	static uint8_t last_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
			arm.EndCap1_PinG);
 80039b2:	4b71      	ldr	r3, [pc, #452]	; (8003b78 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f3bf 8f5b 	dmb	ish
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01a      	beq.n	8003a02 <_Z32debounce_check_pins_and_set_flagv+0x56>
 80039cc:	486a      	ldr	r0, [pc, #424]	; (8003b78 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 80039ce:	f003 fe71 	bl	80076b4 <__cxa_guard_acquire>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00f      	beq.n	8003a02 <_Z32debounce_check_pins_and_set_flagv+0x56>
	static uint8_t last_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 80039e2:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	4a65      	ldr	r2, [pc, #404]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80039e8:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 f844 	bl	8004a7c <HAL_GPIO_ReadPin>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
			arm.EndCap1_PinG);
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	485e      	ldr	r0, [pc, #376]	; (8003b78 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 80039fe:	f003 fe65 	bl	80076cc <__cxa_guard_release>
	static uint8_t last_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
			arm.EndCap2_PinG);
 8003a02:	4b60      	ldr	r3, [pc, #384]	; (8003b84 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f3bf 8f5b 	dmb	ish
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01a      	beq.n	8003a52 <_Z32debounce_check_pins_and_set_flagv+0xa6>
 8003a1c:	4859      	ldr	r0, [pc, #356]	; (8003b84 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 8003a1e:	f003 fe49 	bl	80076b4 <__cxa_guard_acquire>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00f      	beq.n	8003a52 <_Z32debounce_check_pins_and_set_flagv+0xa6>
	static uint8_t last_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 8003a32:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	4a51      	ldr	r2, [pc, #324]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003a38:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f81c 	bl	8004a7c <HAL_GPIO_ReadPin>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
			arm.EndCap2_PinG);
 8003a48:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	484d      	ldr	r0, [pc, #308]	; (8003b84 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 8003a4e:	f003 fe3d 	bl	80076cc <__cxa_guard_release>
	uint32_t current_time = HAL_GetTick();
 8003a52:	f000 fca9 	bl	80043a8 <HAL_GetTick>
 8003a56:	6078      	str	r0, [r7, #4]

	// Перевірка чи пройшла достатня затримка для уникнення дребезгу
	if (current_time - last_check_time >= debounce_delay) {
 8003a58:	4b4c      	ldr	r3, [pc, #304]	; (8003b8c <_Z32debounce_check_pins_and_set_flagv+0x1e0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	1ad2      	subs	r2, r2, r3
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <_Z32debounce_check_pins_and_set_flagv+0x1e4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f0c0 8083 	bcc.w	8003b70 <_Z32debounce_check_pins_and_set_flagv+0x1c4>
		// Оновлення часу останньої перевірки
		last_check_time = current_time;
 8003a6a:	4a48      	ldr	r2, [pc, #288]	; (8003b8c <_Z32debounce_check_pins_and_set_flagv+0x1e0>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6013      	str	r3, [r2, #0]

		// Перевірка стану піну EndCap1
		uint8_t current_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 8003a70:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a74:	4a41      	ldr	r2, [pc, #260]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003a76:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fffd 	bl	8004a7c <HAL_GPIO_ReadPin>
 8003a82:	4603      	mov	r3, r0
 8003a84:	70fb      	strb	r3, [r7, #3]
				arm.EndCap1_PinG);

		if (current_EndCap1_state == GPIO_PIN_SET
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d120      	bne.n	8003ace <_Z32debounce_check_pins_and_set_flagv+0x122>
				&& last_EndCap1_state == GPIO_PIN_RESET) {
 8003a8c:	4b3c      	ldr	r3, [pc, #240]	; (8003b80 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11c      	bne.n	8003ace <_Z32debounce_check_pins_and_set_flagv+0x122>
			if (checkFlag1) {
 8003a94:	4b3f      	ldr	r3, [pc, #252]	; (8003b94 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00f      	beq.n	8003abc <_Z32debounce_check_pins_and_set_flagv+0x110>
				checkFlag1 = false;
 8003a9c:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
				gripIntFlag = true;
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <_Z32debounce_check_pins_and_set_flagv+0x1ec>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
				HAL_GPIO_TogglePin(arm.Buser_GPIO_Port_Ind, arm.Buser_Pin_Ind);
 8003aa8:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aac:	4a33      	ldr	r2, [pc, #204]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003aae:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 f810 	bl	8004ada <HAL_GPIO_TogglePin>
			if (checkFlag1) {
 8003aba:	e00f      	b.n	8003adc <_Z32debounce_check_pins_and_set_flagv+0x130>
			} else {
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8003abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ac0:	4836      	ldr	r0, [pc, #216]	; (8003b9c <_Z32debounce_check_pins_and_set_flagv+0x1f0>)
 8003ac2:	f001 f80a 	bl	8004ada <HAL_GPIO_TogglePin>
				checkFlag1 = true;
 8003ac6:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
			if (checkFlag1) {
 8003acc:	e006      	b.n	8003adc <_Z32debounce_check_pins_and_set_flagv+0x130>
			}
		} else {
			if (checkFlag1) {
 8003ace:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <_Z32debounce_check_pins_and_set_flagv+0x130>
				checkFlag1 = false;
 8003ad6:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
			}
		}
		if (!checkFlag1) {
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	f083 0301 	eor.w	r3, r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <_Z32debounce_check_pins_and_set_flagv+0x144>
			last_EndCap1_state = current_EndCap1_state;
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	7013      	strb	r3, [r2, #0]
		}

		// Перевірка стану піну EndCap2
		uint8_t current_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003af6:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 ffbd 	bl	8004a7c <HAL_GPIO_ReadPin>
 8003b02:	4603      	mov	r3, r0
 8003b04:	70bb      	strb	r3, [r7, #2]
//		if (current_EndCap2_state == GPIO_PIN_SET
//				&& last_EndCap2_state == GPIO_PIN_RESET) {
//			gripIntFlag = true;
//		}
//		last_EndCap2_state = current_EndCap2_state;
		if (current_EndCap2_state == GPIO_PIN_SET
 8003b06:	78bb      	ldrb	r3, [r7, #2]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d120      	bne.n	8003b4e <_Z32debounce_check_pins_and_set_flagv+0x1a2>
				&& last_EndCap2_state == GPIO_PIN_RESET) {
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11c      	bne.n	8003b4e <_Z32debounce_check_pins_and_set_flagv+0x1a2>
			if (checkFlag2) {
 8003b14:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00f      	beq.n	8003b3c <_Z32debounce_check_pins_and_set_flagv+0x190>
				checkFlag2 = false;
 8003b1c:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
				gripIntFlag = true;
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <_Z32debounce_check_pins_and_set_flagv+0x1ec>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
				HAL_GPIO_TogglePin(arm.Buser_GPIO_Port_Ind, arm.Buser_Pin_Ind);
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2c:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003b2e:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 ffd0 	bl	8004ada <HAL_GPIO_TogglePin>
			if (checkFlag2) {
 8003b3a:	e00f      	b.n	8003b5c <_Z32debounce_check_pins_and_set_flagv+0x1b0>
			} else {
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8003b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b40:	4816      	ldr	r0, [pc, #88]	; (8003b9c <_Z32debounce_check_pins_and_set_flagv+0x1f0>)
 8003b42:	f000 ffca 	bl	8004ada <HAL_GPIO_TogglePin>
				checkFlag2 = true;
 8003b46:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
			if (checkFlag2) {
 8003b4c:	e006      	b.n	8003b5c <_Z32debounce_check_pins_and_set_flagv+0x1b0>
			}
		} else {
			if (checkFlag2) {
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <_Z32debounce_check_pins_and_set_flagv+0x1b0>
				checkFlag2 = false;
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (!checkFlag2) {
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	f083 0301 	eor.w	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <_Z32debounce_check_pins_and_set_flagv+0x1c4>
			last_EndCap2_state = current_EndCap2_state;
 8003b6a:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 8003b6c:	78bb      	ldrb	r3, [r7, #2]
 8003b6e:	7013      	strb	r3, [r2, #0]
		}
	}
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	200003f4 	.word	0x200003f4
 8003b7c:	2000028c 	.word	0x2000028c
 8003b80:	200003f2 	.word	0x200003f2
 8003b84:	200003fc 	.word	0x200003fc
 8003b88:	200003f8 	.word	0x200003f8
 8003b8c:	200003ec 	.word	0x200003ec
 8003b90:	20000010 	.word	0x20000010
 8003b94:	200003f0 	.word	0x200003f0
 8003b98:	2000021c 	.word	0x2000021c
 8003b9c:	40011000 	.word	0x40011000
 8003ba0:	200003f1 	.word	0x200003f1

08003ba4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4f      	ldr	r2, [pc, #316]	; (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d119      	bne.n	8003bea <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		cntImpulse1++;
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a4d      	ldr	r2, [pc, #308]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003bbe:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 8003bc0:	4b4d      	ldr	r3, [pc, #308]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003bc2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	f200 808d 	bhi.w	8003ce8 <HAL_TIM_PeriodElapsedCallback+0x144>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	484a      	ldr	r0, [pc, #296]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003bd2:	f002 f963 	bl	8005e9c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8003bd6:	4849      	ldr	r0, [pc, #292]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003bd8:	f002 f846 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
//			arm.SetEnable(1, false);
			// COMMENT 10
//			arm.SetEnable(1, true);
			cntImpulse1 = 0;
 8003bdc:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
			timerFT1 = true;
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
//    HAL_IncTick();
//  }
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003be8:	e07e      	b.n	8003ce8 <HAL_TIM_PeriodElapsedCallback+0x144>
	} else if (htim->Instance == TIM2) {
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d118      	bne.n	8003c26 <HAL_TIM_PeriodElapsedCallback+0x82>
		cntImpulse2++;
 8003bf4:	4b43      	ldr	r3, [pc, #268]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003bfc:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c00:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003c02:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d86e      	bhi.n	8003ce8 <HAL_TIM_PeriodElapsedCallback+0x144>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	483e      	ldr	r0, [pc, #248]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003c0e:	f002 f945 	bl	8005e9c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8003c12:	483d      	ldr	r0, [pc, #244]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003c14:	f002 f828 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
			cntImpulse2 = 0;
 8003c18:	4b3a      	ldr	r3, [pc, #232]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
			timerFT2 = true;
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	701a      	strb	r2, [r3, #0]
}
 8003c24:	e060      	b.n	8003ce8 <HAL_TIM_PeriodElapsedCallback+0x144>
	} else if (htim->Instance == TIM3) {
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a39      	ldr	r2, [pc, #228]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d15b      	bne.n	8003ce8 <HAL_TIM_PeriodElapsedCallback+0x144>
		cntImpulse3++;
 8003c30:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003c38:	6013      	str	r3, [r2, #0]
		if (cntImpulse3 >= arm.gripperPsteps && gripIntFlag == false) {
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003c3e:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d80f      	bhi.n	8003c66 <HAL_TIM_PeriodElapsedCallback+0xc2>
 8003c46:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003c4e:	2104      	movs	r1, #4
 8003c50:	4832      	ldr	r0, [pc, #200]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003c52:	f002 f923 	bl	8005e9c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8003c56:	4831      	ldr	r0, [pc, #196]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003c58:	f002 f806 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
			arm.State = arm.ArmGripMOVEError;
 8003c5c:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c5e:	2213      	movs	r2, #19
 8003c60:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
}
 8003c64:	e040      	b.n	8003ce8 <HAL_TIM_PeriodElapsedCallback+0x144>
		} else if (cntImpulse3 >= arm.gripperPsteps || gripIntFlag == true) {
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c68:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d903      	bls.n	8003c7a <HAL_TIM_PeriodElapsedCallback+0xd6>
 8003c72:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d136      	bne.n	8003ce8 <HAL_TIM_PeriodElapsedCallback+0x144>
			gripIntFlag = false;
 8003c7a:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003c80:	2104      	movs	r1, #4
 8003c82:	4826      	ldr	r0, [pc, #152]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003c84:	f002 f90a 	bl	8005e9c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8003c88:	4824      	ldr	r0, [pc, #144]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003c8a:	f001 ffed 	bl	8005c68 <HAL_TIM_Base_Stop_IT>
			if (arm.State == arm.ArmGripPreMOVE) {
 8003c8e:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c90:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003c94:	2b0a      	cmp	r3, #10
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PeriodElapsedCallback+0xfe>
				arm.State = arm.ArmGripPreENDMOVE;
 8003c98:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c9a:	220c      	movs	r2, #12
 8003c9c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8003ca0:	e01c      	b.n	8003cdc <HAL_TIM_PeriodElapsedCallback+0x138>
			} else if (arm.State == arm.ArmGripPreMOVEStep) {
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003ca4:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003ca8:	2b0b      	cmp	r3, #11
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PeriodElapsedCallback+0x112>
				arm.State = arm.ArmGripPreENDMOVEStep;
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003cae:	220d      	movs	r2, #13
 8003cb0:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8003cb4:	e012      	b.n	8003cdc <HAL_TIM_PeriodElapsedCallback+0x138>
			} else if (arm.State == arm.ArmGripMOVE) {
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003cb8:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PeriodElapsedCallback+0x126>
				arm.State = arm.ArmGripENDMOVE;
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003cc2:	2209      	movs	r2, #9
 8003cc4:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8003cc8:	e008      	b.n	8003cdc <HAL_TIM_PeriodElapsedCallback+0x138>
			} else if (arm.State == arm.ArmGripMOVERetry) {
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003ccc:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003cd0:	2b14      	cmp	r3, #20
 8003cd2:	d103      	bne.n	8003cdc <HAL_TIM_PeriodElapsedCallback+0x138>
				arm.State = arm.ArmGripPermit;
 8003cd4:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003cd6:	2215      	movs	r2, #21
 8003cd8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			cntImpulse3 = 0;
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
			timerFT3 = true;
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	20000280 	.word	0x20000280
 8003cf8:	2000028c 	.word	0x2000028c
 8003cfc:	20000094 	.word	0x20000094
 8003d00:	20000219 	.word	0x20000219
 8003d04:	20000284 	.word	0x20000284
 8003d08:	200000dc 	.word	0x200000dc
 8003d0c:	2000021a 	.word	0x2000021a
 8003d10:	40000400 	.word	0x40000400
 8003d14:	20000288 	.word	0x20000288
 8003d18:	2000021c 	.word	0x2000021c
 8003d1c:	20000124 	.word	0x20000124
 8003d20:	2000021b 	.word	0x2000021b

08003d24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//повинен пропищати при помилці; треба перевірити
	for (int t = 0; t <= 4; t++) {
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	e016      	b.n	8003d5e <Error_Handler+0x3a>
		for (int i = 0; i <= 200; i++) {
 8003d30:	2300      	movs	r3, #0
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	e00a      	b.n	8003d4c <Error_Handler+0x28>
			HAL_GPIO_TogglePin(Buser_GPIO_Port, Buser_Pin);
 8003d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d3a:	480c      	ldr	r0, [pc, #48]	; (8003d6c <Error_Handler+0x48>)
 8003d3c:	f000 fecd 	bl	8004ada <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 8003d40:	2001      	movs	r0, #1
 8003d42:	f000 fb3b 	bl	80043bc <HAL_Delay>
		for (int i = 0; i <= 200; i++) {
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2bc8      	cmp	r3, #200	; 0xc8
 8003d50:	ddf1      	ble.n	8003d36 <Error_Handler+0x12>
		}
		HAL_Delay(100);
 8003d52:	2064      	movs	r0, #100	; 0x64
 8003d54:	f000 fb32 	bl	80043bc <HAL_Delay>
	for (int t = 0; t <= 4; t++) {
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	dde5      	ble.n	8003d30 <Error_Handler+0xc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d64:	b672      	cpsid	i
}
 8003d66:	bf00      	nop
	}
	__disable_irq();
	while (1) {
 8003d68:	e7fe      	b.n	8003d68 <Error_Handler+0x44>
 8003d6a:	bf00      	nop
 8003d6c:	40010800 	.word	0x40010800

08003d70 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d109      	bne.n	8003d94 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d104      	bne.n	8003d94 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(240.0, 124.0);
 8003d8a:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003d8c:	4904      	ldr	r1, [pc, #16]	; (8003da0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8003d8e:	4805      	ldr	r0, [pc, #20]	; (8003da4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003d90:	f7fd fb50 	bl	8001434 <_ZN7RoboArmC1Eff>
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	42f80000 	.word	0x42f80000
 8003da0:	43700000 	.word	0x43700000
 8003da4:	2000028c 	.word	0x2000028c

08003da8 <_GLOBAL__sub_I_hspi1>:
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003db0:	2001      	movs	r0, #1
 8003db2:	f7ff ffdd 	bl	8003d70 <_Z41__static_initialization_and_destruction_0ii>
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003dbe:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_MspInit+0x6c>)
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_MspInit+0x6c>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6193      	str	r3, [r2, #24]
 8003dca:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <HAL_MspInit+0x6c>)
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_MspInit+0x6c>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <HAL_MspInit+0x6c>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	61d3      	str	r3, [r2, #28]
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <HAL_MspInit+0x6c>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2105      	movs	r1, #5
 8003df2:	2005      	movs	r0, #5
 8003df4:	f000 fbdd 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003df8:	2005      	movs	r0, #5
 8003dfa:	f000 fbf6 	bl	80045ea <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_MspInit+0x70>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <HAL_MspInit+0x70>)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40010000 	.word	0x40010000

08003e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <HAL_SPI_MspInit+0xb4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d145      	bne.n	8003ed8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_SPI_MspInit+0xb8>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <HAL_SPI_MspInit+0xb8>)
 8003e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e56:	6193      	str	r3, [r2, #24]
 8003e58:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <HAL_SPI_MspInit+0xb8>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e64:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <HAL_SPI_MspInit+0xb8>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_SPI_MspInit+0xb8>)
 8003e6a:	f043 0308 	orr.w	r3, r3, #8
 8003e6e:	6193      	str	r3, [r2, #24]
 8003e70:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_SPI_MspInit+0xb8>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003e7c:	2328      	movs	r3, #40	; 0x28
 8003e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e84:	2303      	movs	r3, #3
 8003e86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4816      	ldr	r0, [pc, #88]	; (8003ee8 <HAL_SPI_MspInit+0xbc>)
 8003e90:	f000 fc78 	bl	8004784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e94:	2310      	movs	r3, #16
 8003e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4810      	ldr	r0, [pc, #64]	; (8003ee8 <HAL_SPI_MspInit+0xbc>)
 8003ea8:	f000 fc6c 	bl	8004784 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <HAL_SPI_MspInit+0xc0>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <HAL_SPI_MspInit+0xc0>)
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2105      	movs	r1, #5
 8003ecc:	2023      	movs	r0, #35	; 0x23
 8003ece:	f000 fb70 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ed2:	2023      	movs	r0, #35	; 0x23
 8003ed4:	f000 fb89 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ed8:	bf00      	nop
 8003eda:	3728      	adds	r7, #40	; 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40013000 	.word	0x40013000
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40010c00 	.word	0x40010c00
 8003eec:	40010000 	.word	0x40010000

08003ef0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <HAL_TIM_PWM_MspInit+0xac>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d114      	bne.n	8003f2c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f0c:	6193      	str	r3, [r2, #24]
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2105      	movs	r1, #5
 8003f1e:	2019      	movs	r0, #25
 8003f20:	f000 fb47 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003f24:	2019      	movs	r0, #25
 8003f26:	f000 fb60 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f2a:	e032      	b.n	8003f92 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d114      	bne.n	8003f60 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	61d3      	str	r3, [r2, #28]
 8003f42:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2105      	movs	r1, #5
 8003f52:	201c      	movs	r0, #28
 8003f54:	f000 fb2d 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f58:	201c      	movs	r0, #28
 8003f5a:	f000 fb46 	bl	80045ea <HAL_NVIC_EnableIRQ>
}
 8003f5e:	e018      	b.n	8003f92 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <HAL_TIM_PWM_MspInit+0xb4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d113      	bne.n	8003f92 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	61d3      	str	r3, [r2, #28]
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2105      	movs	r1, #5
 8003f86:	201d      	movs	r0, #29
 8003f88:	f000 fb13 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f8c:	201d      	movs	r0, #29
 8003f8e:	f000 fb2c 	bl	80045ea <HAL_NVIC_EnableIRQ>
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40000400 	.word	0x40000400

08003fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb0:	f107 0318 	add.w	r3, r7, #24
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2e      	ldr	r2, [pc, #184]	; (800407c <HAL_TIM_MspPostInit+0xd4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d119      	bne.n	8003ffc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 8003fce:	f043 0304 	orr.w	r3, r3, #4
 8003fd2:	6193      	str	r3, [r2, #24]
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fea:	2302      	movs	r3, #2
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fee:	f107 0318 	add.w	r3, r7, #24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4823      	ldr	r0, [pc, #140]	; (8004084 <HAL_TIM_MspPostInit+0xdc>)
 8003ff6:	f000 fbc5 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ffa:	e03a      	b.n	8004072 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d118      	bne.n	8004038 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 800400c:	f043 0304 	orr.w	r3, r3, #4
 8004010:	6193      	str	r3, [r2, #24]
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800401e:	2302      	movs	r3, #2
 8004020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004026:	2302      	movs	r3, #2
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402a:	f107 0318 	add.w	r3, r7, #24
 800402e:	4619      	mov	r1, r3
 8004030:	4814      	ldr	r0, [pc, #80]	; (8004084 <HAL_TIM_MspPostInit+0xdc>)
 8004032:	f000 fba7 	bl	8004784 <HAL_GPIO_Init>
}
 8004036:	e01c      	b.n	8004072 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a12      	ldr	r2, [pc, #72]	; (8004088 <HAL_TIM_MspPostInit+0xe0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d117      	bne.n	8004072 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	6193      	str	r3, [r2, #24]
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_TIM_MspPostInit+0xd8>)
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405e:	2302      	movs	r3, #2
 8004060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004062:	2302      	movs	r3, #2
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004066:	f107 0318 	add.w	r3, r7, #24
 800406a:	4619      	mov	r1, r3
 800406c:	4805      	ldr	r0, [pc, #20]	; (8004084 <HAL_TIM_MspPostInit+0xdc>)
 800406e:	f000 fb89 	bl	8004784 <HAL_GPIO_Init>
}
 8004072:	bf00      	nop
 8004074:	3728      	adds	r7, #40	; 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40021000 	.word	0x40021000
 8004084:	40010800 	.word	0x40010800
 8004088:	40000400 	.word	0x40000400

0800408c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004094:	f107 0318 	add.w	r3, r7, #24
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3a      	ldr	r2, [pc, #232]	; (8004190 <HAL_UART_MspInit+0x104>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d13a      	bne.n	8004122 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040ac:	4b39      	ldr	r3, [pc, #228]	; (8004194 <HAL_UART_MspInit+0x108>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	4a38      	ldr	r2, [pc, #224]	; (8004194 <HAL_UART_MspInit+0x108>)
 80040b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b6:	6193      	str	r3, [r2, #24]
 80040b8:	4b36      	ldr	r3, [pc, #216]	; (8004194 <HAL_UART_MspInit+0x108>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c4:	4b33      	ldr	r3, [pc, #204]	; (8004194 <HAL_UART_MspInit+0x108>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	4a32      	ldr	r2, [pc, #200]	; (8004194 <HAL_UART_MspInit+0x108>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	6193      	str	r3, [r2, #24]
 80040d0:	4b30      	ldr	r3, [pc, #192]	; (8004194 <HAL_UART_MspInit+0x108>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e2:	2302      	movs	r3, #2
 80040e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ea:	f107 0318 	add.w	r3, r7, #24
 80040ee:	4619      	mov	r1, r3
 80040f0:	4829      	ldr	r0, [pc, #164]	; (8004198 <HAL_UART_MspInit+0x10c>)
 80040f2:	f000 fb47 	bl	8004784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004100:	2301      	movs	r3, #1
 8004102:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004104:	f107 0318 	add.w	r3, r7, #24
 8004108:	4619      	mov	r1, r3
 800410a:	4823      	ldr	r0, [pc, #140]	; (8004198 <HAL_UART_MspInit+0x10c>)
 800410c:	f000 fb3a 	bl	8004784 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004110:	2200      	movs	r2, #0
 8004112:	2105      	movs	r1, #5
 8004114:	2025      	movs	r0, #37	; 0x25
 8004116:	f000 fa4c 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800411a:	2025      	movs	r0, #37	; 0x25
 800411c:	f000 fa65 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004120:	e032      	b.n	8004188 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_UART_MspInit+0x110>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d12d      	bne.n	8004188 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_UART_MspInit+0x108>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <HAL_UART_MspInit+0x108>)
 8004132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004136:	61d3      	str	r3, [r2, #28]
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_UART_MspInit+0x108>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_UART_MspInit+0x108>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	4a12      	ldr	r2, [pc, #72]	; (8004194 <HAL_UART_MspInit+0x108>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	6193      	str	r3, [r2, #24]
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_UART_MspInit+0x108>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800415c:	2304      	movs	r3, #4
 800415e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004160:	2312      	movs	r3, #18
 8004162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004164:	2301      	movs	r3, #1
 8004166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004168:	2303      	movs	r3, #3
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800416c:	f107 0318 	add.w	r3, r7, #24
 8004170:	4619      	mov	r1, r3
 8004172:	4809      	ldr	r0, [pc, #36]	; (8004198 <HAL_UART_MspInit+0x10c>)
 8004174:	f000 fb06 	bl	8004784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004178:	2200      	movs	r2, #0
 800417a:	2105      	movs	r1, #5
 800417c:	2026      	movs	r0, #38	; 0x26
 800417e:	f000 fa18 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004182:	2026      	movs	r0, #38	; 0x26
 8004184:	f000 fa31 	bl	80045ea <HAL_NVIC_EnableIRQ>
}
 8004188:	bf00      	nop
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40013800 	.word	0x40013800
 8004194:	40021000 	.word	0x40021000
 8004198:	40010800 	.word	0x40010800
 800419c:	40004400 	.word	0x40004400

080041a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <NMI_Handler+0x4>

080041a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041aa:	e7fe      	b.n	80041aa <HardFault_Handler+0x4>

080041ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <MemManage_Handler+0x4>

080041b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041b6:	e7fe      	b.n	80041b6 <BusFault_Handler+0x4>

080041b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041bc:	e7fe      	b.n	80041bc <UsageFault_Handler+0x4>

080041be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041d6:	b480      	push	{r7}
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041e6:	f000 f8cd 	bl	8004384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}

080041ee <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap3_Pin);
 80041fe:	2080      	movs	r0, #128	; 0x80
 8004200:	f000 fc84 	bl	8004b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}

08004208 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800420c:	4802      	ldr	r0, [pc, #8]	; (8004218 <TIM1_UP_IRQHandler+0x10>)
 800420e:	f001 fea9 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000094 	.word	0x20000094

0800421c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <TIM2_IRQHandler+0x10>)
 8004222:	f001 fe9f 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200000dc 	.word	0x200000dc

08004230 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <TIM3_IRQHandler+0x10>)
 8004236:	f001 fe95 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000124 	.word	0x20000124

08004244 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004248:	4802      	ldr	r0, [pc, #8]	; (8004254 <SPI1_IRQHandler+0x10>)
 800424a:	f001 fac7 	bl	80057dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000003c 	.word	0x2000003c

08004258 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800425c:	4802      	ldr	r0, [pc, #8]	; (8004268 <USART1_IRQHandler+0x10>)
 800425e:	f002 fc7f 	bl	8006b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	2000016c 	.word	0x2000016c

0800426c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <USART2_IRQHandler+0x10>)
 8004272:	f002 fc75 	bl	8006b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	200001b4 	.word	0x200001b4

08004280 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap4_Pin);
 8004284:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004288:	f000 fc40 	bl	8004b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap1_Pin);
 800428c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004290:	f000 fc3c 	bl	8004b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap2_Pin);
 8004294:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004298:	f000 fc38 	bl	8004b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}

080042a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042ac:	f7ff fff8 	bl	80042a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042b0:	480b      	ldr	r0, [pc, #44]	; (80042e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80042b2:	490c      	ldr	r1, [pc, #48]	; (80042e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80042b4:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80042b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042b8:	e002      	b.n	80042c0 <LoopCopyDataInit>

080042ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042be:	3304      	adds	r3, #4

080042c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042c4:	d3f9      	bcc.n	80042ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80042c8:	4c09      	ldr	r4, [pc, #36]	; (80042f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042cc:	e001      	b.n	80042d2 <LoopFillZerobss>

080042ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d0:	3204      	adds	r2, #4

080042d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042d4:	d3fb      	bcc.n	80042ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042d6:	f003 fa45 	bl	8007764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042da:	f7fe faef 	bl	80028bc <main>
  bx lr
 80042de:	4770      	bx	lr
  ldr r0, =_sdata
 80042e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042e4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80042e8:	080077fc 	.word	0x080077fc
  ldr r2, =_sbss
 80042ec:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80042f0:	20000404 	.word	0x20000404

080042f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042f4:	e7fe      	b.n	80042f4 <ADC1_2_IRQHandler>
	...

080042f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_Init+0x28>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_Init+0x28>)
 8004302:	f043 0310 	orr.w	r3, r3, #16
 8004306:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004308:	2003      	movs	r0, #3
 800430a:	f000 f947 	bl	800459c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430e:	200f      	movs	r0, #15
 8004310:	f000 f808 	bl	8004324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004314:	f7ff fd50 	bl	8003db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40022000 	.word	0x40022000

08004324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_InitTick+0x54>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_InitTick+0x58>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800433a:	fbb3 f3f1 	udiv	r3, r3, r1
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f95f 	bl	8004606 <HAL_SYSTICK_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e00e      	b.n	8004370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d80a      	bhi.n	800436e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004358:	2200      	movs	r2, #0
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004360:	f000 f927 	bl	80045b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004364:	4a06      	ldr	r2, [pc, #24]	; (8004380 <HAL_InitTick+0x5c>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000014 	.word	0x20000014
 800437c:	2000001c 	.word	0x2000001c
 8004380:	20000018 	.word	0x20000018

08004384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_IncTick+0x1c>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_IncTick+0x20>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4413      	add	r3, r2
 8004394:	4a03      	ldr	r2, [pc, #12]	; (80043a4 <HAL_IncTick+0x20>)
 8004396:	6013      	str	r3, [r2, #0]
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	2000001c 	.word	0x2000001c
 80043a4:	20000400 	.word	0x20000400

080043a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return uwTick;
 80043ac:	4b02      	ldr	r3, [pc, #8]	; (80043b8 <HAL_GetTick+0x10>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	20000400 	.word	0x20000400

080043bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043c4:	f7ff fff0 	bl	80043a8 <HAL_GetTick>
 80043c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d4:	d005      	beq.n	80043e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_Delay+0x44>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043e2:	bf00      	nop
 80043e4:	f7ff ffe0 	bl	80043a8 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d8f7      	bhi.n	80043e4 <HAL_Delay+0x28>
  {
  }
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	2000001c 	.word	0x2000001c

08004404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <__NVIC_SetPriorityGrouping+0x44>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004420:	4013      	ands	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800442c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <__NVIC_SetPriorityGrouping+0x44>)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	60d3      	str	r3, [r2, #12]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <__NVIC_GetPriorityGrouping+0x18>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	f003 0307 	and.w	r3, r3, #7
}
 800445a:	4618      	mov	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004476:	2b00      	cmp	r3, #0
 8004478:	db0b      	blt.n	8004492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	f003 021f 	and.w	r2, r3, #31
 8004480:	4906      	ldr	r1, [pc, #24]	; (800449c <__NVIC_EnableIRQ+0x34>)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2001      	movs	r0, #1
 800448a:	fa00 f202 	lsl.w	r2, r0, r2
 800448e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	e000e100 	.word	0xe000e100

080044a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	6039      	str	r1, [r7, #0]
 80044aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db0a      	blt.n	80044ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	490c      	ldr	r1, [pc, #48]	; (80044ec <__NVIC_SetPriority+0x4c>)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	0112      	lsls	r2, r2, #4
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	440b      	add	r3, r1
 80044c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c8:	e00a      	b.n	80044e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4908      	ldr	r1, [pc, #32]	; (80044f0 <__NVIC_SetPriority+0x50>)
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	3b04      	subs	r3, #4
 80044d8:	0112      	lsls	r2, r2, #4
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	440b      	add	r3, r1
 80044de:	761a      	strb	r2, [r3, #24]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f1c3 0307 	rsb	r3, r3, #7
 800450e:	2b04      	cmp	r3, #4
 8004510:	bf28      	it	cs
 8004512:	2304      	movcs	r3, #4
 8004514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3304      	adds	r3, #4
 800451a:	2b06      	cmp	r3, #6
 800451c:	d902      	bls.n	8004524 <NVIC_EncodePriority+0x30>
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3b03      	subs	r3, #3
 8004522:	e000      	b.n	8004526 <NVIC_EncodePriority+0x32>
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43da      	mvns	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	401a      	ands	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800453c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	43d9      	mvns	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800454c:	4313      	orrs	r3, r2
         );
}
 800454e:	4618      	mov	r0, r3
 8004550:	3724      	adds	r7, #36	; 0x24
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004568:	d301      	bcc.n	800456e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456a:	2301      	movs	r3, #1
 800456c:	e00f      	b.n	800458e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <SysTick_Config+0x40>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004576:	210f      	movs	r1, #15
 8004578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800457c:	f7ff ff90 	bl	80044a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <SysTick_Config+0x40>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <SysTick_Config+0x40>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	e000e010 	.word	0xe000e010

0800459c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff2d 	bl	8004404 <__NVIC_SetPriorityGrouping>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045c4:	f7ff ff42 	bl	800444c <__NVIC_GetPriorityGrouping>
 80045c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f7ff ff90 	bl	80044f4 <NVIC_EncodePriority>
 80045d4:	4602      	mov	r2, r0
 80045d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff5f 	bl	80044a0 <__NVIC_SetPriority>
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff35 	bl	8004468 <__NVIC_EnableIRQ>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ffa2 	bl	8004558 <SysTick_Config>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d008      	beq.n	8004648 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2204      	movs	r2, #4
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e020      	b.n	800468a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 020e 	bic.w	r2, r2, #14
 8004656:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	2101      	movs	r1, #1
 8004672:	fa01 f202 	lsl.w	r2, r1, r2
 8004676:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004688:	7bfb      	ldrb	r3, [r7, #15]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d005      	beq.n	80046b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2204      	movs	r2, #4
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e051      	b.n	800475c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 020e 	bic.w	r2, r2, #14
 80046c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a22      	ldr	r2, [pc, #136]	; (8004768 <HAL_DMA_Abort_IT+0xd4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d029      	beq.n	8004736 <HAL_DMA_Abort_IT+0xa2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a21      	ldr	r2, [pc, #132]	; (800476c <HAL_DMA_Abort_IT+0xd8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d022      	beq.n	8004732 <HAL_DMA_Abort_IT+0x9e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <HAL_DMA_Abort_IT+0xdc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01a      	beq.n	800472c <HAL_DMA_Abort_IT+0x98>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <HAL_DMA_Abort_IT+0xe0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d012      	beq.n	8004726 <HAL_DMA_Abort_IT+0x92>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <HAL_DMA_Abort_IT+0xe4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00a      	beq.n	8004720 <HAL_DMA_Abort_IT+0x8c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1b      	ldr	r2, [pc, #108]	; (800477c <HAL_DMA_Abort_IT+0xe8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d102      	bne.n	800471a <HAL_DMA_Abort_IT+0x86>
 8004714:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004718:	e00e      	b.n	8004738 <HAL_DMA_Abort_IT+0xa4>
 800471a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800471e:	e00b      	b.n	8004738 <HAL_DMA_Abort_IT+0xa4>
 8004720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004724:	e008      	b.n	8004738 <HAL_DMA_Abort_IT+0xa4>
 8004726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800472a:	e005      	b.n	8004738 <HAL_DMA_Abort_IT+0xa4>
 800472c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004730:	e002      	b.n	8004738 <HAL_DMA_Abort_IT+0xa4>
 8004732:	2310      	movs	r3, #16
 8004734:	e000      	b.n	8004738 <HAL_DMA_Abort_IT+0xa4>
 8004736:	2301      	movs	r3, #1
 8004738:	4a11      	ldr	r2, [pc, #68]	; (8004780 <HAL_DMA_Abort_IT+0xec>)
 800473a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
    } 
  }
  return status;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40020008 	.word	0x40020008
 800476c:	4002001c 	.word	0x4002001c
 8004770:	40020030 	.word	0x40020030
 8004774:	40020044 	.word	0x40020044
 8004778:	40020058 	.word	0x40020058
 800477c:	4002006c 	.word	0x4002006c
 8004780:	40020000 	.word	0x40020000

08004784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004784:	b480      	push	{r7}
 8004786:	b08b      	sub	sp, #44	; 0x2c
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004792:	2300      	movs	r3, #0
 8004794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004796:	e161      	b.n	8004a5c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004798:	2201      	movs	r2, #1
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	f040 8150 	bne.w	8004a56 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4a97      	ldr	r2, [pc, #604]	; (8004a18 <HAL_GPIO_Init+0x294>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d05e      	beq.n	800487e <HAL_GPIO_Init+0xfa>
 80047c0:	4a95      	ldr	r2, [pc, #596]	; (8004a18 <HAL_GPIO_Init+0x294>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d875      	bhi.n	80048b2 <HAL_GPIO_Init+0x12e>
 80047c6:	4a95      	ldr	r2, [pc, #596]	; (8004a1c <HAL_GPIO_Init+0x298>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d058      	beq.n	800487e <HAL_GPIO_Init+0xfa>
 80047cc:	4a93      	ldr	r2, [pc, #588]	; (8004a1c <HAL_GPIO_Init+0x298>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d86f      	bhi.n	80048b2 <HAL_GPIO_Init+0x12e>
 80047d2:	4a93      	ldr	r2, [pc, #588]	; (8004a20 <HAL_GPIO_Init+0x29c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d052      	beq.n	800487e <HAL_GPIO_Init+0xfa>
 80047d8:	4a91      	ldr	r2, [pc, #580]	; (8004a20 <HAL_GPIO_Init+0x29c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d869      	bhi.n	80048b2 <HAL_GPIO_Init+0x12e>
 80047de:	4a91      	ldr	r2, [pc, #580]	; (8004a24 <HAL_GPIO_Init+0x2a0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d04c      	beq.n	800487e <HAL_GPIO_Init+0xfa>
 80047e4:	4a8f      	ldr	r2, [pc, #572]	; (8004a24 <HAL_GPIO_Init+0x2a0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d863      	bhi.n	80048b2 <HAL_GPIO_Init+0x12e>
 80047ea:	4a8f      	ldr	r2, [pc, #572]	; (8004a28 <HAL_GPIO_Init+0x2a4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d046      	beq.n	800487e <HAL_GPIO_Init+0xfa>
 80047f0:	4a8d      	ldr	r2, [pc, #564]	; (8004a28 <HAL_GPIO_Init+0x2a4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d85d      	bhi.n	80048b2 <HAL_GPIO_Init+0x12e>
 80047f6:	2b12      	cmp	r3, #18
 80047f8:	d82a      	bhi.n	8004850 <HAL_GPIO_Init+0xcc>
 80047fa:	2b12      	cmp	r3, #18
 80047fc:	d859      	bhi.n	80048b2 <HAL_GPIO_Init+0x12e>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <HAL_GPIO_Init+0x80>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	0800487f 	.word	0x0800487f
 8004808:	08004859 	.word	0x08004859
 800480c:	0800486b 	.word	0x0800486b
 8004810:	080048ad 	.word	0x080048ad
 8004814:	080048b3 	.word	0x080048b3
 8004818:	080048b3 	.word	0x080048b3
 800481c:	080048b3 	.word	0x080048b3
 8004820:	080048b3 	.word	0x080048b3
 8004824:	080048b3 	.word	0x080048b3
 8004828:	080048b3 	.word	0x080048b3
 800482c:	080048b3 	.word	0x080048b3
 8004830:	080048b3 	.word	0x080048b3
 8004834:	080048b3 	.word	0x080048b3
 8004838:	080048b3 	.word	0x080048b3
 800483c:	080048b3 	.word	0x080048b3
 8004840:	080048b3 	.word	0x080048b3
 8004844:	080048b3 	.word	0x080048b3
 8004848:	08004861 	.word	0x08004861
 800484c:	08004875 	.word	0x08004875
 8004850:	4a76      	ldr	r2, [pc, #472]	; (8004a2c <HAL_GPIO_Init+0x2a8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004856:	e02c      	b.n	80048b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	623b      	str	r3, [r7, #32]
          break;
 800485e:	e029      	b.n	80048b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	3304      	adds	r3, #4
 8004866:	623b      	str	r3, [r7, #32]
          break;
 8004868:	e024      	b.n	80048b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	3308      	adds	r3, #8
 8004870:	623b      	str	r3, [r7, #32]
          break;
 8004872:	e01f      	b.n	80048b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	330c      	adds	r3, #12
 800487a:	623b      	str	r3, [r7, #32]
          break;
 800487c:	e01a      	b.n	80048b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004886:	2304      	movs	r3, #4
 8004888:	623b      	str	r3, [r7, #32]
          break;
 800488a:	e013      	b.n	80048b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004894:	2308      	movs	r3, #8
 8004896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	611a      	str	r2, [r3, #16]
          break;
 800489e:	e009      	b.n	80048b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048a0:	2308      	movs	r3, #8
 80048a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	615a      	str	r2, [r3, #20]
          break;
 80048aa:	e003      	b.n	80048b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048ac:	2300      	movs	r3, #0
 80048ae:	623b      	str	r3, [r7, #32]
          break;
 80048b0:	e000      	b.n	80048b4 <HAL_GPIO_Init+0x130>
          break;
 80048b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2bff      	cmp	r3, #255	; 0xff
 80048b8:	d801      	bhi.n	80048be <HAL_GPIO_Init+0x13a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	e001      	b.n	80048c2 <HAL_GPIO_Init+0x13e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2bff      	cmp	r3, #255	; 0xff
 80048c8:	d802      	bhi.n	80048d0 <HAL_GPIO_Init+0x14c>
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	e002      	b.n	80048d6 <HAL_GPIO_Init+0x152>
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	3b08      	subs	r3, #8
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	210f      	movs	r1, #15
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	fa01 f303 	lsl.w	r3, r1, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	401a      	ands	r2, r3
 80048e8:	6a39      	ldr	r1, [r7, #32]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	431a      	orrs	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80a9 	beq.w	8004a56 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004904:	4b4a      	ldr	r3, [pc, #296]	; (8004a30 <HAL_GPIO_Init+0x2ac>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	4a49      	ldr	r2, [pc, #292]	; (8004a30 <HAL_GPIO_Init+0x2ac>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6193      	str	r3, [r2, #24]
 8004910:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_GPIO_Init+0x2ac>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800491c:	4a45      	ldr	r2, [pc, #276]	; (8004a34 <HAL_GPIO_Init+0x2b0>)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	3302      	adds	r3, #2
 8004924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	220f      	movs	r2, #15
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4013      	ands	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3d      	ldr	r2, [pc, #244]	; (8004a38 <HAL_GPIO_Init+0x2b4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00d      	beq.n	8004964 <HAL_GPIO_Init+0x1e0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3c      	ldr	r2, [pc, #240]	; (8004a3c <HAL_GPIO_Init+0x2b8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <HAL_GPIO_Init+0x1dc>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3b      	ldr	r2, [pc, #236]	; (8004a40 <HAL_GPIO_Init+0x2bc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_GPIO_Init+0x1d8>
 8004958:	2302      	movs	r3, #2
 800495a:	e004      	b.n	8004966 <HAL_GPIO_Init+0x1e2>
 800495c:	2303      	movs	r3, #3
 800495e:	e002      	b.n	8004966 <HAL_GPIO_Init+0x1e2>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_GPIO_Init+0x1e2>
 8004964:	2300      	movs	r3, #0
 8004966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004968:	f002 0203 	and.w	r2, r2, #3
 800496c:	0092      	lsls	r2, r2, #2
 800496e:	4093      	lsls	r3, r2
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004976:	492f      	ldr	r1, [pc, #188]	; (8004a34 <HAL_GPIO_Init+0x2b0>)
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	3302      	adds	r3, #2
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004990:	4b2c      	ldr	r3, [pc, #176]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	492b      	ldr	r1, [pc, #172]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	4313      	orrs	r3, r2
 800499a:	608b      	str	r3, [r1, #8]
 800499c:	e006      	b.n	80049ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800499e:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	4927      	ldr	r1, [pc, #156]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d006      	beq.n	80049c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80049b8:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	4921      	ldr	r1, [pc, #132]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60cb      	str	r3, [r1, #12]
 80049c4:	e006      	b.n	80049d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049c6:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	491d      	ldr	r1, [pc, #116]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d006      	beq.n	80049ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4917      	ldr	r1, [pc, #92]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
 80049ec:	e006      	b.n	80049fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049ee:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	4913      	ldr	r1, [pc, #76]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01f      	beq.n	8004a48 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	490d      	ldr	r1, [pc, #52]	; (8004a44 <HAL_GPIO_Init+0x2c0>)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	e01f      	b.n	8004a56 <HAL_GPIO_Init+0x2d2>
 8004a16:	bf00      	nop
 8004a18:	10320000 	.word	0x10320000
 8004a1c:	10310000 	.word	0x10310000
 8004a20:	10220000 	.word	0x10220000
 8004a24:	10210000 	.word	0x10210000
 8004a28:	10120000 	.word	0x10120000
 8004a2c:	10110000 	.word	0x10110000
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40010800 	.word	0x40010800
 8004a3c:	40010c00 	.word	0x40010c00
 8004a40:	40011000 	.word	0x40011000
 8004a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_GPIO_Init+0x2f4>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	4909      	ldr	r1, [pc, #36]	; (8004a78 <HAL_GPIO_Init+0x2f4>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	3301      	adds	r3, #1
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	fa22 f303 	lsr.w	r3, r2, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f47f ae96 	bne.w	8004798 <HAL_GPIO_Init+0x14>
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	372c      	adds	r7, #44	; 0x2c
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	40010400 	.word	0x40010400

08004a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	e001      	b.n	8004a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	807b      	strh	r3, [r7, #2]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aba:	787b      	ldrb	r3, [r7, #1]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ac0:	887a      	ldrh	r2, [r7, #2]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ac6:	e003      	b.n	8004ad0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ac8:	887b      	ldrh	r3, [r7, #2]
 8004aca:	041a      	lsls	r2, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	611a      	str	r2, [r3, #16]
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004aec:	887a      	ldrh	r2, [r7, #2]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	041a      	lsls	r2, r3, #16
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	400b      	ands	r3, r1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	611a      	str	r2, [r3, #16]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d006      	beq.n	8004b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b22:	4a05      	ldr	r2, [pc, #20]	; (8004b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe feee 	bl	800390c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40010400 	.word	0x40010400

08004b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e272      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8087 	beq.w	8004c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b5c:	4b92      	ldr	r3, [pc, #584]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d00c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b68:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d112      	bne.n	8004b9a <HAL_RCC_OscConfig+0x5e>
 8004b74:	4b8c      	ldr	r3, [pc, #560]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d10b      	bne.n	8004b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b82:	4b89      	ldr	r3, [pc, #548]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d06c      	beq.n	8004c68 <HAL_RCC_OscConfig+0x12c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d168      	bne.n	8004c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e24c      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x76>
 8004ba4:	4b80      	ldr	r3, [pc, #512]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a7f      	ldr	r2, [pc, #508]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e02e      	b.n	8004c10 <HAL_RCC_OscConfig+0xd4>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x98>
 8004bba:	4b7b      	ldr	r3, [pc, #492]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7a      	ldr	r2, [pc, #488]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4b78      	ldr	r3, [pc, #480]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a77      	ldr	r2, [pc, #476]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e01d      	b.n	8004c10 <HAL_RCC_OscConfig+0xd4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0xbc>
 8004bde:	4b72      	ldr	r3, [pc, #456]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a71      	ldr	r2, [pc, #452]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4b6f      	ldr	r3, [pc, #444]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6e      	ldr	r2, [pc, #440]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0xd4>
 8004bf8:	4b6b      	ldr	r3, [pc, #428]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b68      	ldr	r3, [pc, #416]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a67      	ldr	r2, [pc, #412]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7ff fbc6 	bl	80043a8 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7ff fbc2 	bl	80043a8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e200      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b5d      	ldr	r3, [pc, #372]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0xe4>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7ff fbb2 	bl	80043a8 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7ff fbae 	bl	80043a8 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1ec      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5a:	4b53      	ldr	r3, [pc, #332]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x10c>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d063      	beq.n	8004d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c76:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c82:	4b49      	ldr	r3, [pc, #292]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d11c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x18c>
 8004c8e:	4b46      	ldr	r3, [pc, #280]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	4b43      	ldr	r3, [pc, #268]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x176>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e1c0      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b3d      	ldr	r3, [pc, #244]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4939      	ldr	r1, [pc, #228]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	e03a      	b.n	8004d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d020      	beq.n	8004d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd0:	4b36      	ldr	r3, [pc, #216]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7ff fb67 	bl	80043a8 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cde:	f7ff fb63 	bl	80043a8 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1a1      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfc:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4927      	ldr	r1, [pc, #156]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	e015      	b.n	8004d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d12:	4b26      	ldr	r3, [pc, #152]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7ff fb46 	bl	80043a8 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d20:	f7ff fb42 	bl	80043a8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e180      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d03a      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d019      	beq.n	8004d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d52:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <HAL_RCC_OscConfig+0x274>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d58:	f7ff fb26 	bl	80043a8 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d60:	f7ff fb22 	bl	80043a8 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e160      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_RCC_OscConfig+0x26c>)
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f000 fada 	bl	8005338 <RCC_Delay>
 8004d84:	e01c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_RCC_OscConfig+0x274>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8c:	f7ff fb0c 	bl	80043a8 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d92:	e00f      	b.n	8004db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d94:	f7ff fb08 	bl	80043a8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d908      	bls.n	8004db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e146      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	42420000 	.word	0x42420000
 8004db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	4b92      	ldr	r3, [pc, #584]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e9      	bne.n	8004d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80a6 	beq.w	8004f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd2:	4b8b      	ldr	r3, [pc, #556]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10d      	bne.n	8004dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dde:	4b88      	ldr	r3, [pc, #544]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	4a87      	ldr	r2, [pc, #540]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de8:	61d3      	str	r3, [r2, #28]
 8004dea:	4b85      	ldr	r3, [pc, #532]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfa:	4b82      	ldr	r3, [pc, #520]	; (8005004 <HAL_RCC_OscConfig+0x4c8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d118      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e06:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <HAL_RCC_OscConfig+0x4c8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7e      	ldr	r2, [pc, #504]	; (8005004 <HAL_RCC_OscConfig+0x4c8>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e12:	f7ff fac9 	bl	80043a8 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1a:	f7ff fac5 	bl	80043a8 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	; 0x64
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e103      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	4b75      	ldr	r3, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x4c8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x312>
 8004e40:	4b6f      	ldr	r3, [pc, #444]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4a6e      	ldr	r2, [pc, #440]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6213      	str	r3, [r2, #32]
 8004e4c:	e02d      	b.n	8004eaa <HAL_RCC_OscConfig+0x36e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x334>
 8004e56:	4b6a      	ldr	r3, [pc, #424]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4a69      	ldr	r2, [pc, #420]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	6213      	str	r3, [r2, #32]
 8004e62:	4b67      	ldr	r3, [pc, #412]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	4a66      	ldr	r2, [pc, #408]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	6213      	str	r3, [r2, #32]
 8004e6e:	e01c      	b.n	8004eaa <HAL_RCC_OscConfig+0x36e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	d10c      	bne.n	8004e92 <HAL_RCC_OscConfig+0x356>
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4a60      	ldr	r2, [pc, #384]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	6213      	str	r3, [r2, #32]
 8004e84:	4b5e      	ldr	r3, [pc, #376]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a5d      	ldr	r2, [pc, #372]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6213      	str	r3, [r2, #32]
 8004e90:	e00b      	b.n	8004eaa <HAL_RCC_OscConfig+0x36e>
 8004e92:	4b5b      	ldr	r3, [pc, #364]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	4a5a      	ldr	r2, [pc, #360]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	6213      	str	r3, [r2, #32]
 8004e9e:	4b58      	ldr	r3, [pc, #352]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	4a57      	ldr	r2, [pc, #348]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	f023 0304 	bic.w	r3, r3, #4
 8004ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d015      	beq.n	8004ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7ff fa79 	bl	80043a8 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7ff fa75 	bl	80043a8 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e0b1      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed0:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ee      	beq.n	8004eba <HAL_RCC_OscConfig+0x37e>
 8004edc:	e014      	b.n	8004f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ede:	f7ff fa63 	bl	80043a8 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7ff fa5f 	bl	80043a8 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e09b      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efc:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1ee      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d105      	bne.n	8004f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0e:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 8087 	beq.w	8005032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f24:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d061      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d146      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7ff fa33 	bl	80043a8 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f46:	f7ff fa2f 	bl	80043a8 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e06d      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f58:	4b29      	ldr	r3, [pc, #164]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f0      	bne.n	8004f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d108      	bne.n	8004f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f6e:	4b24      	ldr	r3, [pc, #144]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4921      	ldr	r1, [pc, #132]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f80:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a19      	ldr	r1, [r3, #32]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	430b      	orrs	r3, r1
 8004f92:	491b      	ldr	r1, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4cc>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7ff fa03 	bl	80043a8 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7ff f9ff 	bl	80043a8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e03d      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x46a>
 8004fc4:	e035      	b.n	8005032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x4cc>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7ff f9ec 	bl	80043a8 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7ff f9e8 	bl	80043a8 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e026      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x498>
 8004ff2:	e01e      	b.n	8005032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e019      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
 8005000:	40021000 	.word	0x40021000
 8005004:	40007000 	.word	0x40007000
 8005008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_OscConfig+0x500>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	429a      	cmp	r2, r3
 800501e:	d106      	bne.n	800502e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d001      	beq.n	8005032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0d0      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005054:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d910      	bls.n	8005084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b67      	ldr	r3, [pc, #412]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 0207 	bic.w	r2, r3, #7
 800506a:	4965      	ldr	r1, [pc, #404]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b63      	ldr	r3, [pc, #396]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0b8      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800509c:	4b59      	ldr	r3, [pc, #356]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a58      	ldr	r2, [pc, #352]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b4:	4b53      	ldr	r3, [pc, #332]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a52      	ldr	r2, [pc, #328]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c0:	4b50      	ldr	r3, [pc, #320]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	494d      	ldr	r1, [pc, #308]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d040      	beq.n	8005160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d115      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e07f      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b41      	ldr	r3, [pc, #260]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e073      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510e:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e06b      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b39      	ldr	r3, [pc, #228]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4936      	ldr	r1, [pc, #216]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	4313      	orrs	r3, r2
 800512e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005130:	f7ff f93a 	bl	80043a8 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7ff f936 	bl	80043a8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e053      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 020c 	and.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d1eb      	bne.n	8005138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d210      	bcs.n	8005190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 0207 	bic.w	r2, r3, #7
 8005176:	4922      	ldr	r1, [pc, #136]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e032      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4916      	ldr	r1, [pc, #88]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	490e      	ldr	r1, [pc, #56]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ce:	f000 f82d 	bl	800522c <HAL_RCC_GetSysClockFreq>
 80051d2:	4602      	mov	r2, r0
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	490a      	ldr	r1, [pc, #40]	; (8005208 <HAL_RCC_ClockConfig+0x1c8>)
 80051e0:	5ccb      	ldrb	r3, [r1, r3]
 80051e2:	fa22 f303 	lsr.w	r3, r2, r3
 80051e6:	4a09      	ldr	r2, [pc, #36]	; (800520c <HAL_RCC_ClockConfig+0x1cc>)
 80051e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x1d0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff f898 	bl	8004324 <HAL_InitTick>

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40022000 	.word	0x40022000
 8005204:	40021000 	.word	0x40021000
 8005208:	080077c4 	.word	0x080077c4
 800520c:	20000014 	.word	0x20000014
 8005210:	20000018 	.word	0x20000018

08005214 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <HAL_RCC_EnableCSS+0x14>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	4242004c 	.word	0x4242004c

0800522c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005246:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b04      	cmp	r3, #4
 8005254:	d002      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x30>
 8005256:	2b08      	cmp	r3, #8
 8005258:	d003      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x36>
 800525a:	e027      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800525e:	613b      	str	r3, [r7, #16]
      break;
 8005260:	e027      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	0c9b      	lsrs	r3, r3, #18
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800526c:	5cd3      	ldrb	r3, [r2, r3]
 800526e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800527a:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0c5b      	lsrs	r3, r3, #17
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	4a11      	ldr	r2, [pc, #68]	; (80052cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005286:	5cd3      	ldrb	r3, [r2, r3]
 8005288:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800528e:	fb03 f202 	mul.w	r2, r3, r2
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e004      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0c      	ldr	r2, [pc, #48]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80052a0:	fb02 f303 	mul.w	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	613b      	str	r3, [r7, #16]
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80052ae:	613b      	str	r3, [r7, #16]
      break;
 80052b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052b2:	693b      	ldr	r3, [r7, #16]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	007a1200 	.word	0x007a1200
 80052c8:	080077dc 	.word	0x080077dc
 80052cc:	080077ec 	.word	0x080077ec
 80052d0:	003d0900 	.word	0x003d0900

080052d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d8:	4b02      	ldr	r3, [pc, #8]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	20000014 	.word	0x20000014

080052e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052ec:	f7ff fff2 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4903      	ldr	r1, [pc, #12]	; (800530c <HAL_RCC_GetPCLK1Freq+0x24>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000
 800530c:	080077d4 	.word	0x080077d4

08005310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005314:	f7ff ffde 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	0adb      	lsrs	r3, r3, #11
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4903      	ldr	r1, [pc, #12]	; (8005334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40021000 	.word	0x40021000
 8005334:	080077d4 	.word	0x080077d4

08005338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <RCC_Delay+0x34>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <RCC_Delay+0x38>)
 8005346:	fba2 2303 	umull	r2, r3, r2, r3
 800534a:	0a5b      	lsrs	r3, r3, #9
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005354:	bf00      	nop
  }
  while (Delay --);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1e5a      	subs	r2, r3, #1
 800535a:	60fa      	str	r2, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f9      	bne.n	8005354 <RCC_Delay+0x1c>
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr
 800536c:	20000014 	.word	0x20000014
 8005370:	10624dd3 	.word	0x10624dd3

08005374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e076      	b.n	8005474 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2b00      	cmp	r3, #0
 800538c:	d108      	bne.n	80053a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005396:	d009      	beq.n	80053ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	61da      	str	r2, [r3, #28]
 800539e:	e005      	b.n	80053ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fe fd30 	bl	8003e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005430:	ea42 0103 	orr.w	r1, r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	0c1a      	lsrs	r2, r3, #16
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f002 0204 	and.w	r2, r2, #4
 8005452:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005462:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08c      	sub	sp, #48	; 0x30
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800548a:	2301      	movs	r3, #1
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x26>
 800549e:	2302      	movs	r3, #2
 80054a0:	e198      	b.n	80057d4 <HAL_SPI_TransmitReceive+0x358>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054aa:	f7fe ff7d 	bl	80043a8 <HAL_GetTick>
 80054ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054c0:	887b      	ldrh	r3, [r7, #2]
 80054c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d00f      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x70>
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d2:	d107      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x68>
 80054dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d003      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054e4:	2302      	movs	r3, #2
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054ea:	e16d      	b.n	80057c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_SPI_TransmitReceive+0x82>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_SPI_TransmitReceive+0x82>
 80054f8:	887b      	ldrh	r3, [r7, #2]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005504:	e160      	b.n	80057c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b04      	cmp	r3, #4
 8005510:	d003      	beq.n	800551a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2205      	movs	r2, #5
 8005516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	887a      	ldrh	r2, [r7, #2]
 800552a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	887a      	ldrh	r2, [r7, #2]
 8005530:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	887a      	ldrh	r2, [r7, #2]
 8005542:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d007      	beq.n	800556e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005576:	d17c      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x10a>
 8005580:	8b7b      	ldrh	r3, [r7, #26]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d16a      	bne.n	800565c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	881a      	ldrh	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055aa:	e057      	b.n	800565c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d11b      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x176>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d016      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x176>
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d113      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	881a      	ldrh	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d119      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x1b8>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d014      	beq.n	8005634 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	b292      	uxth	r2, r2
 8005616:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	1c9a      	adds	r2, r3, #2
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005630:	2301      	movs	r3, #1
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005634:	f7fe feb8 	bl	80043a8 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005640:	429a      	cmp	r2, r3
 8005642:	d80b      	bhi.n	800565c <HAL_SPI_TransmitReceive+0x1e0>
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800564a:	d007      	beq.n	800565c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800565a:	e0b5      	b.n	80057c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1a2      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x130>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d19d      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x130>
 8005670:	e080      	b.n	8005774 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_TransmitReceive+0x204>
 800567a:	8b7b      	ldrh	r3, [r7, #26]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d16f      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a6:	e05b      	b.n	8005760 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d11c      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x274>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d017      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x274>
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d114      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	7812      	ldrb	r2, [r2, #0]
 80056d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d119      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x2b6>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d014      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800572e:	2301      	movs	r3, #1
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005732:	f7fe fe39 	bl	80043a8 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573e:	429a      	cmp	r2, r3
 8005740:	d803      	bhi.n	800574a <HAL_SPI_TransmitReceive+0x2ce>
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005748:	d102      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x2d4>
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800575e:	e033      	b.n	80057c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d19e      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x22c>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d199      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005776:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f9b3 	bl	8005ae4 <SPI_EndRxTxTransaction>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005790:	e01a      	b.n	80057c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e003      	b.n	80057c8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3730      	adds	r7, #48	; 0x30
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10e      	bne.n	800581c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
    return;
 800581a:	e0b7      	b.n	800598c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <HAL_SPI_IRQHandler+0x5e>
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
    return;
 8005838:	e0a8      	b.n	800598c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d105      	bne.n	8005850 <HAL_SPI_IRQHandler+0x74>
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 809e 	beq.w	800598c <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8098 	beq.w	800598c <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d023      	beq.n	80058ae <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d011      	beq.n	8005896 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f043 0204 	orr.w	r2, r3, #4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	e00b      	b.n	80058ae <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	693b      	ldr	r3, [r7, #16]
        return;
 80058ac:	e06e      	b.n	800598c <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d014      	beq.n	80058e2 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058bc:	f043 0201 	orr.w	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d04f      	beq.n	800598a <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058f8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_SPI_IRQHandler+0x13a>
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d034      	beq.n	8005980 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0203 	bic.w	r2, r2, #3
 8005924:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d011      	beq.n	8005952 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	4a18      	ldr	r2, [pc, #96]	; (8005994 <HAL_SPI_IRQHandler+0x1b8>)
 8005934:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe feaa 	bl	8004694 <HAL_DMA_Abort_IT>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005956:	2b00      	cmp	r3, #0
 8005958:	d016      	beq.n	8005988 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595e:	4a0d      	ldr	r2, [pc, #52]	; (8005994 <HAL_SPI_IRQHandler+0x1b8>)
 8005960:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fe94 	bl	8004694 <HAL_DMA_Abort_IT>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800597e:	e003      	b.n	8005988 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f809 	bl	8005998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005986:	e000      	b.n	800598a <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005988:	bf00      	nop
    return;
 800598a:	bf00      	nop
  }
}
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	080059ab 	.word	0x080059ab

08005998 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff ffe7 	bl	8005998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059e4:	f7fe fce0 	bl	80043a8 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	4413      	add	r3, r2
 80059f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059f4:	f7fe fcd8 	bl	80043a8 <HAL_GetTick>
 80059f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059fa:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	015b      	lsls	r3, r3, #5
 8005a00:	0d1b      	lsrs	r3, r3, #20
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	fb02 f303 	mul.w	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a0a:	e054      	b.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a12:	d050      	beq.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a14:	f7fe fcc8 	bl	80043a8 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d902      	bls.n	8005a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d13d      	bne.n	8005aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a42:	d111      	bne.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a4c:	d004      	beq.n	8005a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a56:	d107      	bne.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a70:	d10f      	bne.n	8005a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e017      	b.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	bf0c      	ite	eq
 8005ac6:	2301      	moveq	r3, #1
 8005ac8:	2300      	movne	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d19b      	bne.n	8005a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000014 	.word	0x20000014

08005ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff ff6a 	bl	80059d4 <SPI_WaitFlagStateUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	f043 0220 	orr.w	r2, r3, #32
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e000      	b.n	8005b18 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e041      	b.n	8005bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f839 	bl	8005bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f000 fbee 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d001      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e035      	b.n	8005c54 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <HAL_TIM_Base_Start_IT+0x90>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_TIM_Base_Start_IT+0x4e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c12:	d004      	beq.n	8005c1e <HAL_TIM_Base_Start_IT+0x4e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <HAL_TIM_Base_Start_IT+0x94>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d111      	bne.n	8005c42 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	d010      	beq.n	8005c52 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c40:	e007      	b.n	8005c52 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f042 0201 	orr.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40000400 	.word	0x40000400

08005c68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a1a      	ldr	r2, [r3, #32]
 8005c86:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10f      	bne.n	8005cb0 <HAL_TIM_Base_Stop_IT+0x48>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6a1a      	ldr	r2, [r3, #32]
 8005c96:	f240 4344 	movw	r3, #1092	; 0x444
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d107      	bne.n	8005cb0 <HAL_TIM_Base_Stop_IT+0x48>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e041      	b.n	8005d5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fe f900 	bl	8003ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f000 fb1c 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <HAL_TIM_PWM_Start+0x24>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	e022      	b.n	8005dce <HAL_TIM_PWM_Start+0x6a>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d109      	bne.n	8005da2 <HAL_TIM_PWM_Start+0x3e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	bf14      	ite	ne
 8005d9a:	2301      	movne	r3, #1
 8005d9c:	2300      	moveq	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	e015      	b.n	8005dce <HAL_TIM_PWM_Start+0x6a>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d109      	bne.n	8005dbc <HAL_TIM_PWM_Start+0x58>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	e008      	b.n	8005dce <HAL_TIM_PWM_Start+0x6a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e059      	b.n	8005e8a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_PWM_Start+0x82>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de4:	e013      	b.n	8005e0e <HAL_TIM_PWM_Start+0xaa>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_PWM_Start+0x92>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df4:	e00b      	b.n	8005e0e <HAL_TIM_PWM_Start+0xaa>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d104      	bne.n	8005e06 <HAL_TIM_PWM_Start+0xa2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e04:	e003      	b.n	8005e0e <HAL_TIM_PWM_Start+0xaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2201      	movs	r2, #1
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fc72 	bl	8006700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <HAL_TIM_PWM_Start+0x130>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d107      	bne.n	8005e36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <HAL_TIM_PWM_Start+0x130>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_TIM_PWM_Start+0xf0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d004      	beq.n	8005e54 <HAL_TIM_PWM_Start+0xf0>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <HAL_TIM_PWM_Start+0x134>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d111      	bne.n	8005e78 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d010      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0201 	orr.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e76:	e007      	b.n	8005e88 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40000400 	.word	0x40000400

08005e9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fc26 	bl	8006700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a29      	ldr	r2, [pc, #164]	; (8005f60 <HAL_TIM_PWM_Stop+0xc4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d117      	bne.n	8005eee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a1a      	ldr	r2, [r3, #32]
 8005ec4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <HAL_TIM_PWM_Stop+0x52>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	f240 4344 	movw	r3, #1092	; 0x444
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d107      	bne.n	8005eee <HAL_TIM_PWM_Stop+0x52>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10f      	bne.n	8005f1e <HAL_TIM_PWM_Stop+0x82>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	f240 4344 	movw	r3, #1092	; 0x444
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_PWM_Stop+0x82>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Stop+0x92>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f2c:	e013      	b.n	8005f56 <HAL_TIM_PWM_Stop+0xba>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Stop+0xa2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f3c:	e00b      	b.n	8005f56 <HAL_TIM_PWM_Stop+0xba>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_PWM_Stop+0xb2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f4c:	e003      	b.n	8005f56 <HAL_TIM_PWM_Stop+0xba>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40012c00 	.word	0x40012c00

08005f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0202 	mvn.w	r2, #2
 8005f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9af 	bl	800630a <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9a2 	bl	80062f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f9b1 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0204 	mvn.w	r2, #4
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f985 	bl	800630a <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f978 	bl	80062f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f987 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b08      	cmp	r3, #8
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b08      	cmp	r3, #8
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0208 	mvn.w	r2, #8
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f95b 	bl	800630a <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f94e 	bl	80062f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f95d 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0310 	and.w	r3, r3, #16
 8006072:	2b10      	cmp	r3, #16
 8006074:	d122      	bne.n	80060bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	2b10      	cmp	r3, #16
 8006082:	d11b      	bne.n	80060bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0210 	mvn.w	r2, #16
 800608c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2208      	movs	r2, #8
 8006092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f931 	bl	800630a <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f924 	bl	80062f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f933 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d10e      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d107      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0201 	mvn.w	r2, #1
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fd fd5e 	bl	8003ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d10e      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006100:	2b80      	cmp	r3, #128	; 0x80
 8006102:	d107      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fbcc 	bl	80068ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d10e      	bne.n	8006140 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d107      	bne.n	8006140 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f8f7 	bl	800632e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b20      	cmp	r3, #32
 800614c:	d10e      	bne.n	800616c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b20      	cmp	r3, #32
 800615a:	d107      	bne.n	800616c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0220 	mvn.w	r2, #32
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fb97 	bl	800689a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800618e:	2302      	movs	r3, #2
 8006190:	e0ae      	b.n	80062f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b0c      	cmp	r3, #12
 800619e:	f200 809f 	bhi.w	80062e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061a2:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061dd 	.word	0x080061dd
 80061ac:	080062e1 	.word	0x080062e1
 80061b0:	080062e1 	.word	0x080062e1
 80061b4:	080062e1 	.word	0x080062e1
 80061b8:	0800621d 	.word	0x0800621d
 80061bc:	080062e1 	.word	0x080062e1
 80061c0:	080062e1 	.word	0x080062e1
 80061c4:	080062e1 	.word	0x080062e1
 80061c8:	0800625f 	.word	0x0800625f
 80061cc:	080062e1 	.word	0x080062e1
 80061d0:	080062e1 	.word	0x080062e1
 80061d4:	080062e1 	.word	0x080062e1
 80061d8:	0800629f 	.word	0x0800629f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f904 	bl	80063f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0208 	orr.w	r2, r2, #8
 80061f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0204 	bic.w	r2, r2, #4
 8006206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6999      	ldr	r1, [r3, #24]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	619a      	str	r2, [r3, #24]
      break;
 800621a:	e064      	b.n	80062e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f94a 	bl	80064bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6999      	ldr	r1, [r3, #24]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	021a      	lsls	r2, r3, #8
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	619a      	str	r2, [r3, #24]
      break;
 800625c:	e043      	b.n	80062e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	4618      	mov	r0, r3
 8006266:	f000 f993 	bl	8006590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0208 	orr.w	r2, r2, #8
 8006278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0204 	bic.w	r2, r2, #4
 8006288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69d9      	ldr	r1, [r3, #28]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	61da      	str	r2, [r3, #28]
      break;
 800629c:	e023      	b.n	80062e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 f9dd 	bl	8006664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69d9      	ldr	r1, [r3, #28]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	021a      	lsls	r2, r3, #8
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	61da      	str	r2, [r3, #28]
      break;
 80062de:	e002      	b.n	80062e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
      break;
 80062e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr

0800630a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr

0800632e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr

08006340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <TIM_Base_SetConfig+0xa8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_Base_SetConfig+0x28>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d003      	beq.n	8006368 <TIM_Base_SetConfig+0x28>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a22      	ldr	r2, [pc, #136]	; (80063ec <TIM_Base_SetConfig+0xac>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d108      	bne.n	800637a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <TIM_Base_SetConfig+0xa8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <TIM_Base_SetConfig+0x52>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006388:	d003      	beq.n	8006392 <TIM_Base_SetConfig+0x52>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a17      	ldr	r2, [pc, #92]	; (80063ec <TIM_Base_SetConfig+0xac>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d108      	bne.n	80063a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a07      	ldr	r2, [pc, #28]	; (80063e8 <TIM_Base_SetConfig+0xa8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d103      	bne.n	80063d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	615a      	str	r2, [r3, #20]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40000400 	.word	0x40000400

080063f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f023 0201 	bic.w	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0302 	bic.w	r3, r3, #2
 8006438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a1c      	ldr	r2, [pc, #112]	; (80064b8 <TIM_OC1_SetConfig+0xc8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d10c      	bne.n	8006466 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f023 0308 	bic.w	r3, r3, #8
 8006452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f023 0304 	bic.w	r3, r3, #4
 8006464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a13      	ldr	r2, [pc, #76]	; (80064b8 <TIM_OC1_SetConfig+0xc8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d111      	bne.n	8006492 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40012c00 	.word	0x40012c00

080064bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f023 0210 	bic.w	r2, r3, #16
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0320 	bic.w	r3, r3, #32
 8006506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1d      	ldr	r2, [pc, #116]	; (800658c <TIM_OC2_SetConfig+0xd0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10d      	bne.n	8006538 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a14      	ldr	r2, [pc, #80]	; (800658c <TIM_OC2_SetConfig+0xd0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d113      	bne.n	8006568 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800654e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	621a      	str	r2, [r3, #32]
}
 8006582:	bf00      	nop
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr
 800658c:	40012c00 	.word	0x40012c00

08006590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	021b      	lsls	r3, r3, #8
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <TIM_OC3_SetConfig+0xd0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10d      	bne.n	800660a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a14      	ldr	r2, [pc, #80]	; (8006660 <TIM_OC3_SetConfig+0xd0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d113      	bne.n	800663a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	621a      	str	r2, [r3, #32]
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40012c00 	.word	0x40012c00

08006664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	031b      	lsls	r3, r3, #12
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a0f      	ldr	r2, [pc, #60]	; (80066fc <TIM_OC4_SetConfig+0x98>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d109      	bne.n	80066d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	019b      	lsls	r3, r3, #6
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr
 80066fc:	40012c00 	.word	0x40012c00

08006700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2201      	movs	r2, #1
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	43db      	mvns	r3, r3
 8006722:	401a      	ands	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e041      	b.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a14      	ldr	r2, [pc, #80]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d009      	beq.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d004      	beq.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d10c      	bne.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40000400 	.word	0x40000400

080067f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006810:	2302      	movs	r3, #2
 8006812:	e03d      	b.n	8006890 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr

0800689a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e042      	b.n	8006956 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7fd fbd1 	bl	800408c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2224      	movs	r2, #36	; 0x24
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006900:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fe48 	bl	8007598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006916:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695a      	ldr	r2, [r3, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006926:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006936:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e04a      	b.n	8006a06 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fd fb81 	bl	800408c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2224      	movs	r2, #36	; 0x24
 800698e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fdf8 	bl	8007598 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695a      	ldr	r2, [r3, #20]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80069c6:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0208 	orr.w	r2, r2, #8
 80069d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08a      	sub	sp, #40	; 0x28
 8006a12:	af02      	add	r7, sp, #8
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d16d      	bne.n	8006b0a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_UART_Transmit+0x2c>
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e066      	b.n	8006b0c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2221      	movs	r2, #33	; 0x21
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a4c:	f7fd fcac 	bl	80043a8 <HAL_GetTick>
 8006a50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	88fa      	ldrh	r2, [r7, #6]
 8006a56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a66:	d108      	bne.n	8006a7a <HAL_UART_Transmit+0x6c>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	61bb      	str	r3, [r7, #24]
 8006a78:	e003      	b.n	8006a82 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a82:	e02a      	b.n	8006ada <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2180      	movs	r1, #128	; 0x80
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fb3f 	bl	8007112 <UART_WaitOnFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e036      	b.n	8006b0c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e007      	b.n	8006acc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1cf      	bne.n	8006a84 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2200      	movs	r2, #0
 8006aec:	2140      	movs	r1, #64	; 0x40
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fb0f 	bl	8007112 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e006      	b.n	8006b0c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	e000      	b.n	8006b0c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b0a:	2302      	movs	r3, #2
  }
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d112      	bne.n	8006b54 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <HAL_UART_Receive_IT+0x26>
 8006b34:	88fb      	ldrh	r3, [r7, #6]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e00b      	b.n	8006b56 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	461a      	mov	r2, r3
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fb4f 	bl	80071ee <UART_Start_Receive_IT>
 8006b50:	4603      	mov	r3, r0
 8006b52:	e000      	b.n	8006b56 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b0ba      	sub	sp, #232	; 0xe8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10f      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x66>
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fc2b 	bl	800741a <UART_Receive_IT>
      return;
 8006bc4:	e25b      	b.n	800707e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80de 	beq.w	8006d8c <HAL_UART_IRQHandler+0x22c>
 8006bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80d1 	beq.w	8006d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <HAL_UART_IRQHandler+0xae>
 8006bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c06:	f043 0201 	orr.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00b      	beq.n	8006c32 <HAL_UART_IRQHandler+0xd2>
 8006c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	f043 0202 	orr.w	r2, r3, #2
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <HAL_UART_IRQHandler+0xf6>
 8006c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4e:	f043 0204 	orr.w	r2, r3, #4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d011      	beq.n	8006c86 <HAL_UART_IRQHandler+0x126>
 8006c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d105      	bne.n	8006c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	f043 0208 	orr.w	r2, r3, #8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 81f2 	beq.w	8007074 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_UART_IRQHandler+0x14e>
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fbb6 	bl	800741a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d103      	bne.n	8006cda <HAL_UART_IRQHandler+0x17a>
 8006cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d04f      	beq.n	8006d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fac0 	bl	8007260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d041      	beq.n	8006d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1d9      	bne.n	8006cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d013      	beq.n	8006d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	4a7e      	ldr	r2, [pc, #504]	; (8006f40 <HAL_UART_IRQHandler+0x3e0>)
 8006d48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fd fca0 	bl	8004694 <HAL_DMA_Abort_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d016      	beq.n	8006d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	e00e      	b.n	8006d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fc fdd8 	bl	8003920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	e00a      	b.n	8006d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fc fdd4 	bl	8003920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d78:	e006      	b.n	8006d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fc fdd0 	bl	8003920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006d86:	e175      	b.n	8007074 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d88:	bf00      	nop
    return;
 8006d8a:	e173      	b.n	8007074 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	f040 814f 	bne.w	8007034 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8148 	beq.w	8007034 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8141 	beq.w	8007034 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80b6 	beq.w	8006f44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 8145 	beq.w	8007078 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006df6:	429a      	cmp	r2, r3
 8006df8:	f080 813e 	bcs.w	8007078 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	f000 8088 	beq.w	8006f20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	330c      	adds	r3, #12
 8006e38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e3c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1d9      	bne.n	8006e10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3314      	adds	r3, #20
 8006e62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e6e:	f023 0301 	bic.w	r3, r3, #1
 8006e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3314      	adds	r3, #20
 8006e7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e1      	bne.n	8006e5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3314      	adds	r3, #20
 8006e9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3314      	adds	r3, #20
 8006eb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ebc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ec2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006eca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e3      	bne.n	8006e98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef0:	f023 0310 	bic.w	r3, r3, #16
 8006ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	330c      	adds	r3, #12
 8006efe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f02:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f04:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e3      	bne.n	8006ede <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fd fb7f 	bl	800461e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8ad 	bl	8007096 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f3c:	e09c      	b.n	8007078 <HAL_UART_IRQHandler+0x518>
 8006f3e:	bf00      	nop
 8006f40:	08007325 	.word	0x08007325
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 808e 	beq.w	800707c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8089 	beq.w	800707c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f8e:	647a      	str	r2, [r7, #68]	; 0x44
 8006f90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e3      	bne.n	8006f6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3314      	adds	r3, #20
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3314      	adds	r3, #20
 8006fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fc6:	633a      	str	r2, [r7, #48]	; 0x30
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e3      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	330c      	adds	r3, #12
 8006fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0310 	bic.w	r3, r3, #16
 8006ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800700c:	61fa      	str	r2, [r7, #28]
 800700e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	69b9      	ldr	r1, [r7, #24]
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	617b      	str	r3, [r7, #20]
   return(result);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e3      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f832 	bl	8007096 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007032:	e023      	b.n	800707c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <HAL_UART_IRQHandler+0x4f4>
 8007040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f97d 	bl	800734c <UART_Transmit_IT>
    return;
 8007052:	e014      	b.n	800707e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00e      	beq.n	800707e <HAL_UART_IRQHandler+0x51e>
 8007060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f9bc 	bl	80073ea <UART_EndTransmit_IT>
    return;
 8007072:	e004      	b.n	800707e <HAL_UART_IRQHandler+0x51e>
    return;
 8007074:	bf00      	nop
 8007076:	e002      	b.n	800707e <HAL_UART_IRQHandler+0x51e>
      return;
 8007078:	bf00      	nop
 800707a:	e000      	b.n	800707e <HAL_UART_IRQHandler+0x51e>
      return;
 800707c:	bf00      	nop
  }
}
 800707e:	37e8      	adds	r7, #232	; 0xe8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr

08007096 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e020      	b.n	8007108 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2224      	movs	r2, #36	; 0x24
 80070d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f023 030c 	bic.w	r3, r3, #12
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f043 0308 	orr.w	r3, r3, #8
 80070ec:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr

08007112 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b090      	sub	sp, #64	; 0x40
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	603b      	str	r3, [r7, #0]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007122:	e050      	b.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712a:	d04c      	beq.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800712c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0x30>
 8007132:	f7fd f939 	bl	80043a8 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800713e:	429a      	cmp	r2, r3
 8007140:	d241      	bcs.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330c      	adds	r3, #12
 8007148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	330c      	adds	r3, #12
 8007160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007162:	637a      	str	r2, [r7, #52]	; 0x34
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e5      	bne.n	8007142 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3314      	adds	r3, #20
 800717c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	613b      	str	r3, [r7, #16]
   return(result);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	63bb      	str	r3, [r7, #56]	; 0x38
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3314      	adds	r3, #20
 8007194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007196:	623a      	str	r2, [r7, #32]
 8007198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	69f9      	ldr	r1, [r7, #28]
 800719c:	6a3a      	ldr	r2, [r7, #32]
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e5      	bne.n	8007176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e00f      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	bf0c      	ite	eq
 80071d6:	2301      	moveq	r3, #1
 80071d8:	2300      	movne	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d09f      	beq.n	8007124 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3740      	adds	r7, #64	; 0x40
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	4613      	mov	r3, r2
 80071fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	88fa      	ldrh	r2, [r7, #6]
 8007206:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	88fa      	ldrh	r2, [r7, #6]
 800720c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2222      	movs	r2, #34	; 0x22
 8007218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007232:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695a      	ldr	r2, [r3, #20]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0220 	orr.w	r2, r2, #32
 8007252:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b095      	sub	sp, #84	; 0x54
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007288:	643a      	str	r2, [r7, #64]	; 0x40
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800728e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3314      	adds	r3, #20
 80072a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d119      	bne.n	800730c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	330c      	adds	r3, #12
 80072de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f023 0310 	bic.w	r3, r3, #16
 80072ee:	647b      	str	r3, [r7, #68]	; 0x44
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072f8:	61ba      	str	r2, [r7, #24]
 80072fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6979      	ldr	r1, [r7, #20]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	613b      	str	r3, [r7, #16]
   return(result);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e5      	bne.n	80072d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	631a      	str	r2, [r3, #48]	; 0x30
}
 800731a:	bf00      	nop
 800731c:	3754      	adds	r7, #84	; 0x54
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7fc faee 	bl	8003920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b21      	cmp	r3, #33	; 0x21
 800735e:	d13e      	bne.n	80073de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007368:	d114      	bne.n	8007394 <UART_Transmit_IT+0x48>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d110      	bne.n	8007394 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007386:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	1c9a      	adds	r2, r3, #2
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	621a      	str	r2, [r3, #32]
 8007392:	e008      	b.n	80073a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	1c59      	adds	r1, r3, #1
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	6211      	str	r1, [r2, #32]
 800739e:	781a      	ldrb	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4619      	mov	r1, r3
 80073b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10f      	bne.n	80073da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff fe3a 	bl	8007084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b08c      	sub	sp, #48	; 0x30
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b22      	cmp	r3, #34	; 0x22
 800742c:	f040 80ae 	bne.w	800758c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007438:	d117      	bne.n	800746a <UART_Receive_IT+0x50>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d113      	bne.n	800746a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	b29b      	uxth	r3, r3
 8007454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007458:	b29a      	uxth	r2, r3
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	1c9a      	adds	r2, r3, #2
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	629a      	str	r2, [r3, #40]	; 0x28
 8007468:	e026      	b.n	80074b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747c:	d007      	beq.n	800748e <UART_Receive_IT+0x74>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10a      	bne.n	800749c <UART_Receive_IT+0x82>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	e008      	b.n	80074ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	4619      	mov	r1, r3
 80074c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d15d      	bne.n	8007588 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0220 	bic.w	r2, r2, #32
 80074da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695a      	ldr	r2, [r3, #20]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0201 	bic.w	r2, r2, #1
 80074fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	2b01      	cmp	r3, #1
 8007510:	d135      	bne.n	800757e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	613b      	str	r3, [r7, #16]
   return(result);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f023 0310 	bic.w	r3, r3, #16
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	330c      	adds	r3, #12
 8007536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007538:	623a      	str	r2, [r7, #32]
 800753a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	69f9      	ldr	r1, [r7, #28]
 800753e:	6a3a      	ldr	r2, [r7, #32]
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	61bb      	str	r3, [r7, #24]
   return(result);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b10      	cmp	r3, #16
 8007558:	d10a      	bne.n	8007570 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff fd8d 	bl	8007096 <HAL_UARTEx_RxEventCallback>
 800757c:	e002      	b.n	8007584 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fc f8a8 	bl	80036d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	e002      	b.n	800758e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	e000      	b.n	800758e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800758c:	2302      	movs	r3, #2
  }
}
 800758e:	4618      	mov	r0, r3
 8007590:	3730      	adds	r7, #48	; 0x30
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80075d2:	f023 030c 	bic.w	r3, r3, #12
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	430b      	orrs	r3, r1
 80075de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a2c      	ldr	r2, [pc, #176]	; (80076ac <UART_SetConfig+0x114>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d103      	bne.n	8007608 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007600:	f7fd fe86 	bl	8005310 <HAL_RCC_GetPCLK2Freq>
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	e002      	b.n	800760e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fd fe6e 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 800760c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009a      	lsls	r2, r3, #2
 8007618:	441a      	add	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	fbb2 f3f3 	udiv	r3, r2, r3
 8007624:	4a22      	ldr	r2, [pc, #136]	; (80076b0 <UART_SetConfig+0x118>)
 8007626:	fba2 2303 	umull	r2, r3, r2, r3
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	0119      	lsls	r1, r3, #4
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009a      	lsls	r2, r3, #2
 8007638:	441a      	add	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	fbb2 f2f3 	udiv	r2, r2, r3
 8007644:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <UART_SetConfig+0x118>)
 8007646:	fba3 0302 	umull	r0, r3, r3, r2
 800764a:	095b      	lsrs	r3, r3, #5
 800764c:	2064      	movs	r0, #100	; 0x64
 800764e:	fb00 f303 	mul.w	r3, r0, r3
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	3332      	adds	r3, #50	; 0x32
 8007658:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <UART_SetConfig+0x118>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007664:	4419      	add	r1, r3
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009a      	lsls	r2, r3, #2
 8007670:	441a      	add	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	fbb2 f2f3 	udiv	r2, r2, r3
 800767c:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <UART_SetConfig+0x118>)
 800767e:	fba3 0302 	umull	r0, r3, r3, r2
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	2064      	movs	r0, #100	; 0x64
 8007686:	fb00 f303 	mul.w	r3, r0, r3
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	3332      	adds	r3, #50	; 0x32
 8007690:	4a07      	ldr	r2, [pc, #28]	; (80076b0 <UART_SetConfig+0x118>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	f003 020f 	and.w	r2, r3, #15
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	440a      	add	r2, r1
 80076a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80076a4:	bf00      	nop
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40013800 	.word	0x40013800
 80076b0:	51eb851f 	.word	0x51eb851f

080076b4 <__cxa_guard_acquire>:
 80076b4:	6802      	ldr	r2, [r0, #0]
 80076b6:	4603      	mov	r3, r0
 80076b8:	07d2      	lsls	r2, r2, #31
 80076ba:	d405      	bmi.n	80076c8 <__cxa_guard_acquire+0x14>
 80076bc:	7842      	ldrb	r2, [r0, #1]
 80076be:	b102      	cbz	r2, 80076c2 <__cxa_guard_acquire+0xe>
 80076c0:	deff      	udf	#255	; 0xff
 80076c2:	2001      	movs	r0, #1
 80076c4:	7058      	strb	r0, [r3, #1]
 80076c6:	4770      	bx	lr
 80076c8:	2000      	movs	r0, #0
 80076ca:	4770      	bx	lr

080076cc <__cxa_guard_release>:
 80076cc:	2301      	movs	r3, #1
 80076ce:	6003      	str	r3, [r0, #0]
 80076d0:	4770      	bx	lr
	...

080076d4 <ceilf>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80076da:	3d7f      	subs	r5, #127	; 0x7f
 80076dc:	2d16      	cmp	r5, #22
 80076de:	4601      	mov	r1, r0
 80076e0:	4604      	mov	r4, r0
 80076e2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80076e6:	dc25      	bgt.n	8007734 <ceilf+0x60>
 80076e8:	2d00      	cmp	r5, #0
 80076ea:	da0e      	bge.n	800770a <ceilf+0x36>
 80076ec:	4917      	ldr	r1, [pc, #92]	; (800774c <ceilf+0x78>)
 80076ee:	f7f9 f9d9 	bl	8000aa4 <__addsf3>
 80076f2:	2100      	movs	r1, #0
 80076f4:	f7f9 fc9a 	bl	800102c <__aeabi_fcmpgt>
 80076f8:	b128      	cbz	r0, 8007706 <ceilf+0x32>
 80076fa:	2c00      	cmp	r4, #0
 80076fc:	db22      	blt.n	8007744 <ceilf+0x70>
 80076fe:	2e00      	cmp	r6, #0
 8007700:	bf18      	it	ne
 8007702:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8007706:	4621      	mov	r1, r4
 8007708:	e01a      	b.n	8007740 <ceilf+0x6c>
 800770a:	4e11      	ldr	r6, [pc, #68]	; (8007750 <ceilf+0x7c>)
 800770c:	412e      	asrs	r6, r5
 800770e:	4230      	tst	r0, r6
 8007710:	d016      	beq.n	8007740 <ceilf+0x6c>
 8007712:	490e      	ldr	r1, [pc, #56]	; (800774c <ceilf+0x78>)
 8007714:	f7f9 f9c6 	bl	8000aa4 <__addsf3>
 8007718:	2100      	movs	r1, #0
 800771a:	f7f9 fc87 	bl	800102c <__aeabi_fcmpgt>
 800771e:	2800      	cmp	r0, #0
 8007720:	d0f1      	beq.n	8007706 <ceilf+0x32>
 8007722:	2c00      	cmp	r4, #0
 8007724:	bfc2      	ittt	gt
 8007726:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800772a:	412b      	asrgt	r3, r5
 800772c:	18e4      	addgt	r4, r4, r3
 800772e:	ea24 0406 	bic.w	r4, r4, r6
 8007732:	e7e8      	b.n	8007706 <ceilf+0x32>
 8007734:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007738:	d302      	bcc.n	8007740 <ceilf+0x6c>
 800773a:	f7f9 f9b3 	bl	8000aa4 <__addsf3>
 800773e:	4601      	mov	r1, r0
 8007740:	4608      	mov	r0, r1
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007748:	e7dd      	b.n	8007706 <ceilf+0x32>
 800774a:	bf00      	nop
 800774c:	7149f2ca 	.word	0x7149f2ca
 8007750:	007fffff 	.word	0x007fffff

08007754 <memset>:
 8007754:	4603      	mov	r3, r0
 8007756:	4402      	add	r2, r0
 8007758:	4293      	cmp	r3, r2
 800775a:	d100      	bne.n	800775e <memset+0xa>
 800775c:	4770      	bx	lr
 800775e:	f803 1b01 	strb.w	r1, [r3], #1
 8007762:	e7f9      	b.n	8007758 <memset+0x4>

08007764 <__libc_init_array>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	2600      	movs	r6, #0
 8007768:	4d0c      	ldr	r5, [pc, #48]	; (800779c <__libc_init_array+0x38>)
 800776a:	4c0d      	ldr	r4, [pc, #52]	; (80077a0 <__libc_init_array+0x3c>)
 800776c:	1b64      	subs	r4, r4, r5
 800776e:	10a4      	asrs	r4, r4, #2
 8007770:	42a6      	cmp	r6, r4
 8007772:	d109      	bne.n	8007788 <__libc_init_array+0x24>
 8007774:	f000 f81a 	bl	80077ac <_init>
 8007778:	2600      	movs	r6, #0
 800777a:	4d0a      	ldr	r5, [pc, #40]	; (80077a4 <__libc_init_array+0x40>)
 800777c:	4c0a      	ldr	r4, [pc, #40]	; (80077a8 <__libc_init_array+0x44>)
 800777e:	1b64      	subs	r4, r4, r5
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	42a6      	cmp	r6, r4
 8007784:	d105      	bne.n	8007792 <__libc_init_array+0x2e>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	f855 3b04 	ldr.w	r3, [r5], #4
 800778c:	4798      	blx	r3
 800778e:	3601      	adds	r6, #1
 8007790:	e7ee      	b.n	8007770 <__libc_init_array+0xc>
 8007792:	f855 3b04 	ldr.w	r3, [r5], #4
 8007796:	4798      	blx	r3
 8007798:	3601      	adds	r6, #1
 800779a:	e7f2      	b.n	8007782 <__libc_init_array+0x1e>
 800779c:	080077f0 	.word	0x080077f0
 80077a0:	080077f0 	.word	0x080077f0
 80077a4:	080077f0 	.word	0x080077f0
 80077a8:	080077f8 	.word	0x080077f8

080077ac <_init>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	bf00      	nop
 80077b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b2:	bc08      	pop	{r3}
 80077b4:	469e      	mov	lr, r3
 80077b6:	4770      	bx	lr

080077b8 <_fini>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	bf00      	nop
 80077bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077be:	bc08      	pop	{r3}
 80077c0:	469e      	mov	lr, r3
 80077c2:	4770      	bx	lr
