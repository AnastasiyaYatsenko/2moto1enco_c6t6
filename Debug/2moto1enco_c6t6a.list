
2moto1enco_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006d70  08006d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d9c  08006d9c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d9c  08006d9c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d9c  08006d9c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006d9c  08006d9c  00016d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  2000001c  08006dc4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006dc4  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018639  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003138  00000000  00000000  000386c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  0003b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf7  00000000  00000000  0003c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b39e  00000000  00000000  0003d58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125fe  00000000  00000000  0005892d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fbcf  00000000  00000000  0006af2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004838  00000000  00000000  000faafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ff334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d58 	.word	0x08006d58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08006d58 	.word	0x08006d58

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
 8000f80:	4613      	mov	r3, r2
 8000f82:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8000f84:	787a      	ldrb	r2, [r7, #1]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f003 f873 	bl	8004076 <HAL_GPIO_WritePin>

}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	72fb      	strb	r3, [r7, #11]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8000fac:	893b      	ldrh	r3, [r7, #8]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffde 	bl	8000f74 <setCSLine>
	delay(docDelay);
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f000 f923 	bl	8001204 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8000fbe:	f107 0217 	add.w	r2, r7, #23
 8000fc2:	f107 010b 	add.w	r1, r7, #11
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f003 fd3b 	bl	8004a48 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 8000fd2:	2004      	movs	r0, #4
 8000fd4:	f000 f916 	bl	8001204 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8000fd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fdc:	893b      	ldrh	r3, [r7, #8]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffc7 	bl	8000f74 <setCSLine>
	return data;
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	460b      	mov	r3, r1
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	4613      	mov	r3, r2
 8001004:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001006:	f000 f90f 	bl	8001228 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	2200      	movs	r2, #0
 8001012:	9200      	str	r2, [sp, #0]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	2100      	movs	r1, #0
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff ffbd 	bl	8000f98 <spiWriteRead>
 800101e:	4603      	mov	r3, r0
 8001020:	b29b      	uxth	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001026:	2004      	movs	r0, #4
 8001028:	f000 f8ec 	bl	8001204 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	2201      	movs	r2, #1
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	2100      	movs	r1, #0
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff ffae 	bl	8000f98 <spiWriteRead>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001042:	4313      	orrs	r3, r2
 8001044:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
 800104a:	e010      	b.n	800106e <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 800104c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	fa42 f303 	asr.w	r3, r2, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	b2d9      	uxtb	r1, r3
 800105c:	f107 0210 	add.w	r2, r7, #16
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	4413      	add	r3, r2
 8001064:	460a      	mov	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	3301      	adds	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	ddeb      	ble.n	800104c <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001078:	7f7a      	ldrb	r2, [r7, #29]
 800107a:	7efb      	ldrb	r3, [r7, #27]
 800107c:	4053      	eors	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	7e7b      	ldrb	r3, [r7, #25]
 8001082:	4053      	eors	r3, r2
 8001084:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001086:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001088:	4053      	eors	r3, r2
 800108a:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800108c:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800108e:	4053      	eors	r3, r2
 8001090:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001092:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001094:	4053      	eors	r3, r2
 8001096:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001098:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800109a:	429a      	cmp	r2, r3
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d11e      	bne.n	80010e6 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80010a8:	7fbb      	ldrb	r3, [r7, #30]
 80010aa:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010ac:	7f3a      	ldrb	r2, [r7, #28]
 80010ae:	7ebb      	ldrb	r3, [r7, #26]
 80010b0:	4053      	eors	r3, r2
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	7e3b      	ldrb	r3, [r7, #24]
 80010b6:	4053      	eors	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010ba:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010bc:	4053      	eors	r3, r2
 80010be:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010c0:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010c2:	4053      	eors	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010c6:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010c8:	4053      	eors	r3, r2
 80010ca:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 80010d8:	4299      	cmp	r1, r3
 80010da:	d104      	bne.n	80010e6 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 80010dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010de:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010e4:	e002      	b.n	80010ec <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 80010e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ea:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d107      	bne.n	8001102 <getPositionSPI+0x112>
 80010f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d002      	beq.n	8001102 <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 80010fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 8001102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001104:	4618      	mov	r0, r3
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	4613      	mov	r3, r2
 8001118:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	2200      	movs	r2, #0
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	2100      	movs	r1, #0
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff37 	bl	8000f98 <spiWriteRead>
	delay( docDelay);
 800112a:	2004      	movs	r0, #4
 800112c:	f000 f86a 	bl	8001204 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	2201      	movs	r2, #1
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	2170      	movs	r1, #112	; 0x70
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff ff2c 	bl	8000f98 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 8001140:	2078      	movs	r0, #120	; 0x78
 8001142:	f000 f85f 	bl	8001204 <delay>

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	80fb      	strh	r3, [r7, #6]
 800115c:	4613      	mov	r3, r2
 800115e:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 8001166:	797b      	ldrb	r3, [r7, #5]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d11e      	bne.n	80011aa <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fcc2 	bl	8000af8 <__aeabi_ui2f>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f94e 	bl	8000418 <__aeabi_f2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <calculateAngle+0xa8>)
 8001182:	f7ff f9a1 	bl	80004c8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <calculateAngle+0xac>)
 8001194:	f7ff fac2 	bl	800071c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fba4 	bl	80008ec <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e020      	b.n	80011ec <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 80011aa:	797b      	ldrb	r3, [r7, #5]
 80011ac:	2b0e      	cmp	r3, #14
 80011ae:	d11d      	bne.n	80011ec <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fca0 	bl	8000af8 <__aeabi_ui2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f92c 	bl	8000418 <__aeabi_f2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <calculateAngle+0xa8>)
 80011c6:	f7ff f97f 	bl	80004c8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <calculateAngle+0xb0>)
 80011d8:	f7ff faa0 	bl	800071c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fb82 	bl	80008ec <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40768000 	.word	0x40768000
 80011fc:	40b00000 	.word	0x40b00000
 8001200:	40d00000 	.word	0x40d00000

08001204 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f83b 	bl	8001288 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <startDWT>:

int startDWT(){
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 800121e:	f000 f803 	bl	8001228 <DWT_Delay_Init>

}
 8001222:	bf00      	nop
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}

08001228 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <DWT_Delay_Init+0x58>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <DWT_Delay_Init+0x58>)
 8001232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001236:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <DWT_Delay_Init+0x58>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a10      	ldr	r2, [pc, #64]	; (8001280 <DWT_Delay_Init+0x58>)
 800123e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001242:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <DWT_Delay_Init+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <DWT_Delay_Init+0x5c>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <DWT_Delay_Init+0x5c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <DWT_Delay_Init+0x5c>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <DWT_Delay_Init+0x5c>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001262:	bf00      	nop
    __ASM volatile ("NOP");
 8001264:	bf00      	nop
    __ASM volatile ("NOP");
 8001266:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <DWT_Delay_Init+0x5c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001274:	2301      	movs	r3, #1
    }
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000edf0 	.word	0xe000edf0
 8001284:	e0001000 	.word	0xe0001000

08001288 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <DWT_Delay_us+0x48>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001296:	f003 fb03 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 800129a:	4603      	mov	r3, r0
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <DWT_Delay_us+0x4c>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0c9b      	lsrs	r3, r3, #18
 80012a4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	fb02 f303 	mul.w	r3, r2, r3
 80012ae:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80012b0:	bf00      	nop
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <DWT_Delay_us+0x48>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad2      	subs	r2, r2, r3
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3f6      	bcc.n	80012b2 <DWT_Delay_us+0x2a>
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e0001000 	.word	0xe0001000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	e9c7 0100 	strd	r0, r1, [r7]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f005 fcb2 	bl	8006c80 <ceilf>
 800131c:	4603      	mov	r3, r0
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <_ZN7RoboArmC1Eff>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(float defaultAngleT, float defaultDistanseT) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a34      	ldr	r2, [pc, #208]	; (8001408 <_ZN7RoboArmC1Eff+0xe0>)
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	671a      	str	r2, [r3, #112]	; 0x70
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4a30      	ldr	r2, [pc, #192]	; (800140c <_ZN7RoboArmC1Eff+0xe4>)
 800134a:	675a      	str	r2, [r3, #116]	; 0x74
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4a30      	ldr	r2, [pc, #192]	; (8001410 <_ZN7RoboArmC1Eff+0xe8>)
 8001350:	679a      	str	r2, [r3, #120]	; 0x78
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <_ZN7RoboArmC1Eff+0xec>)
 8001356:	67da      	str	r2, [r3, #124]	; 0x7c
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	220e      	movs	r2, #14
 800135c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	33a0      	adds	r3, #160	; 0xa0
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fe2c 	bl	8001fc2 <_ZN7TMC2209C1Ev>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	33c8      	adds	r3, #200	; 0xc8
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fe27 	bl	8001fc2 <_ZN7TMC2209C1Ev>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	33f0      	adds	r3, #240	; 0xf0
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fe22 	bl	8001fc2 <_ZN7TMC2209C1Ev>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	defaultAngle = defaultAngleT;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	defaultDistanse = defaultDistanseT;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c


	startDWT();
 80013fa:	f7ff ff0e 	bl	800121a <startDWT>
}
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	44200000 	.word	0x44200000
 800140c:	000105b8 	.word	0x000105b8
 8001410:	43520000 	.word	0x43520000
 8001414:	42400000 	.word	0x42400000

08001418 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001428:	2201      	movs	r2, #1
 800142a:	4619      	mov	r1, r3
 800142c:	f002 fe23 	bl	8004076 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001438:	2201      	movs	r2, #1
 800143a:	4619      	mov	r1, r3
 800143c:	f002 fe1b 	bl	8004076 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800144a:	2201      	movs	r2, #1
 800144c:	4619      	mov	r1, r3
 800144e:	f002 fe12 	bl	8004076 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f004 f805 	bl	8005468 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2104      	movs	r1, #4
 8001464:	4618      	mov	r0, r3
 8001466:	f003 ffff 	bl	8005468 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2108      	movs	r1, #8
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fff9 	bl	8005468 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f003 feda 	bl	8005234 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4618      	mov	r0, r3
 8001486:	f003 fed5 	bl	8005234 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fed0 	bl	8005234 <HAL_TIM_Base_Stop_IT>

	return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <_ZN7RoboArm11Move2MotorsEff>:
//    std::cout<<"== Поточна дистанція по енкодеру: "<<distPsteps/steps4OneMM<<" mm"<<std::endl; //поточна дистанція по енкодеру

     return distPsteps/steps4OneMM;
 }

int RoboArm::Move2Motors(float angle, float distance) {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08f      	sub	sp, #60	; 0x3c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 ffd8 	bl	8005468 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2104      	movs	r1, #4
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 ffd2 	bl	8005468 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);				// остановили прерывание таймеров
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 feb3 	bl	8005234 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 feae 	bl	8005234 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 80014d8:	2200      	movs	r2, #0
 80014da:	2101      	movs	r1, #1
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fd37 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2102      	movs	r1, #2
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 fd32 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>

//	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
	lastPosAngle_Enc = GetAng();
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 fc0f 	bl	8001d10 <_ZN7RoboArm6GetAngEv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	lastPosLinear_Enc = GetLin();
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 fb58 	bl	8001bb0 <_ZN7RoboArm6GetLinEv>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

	float lastPosAngle = lastPosAngle_Enc;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
	float lastPosLinear = lastPosLinear_Enc;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c

	float pos_ang = abs(lastPosAngle - angle);
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800151c:	f7ff fa3a 	bl	8000994 <__aeabi_fsub>
 8001520:	4603      	mov	r3, r0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fee7 	bl	80012f6 <_ZSt3absf>
 8001528:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 800152a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800152c:	f7fe ff74 	bl	8000418 <__aeabi_f2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	4976      	ldr	r1, [pc, #472]	; (8001714 <_ZN7RoboArm11Move2MotorsEff+0x274>)
 800153a:	f7fe fe0d 	bl	8000158 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fec7 	bl	80012d8 <_ZSt3absd>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff f9cb 	bl	80008ec <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 800155a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800155c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800155e:	f7ff fcc1 	bl	8000ee4 <__aeabi_fcmplt>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01b      	beq.n	80015a0 <_ZN7RoboArm11Move2MotorsEff+0x100>
		actualPosAngle = inverse_pos_ang;
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001570:	f7ff fcb8 	bl	8000ee4 <__aeabi_fcmplt>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <_ZN7RoboArm11Move2MotorsEff+0xe6>
		//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.enableInverseMotorDirection();
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	33c8      	adds	r3, #200	; 0xc8
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fe1f 	bl	80021c2 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001584:	e027      	b.n	80015d6 <_ZN7RoboArm11Move2MotorsEff+0x136>
		} else if (lastPosAngle > angle) {
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800158a:	f7ff fcc9 	bl	8000f20 <__aeabi_fcmpgt>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <_ZN7RoboArm11Move2MotorsEff+0x136>
		//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);

			tmcd_angle.disableInverseMotorDirection();
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	33c8      	adds	r3, #200	; 0xc8
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fe22 	bl	80021e2 <_ZN7TMC220928disableInverseMotorDirectionEv>
 800159e:	e01a      	b.n	80015d6 <_ZN7RoboArm11Move2MotorsEff+0x136>
		}
	}
	else {
		actualPosAngle = pos_ang;
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015a8:	f7ff fc9c 	bl	8000ee4 <__aeabi_fcmplt>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <_ZN7RoboArm11Move2MotorsEff+0x11e>
		//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.disableInverseMotorDirection();
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	33c8      	adds	r3, #200	; 0xc8
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fe13 	bl	80021e2 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80015bc:	e00b      	b.n	80015d6 <_ZN7RoboArm11Move2MotorsEff+0x136>
		} else if (lastPosAngle > angle) {
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015c2:	f7ff fcad 	bl	8000f20 <__aeabi_fcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <_ZN7RoboArm11Move2MotorsEff+0x136>
		//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.enableInverseMotorDirection();
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	33c8      	adds	r3, #200	; 0xc8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fdf6 	bl	80021c2 <_ZN7TMC220927enableInverseMotorDirectionEv>
		}
	}

	if (lastPosLinear < distance) {
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015da:	f7ff fc83 	bl	8000ee4 <__aeabi_fcmplt>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <_ZN7RoboArm11Move2MotorsEff+0x150>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
			tmcd_linear.enableInverseMotorDirection();
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	33a0      	adds	r3, #160	; 0xa0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fdea 	bl	80021c2 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80015ee:	e00b      	b.n	8001608 <_ZN7RoboArm11Move2MotorsEff+0x168>
		} else if (lastPosLinear > distance) {
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015f4:	f7ff fc94 	bl	8000f20 <__aeabi_fcmpgt>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <_ZN7RoboArm11Move2MotorsEff+0x168>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
			tmcd_linear.disableInverseMotorDirection();
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	33a0      	adds	r3, #160	; 0xa0
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fded 	bl	80021e2 <_ZN7TMC220928disableInverseMotorDirectionEv>
		}

	float actualPosDistance = abs(lastPosLinear - distance);
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800160c:	f7ff f9c2 	bl	8000994 <__aeabi_fsub>
 8001610:	4603      	mov	r3, r0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fe6f 	bl	80012f6 <_ZSt3absf>
 8001618:	6238      	str	r0, [r7, #32]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 800161a:	493f      	ldr	r1, [pc, #252]	; (8001718 <_ZN7RoboArm11Move2MotorsEff+0x278>)
 800161c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800161e:	f7ff fac3 	bl	8000ba8 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	493d      	ldr	r1, [pc, #244]	; (800171c <_ZN7RoboArm11Move2MotorsEff+0x27c>)
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fb72 	bl	8000d10 <__aeabi_fdiv>
 800162c:	4603      	mov	r3, r0
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fc80 	bl	8000f34 <__aeabi_f2uiz>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	671a      	str	r2, [r3, #112]	; 0x70
//	DistLastT=distFenc(DistLast);//отримали дистанцію поточну //

//	float mmRef=abs(DistLastT-DistNow); //різниця в міліметрах
//	std::cout<<"Потрібно проїхати: "<<mmRef<<" mm"<<std::endl;

	distPsteps=actualPosDistance*steps4OneMM; //кількість кроків для такої дистанції
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <_ZN7RoboArm11Move2MotorsEff+0x280>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fa5e 	bl	8000b00 <__aeabi_i2f>
 8001644:	4603      	mov	r3, r0
 8001646:	6a39      	ldr	r1, [r7, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff faad 	bl	8000ba8 <__aeabi_fmul>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fc6f 	bl	8000f34 <__aeabi_f2uiz>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	66da      	str	r2, [r3, #108]	; 0x6c
//	std::cout<<"Необхідно зробити "<<steps<<" кроків для переміщення в позицію "<<DistNow<<" mm"<<std::endl;

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 30;
 800165c:	231e      	movs	r3, #30
 800165e:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72-1;
 8001660:	2347      	movs	r3, #71	; 0x47
 8001662:	61bb      	str	r3, [r7, #24]

	float delimiter=1;
 8001664:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001668:	617b      	str	r3, [r7, #20]
	float mnoj=1;
 800166a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800166e:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001678:	429a      	cmp	r2, r3
 800167a:	d953      	bls.n	8001724 <_ZN7RoboArm11Move2MotorsEff+0x284>

		htim1M1->Instance->PSC = psc;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1/2;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	0852      	lsrs	r2, r2, #1
 800169a:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fa29 	bl	8000af8 <__aeabi_ui2f>
 80016a6:	4604      	mov	r4, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fa23 	bl	8000af8 <__aeabi_ui2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4619      	mov	r1, r3
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff fb2a 	bl	8000d10 <__aeabi_fdiv>
 80016bc:	4603      	mov	r3, r0
 80016be:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 80016c0:	69f8      	ldr	r0, [r7, #28]
 80016c2:	f7ff fa19 	bl	8000af8 <__aeabi_ui2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	6979      	ldr	r1, [r7, #20]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fa6c 	bl	8000ba8 <__aeabi_fmul>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fe1b 	bl	800130e <_ZSt4ceilf>
 80016d8:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	681c      	ldr	r4, [r3, #0]
 80016ea:	6938      	ldr	r0, [r7, #16]
 80016ec:	f7ff fc22 	bl	8000f34 <__aeabi_f2uiz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 80016f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016f8:	6938      	ldr	r0, [r7, #16]
 80016fa:	f7ff fb09 	bl	8000d10 <__aeabi_fdiv>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	681c      	ldr	r4, [r3, #0]
 8001708:	4610      	mov	r0, r2
 800170a:	f7ff fc13 	bl	8000f34 <__aeabi_f2uiz>
 800170e:	4603      	mov	r3, r0
 8001710:	63a3      	str	r3, [r4, #56]	; 0x38
 8001712:	e058      	b.n	80017c6 <_ZN7RoboArm11Move2MotorsEff+0x326>
 8001714:	40768000 	.word	0x40768000
 8001718:	48480000 	.word	0x48480000
 800171c:	43b40000 	.word	0x43b40000
 8001720:	20000000 	.word	0x20000000

	} else if (anglePsteps < distPsteps) {
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800172c:	429a      	cmp	r2, r3
 800172e:	d24a      	bcs.n	80017c6 <_ZN7RoboArm11Move2MotorsEff+0x326>

		htim2M2->Instance->PSC = psc;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	0852      	lsrs	r2, r2, #1
 800174e:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f9cf 	bl	8000af8 <__aeabi_ui2f>
 800175a:	4604      	mov	r4, r0
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f9c9 	bl	8000af8 <__aeabi_ui2f>
 8001766:	4603      	mov	r3, r0
 8001768:	4619      	mov	r1, r3
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff fad0 	bl	8000d10 <__aeabi_fdiv>
 8001770:	4603      	mov	r3, r0
 8001772:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001774:	69f8      	ldr	r0, [r7, #28]
 8001776:	f7ff f9bf 	bl	8000af8 <__aeabi_ui2f>
 800177a:	4603      	mov	r3, r0
 800177c:	6979      	ldr	r1, [r7, #20]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fa12 	bl	8000ba8 <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fdc1 	bl	800130e <_ZSt4ceilf>
 800178c:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	681c      	ldr	r4, [r3, #0]
 800179e:	6938      	ldr	r0, [r7, #16]
 80017a0:	f7ff fbc8 	bl	8000f34 <__aeabi_f2uiz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017ac:	6938      	ldr	r0, [r7, #16]
 80017ae:	f7ff faaf 	bl	8000d10 <__aeabi_fdiv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	681c      	ldr	r4, [r3, #0]
 80017bc:	4610      	mov	r0, r2
 80017be:	f7ff fbb9 	bl	8000f34 <__aeabi_f2uiz>
 80017c2:	4603      	mov	r3, r0
 80017c4:	6363      	str	r3, [r4, #52]	; 0x34
	}

	stateMoveM1 = true;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	stateMoveM2 = true;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

	SetEnable(1, true);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2101      	movs	r1, #1
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fbb8 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2102      	movs	r1, #2
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fbb3 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fd9d 	bl	8005330 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2104      	movs	r1, #4
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fd97 	bl	8005330 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fcc8 	bl	800519c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4618      	mov	r0, r3
 8001812:	f003 fcc3 	bl	800519c <HAL_TIM_Base_Start_IT>

	return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	373c      	adds	r7, #60	; 0x3c
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}

08001820 <_ZN7RoboArm13SetBuserStateEi>:

int RoboArm::SetBuserState(int State){
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    //State 1......9
    if (State > 0 && State < 10)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dd24      	ble.n	800187a <_ZN7RoboArm13SetBuserStateEi+0x5a>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b09      	cmp	r3, #9
 8001834:	dc21      	bgt.n	800187a <_ZN7RoboArm13SetBuserStateEi+0x5a>
    {
        for (int t = 0; t <= State; t++)
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e01a      	b.n	8001872 <_ZN7RoboArm13SetBuserStateEi+0x52>
        {
            for (int i = 0; i <= 200; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	e00e      	b.n	8001860 <_ZN7RoboArm13SetBuserStateEi+0x40>
            {
                HAL_GPIO_TogglePin(Buser_GPIO_Port_Ind, Buser_Pin_Ind);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f002 fc29 	bl	80040a6 <HAL_GPIO_TogglePin>
                HAL_Delay(1);
 8001854:	2001      	movs	r0, #1
 8001856:	f002 f897 	bl	8003988 <HAL_Delay>
            for (int i = 0; i <= 200; i++)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3301      	adds	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2bc8      	cmp	r3, #200	; 0xc8
 8001864:	dded      	ble.n	8001842 <_ZN7RoboArm13SetBuserStateEi+0x22>
            }
            HAL_Delay(100);
 8001866:	2064      	movs	r0, #100	; 0x64
 8001868:	f002 f88e 	bl	8003988 <HAL_Delay>
        for (int t = 0; t <= State; t++)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	dde0      	ble.n	800183c <_ZN7RoboArm13SetBuserStateEi+0x1c>
        }
    }
    return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZN7RoboArm15GetGripperStateEv>:
	posNowDistance = defaultDistanse;

	return 0;
}

int RoboArm::GetGripperState(){
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	//EndCap1_Pin - зацеп зацеплен - ВЕРХНИЙ НАЖАт
	//EndCap2_Pin - зацеп расцеплен, можно двигать рукой - НИЖНИЙ

	GPIO_PinState pin_UP, pin_DOWN;

	pin_UP = HAL_GPIO_ReadPin(EndCap1_GPIO_PortG, EndCap1_PinG);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001896:	4619      	mov	r1, r3
 8001898:	4610      	mov	r0, r2
 800189a:	f002 fbd5 	bl	8004048 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
	pin_DOWN = HAL_GPIO_ReadPin(EndCap2_GPIO_PortG, EndCap2_PinG);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f002 fbca 	bl	8004048 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73bb      	strb	r3, [r7, #14]

	if(pin_UP == GPIO_PIN_SET && pin_DOWN == GPIO_PIN_RESET) {
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d104      	bne.n	80018c8 <_ZN7RoboArm15GetGripperStateEv+0x44>
 80018be:	7bbb      	ldrb	r3, [r7, #14]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <_ZN7RoboArm15GetGripperStateEv+0x44>
		return 1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e008      	b.n	80018da <_ZN7RoboArm15GetGripperStateEv+0x56>
	} else if(pin_DOWN == GPIO_PIN_SET && pin_UP == GPIO_PIN_RESET) {
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d104      	bne.n	80018d8 <_ZN7RoboArm15GetGripperStateEv+0x54>
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <_ZN7RoboArm15GetGripperStateEv+0x54>
		return 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e000      	b.n	80018da <_ZN7RoboArm15GetGripperStateEv+0x56>
	} else {
		return 3; //error
 80018d8:	2303      	movs	r3, #3
	}

}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>:


int RoboArm::SetSettGripper(GPIO_TypeDef *EndCap1_GPIO_PortT, uint16_t EndCap1_PinT,
			GPIO_TypeDef *EndCap2_GPIO_PortT, uint16_t EndCap2_PinT,
			GPIO_TypeDef *EndCap3_GPIO_PortT, uint16_t EndCap3_PinT,
			GPIO_TypeDef *EndCap4_GPIO_PortT, uint16_t EndCap4_PinT){
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]


	EndCap1_GPIO_PortG=EndCap1_GPIO_PortT;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	645a      	str	r2, [r3, #68]	; 0x44
	EndCap1_PinG=EndCap1_PinT;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	EndCap2_GPIO_PortG=EndCap2_GPIO_PortT;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	64da      	str	r2, [r3, #76]	; 0x4c
	EndCap2_PinG=EndCap2_PinT;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8b3a      	ldrh	r2, [r7, #24]
 800190a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	EndCap3_GPIO_PortG=EndCap3_GPIO_PortT;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
	EndCap3_PinG=EndCap3_PinT;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8c3a      	ldrh	r2, [r7, #32]
 8001918:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	EndCap4_GPIO_PortG=EndCap4_GPIO_PortT;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
	EndCap4_PinG=EndCap4_PinT;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001926:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
	...

08001938 <_ZN7RoboArm10SetGripperEi>:





int RoboArm::SetGripper(int opcl) {
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]

	//Встановити захват
	//TODO додати перевірку чи точно зупинились мотори
	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fd8d 	bl	8005468 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2104      	movs	r1, #4
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fd87 	bl	8005468 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fc68 	bl	8005234 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fc63 	bl	8005234 <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_2);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2104      	movs	r1, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fd77 	bl	8005468 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim3M3);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fc58 	bl	8005234 <HAL_TIM_Base_Stop_IT>

	SetEnable(3, false);
 8001984:	2200      	movs	r2, #0
 8001986:	2103      	movs	r1, #3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fae1 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>

	//Зупинили все, 1 та 2й на утриманні
	//Обираэмо напрям
	if (opcl == 1) {
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <_ZN7RoboArm10SetGripperEi+0x6e>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_SET);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	2201      	movs	r2, #1
 800199e:	4619      	mov	r1, r3
 80019a0:	f002 fb69 	bl	8004076 <HAL_GPIO_WritePin>
 80019a4:	e00a      	b.n	80019bc <_ZN7RoboArm10SetGripperEi+0x84>
	} else if (opcl == 0) {
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <_ZN7RoboArm10SetGripperEi+0x84>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_RESET);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	f002 fb5d 	bl	8004076 <HAL_GPIO_WritePin>
	}

	//Підібрати кроки та швидкість
	float periodM3 = 30.00;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <_ZN7RoboArm10SetGripperEi+0xf0>)
 80019be:	60fb      	str	r3, [r7, #12]
	uint32_t psc3 = 72 - 1;
 80019c0:	2347      	movs	r3, #71	; 0x47
 80019c2:	60bb      	str	r3, [r7, #8]
	htim3M3->Instance->PSC = psc3;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
	htim3M3->Instance->ARR = periodM3;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	681c      	ldr	r4, [r3, #0]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff faad 	bl	8000f34 <__aeabi_f2uiz>
 80019da:	4603      	mov	r3, r0
 80019dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3M3->Instance->CCR2 = periodM3 / 2;
 80019de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff f994 	bl	8000d10 <__aeabi_fdiv>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	681c      	ldr	r4, [r3, #0]
 80019f2:	4610      	mov	r0, r2
 80019f4:	f7ff fa9e 	bl	8000f34 <__aeabi_f2uiz>
 80019f8:	4603      	mov	r3, r0
 80019fa:	63a3      	str	r3, [r4, #56]	; 0x38

	SetEnable(3, true);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2103      	movs	r1, #3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 faa5 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
	HAL_TIM_PWM_Start(htim3M3, TIM_CHANNEL_2);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fc8f 	bl	8005330 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim3M3);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fbc0 	bl	800519c <HAL_TIM_Base_Start_IT>
	return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd90      	pop	{r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	41f00000 	.word	0x41f00000

08001a2c <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::setPrintState(bool state) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 8001a46:	e003      	b.n	8001a50 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	}
	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 8001a72:	2300      	movs	r3, #0
	}
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <_ZN7RoboArm17SetMicrosteps4AllEh>:


int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step){
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	33c8      	adds	r3, #200	; 0xc8
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fb16 	bl	80020c4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	33f0      	adds	r3, #240	; 0xf0
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fb0f 	bl	80020c4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	33a0      	adds	r3, #160	; 0xa0
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fb08 	bl	80020c4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8bba      	ldrh	r2, [r7, #28]
 8001ae8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	ResolutionEncoders = ResolutionEncodersT;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff fb15 	bl	8001150 <calculateAngle>
 8001b26:	4603      	mov	r3, r0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_ZN7RoboArm14GetPosEncodersEh>:
	}
	pos = ang * distMax / 360.0;
	return pos;
}

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d002      	beq.n	8001b48 <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d017      	beq.n	8001b76 <_ZN7RoboArm14GetPosEncodersEh+0x46>
 8001b46:	e02d      	b.n	8001ba4 <_ZN7RoboArm14GetPosEncodersEh+0x74>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001b60:	f7ff fa46 	bl	8000ff0 <getPositionSPI>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				ResolutionEncoders);
		return posNowEnc1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b74:	e017      	b.n	8001ba6 <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001b8e:	f7ff fa2f 	bl	8000ff0 <getPositionSPI>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				ResolutionEncoders);
		return posNowEnc2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ba2:	e000      	b.n	8001ba6 <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	default:
		return 1;
 8001ba4:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <_ZN7RoboArm6GetLinEv>:

float RoboArm::GetLin() {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffb6 	bl	8001b30 <_ZN7RoboArm14GetPosEncodersEh>
 8001bc4:	61b8      	str	r0, [r7, #24]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001bc6:	e004      	b.n	8001bd2 <_ZN7RoboArm6GetLinEv+0x22>
		posnowT_2 = GetPosEncoders(2); //try again
 8001bc8:	2102      	movs	r1, #2
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffb0 	bl	8001b30 <_ZN7RoboArm14GetPosEncodersEh>
 8001bd0:	61b8      	str	r0, [r7, #24]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d107      	bne.n	8001bec <_ZN7RoboArm6GetLinEv+0x3c>
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	3301      	adds	r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	dc01      	bgt.n	8001bec <_ZN7RoboArm6GetLinEv+0x3c>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <_ZN7RoboArm6GetLinEv+0x3e>
 8001bec:	2300      	movs	r3, #0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ea      	bne.n	8001bc8 <_ZN7RoboArm6GetLinEv+0x18>

//	float ang_pos = GetAngleEncoders(posnowT_2);
//	float pos_actual = GetLinEncoders(ang_pos);
//	float pos = pos_actual + defaultDistanse;

	float angleEncoder = (posnowT_2 * 360.0 ) / 16384;  //кут енкодера
 8001bf2:	69b8      	ldr	r0, [r7, #24]
 8001bf4:	f7fe fbee 	bl	80003d4 <__aeabi_ui2d>
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <_ZN7RoboArm6GetLinEv+0x148>)
 8001bfe:	f7fe fc63 	bl	80004c8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <_ZN7RoboArm6GetLinEv+0x14c>)
 8001c10:	f7fe fd84 	bl	800071c <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe fe66 	bl	80008ec <__aeabi_d2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	617b      	str	r3, [r7, #20]
	if (inverseLinZero){
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <_ZN7RoboArm6GetLinEv+0x90>
		angleEncoder = abs(360-angleEncoder);
 8001c2e:	6979      	ldr	r1, [r7, #20]
 8001c30:	4833      	ldr	r0, [pc, #204]	; (8001d00 <_ZN7RoboArm6GetLinEv+0x150>)
 8001c32:	f7fe feaf 	bl	8000994 <__aeabi_fsub>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fb5c 	bl	80012f6 <_ZSt3absf>
 8001c3e:	6178      	str	r0, [r7, #20]
	}

	float distPsteps = (angleEncoder * 6.4516129 * 200 * 128) / 360;  //Кроки із кута
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f7fe fbe9 	bl	8000418 <__aeabi_f2d>
 8001c46:	a32a      	add	r3, pc, #168	; (adr r3, 8001cf0 <_ZN7RoboArm6GetLinEv+0x140>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fc3c 	bl	80004c8 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <_ZN7RoboArm6GetLinEv+0x154>)
 8001c5e:	f7fe fc33 	bl	80004c8 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <_ZN7RoboArm6GetLinEv+0x158>)
 8001c70:	f7fe fc2a 	bl	80004c8 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <_ZN7RoboArm6GetLinEv+0x148>)
 8001c82:	f7fe fd4b 	bl	800071c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe fe2d 	bl	80008ec <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	60fb      	str	r3, [r7, #12]
//	std::cout<<"== Поточна дистанція по енкодеру: "<<distPsteps/steps4OneMM<<" mm"<<std::endl; //поточна дистанція по енкодеру

	float pos = distPsteps/steps4OneMM + defaultDistanse;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <_ZN7RoboArm6GetLinEv+0x15c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe ff30 	bl	8000b00 <__aeabi_i2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff f833 	bl	8000d10 <__aeabi_fdiv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f7fe fe6e 	bl	8000998 <__addsf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	613b      	str	r3, [r7, #16]

	if (pos > distMax)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	6938      	ldr	r0, [r7, #16]
 8001cc8:	f7ff f92a 	bl	8000f20 <__aeabi_fcmpgt>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN7RoboArm6GetLinEv+0x132>
		pos -= distMax;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6938      	ldr	r0, [r7, #16]
 8001cda:	f7fe fe5b 	bl	8000994 <__aeabi_fsub>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	613b      	str	r3, [r7, #16]

	return pos;
 8001ce2:	693b      	ldr	r3, [r7, #16]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	f3af 8000 	nop.w
 8001cf0:	9cafce8f 	.word	0x9cafce8f
 8001cf4:	4019ce73 	.word	0x4019ce73
 8001cf8:	40768000 	.word	0x40768000
 8001cfc:	40d00000 	.word	0x40d00000
 8001d00:	43b40000 	.word	0x43b40000
 8001d04:	40690000 	.word	0x40690000
 8001d08:	40600000 	.word	0x40600000
 8001d0c:	20000000 	.word	0x20000000

08001d10 <_ZN7RoboArm6GetAngEv>:

float RoboArm::GetAng() {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ff06 	bl	8001b30 <_ZN7RoboArm14GetPosEncodersEh>
 8001d24:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 8001d26:	e004      	b.n	8001d32 <_ZN7RoboArm6GetAngEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001d28:	2101      	movs	r1, #1
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ff00 	bl	8001b30 <_ZN7RoboArm14GetPosEncodersEh>
 8001d30:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d107      	bne.n	8001d4c <_ZN7RoboArm6GetAngEv+0x3c>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	dc01      	bgt.n	8001d4c <_ZN7RoboArm6GetAngEv+0x3c>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <_ZN7RoboArm6GetAngEv+0x3e>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ea      	bne.n	8001d28 <_ZN7RoboArm6GetAngEv+0x18>

//	if (posnowT_1 == 0xFFFF) {
//			return -1;
//	}

	float ang_actual = GetAngleEncoders(posnowT_1);
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fed8 	bl	8001b0a <_ZN7RoboArm16GetAngleEncodersEm>
 8001d5a:	60b8      	str	r0, [r7, #8]
	float ang = ang_actual + defaultAngle;//arm.ShiftZeroAng(ang_actual);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001d62:	4619      	mov	r1, r3
 8001d64:	68b8      	ldr	r0, [r7, #8]
 8001d66:	f7fe fe17 	bl	8000998 <__addsf3>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	60fb      	str	r3, [r7, #12]
	if (ang > 360.0)
 8001d6e:	4909      	ldr	r1, [pc, #36]	; (8001d94 <_ZN7RoboArm6GetAngEv+0x84>)
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff f8d5 	bl	8000f20 <__aeabi_fcmpgt>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <_ZN7RoboArm6GetAngEv+0x78>
			ang -= 360.0;
 8001d7c:	4905      	ldr	r1, [pc, #20]	; (8001d94 <_ZN7RoboArm6GetAngEv+0x84>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7fe fe08 	bl	8000994 <__aeabi_fsub>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
	return ang;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	43b40000 	.word	0x43b40000

08001d98 <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	HAL_Delay(300);
 8001da0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001da4:	f001 fdf0 	bl	8003988 <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001dc0:	f7ff f916 	bl	8000ff0 <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001ddc:	f7ff f908 	bl	8000ff0 <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001df2:	461a      	mov	r2, r3
 8001df4:	f7ff f98a 	bl	800110c <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f7ff f97e 	bl	800110c <setZeroSPI>
	HAL_Delay(250);
 8001e10:	20fa      	movs	r0, #250	; 0xfa
 8001e12:	f001 fdb9 	bl	8003988 <HAL_Delay>
	return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>:
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *Dir3_GPIO_Port_M3T, uint16_t Dir3_Pin_M3T,
		GPIO_TypeDef *En1_GPIO_Port_M1T, uint16_t En1_Pin_M1T,
		GPIO_TypeDef *En2_GPIO_Port_M2T, uint16_t En2_Pin_M2T,
		GPIO_TypeDef *En3_GPIO_Port_M3T, uint16_t En3_Pin_M3T,
		GPIO_TypeDef *Buser_GPIO_Port_IndT, uint16_t Buser_Pin_IndT){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	609a      	str	r2, [r3, #8]
	htim3M3 = &htim3;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	60da      	str	r2, [r3, #12]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	615a      	str	r2, [r3, #20]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8c3a      	ldrh	r2, [r7, #32]
 8001e4a:	831a      	strh	r2, [r3, #24]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	61da      	str	r2, [r3, #28]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e56:	841a      	strh	r2, [r3, #32]
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001e62:	851a      	strh	r2, [r3, #40]	; 0x28

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
	En1_Pin_M1 = En1_Pin_M1T;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001e6e:	861a      	strh	r2, [r3, #48]	; 0x30
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
	En2_Pin_M2 = En2_Pin_M2T;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001e7c:	871a      	strh	r2, [r3, #56]	; 0x38
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c
	En3_Pin_M3 = En3_Pin_M3T;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e92:	63da      	str	r2, [r3, #60]	; 0x3c
	En3_Pin_M3 = En3_Pin_M3T;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001e9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	Buser_GPIO_Port_Ind = Buser_GPIO_Port_IndT;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ea2:	665a      	str	r2, [r3, #100]	; 0x64
	Buser_Pin_Ind = Buser_Pin_IndT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	SetEnable(1, true);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f84c 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2102      	movs	r1, #2
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f847 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f842 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	f000 f88e 	bl	8001ffa <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_2);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	f000 f885 	bl	8001ffa <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_1);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	f000 f87c 	bl	8001ffa <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	33c8      	adds	r3, #200	; 0xc8
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f88c 	bl	8002024 <_ZN7TMC22096enableEv>

//	tmcd_angle.disableAutomaticCurrentScaling();
//	tmcd_angle.disableAutomaticGradientAdaptation();

	tmcd_gripper.enable();
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	33f0      	adds	r3, #240	; 0xf0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f887 	bl	8002024 <_ZN7TMC22096enableEv>

//	tmcd_gripper.disableAutomaticCurrentScaling();
//	tmcd_gripper.disableAutomaticGradientAdaptation();

	tmcd_linear.enable();
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	33a0      	adds	r3, #160	; 0xa0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f882 	bl	8002024 <_ZN7TMC22096enableEv>

//	tmcd_linear.disableAutomaticCurrentScaling();
//	tmcd_linear.disableAutomaticGradientAdaptation();

	SetMicrosteps4All(7);
 8001f20:	2107      	movs	r1, #7
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff fdab 	bl	8001a7e <_ZN7RoboArm17SetMicrosteps4AllEh>
//	SetMicrosteps4All(4);



	SetEnable(1, false);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f80f 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2102      	movs	r1, #2
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f80a 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, false);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2103      	movs	r1, #3
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f805 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>

	return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e001      	b.n	8001f70 <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f002 f878 	bl	8004076 <HAL_GPIO_WritePin>
 8001f86:	e017      	b.n	8001fb8 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 2) {
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d108      	bne.n	8001fa0 <_ZN7RoboArm9SetEnableEtb+0x50>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f002 f86c 	bl	8004076 <HAL_GPIO_WritePin>
 8001f9e:	e00b      	b.n	8001fb8 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 3) {
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d108      	bne.n	8001fb8 <_ZN7RoboArm9SetEnableEtb+0x68>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f002 f85f 	bl	8004076 <HAL_GPIO_WritePin>
	}

	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd8:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe6:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	761a      	strb	r2, [r3, #24]
}
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	461a      	mov	r2, r3
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f8f4 	bl	8002202 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <_ZN7TMC22096enableEv>:
//
////  pinMode(hardware_enable_pin_, OUTPUT);
////  digitalWrite(hardware_enable_pin_, HIGH);
//}
//
void TMC2209::enable() {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0f      	blt.n	8002056 <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	2120      	movs	r1, #32
 800203a:	4810      	ldr	r0, [pc, #64]	; (800207c <_ZN7TMC22096enableEv+0x58>)
 800203c:	f002 f81b 	bl	8004076 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	2101      	movs	r1, #1
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <_ZN7TMC22096enableEv+0x58>)
 8002046:	f002 f816 	bl	8004076 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002050:	480b      	ldr	r0, [pc, #44]	; (8002080 <_ZN7TMC22096enableEv+0x5c>)
 8002052:	f002 f810 	bl	8004076 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	b2d9      	uxtb	r1, r3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	7f13      	ldrb	r3, [r2, #28]
 8002066:	f361 0303 	bfi	r3, r1, #0, #4
 800206a:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fa60 	bl	8002532 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00

08002084 <_ZN7TMC22099constrainEttt>:
	}
	chopper_config_.toff = TOFF_DISABLE;
	writeStoredChopperConfig();
}
//
uint16_t TMC2209::constrain(uint16_t x, uint16_t y, uint16_t z) {
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	817b      	strh	r3, [r7, #10]
 8002096:	460b      	mov	r3, r1
 8002098:	813b      	strh	r3, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
	if (x < y) {
 800209e:	897a      	ldrh	r2, [r7, #10]
 80020a0:	893b      	ldrh	r3, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d201      	bcs.n	80020aa <_ZN7TMC22099constrainEttt+0x26>
		return y;
 80020a6:	893b      	ldrh	r3, [r7, #8]
 80020a8:	e006      	b.n	80020b8 <_ZN7TMC22099constrainEttt+0x34>
	} else if (x > z) {
 80020aa:	897a      	ldrh	r2, [r7, #10]
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d901      	bls.n	80020b6 <_ZN7TMC22099constrainEttt+0x32>
		return z;
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	e000      	b.n	80020b8 <_ZN7TMC22099constrainEttt+0x34>
	} else {
		return x;
 80020b6:	897b      	ldrh	r3, [r7, #10]
	}
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
	...

080020c4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
//		++exponent;
//	}
//	setMicrostepsPerStepPowerOfTwo(exponent);
//}
//
void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	d84a      	bhi.n	800216c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020fd 	.word	0x080020fd
 80020e0:	0800210b 	.word	0x0800210b
 80020e4:	08002119 	.word	0x08002119
 80020e8:	08002127 	.word	0x08002127
 80020ec:	08002135 	.word	0x08002135
 80020f0:	08002143 	.word	0x08002143
 80020f4:	08002151 	.word	0x08002151
 80020f8:	0800215f 	.word	0x0800215f
	case 0: {
		chopper_config_.mres = MRES_001;
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	7fd3      	ldrb	r3, [r2, #31]
 8002100:	2108      	movs	r1, #8
 8002102:	f361 0303 	bfi	r3, r1, #0, #4
 8002106:	77d3      	strb	r3, [r2, #31]
		break;
 8002108:	e036      	b.n	8002178 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	7fd3      	ldrb	r3, [r2, #31]
 800210e:	2107      	movs	r1, #7
 8002110:	f361 0303 	bfi	r3, r1, #0, #4
 8002114:	77d3      	strb	r3, [r2, #31]
		break;
 8002116:	e02f      	b.n	8002178 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	7fd3      	ldrb	r3, [r2, #31]
 800211c:	2106      	movs	r1, #6
 800211e:	f361 0303 	bfi	r3, r1, #0, #4
 8002122:	77d3      	strb	r3, [r2, #31]
		break;
 8002124:	e028      	b.n	8002178 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	7fd3      	ldrb	r3, [r2, #31]
 800212a:	2105      	movs	r1, #5
 800212c:	f361 0303 	bfi	r3, r1, #0, #4
 8002130:	77d3      	strb	r3, [r2, #31]
		break;
 8002132:	e021      	b.n	8002178 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	7fd3      	ldrb	r3, [r2, #31]
 8002138:	2104      	movs	r1, #4
 800213a:	f361 0303 	bfi	r3, r1, #0, #4
 800213e:	77d3      	strb	r3, [r2, #31]
		break;
 8002140:	e01a      	b.n	8002178 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	7fd3      	ldrb	r3, [r2, #31]
 8002146:	2103      	movs	r1, #3
 8002148:	f361 0303 	bfi	r3, r1, #0, #4
 800214c:	77d3      	strb	r3, [r2, #31]
		break;
 800214e:	e013      	b.n	8002178 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	7fd3      	ldrb	r3, [r2, #31]
 8002154:	2102      	movs	r1, #2
 8002156:	f361 0303 	bfi	r3, r1, #0, #4
 800215a:	77d3      	strb	r3, [r2, #31]
		break;
 800215c:	e00c      	b.n	8002178 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	7fd3      	ldrb	r3, [r2, #31]
 8002162:	2101      	movs	r1, #1
 8002164:	f361 0303 	bfi	r3, r1, #0, #4
 8002168:	77d3      	strb	r3, [r2, #31]
		break;
 800216a:	e005      	b.n	8002178 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	7fd3      	ldrb	r3, [r2, #31]
 8002170:	f36f 0303 	bfc	r3, #0, #4
 8002174:	77d3      	strb	r3, [r2, #31]
		break;
 8002176:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f9da 	bl	8002532 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop

08002188 <_ZN7TMC220913setRunCurrentEh>:

void TMC2209::setRunCurrent(uint8_t percent) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
	uint8_t run_current = percentToCurrentSetting(percent);
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f953 	bl	8002444 <_ZN7TMC220923percentToCurrentSettingEh>
 800219e:	4603      	mov	r3, r0
 80021a0:	73fb      	strb	r3, [r7, #15]
	driver_current_.irun = run_current;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	b2d9      	uxtb	r1, r3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	7c53      	ldrb	r3, [r2, #17]
 80021ae:	f361 0304 	bfi	r3, r1, #0, #5
 80021b2:	7453      	strb	r3, [r2, #17]
	writeStoredDriverCurrent();
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f997 	bl	80024e8 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_ZN7TMC220927enableInverseMotorDirectionEv>:
//	driver_current_.ihold = hold_current;
//	driver_current_.iholddelay = hold_delay;
//	writeStoredDriverCurrent();
//}
//
void TMC2209::enableInverseMotorDirection() {
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	7b13      	ldrb	r3, [r2, #12]
 80021ce:	f043 0308 	orr.w	r3, r3, #8
 80021d2:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f978 	bl	80024ca <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	7b13      	ldrb	r3, [r2, #12]
 80021ee:	f36f 03c3 	bfc	r3, #3, #1
 80021f2:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f968 	bl	80024ca <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
//	return read(ADDRESS_MSCNT);
//}
//
//// private
///* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	4613      	mov	r3, r2
 800220e:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4619      	mov	r1, r3
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f80b 	bl	8002236 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f82f 	bl	8002284 <_ZN7TMC220922setRegistersToDefaultsEv>

	//minimizeMotorCurrent();
	setRunCurrent(80);
 8002226:	2150      	movs	r1, #80	; 0x50
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff ffad 	bl	8002188 <_ZN7TMC220913setRunCurrentEh>
//	disable();
//	disableAutomaticCurrentScaling();
//	disableAutomaticGradientAdaptation();
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:
//
////	  tmcuart->RxXferCount = 0;
//
//}
//
void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	7b13      	ldrb	r3, [r2, #12]
 8002252:	f36f 0300 	bfc	r3, #0, #1
 8002256:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	7b13      	ldrb	r3, [r2, #12]
 800225c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002260:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	7b13      	ldrb	r3, [r2, #12]
 8002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226a:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	7b53      	ldrb	r3, [r2, #13]
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f927 	bl	80024ca <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	7c13      	ldrb	r3, [r2, #16]
 8002296:	2110      	movs	r1, #16
 8002298:	f361 0304 	bfi	r3, r1, #0, #5
 800229c:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	7c53      	ldrb	r3, [r2, #17]
 80022a2:	f043 031f 	orr.w	r3, r3, #31
 80022a6:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	7c93      	ldrb	r3, [r2, #18]
 80022ac:	2101      	movs	r1, #1
 80022ae:	f361 0303 	bfi	r3, r1, #0, #4
 80022b2:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	461a      	mov	r2, r3
 80022ba:	2110      	movs	r1, #16
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f885 	bl	80023cc <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2a      	ldr	r2, [pc, #168]	; (8002370 <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 80022c6:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	69d3      	ldr	r3, [r2, #28]
 80022cc:	2102      	movs	r1, #2
 80022ce:	f361 33d0 	bfi	r3, r1, #15, #2
 80022d2:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	8b93      	ldrh	r3, [r2, #28]
 80022d8:	f36f 13ca 	bfc	r3, #7, #4
 80022dc:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	7f13      	ldrb	r3, [r2, #28]
 80022e2:	2105      	movs	r1, #5
 80022e4:	f361 1306 	bfi	r3, r1, #4, #3
 80022e8:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	7f13      	ldrb	r3, [r2, #28]
 80022ee:	2103      	movs	r1, #3
 80022f0:	f361 0303 	bfi	r3, r1, #0, #4
 80022f4:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	461a      	mov	r2, r3
 80022fc:	216c      	movs	r1, #108	; 0x6c
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f864 	bl	80023cc <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	461a      	mov	r2, r3
 8002310:	2170      	movs	r1, #112	; 0x70
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f85a 	bl	80023cc <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	461a      	mov	r2, r3
 8002324:	2142      	movs	r1, #66	; 0x42
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f850 	bl	80023cc <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 800232c:	2214      	movs	r2, #20
 800232e:	2111      	movs	r1, #17
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f84b 	bl	80023cc <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002336:	2200      	movs	r2, #0
 8002338:	2113      	movs	r1, #19
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f846 	bl	80023cc <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002340:	2200      	movs	r2, #0
 8002342:	2122      	movs	r1, #34	; 0x22
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f841 	bl	80023cc <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 800234a:	2200      	movs	r2, #0
 800234c:	2114      	movs	r1, #20
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f83c 	bl	80023cc <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002354:	2200      	movs	r2, #0
 8002356:	2140      	movs	r1, #64	; 0x40
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f837 	bl	80023cc <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 800235e:	2200      	movs	r2, #0
 8002360:	2142      	movs	r1, #66	; 0x42
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f832 	bl	80023cc <_ZN7TMC22095writeEhm>
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	10000053 	.word	0x10000053
 8002374:	c10d0024 	.word	0xc10d0024

08002378 <_ZN7TMC220911reverseDataEm>:
//	driver_current_.irun = CURRENT_SETTING_MIN;
//	driver_current_.ihold = CURRENT_SETTING_MIN;
//	writeStoredDriverCurrent();
//}
//
uint32_t TMC2209::reverseData(uint32_t data) {
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002386:	2300      	movs	r3, #0
 8002388:	72fb      	strb	r3, [r7, #11]
 800238a:	e016      	b.n	80023ba <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	f1c3 0303 	rsb	r3, r3, #3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800239e:	7abb      	ldrb	r3, [r7, #10]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	7a7b      	ldrb	r3, [r7, #9]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80023b4:	7afb      	ldrb	r3, [r7, #11]
 80023b6:	3301      	adds	r3, #1
 80023b8:	72fb      	strb	r3, [r7, #11]
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d9e5      	bls.n	800238c <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 80023c0:	68fb      	ldr	r3, [r7, #12]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <_ZN7TMC22095writeEhm>:
//	for (uint8_t i = 0; i < datagram_size; ++i) {
//		byte = serialRead();
//	}*/
//}
//
void TMC2209::write(uint8_t register_address, uint32_t data) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	460b      	mov	r3, r1
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 80023e6:	7c3b      	ldrb	r3, [r7, #16]
 80023e8:	2205      	movs	r2, #5
 80023ea:	f362 0303 	bfi	r3, r2, #0, #4
 80023ee:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	791b      	ldrb	r3, [r3, #4]
 80023f4:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	7cbb      	ldrb	r3, [r7, #18]
 8002400:	f362 0306 	bfi	r3, r2, #0, #7
 8002404:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002406:	7cbb      	ldrb	r3, [r7, #18]
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff ffb1 	bl	8002378 <_ZN7TMC220911reverseDataEm>
 8002416:	4603      	mov	r3, r0
 8002418:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2208      	movs	r2, #8
 8002422:	4619      	mov	r1, r3
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f893 	bl	8002550 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 800242a:	4603      	mov	r3, r0
 800242c:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	2208      	movs	r2, #8
 8002434:	4619      	mov	r1, r3
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f8d9 	bl	80025ee <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 800243c:	bf00      	nop
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_ZN7TMC220923percentToCurrentSettingEh>:
//	}
//
//	return reverseData(read_reply_datagram.data);
//}
//
uint8_t TMC2209::percentToCurrentSetting(uint8_t percent) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af02      	add	r7, sp, #8
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
	uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	b299      	uxth	r1, r3
 8002454:	2364      	movs	r3, #100	; 0x64
 8002456:	2200      	movs	r2, #0
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fe13 	bl	8002084 <_ZN7TMC22099constrainEttt>
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
	uint8_t current_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX,
 8002462:	7bf9      	ldrb	r1, [r7, #15]
 8002464:	231f      	movs	r3, #31
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2300      	movs	r3, #0
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2364      	movs	r3, #100	; 0x64
 800246e:	2200      	movs	r2, #0
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f807 	bl	8002484 <_ZN7TMC22093mapEhhhhh>
 8002476:	4603      	mov	r3, r0
 8002478:	73bb      	strb	r3, [r7, #14]
			CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
	return current_setting;
 800247a:	7bbb      	ldrb	r3, [r7, #14]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <_ZN7TMC22093mapEhhhhh>:
//	uint8_t percent = map(current_setting, CURRENT_SETTING_MIN,
//			CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
uint8_t TMC2209::map(uint8_t x, uint8_t in_min,  uint8_t in_max, uint8_t out_min, uint8_t out_max){
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4603      	mov	r3, r0
 8002494:	70fb      	strb	r3, [r7, #3]
 8002496:	460b      	mov	r3, r1
 8002498:	70bb      	strb	r3, [r7, #2]
 800249a:	4613      	mov	r3, r2
 800249c:	707b      	strb	r3, [r7, #1]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	78bb      	ldrb	r3, [r7, #2]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	7d39      	ldrb	r1, [r7, #20]
 80024a6:	7c3a      	ldrb	r2, [r7, #16]
 80024a8:	1a8a      	subs	r2, r1, r2
 80024aa:	fb03 f202 	mul.w	r2, r3, r2
 80024ae:	7879      	ldrb	r1, [r7, #1]
 80024b0:	78bb      	ldrb	r3, [r7, #2]
 80024b2:	1acb      	subs	r3, r1, r3
 80024b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	7c3b      	ldrb	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	b2db      	uxtb	r3, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <_ZN7TMC220923writeStoredGlobalConfigEv>:
//uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
//	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
void TMC2209::writeStoredGlobalConfig() {
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	461a      	mov	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff76 	bl	80023cc <_ZN7TMC22095writeEhm>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_ZN7TMC220924writeStoredDriverCurrentEv>:
//
//uint32_t TMC2209::readGlobalConfigBytes() {
//	return read(ADDRESS_GCONF);
//}
//
void TMC2209::writeStoredDriverCurrent() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7c5b      	ldrb	r3, [r3, #17]
 80024f4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b13      	cmp	r3, #19
 80024fc:	d905      	bls.n	800250a <_ZN7TMC220924writeStoredDriverCurrentEv+0x22>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	7d53      	ldrb	r3, [r2, #21]
 8002502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002506:	7553      	strb	r3, [r2, #21]
 8002508:	e004      	b.n	8002514 <_ZN7TMC220924writeStoredDriverCurrentEv+0x2c>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	7d53      	ldrb	r3, [r2, #21]
 800250e:	f36f 13c7 	bfc	r3, #7, #1
 8002512:	7553      	strb	r3, [r2, #21]
	}
	if (cool_step_enabled_) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7e1b      	ldrb	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <_ZN7TMC220924writeStoredDriverCurrentEv+0x42>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	461a      	mov	r2, r3
 8002522:	2142      	movs	r1, #66	; 0x42
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff51 	bl	80023cc <_ZN7TMC22095writeEhm>
	}
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZN7TMC220924writeStoredChopperConfigEv>:
//
void TMC2209::writeStoredChopperConfig() {
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	461a      	mov	r2, r3
 8002540:	216c      	movs	r1, #108	; 0x6c
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ff42 	bl	80023cc <_ZN7TMC22095writeEhm>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 8002550:	b4f0      	push	{r4, r5, r6, r7}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	4613      	mov	r3, r2
 800255c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002562:	2300      	movs	r3, #0
 8002564:	757b      	strb	r3, [r7, #21]
 8002566:	e037      	b.n	80025d8 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	7d79      	ldrb	r1, [r7, #21]
 8002570:	00c9      	lsls	r1, r1, #3
 8002572:	f1c1 0620 	rsb	r6, r1, #32
 8002576:	f1a1 0020 	sub.w	r0, r1, #32
 800257a:	fa22 f401 	lsr.w	r4, r2, r1
 800257e:	fa03 f606 	lsl.w	r6, r3, r6
 8002582:	4334      	orrs	r4, r6
 8002584:	fa23 f000 	lsr.w	r0, r3, r0
 8002588:	4304      	orrs	r4, r0
 800258a:	fa23 f501 	lsr.w	r5, r3, r1
 800258e:	4623      	mov	r3, r4
 8002590:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002592:	2300      	movs	r3, #0
 8002594:	753b      	strb	r3, [r7, #20]
 8002596:	e019      	b.n	80025cc <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	09db      	lsrs	r3, r3, #7
 800259c:	b2da      	uxtb	r2, r3
 800259e:	7dbb      	ldrb	r3, [r7, #22]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d007      	beq.n	80025ba <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	f083 0307 	eor.w	r3, r3, #7
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	75fb      	strb	r3, [r7, #23]
 80025b8:	e002      	b.n	80025c0 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 80025c0:	7dbb      	ldrb	r3, [r7, #22]
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 80025c6:	7d3b      	ldrb	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	753b      	strb	r3, [r7, #20]
 80025cc:	7d3b      	ldrb	r3, [r7, #20]
 80025ce:	2b07      	cmp	r3, #7
 80025d0:	d9e2      	bls.n	8002598 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80025d2:	7d7b      	ldrb	r3, [r7, #21]
 80025d4:	3301      	adds	r3, #1
 80025d6:	757b      	strb	r3, [r7, #21]
 80025d8:	7d7a      	ldrb	r2, [r7, #21]
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	3b01      	subs	r3, #1
 80025de:	429a      	cmp	r2, r3
 80025e0:	dbc2      	blt.n	8002568 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bcf0      	pop	{r4, r5, r6, r7}
 80025ec:	4770      	bx	lr

080025ee <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4618      	mov	r0, r3
 8002602:	f004 f839 	bl	8006678 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6898      	ldr	r0, [r3, #8]
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	b29a      	uxth	r2, r3
 800260e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	f003 fce1 	bl	8005fda <HAL_UART_Transmit>
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b094      	sub	sp, #80	; 0x50
 8002624:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002626:	f001 f94d 	bl	80038c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800262a:	f000 f9ab 	bl	8002984 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800262e:	f000 fbfb 	bl	8002e28 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8002632:	f000 fb9d 	bl	8002d70 <_ZL19MX_USART1_UART_Initv>
	MX_TIM1_Init();
 8002636:	f000 fa33 	bl	8002aa0 <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 800263a:	f000 fac9 	bl	8002bd0 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 800263e:	f000 fb2f 	bl	8002ca0 <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 8002642:	f000 fbc3 	bl	8002dcc <_ZL19MX_USART2_UART_Initv>
	MX_SPI1_Init();
 8002646:	f000 f9ef 	bl	8002a28 <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim1);
 800264a:	487a      	ldr	r0, [pc, #488]	; (8002834 <main+0x214>)
 800264c:	f002 fd4e 	bl	80050ec <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 8002650:	4879      	ldr	r0, [pc, #484]	; (8002838 <main+0x218>)
 8002652:	f002 fd4b 	bl	80050ec <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2, htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 8002656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265a:	930e      	str	r3, [sp, #56]	; 0x38
 800265c:	4b77      	ldr	r3, [pc, #476]	; (800283c <main+0x21c>)
 800265e:	930d      	str	r3, [sp, #52]	; 0x34
 8002660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002664:	930c      	str	r3, [sp, #48]	; 0x30
 8002666:	4b76      	ldr	r3, [pc, #472]	; (8002840 <main+0x220>)
 8002668:	930b      	str	r3, [sp, #44]	; 0x2c
 800266a:	2301      	movs	r3, #1
 800266c:	930a      	str	r3, [sp, #40]	; 0x28
 800266e:	4b73      	ldr	r3, [pc, #460]	; (800283c <main+0x21c>)
 8002670:	9309      	str	r3, [sp, #36]	; 0x24
 8002672:	2320      	movs	r3, #32
 8002674:	9308      	str	r3, [sp, #32]
 8002676:	4b71      	ldr	r3, [pc, #452]	; (800283c <main+0x21c>)
 8002678:	9307      	str	r3, [sp, #28]
 800267a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800267e:	9306      	str	r3, [sp, #24]
 8002680:	4b6f      	ldr	r3, [pc, #444]	; (8002840 <main+0x220>)
 8002682:	9305      	str	r3, [sp, #20]
 8002684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002688:	9304      	str	r3, [sp, #16]
 800268a:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <main+0x220>)
 800268c:	9303      	str	r3, [sp, #12]
 800268e:	2340      	movs	r3, #64	; 0x40
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	4b6a      	ldr	r3, [pc, #424]	; (800283c <main+0x21c>)
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <main+0x224>)
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <main+0x218>)
 800269c:	4a65      	ldr	r2, [pc, #404]	; (8002834 <main+0x214>)
 800269e:	496a      	ldr	r1, [pc, #424]	; (8002848 <main+0x228>)
 80026a0:	486a      	ldr	r0, [pc, #424]	; (800284c <main+0x22c>)
 80026a2:	f7ff fbbd 	bl	8001e20 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>
	Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
	En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin,
	Buser_GPIO_Port, Buser_Pin);
	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 80026a6:	230e      	movs	r3, #14
 80026a8:	9302      	str	r3, [sp, #8]
 80026aa:	2302      	movs	r3, #2
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	4b64      	ldr	r3, [pc, #400]	; (8002840 <main+0x220>)
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2301      	movs	r3, #1
 80026b4:	4a62      	ldr	r2, [pc, #392]	; (8002840 <main+0x220>)
 80026b6:	4966      	ldr	r1, [pc, #408]	; (8002850 <main+0x230>)
 80026b8:	4864      	ldr	r0, [pc, #400]	; (800284c <main+0x22c>)
 80026ba:	f7ff fa00 	bl	8001abe <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
			14);

	//Додано функція
	arm.SetSettGripper(EndCap1_GPIO_Port, EndCap1_Pin, EndCap2_GPIO_Port,
 80026be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026c2:	9304      	str	r3, [sp, #16]
 80026c4:	4b5d      	ldr	r3, [pc, #372]	; (800283c <main+0x21c>)
 80026c6:	9303      	str	r3, [sp, #12]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	9302      	str	r3, [sp, #8]
 80026cc:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <main+0x220>)
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4b5a      	ldr	r3, [pc, #360]	; (8002840 <main+0x220>)
 80026d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026dc:	4958      	ldr	r1, [pc, #352]	; (8002840 <main+0x220>)
 80026de:	485b      	ldr	r0, [pc, #364]	; (800284c <main+0x22c>)
 80026e0:	f7ff f8ff 	bl	80018e2 <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT (&huart1, str, 1);
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80026e4:	220c      	movs	r2, #12
 80026e6:	495b      	ldr	r1, [pc, #364]	; (8002854 <main+0x234>)
 80026e8:	485b      	ldr	r0, [pc, #364]	; (8002858 <main+0x238>)
 80026ea:	f003 fcf9 	bl	80060e0 <HAL_UART_Receive_IT>
	arm.setPrintState(true);
 80026ee:	2101      	movs	r1, #1
 80026f0:	4856      	ldr	r0, [pc, #344]	; (800284c <main+0x22c>)
 80026f2:	f7ff f99b 	bl	8001a2c <_ZN7RoboArm13setPrintStateEb>

	//arm.SetBuserState(8);
	arm.SetBuserState(4);
 80026f6:	2104      	movs	r1, #4
 80026f8:	4854      	ldr	r0, [pc, #336]	; (800284c <main+0x22c>)
 80026fa:	f7ff f891 	bl	8001820 <_ZN7RoboArm13SetBuserStateEi>

	arm.State = arm.ArmSTAND;
 80026fe:	4b53      	ldr	r3, [pc, #332]	; (800284c <main+0x22c>)
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
				HAL_Delay(1);
			}
		}

		//!!!!!!!!!ЯКЩО зараз йде рух зацепа то ми постійно в цій умові перевіряємо стан зацепа і виставляємо флаг
		if (arm.State == arm.ArmGripPreMOVE || arm.State == arm.ArmGripMOVE) {
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <main+0x22c>)
 8002708:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800270c:	2b06      	cmp	r3, #6
 800270e:	d004      	beq.n	800271a <main+0xfa>
 8002710:	4b4e      	ldr	r3, [pc, #312]	; (800284c <main+0x22c>)
 8002712:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8002716:	2b04      	cmp	r3, #4
 8002718:	d101      	bne.n	800271e <main+0xfe>

			debounce_check_pins_and_set_flag();
 800271a:	f000 fcef 	bl	80030fc <_Z32debounce_check_pins_and_set_flagv>

		}

		// +2 початок руху якщо прийшли нові дані
		if (arm.State == arm.ArmSTART) {
 800271e:	4b4b      	ldr	r3, [pc, #300]	; (800284c <main+0x22c>)
 8002720:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8002724:	2b00      	cmp	r3, #0
 8002726:	d117      	bne.n	8002758 <main+0x138>
			//перевіряємо статус зацепа якщо він зачеплений то ОПУСКАЄМО (це не вірна логіка)
			//+1.2
			int tempGripState = arm.GetGripperState();
 8002728:	4848      	ldr	r0, [pc, #288]	; (800284c <main+0x22c>)
 800272a:	f7ff f8ab 	bl	8001884 <_ZN7RoboArm15GetGripperStateEv>
 800272e:	60f8      	str	r0, [r7, #12]

			if (tempGripState == 1 && un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10c      	bne.n	8002750 <main+0x130>
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <main+0x23c>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <main+0x130>
//			if (un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
				arm.State = arm.ArmGripPreMOVE;
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <main+0x22c>)
 8002740:	2206      	movs	r2, #6
 8002742:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
				arm.SetGripper(0);
 8002746:	2100      	movs	r1, #0
 8002748:	4840      	ldr	r0, [pc, #256]	; (800284c <main+0x22c>)
 800274a:	f7ff f8f5 	bl	8001938 <_ZN7RoboArm10SetGripperEi>
 800274e:	e003      	b.n	8002758 <main+0x138>
			} else {//if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
				//+3
				arm.State = arm.ArmGripPreENDMOVE;
 8002750:	4b3e      	ldr	r3, [pc, #248]	; (800284c <main+0x22c>)
 8002752:	2207      	movs	r2, #7
 8002754:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			}
		}

		//+4 опустили якщо треба було або починаємо одночасний рух моторів.
		if (arm.State == arm.ArmGripPreENDMOVE) {
 8002758:	4b3c      	ldr	r3, [pc, #240]	; (800284c <main+0x22c>)
 800275a:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800275e:	2b07      	cmp	r3, #7
 8002760:	d10b      	bne.n	800277a <main+0x15a>
			arm.State = arm.ArmMOVE;
 8002762:	4b3a      	ldr	r3, [pc, #232]	; (800284c <main+0x22c>)
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			arm.Move2Motors(un_to.params.ang, un_to.params.lin);
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <main+0x23c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a3b      	ldr	r2, [pc, #236]	; (800285c <main+0x23c>)
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4619      	mov	r1, r3
 8002774:	4835      	ldr	r0, [pc, #212]	; (800284c <main+0x22c>)
 8002776:	f7fe fe93 	bl	80014a0 <_ZN7RoboArm11Move2MotorsEff>
		 //	  }
		 */


		//+5 обидва мотори доїхали по статусам в таймерах
		if (timerFT1 && timerFT2) {
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <main+0x240>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02b      	beq.n	80027da <main+0x1ba>
 8002782:	4b38      	ldr	r3, [pc, #224]	; (8002864 <main+0x244>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d027      	beq.n	80027da <main+0x1ba>
			arm.State = arm.ArmEndMOVE;
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <main+0x22c>)
 800278c:	2208      	movs	r2, #8
 800278e:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			timerFT1 = false;
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <main+0x240>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002798:	4b32      	ldr	r3, [pc, #200]	; (8002864 <main+0x244>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]

//			un_now.params.lin = un_to.params.lin;
//			un_now.params.ang = un_to.params.ang;
			//+6 Перевірка статуса зацепа чи він не посередині і встановлюємо потрібний опускаємо
			int tempGripState = arm.GetGripperState();
 800279e:	482b      	ldr	r0, [pc, #172]	; (800284c <main+0x22c>)
 80027a0:	f7ff f870 	bl	8001884 <_ZN7RoboArm15GetGripperStateEv>
 80027a4:	60b8      	str	r0, [r7, #8]
			if ((tempGripState == 1 || tempGripState == 0)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d002      	beq.n	80027b2 <main+0x192>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <main+0x1b2>
					&& (tempGripState != un_to.params.hold)) {
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <main+0x23c>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d00a      	beq.n	80027d2 <main+0x1b2>
				arm.State = arm.ArmGripMOVE;
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <main+0x22c>)
 80027be:	2204      	movs	r2, #4
 80027c0:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133

				arm.SetGripper(un_to.params.hold);
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <main+0x23c>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4619      	mov	r1, r3
 80027ca:	4820      	ldr	r0, [pc, #128]	; (800284c <main+0x22c>)
 80027cc:	f7ff f8b4 	bl	8001938 <_ZN7RoboArm10SetGripperEi>
 80027d0:	e003      	b.n	80027da <main+0x1ba>
			} else {
				arm.State = arm.ArmGripENDMOVE;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	; (800284c <main+0x22c>)
 80027d4:	2205      	movs	r2, #5
 80027d6:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			}
		}

		// +7 закінчили рух зацепа
		if (arm.State == arm.ArmGripENDMOVE) {
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <main+0x22c>)
 80027dc:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d11a      	bne.n	800281a <main+0x1fa>
			arm.State = arm.ArmSTAND;
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <main+0x22c>)
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			un_send.params.lin = 0;
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <main+0x248>)
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 80027f4:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <main+0x248>)
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <main+0x248>)
 80027fe:	220a      	movs	r2, #10
 8002800:	609a      	str	r2, [r3, #8]
			gripperMoveFinished = false;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <main+0x24c>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
			moveFinished = false;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <main+0x250>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 800280e:	230c      	movs	r3, #12
 8002810:	220c      	movs	r2, #12
 8002812:	4915      	ldr	r1, [pc, #84]	; (8002868 <main+0x248>)
 8002814:	4810      	ldr	r0, [pc, #64]	; (8002858 <main+0x238>)
 8002816:	f003 fbe0 	bl	8005fda <HAL_UART_Transmit>
					12);
		}


		//запит на читання координат
		if (arm.getPrintState() && arm.State == arm.ArmGetData) {
 800281a:	480c      	ldr	r0, [pc, #48]	; (800284c <main+0x22c>)
 800281c:	f7ff f91e 	bl	8001a5c <_ZN7RoboArm13getPrintStateEv>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d026      	beq.n	8002874 <main+0x254>
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <main+0x22c>)
 8002828:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800282c:	2b0a      	cmp	r3, #10
 800282e:	d121      	bne.n	8002874 <main+0x254>
 8002830:	2301      	movs	r3, #1
 8002832:	e020      	b.n	8002876 <main+0x256>
 8002834:	20000090 	.word	0x20000090
 8002838:	200000d8 	.word	0x200000d8
 800283c:	40010800 	.word	0x40010800
 8002840:	40010c00 	.word	0x40010c00
 8002844:	20000120 	.word	0x20000120
 8002848:	200001b0 	.word	0x200001b0
 800284c:	2000023c 	.word	0x2000023c
 8002850:	20000038 	.word	0x20000038
 8002854:	200001f8 	.word	0x200001f8
 8002858:	20000168 	.word	0x20000168
 800285c:	20000224 	.word	0x20000224
 8002860:	20000205 	.word	0x20000205
 8002864:	20000206 	.word	0x20000206
 8002868:	20000218 	.word	0x20000218
 800286c:	20000004 	.word	0x20000004
 8002870:	20000209 	.word	0x20000209
 8002874:	2300      	movs	r3, #0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d020      	beq.n	80028bc <main+0x29c>
			arm.State = arm.ArmSTAND;
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <main+0x350>)
 800287c:	2202      	movs	r2, #2
 800287e:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			float lin = arm.GetLin();
 8002882:	483b      	ldr	r0, [pc, #236]	; (8002970 <main+0x350>)
 8002884:	f7ff f994 	bl	8001bb0 <_ZN7RoboArm6GetLinEv>
 8002888:	6078      	str	r0, [r7, #4]
			un_send.params.lin = lin;
 800288a:	4a3a      	ldr	r2, [pc, #232]	; (8002974 <main+0x354>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6013      	str	r3, [r2, #0]
//		  un_send.params.lin = arm.ShiftZeroLin(lin); //це для АМТ223С-V
			HAL_Delay(10);
 8002890:	200a      	movs	r0, #10
 8002892:	f001 f879 	bl	8003988 <HAL_Delay>
			float ang = arm.GetAng();
 8002896:	4836      	ldr	r0, [pc, #216]	; (8002970 <main+0x350>)
 8002898:	f7ff fa3a 	bl	8001d10 <_ZN7RoboArm6GetAngEv>
 800289c:	6038      	str	r0, [r7, #0]
			un_send.params.ang = ang;
 800289e:	4a35      	ldr	r2, [pc, #212]	; (8002974 <main+0x354>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6053      	str	r3, [r2, #4]
//		  un_send.params.ang = arm.ShiftZeroAng(ang); //це для АМТ223С-V
			un_send.params.hold = arm.GetGripperState();
 80028a4:	4832      	ldr	r0, [pc, #200]	; (8002970 <main+0x350>)
 80028a6:	f7fe ffed 	bl	8001884 <_ZN7RoboArm15GetGripperStateEv>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <main+0x354>)
 80028ae:	6093      	str	r3, [r2, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80028b0:	230c      	movs	r3, #12
 80028b2:	220c      	movs	r2, #12
 80028b4:	492f      	ldr	r1, [pc, #188]	; (8002974 <main+0x354>)
 80028b6:	4830      	ldr	r0, [pc, #192]	; (8002978 <main+0x358>)
 80028b8:	f003 fb8f 	bl	8005fda <HAL_UART_Transmit>
					12);
		}

		//екстренна зупинка
		if (arm.State == arm.ArmSTOP) {
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <main+0x350>)
 80028be:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 80028c2:	2b09      	cmp	r3, #9
 80028c4:	d11a      	bne.n	80028fc <main+0x2dc>
			stopHand = false;
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <main+0x35c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 80028cc:	4828      	ldr	r0, [pc, #160]	; (8002970 <main+0x350>)
 80028ce:	f7fe fda3 	bl	8001418 <_ZN7RoboArm13EmergencyStopEv>

			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 80028d2:	4b28      	ldr	r3, [pc, #160]	; (8002974 <main+0x354>)
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <main+0x354>)
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <main+0x354>)
 80028e4:	220a      	movs	r2, #10
 80028e6:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80028e8:	230c      	movs	r3, #12
 80028ea:	220c      	movs	r2, #12
 80028ec:	4921      	ldr	r1, [pc, #132]	; (8002974 <main+0x354>)
 80028ee:	4822      	ldr	r0, [pc, #136]	; (8002978 <main+0x358>)
 80028f0:	f003 fb73 	bl	8005fda <HAL_UART_Transmit>
					12);
			arm.State = arm.ArmSTAND;
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <main+0x350>)
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
		}

		//встановлення нуля
		if (arm.State == arm.ArmSetZero) {
 80028fc:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <main+0x350>)
 80028fe:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8002902:	2b0b      	cmp	r3, #11
 8002904:	d117      	bne.n	8002936 <main+0x316>
			arm.SetZeroEncoders();
 8002906:	481a      	ldr	r0, [pc, #104]	; (8002970 <main+0x350>)
 8002908:	f7ff fa46 	bl	8001d98 <_ZN7RoboArm15SetZeroEncodersEv>
//		  arm.SetSoftwareZero();
			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <main+0x354>)
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <main+0x354>)
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <main+0x354>)
 800291e:	220a      	movs	r2, #10
 8002920:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002922:	230c      	movs	r3, #12
 8002924:	220c      	movs	r2, #12
 8002926:	4913      	ldr	r1, [pc, #76]	; (8002974 <main+0x354>)
 8002928:	4813      	ldr	r0, [pc, #76]	; (8002978 <main+0x358>)
 800292a:	f003 fb56 	bl	8005fda <HAL_UART_Transmit>
					12);

			arm.State = arm.ArmSTAND;
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <main+0x350>)
 8002930:	2202      	movs	r2, #2
 8002932:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
		}

		if (arm.State == arm.ArmGetVers) {
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <main+0x350>)
 8002938:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800293c:	2b0c      	cmp	r3, #12
 800293e:	f47f aee2 	bne.w	8002706 <main+0xe6>
			arm.State = arm.ArmSTAND;
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <main+0x350>)
 8002944:	2202      	movs	r2, #2
 8002946:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			un_send.params.lin = 0;
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <main+0x354>)
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <main+0x354>)
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	605a      	str	r2, [r3, #4]
			un_send.params.hold = version;
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <main+0x360>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <main+0x354>)
 8002960:	6093      	str	r3, [r2, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002962:	230c      	movs	r3, #12
 8002964:	220c      	movs	r2, #12
 8002966:	4903      	ldr	r1, [pc, #12]	; (8002974 <main+0x354>)
 8002968:	4803      	ldr	r0, [pc, #12]	; (8002978 <main+0x358>)
 800296a:	f003 fb36 	bl	8005fda <HAL_UART_Transmit>
					12);
		}
	}
 800296e:	e6ca      	b.n	8002706 <main+0xe6>
 8002970:	2000023c 	.word	0x2000023c
 8002974:	20000218 	.word	0x20000218
 8002978:	20000168 	.word	0x20000168
 800297c:	20000204 	.word	0x20000204
 8002980:	20000008 	.word	0x20000008

08002984 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b090      	sub	sp, #64	; 0x40
 8002988:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800298a:	f107 0318 	add.w	r3, r7, #24
 800298e:	2228      	movs	r2, #40	; 0x28
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f004 f9b4 	bl	8006d00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029ae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b4:	2301      	movs	r3, #1
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b8:	2302      	movs	r3, #2
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fb9b 	bl	8004108 <HAL_RCC_OscConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 80029e2:	f000 fc85 	bl	80032f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80029e6:	230f      	movs	r3, #15
 80029e8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ea:	2302      	movs	r3, #2
 80029ec:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 fe03 	bl	800460c <HAL_RCC_ClockConfig>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8002a16:	f000 fc6b 	bl	80032f0 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8002a1a:	f001 fee1 	bl	80047e0 <HAL_RCC_EnableCSS>
}
 8002a1e:	bf00      	nop
 8002a20:	3740      	adds	r7, #64	; 0x40
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None HAL_Delay(1);
 }
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a2e:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <_ZL12MX_SPI1_Initv+0x74>)
 8002a30:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a38:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a58:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a5c:	2218      	movs	r2, #24
 8002a5e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a74:	220a      	movs	r2, #10
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002a78:	4807      	ldr	r0, [pc, #28]	; (8002a98 <_ZL12MX_SPI1_Initv+0x70>)
 8002a7a:	f001 ff61 	bl	8004940 <HAL_SPI_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 8002a8e:	f000 fc2f 	bl	80032f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000038 	.word	0x20000038
 8002a9c:	40013000 	.word	0x40013000

08002aa0 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b092      	sub	sp, #72	; 0x48
 8002aa4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002aa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
 8002ac0:	615a      	str	r2, [r3, #20]
 8002ac2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 f918 	bl	8006d00 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002ad0:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002ad2:	4a3e      	ldr	r2, [pc, #248]	; (8002bcc <_ZL12MX_TIM1_Initv+0x12c>)
 8002ad4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002ad8:	2248      	movs	r2, #72	; 0x48
 8002ada:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002adc:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8002ae2:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ae8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aea:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002af0:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002afc:	4832      	ldr	r0, [pc, #200]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002afe:	f002 fbc7 	bl	8005290 <HAL_TIM_PWM_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 8002b12:	f000 fbed 	bl	80032f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b22:	4619      	mov	r1, r3
 8002b24:	4828      	ldr	r0, [pc, #160]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002b26:	f003 f8f5 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 8002b3a:	f000 fbd9 	bl	80032f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3e:	2360      	movs	r3, #96	; 0x60
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4619      	mov	r1, r3
 8002b62:	4819      	ldr	r0, [pc, #100]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002b64:	f002 fdec 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 8002b68:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 8002b78:	f000 fbba 	bl	80032f0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b94:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	480a      	ldr	r0, [pc, #40]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002ba0:	f003 f910 	bl	8005dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ba4:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <_ZL12MX_TIM1_Initv+0x118>
		Error_Handler();
 8002bb4:	f000 fb9c 	bl	80032f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002bb8:	4803      	ldr	r0, [pc, #12]	; (8002bc8 <_ZL12MX_TIM1_Initv+0x128>)
 8002bba:	f000 fcdb 	bl	8003574 <HAL_TIM_MspPostInit>

}
 8002bbe:	bf00      	nop
 8002bc0:	3748      	adds	r7, #72	; 0x48
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000090 	.word	0x20000090
 8002bcc:	40012c00 	.word	0x40012c00

08002bd0 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002bd6:	f107 0320 	add.w	r3, r7, #32
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bf8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8002bfa:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002bfc:	2248      	movs	r2, #72	; 0x48
 8002bfe:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8002c06:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c0c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002c1a:	4820      	ldr	r0, [pc, #128]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002c1c:	f002 fb38 	bl	8005290 <HAL_TIM_PWM_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 8002c30:	f000 fb5e 	bl	80032f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002c3c:	f107 0320 	add.w	r3, r7, #32
 8002c40:	4619      	mov	r1, r3
 8002c42:	4816      	ldr	r0, [pc, #88]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002c44:	f003 f866 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002c48:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	bf14      	ite	ne
 8002c4e:	2301      	movne	r3, #1
 8002c50:	2300      	moveq	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 8002c58:	f000 fb4a 	bl	80032f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c5c:	2360      	movs	r3, #96	; 0x60
 8002c5e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2204      	movs	r2, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	480a      	ldr	r0, [pc, #40]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002c74:	f002 fd64 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 8002c78:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <_ZL12MX_TIM2_Initv+0xbc>
		Error_Handler();
 8002c88:	f000 fb32 	bl	80032f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <_ZL12MX_TIM2_Initv+0xcc>)
 8002c8e:	f000 fc71 	bl	8003574 <HAL_TIM_MspPostInit>

}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200000d8 	.word	0x200000d8

08002ca0 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ca6:	f107 0320 	add.w	r3, r7, #32
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	60da      	str	r2, [r3, #12]
 8002cbc:	611a      	str	r2, [r3, #16]
 8002cbe:	615a      	str	r2, [r3, #20]
 8002cc0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002cc4:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <_ZL12MX_TIM3_Initv+0xcc>)
 8002cc6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72;
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002cca:	2248      	movs	r2, #72	; 0x48
 8002ccc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cda:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cdc:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002ce8:	481f      	ldr	r0, [pc, #124]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002cea:	f002 fad1 	bl	8005290 <HAL_TIM_PWM_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <_ZL12MX_TIM3_Initv+0x62>
		Error_Handler();
 8002cfe:	f000 faf7 	bl	80032f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002d0a:	f107 0320 	add.w	r3, r7, #32
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4815      	ldr	r0, [pc, #84]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002d12:	f002 ffff 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002d16:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <_ZL12MX_TIM3_Initv+0x8a>
		Error_Handler();
 8002d26:	f000 fae3 	bl	80032f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d2a:	2360      	movs	r3, #96	; 0x60
 8002d2c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4809      	ldr	r0, [pc, #36]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002d42:	f002 fcfd 	bl	8005740 <HAL_TIM_PWM_ConfigChannel>
 8002d46:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <_ZL12MX_TIM3_Initv+0xba>
		Error_Handler();
 8002d56:	f000 facb 	bl	80032f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002d5a:	4803      	ldr	r0, [pc, #12]	; (8002d68 <_ZL12MX_TIM3_Initv+0xc8>)
 8002d5c:	f000 fc0a 	bl	8003574 <HAL_TIM_MspPostInit>

}
 8002d60:	bf00      	nop
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000120 	.word	0x20000120
 8002d6c:	40000400 	.word	0x40000400

08002d70 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d76:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002d78:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d80:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d96:	220c      	movs	r2, #12
 8002d98:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002da6:	4807      	ldr	r0, [pc, #28]	; (8002dc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002da8:	f003 f86f 	bl	8005e8a <HAL_UART_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8002dbc:	f000 fa98 	bl	80032f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000168 	.word	0x20000168
 8002dc8:	40013800 	.word	0x40013800

08002dcc <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
//
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002dd2:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002dd4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ddc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8002e02:	4807      	ldr	r0, [pc, #28]	; (8002e20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e04:	f003 f891 	bl	8005f2a <HAL_HalfDuplex_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf14      	ite	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	2300      	moveq	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8002e18:	f000 fa6a 	bl	80032f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
//
	/* USER CODE END USART2_Init 2 */

}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200001b0 	.word	0x200001b0
 8002e24:	40004400 	.word	0x40004400

08002e28 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a4d      	ldr	r2, [pc, #308]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e42:	f043 0310 	orr.w	r3, r3, #16
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002e54:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e5a:	f043 0320 	orr.w	r3, r3, #32
 8002e5e:	6193      	str	r3, [r2, #24]
 8002e60:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6c:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4a41      	ldr	r2, [pc, #260]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6193      	str	r3, [r2, #24]
 8002e78:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e84:	4b3c      	ldr	r3, [pc, #240]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e8a:	f043 0308 	orr.w	r3, r3, #8
 8002e8e:	6193      	str	r3, [r2, #24]
 8002e90:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <_ZL12MX_GPIO_Initv+0x150>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ea2:	4836      	ldr	r0, [pc, #216]	; (8002f7c <_ZL12MX_GPIO_Initv+0x154>)
 8002ea4:	f001 f8e7 	bl	8004076 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f241 0171 	movw	r1, #4209	; 0x1071
 8002eae:	4834      	ldr	r0, [pc, #208]	; (8002f80 <_ZL12MX_GPIO_Initv+0x158>)
 8002eb0:	f001 f8e1 	bl	8004076 <HAL_GPIO_WritePin>
	En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f648 7143 	movw	r1, #36675	; 0x8f43
 8002eba:	4832      	ldr	r0, [pc, #200]	; (8002f84 <_ZL12MX_GPIO_Initv+0x15c>)
 8002ebc:	f001 f8db 	bl	8004076 <HAL_GPIO_WritePin>
			CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin | S2_Pin | En3_Pin
					| Dir3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 8002ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8002ed2:	f107 0310 	add.w	r3, r7, #16
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4828      	ldr	r0, [pc, #160]	; (8002f7c <_ZL12MX_GPIO_Initv+0x154>)
 8002eda:	f000 ff39 	bl	8003d50 <HAL_GPIO_Init>

	/*Configure GPIO pins : En2_Pin Button_Pin En1_Pin Dir1_Pin
	 Buser_Pin */
	GPIO_InitStruct.Pin = En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin;
 8002ede:	f241 0371 	movw	r3, #4209	; 0x1071
 8002ee2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4822      	ldr	r0, [pc, #136]	; (8002f80 <_ZL12MX_GPIO_Initv+0x158>)
 8002ef8:	f000 ff2a 	bl	8003d50 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
	 S1_Pin S2_Pin En3_Pin Dir3_Pin */
	GPIO_InitStruct.Pin = CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin
 8002efc:	f648 7343 	movw	r3, #36675	; 0x8f43
 8002f00:	613b      	str	r3, [r7, #16]
			| S2_Pin | En3_Pin | Dir3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4619      	mov	r1, r3
 8002f14:	481b      	ldr	r0, [pc, #108]	; (8002f84 <_ZL12MX_GPIO_Initv+0x15c>)
 8002f16:	f000 ff1b 	bl	8003d50 <HAL_GPIO_Init>

	/*Configure GPIO pins : EndCap1_Pin EndCap2_Pin EndCap3_Pin */
	GPIO_InitStruct.Pin = EndCap1_Pin | EndCap2_Pin | EndCap3_Pin;
 8002f1a:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8002f1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <_ZL12MX_GPIO_Initv+0x160>)
 8002f22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4815      	ldr	r0, [pc, #84]	; (8002f84 <_ZL12MX_GPIO_Initv+0x15c>)
 8002f30:	f000 ff0e 	bl	8003d50 <HAL_GPIO_Init>

	/*Configure GPIO pin : EndCap4_Pin */
	GPIO_InitStruct.Pin = EndCap4_Pin;
 8002f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <_ZL12MX_GPIO_Initv+0x160>)
 8002f3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(EndCap4_GPIO_Port, &GPIO_InitStruct);
 8002f42:	f107 0310 	add.w	r3, r7, #16
 8002f46:	4619      	mov	r1, r3
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <_ZL12MX_GPIO_Initv+0x158>)
 8002f4a:	f000 ff01 	bl	8003d50 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2105      	movs	r1, #5
 8002f52:	2017      	movs	r0, #23
 8002f54:	f000 fe13 	bl	8003b7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f58:	2017      	movs	r0, #23
 8002f5a:	f000 fe2c 	bl	8003bb6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2105      	movs	r1, #5
 8002f62:	2028      	movs	r0, #40	; 0x28
 8002f64:	f000 fe0b 	bl	8003b7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f68:	2028      	movs	r0, #40	; 0x28
 8002f6a:	f000 fe24 	bl	8003bb6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002f6e:	bf00      	nop
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40011000 	.word	0x40011000
 8002f80:	40010800 	.word	0x40010800
 8002f84:	40010c00 	.word	0x40010c00
 8002f88:	10110000 	.word	0x10110000

08002f8c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <HAL_UART_RxCpltCallback+0xb8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d149      	bne.n	8003030 <HAL_UART_RxCpltCallback+0xa4>
		// копіюємо отримані дані у rx_buffer
		memcpy(un_get.bytes, rx_buffer, sizeof(rx_buffer));
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <HAL_UART_RxCpltCallback+0xbc>)
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_UART_RxCpltCallback+0xc0>)
 8002fa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		switch (un_get.params.hold) {
 8002fa6:	4b28      	ldr	r3, [pc, #160]	; (8003048 <HAL_UART_RxCpltCallback+0xbc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b50      	cmp	r3, #80	; 0x50
 8002fac:	d031      	beq.n	8003012 <HAL_UART_RxCpltCallback+0x86>
 8002fae:	2b50      	cmp	r3, #80	; 0x50
 8002fb0:	dc34      	bgt.n	800301c <HAL_UART_RxCpltCallback+0x90>
 8002fb2:	2b4b      	cmp	r3, #75	; 0x4b
 8002fb4:	d028      	beq.n	8003008 <HAL_UART_RxCpltCallback+0x7c>
 8002fb6:	2b4b      	cmp	r3, #75	; 0x4b
 8002fb8:	dc30      	bgt.n	800301c <HAL_UART_RxCpltCallback+0x90>
 8002fba:	2b32      	cmp	r3, #50	; 0x32
 8002fbc:	d01f      	beq.n	8002ffe <HAL_UART_RxCpltCallback+0x72>
 8002fbe:	2b32      	cmp	r3, #50	; 0x32
 8002fc0:	dc2c      	bgt.n	800301c <HAL_UART_RxCpltCallback+0x90>
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	dc02      	bgt.n	8002fcc <HAL_UART_RxCpltCallback+0x40>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da03      	bge.n	8002fd2 <HAL_UART_RxCpltCallback+0x46>
 8002fca:	e027      	b.n	800301c <HAL_UART_RxCpltCallback+0x90>
 8002fcc:	2b19      	cmp	r3, #25
 8002fce:	d011      	beq.n	8002ff4 <HAL_UART_RxCpltCallback+0x68>
 8002fd0:	e024      	b.n	800301c <HAL_UART_RxCpltCallback+0x90>
		case 1:
			// 0 або 1 у un_get.params.hold = прийшли нові координати
			//startFirstMove = true;

			//статус початку руху  +1
			arm.State = arm.ArmSTART;
 8002fd2:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <HAL_UART_RxCpltCallback+0xc4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133

			un_to.params.lin = un_get.params.lin;
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_UART_RxCpltCallback+0xbc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_UART_RxCpltCallback+0xc8>)
 8002fe0:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_UART_RxCpltCallback+0xbc>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	; (8003054 <HAL_UART_RxCpltCallback+0xc8>)
 8002fe8:	6053      	str	r3, [r2, #4]
			un_to.params.hold = un_get.params.hold;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_UART_RxCpltCallback+0xbc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_UART_RxCpltCallback+0xc8>)
 8002ff0:	6093      	str	r3, [r2, #8]
//			arm.moveGripper = un_get.params.hold;
			break;
 8002ff2:	e013      	b.n	800301c <HAL_UART_RxCpltCallback+0x90>
		case 25:
			//25 = екстренна зупинка

			arm.State = arm.ArmSTOP;
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_UART_RxCpltCallback+0xc4>)
 8002ff6:	2209      	movs	r2, #9
 8002ff8:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			//оце би на переривання якесь повісити, щоб якщо натиснули в дашборді - то остаточно вирубати.
			break;
 8002ffc:	e00e      	b.n	800301c <HAL_UART_RxCpltCallback+0x90>
		case 50:
			//50 = get-запит
			//sendDataFlag = true;
			arm.State = arm.ArmGetData;
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <HAL_UART_RxCpltCallback+0xc4>)
 8003000:	220a      	movs	r2, #10
 8003002:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			break;
 8003006:	e009      	b.n	800301c <HAL_UART_RxCpltCallback+0x90>
		case 75:
			//75 = встановлення нуля
			//	setZeroFlag = true;
			arm.State = arm.ArmSetZero;
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_UART_RxCpltCallback+0xc4>)
 800300a:	220b      	movs	r2, #11
 800300c:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			break;
 8003010:	e004      	b.n	800301c <HAL_UART_RxCpltCallback+0x90>
		case 80:
			arm.State = arm.ArmGetVers;
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_UART_RxCpltCallback+0xc4>)
 8003014:	220c      	movs	r2, #12
 8003016:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			break;
 800301a:	bf00      	nop
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800301c:	220c      	movs	r2, #12
 800301e:	2100      	movs	r1, #0
 8003020:	480a      	ldr	r0, [pc, #40]	; (800304c <HAL_UART_RxCpltCallback+0xc0>)
 8003022:	f003 fe6d 	bl	8006d00 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8003026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800302a:	480b      	ldr	r0, [pc, #44]	; (8003058 <HAL_UART_RxCpltCallback+0xcc>)
 800302c:	f001 f83b 	bl	80040a6 <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8003030:	220c      	movs	r2, #12
 8003032:	4906      	ldr	r1, [pc, #24]	; (800304c <HAL_UART_RxCpltCallback+0xc0>)
 8003034:	4803      	ldr	r0, [pc, #12]	; (8003044 <HAL_UART_RxCpltCallback+0xb8>)
 8003036:	f003 f853 	bl	80060e0 <HAL_UART_Receive_IT>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000168 	.word	0x20000168
 8003048:	2000020c 	.word	0x2000020c
 800304c:	200001f8 	.word	0x200001f8
 8003050:	2000023c 	.word	0x2000023c
 8003054:	20000224 	.word	0x20000224
 8003058:	40011000 	.word	0x40011000

0800305c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
		//	timerFT2 = true;
	}
//	else {
//		__NOP();
//	}
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <HAL_UART_ErrorCallback+0x84>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d133      	bne.n	80030ea <HAL_UART_ErrorCallback+0x7a>
		if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	2b08      	cmp	r3, #8
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_UART_ErrorCallback+0x2c>
			// переполнение
			arm.SetBuserState(2);
 8003094:	2102      	movs	r1, #2
 8003096:	4818      	ldr	r0, [pc, #96]	; (80030f8 <HAL_UART_ErrorCallback+0x88>)
 8003098:	f7fe fbc2 	bl	8001820 <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_PE) {
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_UART_ErrorCallback+0x46>
			// Ошибка четности
			arm.SetBuserState(3);
 80030ae:	2103      	movs	r1, #3
 80030b0:	4811      	ldr	r0, [pc, #68]	; (80030f8 <HAL_UART_ErrorCallback+0x88>)
 80030b2:	f7fe fbb5 	bl	8001820 <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_NE) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_UART_ErrorCallback+0x60>
			// Ошибка зашумление
			arm.SetBuserState(4);
 80030c8:	2104      	movs	r1, #4
 80030ca:	480b      	ldr	r0, [pc, #44]	; (80030f8 <HAL_UART_ErrorCallback+0x88>)
 80030cc:	f7fe fba8 	bl	8001820 <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_FE) {
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_UART_ErrorCallback+0x7a>
			// Ошибка кадрирования
			arm.SetBuserState(5);
 80030e2:	2105      	movs	r1, #5
 80030e4:	4804      	ldr	r0, [pc, #16]	; (80030f8 <HAL_UART_ErrorCallback+0x88>)
 80030e6:	f7fe fb9b 	bl	8001820 <_ZN7RoboArm13SetBuserStateEi>
		}
	}
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40013800 	.word	0x40013800
 80030f8:	2000023c 	.word	0x2000023c

080030fc <_Z32debounce_check_pins_and_set_flagv>:

void debounce_check_pins_and_set_flag() {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
	static uint32_t last_check_time = 0;
	static uint32_t debounce_delay = 2; // Затримка для віднімання дребезгу, в мілісекундах, насправді дребезг всього 120 мікросекунд!!!!
	static uint8_t last_EndCap1_state = GPIO_PIN_RESET;
	static uint8_t last_EndCap2_state = GPIO_PIN_RESET;
	uint32_t current_time = HAL_GetTick();
 8003102:	f000 fc37 	bl	8003974 <HAL_GetTick>
 8003106:	6078      	str	r0, [r7, #4]

	// Перевірка чи пройшла достатня затримка для уникнення дребезгу
	if (current_time - last_check_time >= debounce_delay) {
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <_Z32debounce_check_pins_and_set_flagv+0x8c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	1ad2      	subs	r2, r2, r3
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <_Z32debounce_check_pins_and_set_flagv+0x90>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d332      	bcc.n	800317e <_Z32debounce_check_pins_and_set_flagv+0x82>
		// Оновлення часу останньої перевірки
		last_check_time = current_time;
 8003118:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <_Z32debounce_check_pins_and_set_flagv+0x8c>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]

		// Перевірка стану піну EndCap1
		uint8_t current_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <_Z32debounce_check_pins_and_set_flagv+0x94>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <_Z32debounce_check_pins_and_set_flagv+0x94>)
 8003124:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f000 ff8c 	bl	8004048 <HAL_GPIO_ReadPin>
 8003130:	4603      	mov	r3, r0
 8003132:	70fb      	strb	r3, [r7, #3]
				arm.EndCap1_PinG);

		if (current_EndCap1_state == GPIO_PIN_SET
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d106      	bne.n	8003148 <_Z32debounce_check_pins_and_set_flagv+0x4c>
				&& last_EndCap1_state == GPIO_PIN_RESET) {
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <_Z32debounce_check_pins_and_set_flagv+0x98>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <_Z32debounce_check_pins_and_set_flagv+0x4c>
			gripIntFlag = true;
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <_Z32debounce_check_pins_and_set_flagv+0x9c>)
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
		}
		last_EndCap1_state = current_EndCap1_state;
 8003148:	4a12      	ldr	r2, [pc, #72]	; (8003194 <_Z32debounce_check_pins_and_set_flagv+0x98>)
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	7013      	strb	r3, [r2, #0]

		// Перевірка стану піну EndCap2
		uint8_t current_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <_Z32debounce_check_pins_and_set_flagv+0x94>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <_Z32debounce_check_pins_and_set_flagv+0x94>)
 8003154:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f000 ff74 	bl	8004048 <HAL_GPIO_ReadPin>
 8003160:	4603      	mov	r3, r0
 8003162:	70bb      	strb	r3, [r7, #2]
				arm.EndCap2_PinG);
		if (current_EndCap2_state == GPIO_PIN_SET
 8003164:	78bb      	ldrb	r3, [r7, #2]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d106      	bne.n	8003178 <_Z32debounce_check_pins_and_set_flagv+0x7c>
				&& last_EndCap2_state == GPIO_PIN_RESET) {
 800316a:	4b0c      	ldr	r3, [pc, #48]	; (800319c <_Z32debounce_check_pins_and_set_flagv+0xa0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <_Z32debounce_check_pins_and_set_flagv+0x7c>
			gripIntFlag = true;
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <_Z32debounce_check_pins_and_set_flagv+0x9c>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
		}
		last_EndCap2_state = current_EndCap2_state;
 8003178:	4a08      	ldr	r2, [pc, #32]	; (800319c <_Z32debounce_check_pins_and_set_flagv+0xa0>)
 800317a:	78bb      	ldrb	r3, [r7, #2]
 800317c:	7013      	strb	r3, [r2, #0]
	}
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000390 	.word	0x20000390
 800318c:	2000000c 	.word	0x2000000c
 8003190:	2000023c 	.word	0x2000023c
 8003194:	20000394 	.word	0x20000394
 8003198:	20000208 	.word	0x20000208
 800319c:	20000395 	.word	0x20000395

080031a0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a43      	ldr	r2, [pc, #268]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d11d      	bne.n	80031ee <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		cntImpulse1++;
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	4a41      	ldr	r2, [pc, #260]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80031ba:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80031be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031c0:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d875      	bhi.n	80032b4 <HAL_TIM_PeriodElapsedCallback+0x114>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80031c8:	2100      	movs	r1, #0
 80031ca:	483f      	ldr	r0, [pc, #252]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80031cc:	f002 f94c 	bl	8005468 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 80031d0:	483d      	ldr	r0, [pc, #244]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80031d2:	f002 f82f 	bl	8005234 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(1, false);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2101      	movs	r1, #1
 80031da:	483a      	ldr	r0, [pc, #232]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80031dc:	f7fe feb8 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1 = 0;
 80031e0:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
			timerFT1 = true;
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
//    HAL_IncTick();
//  }
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80031ec:	e062      	b.n	80032b4 <HAL_TIM_PeriodElapsedCallback+0x114>
	} else if (htim->Instance == TIM2) {
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d11d      	bne.n	8003234 <HAL_TIM_PeriodElapsedCallback+0x94>
		cntImpulse2++;
 80031f8:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003200:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 8003202:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003204:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003206:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d852      	bhi.n	80032b4 <HAL_TIM_PeriodElapsedCallback+0x114>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800320e:	2104      	movs	r1, #4
 8003210:	4830      	ldr	r0, [pc, #192]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003212:	f002 f929 	bl	8005468 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8003216:	482f      	ldr	r0, [pc, #188]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003218:	f002 f80c 	bl	8005234 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, false);
 800321c:	2200      	movs	r2, #0
 800321e:	2102      	movs	r1, #2
 8003220:	4828      	ldr	r0, [pc, #160]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003222:	f7fe fe95 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2 = 0;
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
			timerFT2 = true;
 800322c:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
}
 8003232:	e03f      	b.n	80032b4 <HAL_TIM_PeriodElapsedCallback+0x114>
	} else if (htim->Instance == TIM3) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d13a      	bne.n	80032b4 <HAL_TIM_PeriodElapsedCallback+0x114>
		cntImpulse3++;
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003246:	6013      	str	r3, [r2, #0]
		if (cntImpulse3 >= arm.gripperPsteps || gripIntFlag == true) {
 8003248:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800324a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d903      	bls.n	800325c <HAL_TIM_PeriodElapsedCallback+0xbc>
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d12b      	bne.n	80032b4 <HAL_TIM_PeriodElapsedCallback+0x114>
			gripIntFlag = false;
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003262:	2104      	movs	r1, #4
 8003264:	4820      	ldr	r0, [pc, #128]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003266:	f002 f8ff 	bl	8005468 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 800326a:	481f      	ldr	r0, [pc, #124]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800326c:	f001 ffe2 	bl	8005234 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(3, false);
 8003270:	2200      	movs	r2, #0
 8003272:	2103      	movs	r1, #3
 8003274:	4813      	ldr	r0, [pc, #76]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003276:	f7fe fe6b 	bl	8001f50 <_ZN7RoboArm9SetEnableEtb>
			if (arm.State == arm.ArmGripPreMOVE) {
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800327c:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8003280:	2b06      	cmp	r3, #6
 8003282:	d104      	bne.n	800328e <HAL_TIM_PeriodElapsedCallback+0xee>
				arm.State = arm.ArmGripPreENDMOVE;
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003286:	2207      	movs	r2, #7
 8003288:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 800328c:	e008      	b.n	80032a0 <HAL_TIM_PeriodElapsedCallback+0x100>
			} else if (arm.State == arm.ArmGripMOVE) {
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003290:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8003294:	2b04      	cmp	r3, #4
 8003296:	d103      	bne.n	80032a0 <HAL_TIM_PeriodElapsedCallback+0x100>
				arm.State = arm.ArmGripENDMOVE;
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800329a:	2205      	movs	r2, #5
 800329c:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			cntImpulse3 = 0;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
			arm.stateMoveM3 = false;
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
			timerFT3 = true;
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	20000230 	.word	0x20000230
 80032c4:	2000023c 	.word	0x2000023c
 80032c8:	20000090 	.word	0x20000090
 80032cc:	20000205 	.word	0x20000205
 80032d0:	20000234 	.word	0x20000234
 80032d4:	200000d8 	.word	0x200000d8
 80032d8:	20000206 	.word	0x20000206
 80032dc:	40000400 	.word	0x40000400
 80032e0:	20000238 	.word	0x20000238
 80032e4:	20000208 	.word	0x20000208
 80032e8:	20000120 	.word	0x20000120
 80032ec:	20000207 	.word	0x20000207

080032f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//повинен пропищати при помилці; треба перевірити
	for (int t = 0; t <= 4; t++) {
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	e016      	b.n	800332a <Error_Handler+0x3a>
		for (int i = 0; i <= 200; i++) {
 80032fc:	2300      	movs	r3, #0
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	e00a      	b.n	8003318 <Error_Handler+0x28>
			HAL_GPIO_TogglePin(Buser_GPIO_Port, Buser_Pin);
 8003302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003306:	480c      	ldr	r0, [pc, #48]	; (8003338 <Error_Handler+0x48>)
 8003308:	f000 fecd 	bl	80040a6 <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 800330c:	2001      	movs	r0, #1
 800330e:	f000 fb3b 	bl	8003988 <HAL_Delay>
		for (int i = 0; i <= 200; i++) {
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2bc8      	cmp	r3, #200	; 0xc8
 800331c:	ddf1      	ble.n	8003302 <Error_Handler+0x12>
		}
		HAL_Delay(100);
 800331e:	2064      	movs	r0, #100	; 0x64
 8003320:	f000 fb32 	bl	8003988 <HAL_Delay>
	for (int t = 0; t <= 4; t++) {
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3301      	adds	r3, #1
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b04      	cmp	r3, #4
 800332e:	dde5      	ble.n	80032fc <Error_Handler+0xc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003330:	b672      	cpsid	i
}
 8003332:	bf00      	nop
	}
	__disable_irq();
	while (1) {
 8003334:	e7fe      	b.n	8003334 <Error_Handler+0x44>
 8003336:	bf00      	nop
 8003338:	40010800 	.word	0x40010800

0800333c <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d109      	bne.n	8003360 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003352:	4293      	cmp	r3, r2
 8003354:	d104      	bne.n	8003360 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(240.0, 124.0);
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003358:	4904      	ldr	r1, [pc, #16]	; (800336c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800335a:	4805      	ldr	r0, [pc, #20]	; (8003370 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800335c:	f7fd ffe4 	bl	8001328 <_ZN7RoboArmC1Eff>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	42f80000 	.word	0x42f80000
 800336c:	43700000 	.word	0x43700000
 8003370:	2000023c 	.word	0x2000023c

08003374 <_GLOBAL__sub_I_hspi1>:
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
 8003378:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800337c:	2001      	movs	r0, #1
 800337e:	f7ff ffdd 	bl	800333c <_Z41__static_initialization_and_destruction_0ii>
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800338a:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_MspInit+0x6c>)
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_MspInit+0x6c>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6193      	str	r3, [r2, #24]
 8003396:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <HAL_MspInit+0x6c>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_MspInit+0x6c>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <HAL_MspInit+0x6c>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	61d3      	str	r3, [r2, #28]
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_MspInit+0x6c>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2105      	movs	r1, #5
 80033be:	2005      	movs	r0, #5
 80033c0:	f000 fbdd 	bl	8003b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80033c4:	2005      	movs	r0, #5
 80033c6:	f000 fbf6 	bl	8003bb6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_MspInit+0x70>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <HAL_MspInit+0x70>)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40010000 	.word	0x40010000

080033f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a26      	ldr	r2, [pc, #152]	; (80034ac <HAL_SPI_MspInit+0xb4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d145      	bne.n	80034a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <HAL_SPI_MspInit+0xb8>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <HAL_SPI_MspInit+0xb8>)
 800341e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003422:	6193      	str	r3, [r2, #24]
 8003424:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <HAL_SPI_MspInit+0xb8>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003430:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <HAL_SPI_MspInit+0xb8>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <HAL_SPI_MspInit+0xb8>)
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	6193      	str	r3, [r2, #24]
 800343c:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <HAL_SPI_MspInit+0xb8>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003448:	2328      	movs	r3, #40	; 0x28
 800344a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003450:	2303      	movs	r3, #3
 8003452:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	4619      	mov	r1, r3
 800345a:	4816      	ldr	r0, [pc, #88]	; (80034b4 <HAL_SPI_MspInit+0xbc>)
 800345c:	f000 fc78 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003460:	2310      	movs	r3, #16
 8003462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4619      	mov	r1, r3
 8003472:	4810      	ldr	r0, [pc, #64]	; (80034b4 <HAL_SPI_MspInit+0xbc>)
 8003474:	f000 fc6c 	bl	8003d50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <HAL_SPI_MspInit+0xc0>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_SPI_MspInit+0xc0>)
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2105      	movs	r1, #5
 8003498:	2023      	movs	r0, #35	; 0x23
 800349a:	f000 fb70 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800349e:	2023      	movs	r0, #35	; 0x23
 80034a0:	f000 fb89 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034a4:	bf00      	nop
 80034a6:	3728      	adds	r7, #40	; 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40013000 	.word	0x40013000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40010c00 	.word	0x40010c00
 80034b8:	40010000 	.word	0x40010000

080034bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a27      	ldr	r2, [pc, #156]	; (8003568 <HAL_TIM_PWM_MspInit+0xac>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d114      	bne.n	80034f8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 80034d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d8:	6193      	str	r3, [r2, #24]
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2105      	movs	r1, #5
 80034ea:	2019      	movs	r0, #25
 80034ec:	f000 fb47 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034f0:	2019      	movs	r0, #25
 80034f2:	f000 fb60 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034f6:	e032      	b.n	800355e <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003500:	d114      	bne.n	800352c <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	61d3      	str	r3, [r2, #28]
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800351a:	2200      	movs	r2, #0
 800351c:	2105      	movs	r1, #5
 800351e:	201c      	movs	r0, #28
 8003520:	f000 fb2d 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003524:	201c      	movs	r0, #28
 8003526:	f000 fb46 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
}
 800352a:	e018      	b.n	800355e <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <HAL_TIM_PWM_MspInit+0xb4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d113      	bne.n	800355e <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	61d3      	str	r3, [r2, #28]
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_TIM_PWM_MspInit+0xb0>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	2105      	movs	r1, #5
 8003552:	201d      	movs	r0, #29
 8003554:	f000 fb13 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003558:	201d      	movs	r0, #29
 800355a:	f000 fb2c 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40021000 	.word	0x40021000
 8003570:	40000400 	.word	0x40000400

08003574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357c:	f107 0318 	add.w	r3, r7, #24
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2e      	ldr	r2, [pc, #184]	; (8003648 <HAL_TIM_MspPostInit+0xd4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d119      	bne.n	80035c8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003594:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	4a2c      	ldr	r2, [pc, #176]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	6193      	str	r3, [r2, #24]
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2302      	movs	r3, #2
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ba:	f107 0318 	add.w	r3, r7, #24
 80035be:	4619      	mov	r1, r3
 80035c0:	4823      	ldr	r0, [pc, #140]	; (8003650 <HAL_TIM_MspPostInit+0xdc>)
 80035c2:	f000 fbc5 	bl	8003d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035c6:	e03a      	b.n	800363e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d118      	bne.n	8003604 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	6193      	str	r3, [r2, #24]
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035ea:	2302      	movs	r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2302      	movs	r3, #2
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f6:	f107 0318 	add.w	r3, r7, #24
 80035fa:	4619      	mov	r1, r3
 80035fc:	4814      	ldr	r0, [pc, #80]	; (8003650 <HAL_TIM_MspPostInit+0xdc>)
 80035fe:	f000 fba7 	bl	8003d50 <HAL_GPIO_Init>
}
 8003602:	e01c      	b.n	800363e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a12      	ldr	r2, [pc, #72]	; (8003654 <HAL_TIM_MspPostInit+0xe0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d117      	bne.n	800363e <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	4a0e      	ldr	r2, [pc, #56]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6193      	str	r3, [r2, #24]
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <HAL_TIM_MspPostInit+0xd8>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2302      	movs	r3, #2
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	f107 0318 	add.w	r3, r7, #24
 8003636:	4619      	mov	r1, r3
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <HAL_TIM_MspPostInit+0xdc>)
 800363a:	f000 fb89 	bl	8003d50 <HAL_GPIO_Init>
}
 800363e:	bf00      	nop
 8003640:	3728      	adds	r7, #40	; 0x28
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40021000 	.word	0x40021000
 8003650:	40010800 	.word	0x40010800
 8003654:	40000400 	.word	0x40000400

08003658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 0318 	add.w	r3, r7, #24
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_UART_MspInit+0x104>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d13a      	bne.n	80036ee <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003678:	4b39      	ldr	r3, [pc, #228]	; (8003760 <HAL_UART_MspInit+0x108>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	4a38      	ldr	r2, [pc, #224]	; (8003760 <HAL_UART_MspInit+0x108>)
 800367e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003682:	6193      	str	r3, [r2, #24]
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_UART_MspInit+0x108>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003690:	4b33      	ldr	r3, [pc, #204]	; (8003760 <HAL_UART_MspInit+0x108>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	4a32      	ldr	r2, [pc, #200]	; (8003760 <HAL_UART_MspInit+0x108>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6193      	str	r3, [r2, #24]
 800369c:	4b30      	ldr	r3, [pc, #192]	; (8003760 <HAL_UART_MspInit+0x108>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	2302      	movs	r3, #2
 80036b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b6:	f107 0318 	add.w	r3, r7, #24
 80036ba:	4619      	mov	r1, r3
 80036bc:	4829      	ldr	r0, [pc, #164]	; (8003764 <HAL_UART_MspInit+0x10c>)
 80036be:	f000 fb47 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036cc:	2301      	movs	r3, #1
 80036ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d0:	f107 0318 	add.w	r3, r7, #24
 80036d4:	4619      	mov	r1, r3
 80036d6:	4823      	ldr	r0, [pc, #140]	; (8003764 <HAL_UART_MspInit+0x10c>)
 80036d8:	f000 fb3a 	bl	8003d50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80036dc:	2200      	movs	r2, #0
 80036de:	2105      	movs	r1, #5
 80036e0:	2025      	movs	r0, #37	; 0x25
 80036e2:	f000 fa4c 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036e6:	2025      	movs	r0, #37	; 0x25
 80036e8:	f000 fa65 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036ec:	e032      	b.n	8003754 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_UART_MspInit+0x110>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d12d      	bne.n	8003754 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_UART_MspInit+0x108>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_UART_MspInit+0x108>)
 80036fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003702:	61d3      	str	r3, [r2, #28]
 8003704:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_UART_MspInit+0x108>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_UART_MspInit+0x108>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4a12      	ldr	r2, [pc, #72]	; (8003760 <HAL_UART_MspInit+0x108>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6193      	str	r3, [r2, #24]
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_UART_MspInit+0x108>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003728:	2304      	movs	r3, #4
 800372a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800372c:	2312      	movs	r3, #18
 800372e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003730:	2301      	movs	r3, #1
 8003732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003734:	2303      	movs	r3, #3
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003738:	f107 0318 	add.w	r3, r7, #24
 800373c:	4619      	mov	r1, r3
 800373e:	4809      	ldr	r0, [pc, #36]	; (8003764 <HAL_UART_MspInit+0x10c>)
 8003740:	f000 fb06 	bl	8003d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003744:	2200      	movs	r2, #0
 8003746:	2105      	movs	r1, #5
 8003748:	2026      	movs	r0, #38	; 0x26
 800374a:	f000 fa18 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800374e:	2026      	movs	r0, #38	; 0x26
 8003750:	f000 fa31 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
}
 8003754:	bf00      	nop
 8003756:	3728      	adds	r7, #40	; 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40013800 	.word	0x40013800
 8003760:	40021000 	.word	0x40021000
 8003764:	40010800 	.word	0x40010800
 8003768:	40004400 	.word	0x40004400

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <NMI_Handler+0x4>

08003772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003776:	e7fe      	b.n	8003776 <HardFault_Handler+0x4>

08003778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800377c:	e7fe      	b.n	800377c <MemManage_Handler+0x4>

0800377e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003782:	e7fe      	b.n	8003782 <BusFault_Handler+0x4>

08003784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <UsageFault_Handler+0x4>

0800378a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b2:	f000 f8cd 	bl	8003950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}

080037ba <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap3_Pin);
 80037ca:	2080      	movs	r0, #128	; 0x80
 80037cc:	f000 fc84 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037d0:	bf00      	nop
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037d8:	4802      	ldr	r0, [pc, #8]	; (80037e4 <TIM1_UP_IRQHandler+0x10>)
 80037da:	f001 fea9 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000090 	.word	0x20000090

080037e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <TIM2_IRQHandler+0x10>)
 80037ee:	f001 fe9f 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200000d8 	.word	0x200000d8

080037fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <TIM3_IRQHandler+0x10>)
 8003802:	f001 fe95 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000120 	.word	0x20000120

08003810 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <SPI1_IRQHandler+0x10>)
 8003816:	f001 fac7 	bl	8004da8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000038 	.word	0x20000038

08003824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <USART1_IRQHandler+0x10>)
 800382a:	f002 fc7f 	bl	800612c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000168 	.word	0x20000168

08003838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <USART2_IRQHandler+0x10>)
 800383e:	f002 fc75 	bl	800612c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200001b0 	.word	0x200001b0

0800384c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap4_Pin);
 8003850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003854:	f000 fc40 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap1_Pin);
 8003858:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800385c:	f000 fc3c 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap2_Pin);
 8003860:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003864:	f000 fc38 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003868:	bf00      	nop
 800386a:	bd80      	pop	{r7, pc}

0800386c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003878:	f7ff fff8 	bl	800386c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800387e:	490c      	ldr	r1, [pc, #48]	; (80038b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003880:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003884:	e002      	b.n	800388c <LoopCopyDataInit>

08003886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388a:	3304      	adds	r3, #4

0800388c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800388c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800388e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003890:	d3f9      	bcc.n	8003886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003894:	4c09      	ldr	r4, [pc, #36]	; (80038bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003898:	e001      	b.n	800389e <LoopFillZerobss>

0800389a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800389c:	3204      	adds	r2, #4

0800389e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800389e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a0:	d3fb      	bcc.n	800389a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038a2:	f003 fa35 	bl	8006d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038a6:	f7fe febb 	bl	8002620 <main>
  bx lr
 80038aa:	4770      	bx	lr
  ldr r0, =_sdata
 80038ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80038b4:	08006da8 	.word	0x08006da8
  ldr r2, =_sbss
 80038b8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80038bc:	2000039c 	.word	0x2000039c

080038c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c0:	e7fe      	b.n	80038c0 <ADC1_2_IRQHandler>
	...

080038c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_Init+0x28>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <HAL_Init+0x28>)
 80038ce:	f043 0310 	orr.w	r3, r3, #16
 80038d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d4:	2003      	movs	r0, #3
 80038d6:	f000 f947 	bl	8003b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038da:	200f      	movs	r0, #15
 80038dc:	f000 f808 	bl	80038f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e0:	f7ff fd50 	bl	8003384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40022000 	.word	0x40022000

080038f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_InitTick+0x54>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_InitTick+0x58>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003906:	fbb3 f3f1 	udiv	r3, r3, r1
 800390a:	fbb2 f3f3 	udiv	r3, r2, r3
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f95f 	bl	8003bd2 <HAL_SYSTICK_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e00e      	b.n	800393c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b0f      	cmp	r3, #15
 8003922:	d80a      	bhi.n	800393a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003924:	2200      	movs	r2, #0
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800392c:	f000 f927 	bl	8003b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003930:	4a06      	ldr	r2, [pc, #24]	; (800394c <HAL_InitTick+0x5c>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000010 	.word	0x20000010
 8003948:	20000018 	.word	0x20000018
 800394c:	20000014 	.word	0x20000014

08003950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_IncTick+0x1c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_IncTick+0x20>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4413      	add	r3, r2
 8003960:	4a03      	ldr	r2, [pc, #12]	; (8003970 <HAL_IncTick+0x20>)
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	20000018 	.word	0x20000018
 8003970:	20000398 	.word	0x20000398

08003974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return uwTick;
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <HAL_GetTick+0x10>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	20000398 	.word	0x20000398

08003988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003990:	f7ff fff0 	bl	8003974 <HAL_GetTick>
 8003994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a0:	d005      	beq.n	80039ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <HAL_Delay+0x44>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039ae:	bf00      	nop
 80039b0:	f7ff ffe0 	bl	8003974 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d8f7      	bhi.n	80039b0 <HAL_Delay+0x28>
  {
  }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000018 	.word	0x20000018

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4906      	ldr	r1, [pc, #24]	; (8003a68 <__NVIC_EnableIRQ+0x34>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	; (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf28      	it	cs
 8003ade:	2304      	movcs	r3, #4
 8003ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d902      	bls.n	8003af0 <NVIC_EncodePriority+0x30>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3b03      	subs	r3, #3
 8003aee:	e000      	b.n	8003af2 <NVIC_EncodePriority+0x32>
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	4313      	orrs	r3, r2
         );
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b34:	d301      	bcc.n	8003b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00f      	b.n	8003b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <SysTick_Config+0x40>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b42:	210f      	movs	r1, #15
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b48:	f7ff ff90 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <SysTick_Config+0x40>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <SysTick_Config+0x40>)
 8003b54:	2207      	movs	r2, #7
 8003b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	e000e010 	.word	0xe000e010

08003b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff2d 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	4603      	mov	r3, r0
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b90:	f7ff ff42 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	6978      	ldr	r0, [r7, #20]
 8003b9c:	f7ff ff90 	bl	8003ac0 <NVIC_EncodePriority>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff5f 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff35 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ffa2 	bl	8003b24 <SysTick_Config>
 8003be0:	4603      	mov	r3, r0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d008      	beq.n	8003c14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2204      	movs	r2, #4
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e020      	b.n	8003c56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 020e 	bic.w	r2, r2, #14
 8003c22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d005      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	e051      	b.n	8003d28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 020e 	bic.w	r2, r2, #14
 8003c92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_DMA_Abort_IT+0xd4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d029      	beq.n	8003d02 <HAL_DMA_Abort_IT+0xa2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <HAL_DMA_Abort_IT+0xd8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d022      	beq.n	8003cfe <HAL_DMA_Abort_IT+0x9e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_DMA_Abort_IT+0xdc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01a      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x98>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <HAL_DMA_Abort_IT+0xe0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d012      	beq.n	8003cf2 <HAL_DMA_Abort_IT+0x92>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_DMA_Abort_IT+0xe4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00a      	beq.n	8003cec <HAL_DMA_Abort_IT+0x8c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <HAL_DMA_Abort_IT+0xe8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d102      	bne.n	8003ce6 <HAL_DMA_Abort_IT+0x86>
 8003ce0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ce4:	e00e      	b.n	8003d04 <HAL_DMA_Abort_IT+0xa4>
 8003ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cea:	e00b      	b.n	8003d04 <HAL_DMA_Abort_IT+0xa4>
 8003cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cf0:	e008      	b.n	8003d04 <HAL_DMA_Abort_IT+0xa4>
 8003cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf6:	e005      	b.n	8003d04 <HAL_DMA_Abort_IT+0xa4>
 8003cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfc:	e002      	b.n	8003d04 <HAL_DMA_Abort_IT+0xa4>
 8003cfe:	2310      	movs	r3, #16
 8003d00:	e000      	b.n	8003d04 <HAL_DMA_Abort_IT+0xa4>
 8003d02:	2301      	movs	r3, #1
 8003d04:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <HAL_DMA_Abort_IT+0xec>)
 8003d06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
    } 
  }
  return status;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40020008 	.word	0x40020008
 8003d38:	4002001c 	.word	0x4002001c
 8003d3c:	40020030 	.word	0x40020030
 8003d40:	40020044 	.word	0x40020044
 8003d44:	40020058 	.word	0x40020058
 8003d48:	4002006c 	.word	0x4002006c
 8003d4c:	40020000 	.word	0x40020000

08003d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b08b      	sub	sp, #44	; 0x2c
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d62:	e161      	b.n	8004028 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d64:	2201      	movs	r2, #1
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	f040 8150 	bne.w	8004022 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4a97      	ldr	r2, [pc, #604]	; (8003fe4 <HAL_GPIO_Init+0x294>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d05e      	beq.n	8003e4a <HAL_GPIO_Init+0xfa>
 8003d8c:	4a95      	ldr	r2, [pc, #596]	; (8003fe4 <HAL_GPIO_Init+0x294>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d875      	bhi.n	8003e7e <HAL_GPIO_Init+0x12e>
 8003d92:	4a95      	ldr	r2, [pc, #596]	; (8003fe8 <HAL_GPIO_Init+0x298>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d058      	beq.n	8003e4a <HAL_GPIO_Init+0xfa>
 8003d98:	4a93      	ldr	r2, [pc, #588]	; (8003fe8 <HAL_GPIO_Init+0x298>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d86f      	bhi.n	8003e7e <HAL_GPIO_Init+0x12e>
 8003d9e:	4a93      	ldr	r2, [pc, #588]	; (8003fec <HAL_GPIO_Init+0x29c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d052      	beq.n	8003e4a <HAL_GPIO_Init+0xfa>
 8003da4:	4a91      	ldr	r2, [pc, #580]	; (8003fec <HAL_GPIO_Init+0x29c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d869      	bhi.n	8003e7e <HAL_GPIO_Init+0x12e>
 8003daa:	4a91      	ldr	r2, [pc, #580]	; (8003ff0 <HAL_GPIO_Init+0x2a0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d04c      	beq.n	8003e4a <HAL_GPIO_Init+0xfa>
 8003db0:	4a8f      	ldr	r2, [pc, #572]	; (8003ff0 <HAL_GPIO_Init+0x2a0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d863      	bhi.n	8003e7e <HAL_GPIO_Init+0x12e>
 8003db6:	4a8f      	ldr	r2, [pc, #572]	; (8003ff4 <HAL_GPIO_Init+0x2a4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d046      	beq.n	8003e4a <HAL_GPIO_Init+0xfa>
 8003dbc:	4a8d      	ldr	r2, [pc, #564]	; (8003ff4 <HAL_GPIO_Init+0x2a4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d85d      	bhi.n	8003e7e <HAL_GPIO_Init+0x12e>
 8003dc2:	2b12      	cmp	r3, #18
 8003dc4:	d82a      	bhi.n	8003e1c <HAL_GPIO_Init+0xcc>
 8003dc6:	2b12      	cmp	r3, #18
 8003dc8:	d859      	bhi.n	8003e7e <HAL_GPIO_Init+0x12e>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_GPIO_Init+0x80>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003e4b 	.word	0x08003e4b
 8003dd4:	08003e25 	.word	0x08003e25
 8003dd8:	08003e37 	.word	0x08003e37
 8003ddc:	08003e79 	.word	0x08003e79
 8003de0:	08003e7f 	.word	0x08003e7f
 8003de4:	08003e7f 	.word	0x08003e7f
 8003de8:	08003e7f 	.word	0x08003e7f
 8003dec:	08003e7f 	.word	0x08003e7f
 8003df0:	08003e7f 	.word	0x08003e7f
 8003df4:	08003e7f 	.word	0x08003e7f
 8003df8:	08003e7f 	.word	0x08003e7f
 8003dfc:	08003e7f 	.word	0x08003e7f
 8003e00:	08003e7f 	.word	0x08003e7f
 8003e04:	08003e7f 	.word	0x08003e7f
 8003e08:	08003e7f 	.word	0x08003e7f
 8003e0c:	08003e7f 	.word	0x08003e7f
 8003e10:	08003e7f 	.word	0x08003e7f
 8003e14:	08003e2d 	.word	0x08003e2d
 8003e18:	08003e41 	.word	0x08003e41
 8003e1c:	4a76      	ldr	r2, [pc, #472]	; (8003ff8 <HAL_GPIO_Init+0x2a8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e22:	e02c      	b.n	8003e7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	623b      	str	r3, [r7, #32]
          break;
 8003e2a:	e029      	b.n	8003e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	3304      	adds	r3, #4
 8003e32:	623b      	str	r3, [r7, #32]
          break;
 8003e34:	e024      	b.n	8003e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	623b      	str	r3, [r7, #32]
          break;
 8003e3e:	e01f      	b.n	8003e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	330c      	adds	r3, #12
 8003e46:	623b      	str	r3, [r7, #32]
          break;
 8003e48:	e01a      	b.n	8003e80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e52:	2304      	movs	r3, #4
 8003e54:	623b      	str	r3, [r7, #32]
          break;
 8003e56:	e013      	b.n	8003e80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d105      	bne.n	8003e6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e60:	2308      	movs	r3, #8
 8003e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	611a      	str	r2, [r3, #16]
          break;
 8003e6a:	e009      	b.n	8003e80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	615a      	str	r2, [r3, #20]
          break;
 8003e76:	e003      	b.n	8003e80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	623b      	str	r3, [r7, #32]
          break;
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x130>
          break;
 8003e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2bff      	cmp	r3, #255	; 0xff
 8003e84:	d801      	bhi.n	8003e8a <HAL_GPIO_Init+0x13a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	e001      	b.n	8003e8e <HAL_GPIO_Init+0x13e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2bff      	cmp	r3, #255	; 0xff
 8003e94:	d802      	bhi.n	8003e9c <HAL_GPIO_Init+0x14c>
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	e002      	b.n	8003ea2 <HAL_GPIO_Init+0x152>
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	3b08      	subs	r3, #8
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	210f      	movs	r1, #15
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	6a39      	ldr	r1, [r7, #32]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80a9 	beq.w	8004022 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ed0:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <HAL_GPIO_Init+0x2ac>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	4a49      	ldr	r2, [pc, #292]	; (8003ffc <HAL_GPIO_Init+0x2ac>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6193      	str	r3, [r2, #24]
 8003edc:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <HAL_GPIO_Init+0x2ac>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ee8:	4a45      	ldr	r2, [pc, #276]	; (8004000 <HAL_GPIO_Init+0x2b0>)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	3302      	adds	r3, #2
 8003ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	220f      	movs	r2, #15
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3d      	ldr	r2, [pc, #244]	; (8004004 <HAL_GPIO_Init+0x2b4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00d      	beq.n	8003f30 <HAL_GPIO_Init+0x1e0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3c      	ldr	r2, [pc, #240]	; (8004008 <HAL_GPIO_Init+0x2b8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <HAL_GPIO_Init+0x1dc>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3b      	ldr	r2, [pc, #236]	; (800400c <HAL_GPIO_Init+0x2bc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_GPIO_Init+0x1d8>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e004      	b.n	8003f32 <HAL_GPIO_Init+0x1e2>
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e002      	b.n	8003f32 <HAL_GPIO_Init+0x1e2>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_GPIO_Init+0x1e2>
 8003f30:	2300      	movs	r3, #0
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	f002 0203 	and.w	r2, r2, #3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4093      	lsls	r3, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f42:	492f      	ldr	r1, [pc, #188]	; (8004000 <HAL_GPIO_Init+0x2b0>)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	492b      	ldr	r1, [pc, #172]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]
 8003f68:	e006      	b.n	8003f78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f6a:	4b29      	ldr	r3, [pc, #164]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	4927      	ldr	r1, [pc, #156]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f84:	4b22      	ldr	r3, [pc, #136]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	4921      	ldr	r1, [pc, #132]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60cb      	str	r3, [r1, #12]
 8003f90:	e006      	b.n	8003fa0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f92:	4b1f      	ldr	r3, [pc, #124]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	491d      	ldr	r1, [pc, #116]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d006      	beq.n	8003fba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	4917      	ldr	r1, [pc, #92]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
 8003fb8:	e006      	b.n	8003fc8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	4913      	ldr	r1, [pc, #76]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01f      	beq.n	8004014 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	490d      	ldr	r1, [pc, #52]	; (8004010 <HAL_GPIO_Init+0x2c0>)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e01f      	b.n	8004022 <HAL_GPIO_Init+0x2d2>
 8003fe2:	bf00      	nop
 8003fe4:	10320000 	.word	0x10320000
 8003fe8:	10310000 	.word	0x10310000
 8003fec:	10220000 	.word	0x10220000
 8003ff0:	10210000 	.word	0x10210000
 8003ff4:	10120000 	.word	0x10120000
 8003ff8:	10110000 	.word	0x10110000
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40010000 	.word	0x40010000
 8004004:	40010800 	.word	0x40010800
 8004008:	40010c00 	.word	0x40010c00
 800400c:	40011000 	.word	0x40011000
 8004010:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_GPIO_Init+0x2f4>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	43db      	mvns	r3, r3
 800401c:	4909      	ldr	r1, [pc, #36]	; (8004044 <HAL_GPIO_Init+0x2f4>)
 800401e:	4013      	ands	r3, r2
 8004020:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	3301      	adds	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	f47f ae96 	bne.w	8003d64 <HAL_GPIO_Init+0x14>
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	372c      	adds	r7, #44	; 0x2c
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	40010400 	.word	0x40010400

08004048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e001      	b.n	800406a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	807b      	strh	r3, [r7, #2]
 8004082:	4613      	mov	r3, r2
 8004084:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004086:	787b      	ldrb	r3, [r7, #1]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408c:	887a      	ldrh	r2, [r7, #2]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004092:	e003      	b.n	800409c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004094:	887b      	ldrh	r3, [r7, #2]
 8004096:	041a      	lsls	r2, r3, #16
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	611a      	str	r2, [r3, #16]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040b8:	887a      	ldrh	r2, [r7, #2]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4013      	ands	r3, r2
 80040be:	041a      	lsls	r2, r3, #16
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	43d9      	mvns	r1, r3
 80040c4:	887b      	ldrh	r3, [r7, #2]
 80040c6:	400b      	ands	r3, r1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	611a      	str	r2, [r3, #16]
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ee:	4a05      	ldr	r2, [pc, #20]	; (8004104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe ffb0 	bl	800305c <HAL_GPIO_EXTI_Callback>
  }
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40010400 	.word	0x40010400

08004108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e272      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8087 	beq.w	8004236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004128:	4b92      	ldr	r3, [pc, #584]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b04      	cmp	r3, #4
 8004132:	d00c      	beq.n	800414e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004134:	4b8f      	ldr	r3, [pc, #572]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b08      	cmp	r3, #8
 800413e:	d112      	bne.n	8004166 <HAL_RCC_OscConfig+0x5e>
 8004140:	4b8c      	ldr	r3, [pc, #560]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414c:	d10b      	bne.n	8004166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414e:	4b89      	ldr	r3, [pc, #548]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d06c      	beq.n	8004234 <HAL_RCC_OscConfig+0x12c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d168      	bne.n	8004234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e24c      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x76>
 8004170:	4b80      	ldr	r3, [pc, #512]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7f      	ldr	r2, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	e02e      	b.n	80041dc <HAL_RCC_OscConfig+0xd4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x98>
 8004186:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7a      	ldr	r2, [pc, #488]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 800418c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b78      	ldr	r3, [pc, #480]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a77      	ldr	r2, [pc, #476]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e01d      	b.n	80041dc <HAL_RCC_OscConfig+0xd4>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCC_OscConfig+0xbc>
 80041aa:	4b72      	ldr	r3, [pc, #456]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a71      	ldr	r2, [pc, #452]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b6f      	ldr	r3, [pc, #444]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a6e      	ldr	r2, [pc, #440]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e00b      	b.n	80041dc <HAL_RCC_OscConfig+0xd4>
 80041c4:	4b6b      	ldr	r3, [pc, #428]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a6a      	ldr	r2, [pc, #424]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	4b68      	ldr	r3, [pc, #416]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a67      	ldr	r2, [pc, #412]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d013      	beq.n	800420c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7ff fbc6 	bl	8003974 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ec:	f7ff fbc2 	bl	8003974 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e200      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b5d      	ldr	r3, [pc, #372]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0xe4>
 800420a:	e014      	b.n	8004236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7ff fbb2 	bl	8003974 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004214:	f7ff fbae 	bl	8003974 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	; 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e1ec      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004226:	4b53      	ldr	r3, [pc, #332]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x10c>
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d063      	beq.n	800430a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004242:	4b4c      	ldr	r3, [pc, #304]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00b      	beq.n	8004266 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800424e:	4b49      	ldr	r3, [pc, #292]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b08      	cmp	r3, #8
 8004258:	d11c      	bne.n	8004294 <HAL_RCC_OscConfig+0x18c>
 800425a:	4b46      	ldr	r3, [pc, #280]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d116      	bne.n	8004294 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004266:	4b43      	ldr	r3, [pc, #268]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_RCC_OscConfig+0x176>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d001      	beq.n	800427e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e1c0      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427e:	4b3d      	ldr	r3, [pc, #244]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4939      	ldr	r1, [pc, #228]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 800428e:	4313      	orrs	r3, r2
 8004290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	e03a      	b.n	800430a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <HAL_RCC_OscConfig+0x270>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a2:	f7ff fb67 	bl	8003974 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042aa:	f7ff fb63 	bl	8003974 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e1a1      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042bc:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4927      	ldr	r1, [pc, #156]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]
 80042dc:	e015      	b.n	800430a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCC_OscConfig+0x270>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7ff fb46 	bl	8003974 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ec:	f7ff fb42 	bl	8003974 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e180      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fe:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03a      	beq.n	800438c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d019      	beq.n	8004352 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431e:	4b17      	ldr	r3, [pc, #92]	; (800437c <HAL_RCC_OscConfig+0x274>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004324:	f7ff fb26 	bl	8003974 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432c:	f7ff fb22 	bl	8003974 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e160      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_RCC_OscConfig+0x26c>)
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800434a:	2001      	movs	r0, #1
 800434c:	f000 fada 	bl	8004904 <RCC_Delay>
 8004350:	e01c      	b.n	800438c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <HAL_RCC_OscConfig+0x274>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004358:	f7ff fb0c 	bl	8003974 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800435e:	e00f      	b.n	8004380 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004360:	f7ff fb08 	bl	8003974 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d908      	bls.n	8004380 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e146      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000
 8004378:	42420000 	.word	0x42420000
 800437c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004380:	4b92      	ldr	r3, [pc, #584]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e9      	bne.n	8004360 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a6 	beq.w	80044e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439e:	4b8b      	ldr	r3, [pc, #556]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10d      	bne.n	80043c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4a87      	ldr	r2, [pc, #540]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b4:	61d3      	str	r3, [r2, #28]
 80043b6:	4b85      	ldr	r3, [pc, #532]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c6:	4b82      	ldr	r3, [pc, #520]	; (80045d0 <HAL_RCC_OscConfig+0x4c8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d118      	bne.n	8004404 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d2:	4b7f      	ldr	r3, [pc, #508]	; (80045d0 <HAL_RCC_OscConfig+0x4c8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a7e      	ldr	r2, [pc, #504]	; (80045d0 <HAL_RCC_OscConfig+0x4c8>)
 80043d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043de:	f7ff fac9 	bl	8003974 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e6:	f7ff fac5 	bl	8003974 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b64      	cmp	r3, #100	; 0x64
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e103      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f8:	4b75      	ldr	r3, [pc, #468]	; (80045d0 <HAL_RCC_OscConfig+0x4c8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d106      	bne.n	800441a <HAL_RCC_OscConfig+0x312>
 800440c:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6213      	str	r3, [r2, #32]
 8004418:	e02d      	b.n	8004476 <HAL_RCC_OscConfig+0x36e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0x334>
 8004422:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	4a69      	ldr	r2, [pc, #420]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	6213      	str	r3, [r2, #32]
 800442e:	4b67      	ldr	r3, [pc, #412]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	4a66      	ldr	r2, [pc, #408]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	6213      	str	r3, [r2, #32]
 800443a:	e01c      	b.n	8004476 <HAL_RCC_OscConfig+0x36e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b05      	cmp	r3, #5
 8004442:	d10c      	bne.n	800445e <HAL_RCC_OscConfig+0x356>
 8004444:	4b61      	ldr	r3, [pc, #388]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a60      	ldr	r2, [pc, #384]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 800444a:	f043 0304 	orr.w	r3, r3, #4
 800444e:	6213      	str	r3, [r2, #32]
 8004450:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	4a5d      	ldr	r2, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6213      	str	r3, [r2, #32]
 800445c:	e00b      	b.n	8004476 <HAL_RCC_OscConfig+0x36e>
 800445e:	4b5b      	ldr	r3, [pc, #364]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4a5a      	ldr	r2, [pc, #360]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	6213      	str	r3, [r2, #32]
 800446a:	4b58      	ldr	r3, [pc, #352]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4a57      	ldr	r2, [pc, #348]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004470:	f023 0304 	bic.w	r3, r3, #4
 8004474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d015      	beq.n	80044aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7ff fa79 	bl	8003974 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7ff fa75 	bl	8003974 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e0b1      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449c:	4b4b      	ldr	r3, [pc, #300]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ee      	beq.n	8004486 <HAL_RCC_OscConfig+0x37e>
 80044a8:	e014      	b.n	80044d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044aa:	f7ff fa63 	bl	8003974 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b2:	f7ff fa5f 	bl	8003974 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e09b      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c8:	4b40      	ldr	r3, [pc, #256]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ee      	bne.n	80044b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044da:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4a3b      	ldr	r2, [pc, #236]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8087 	beq.w	80045fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f0:	4b36      	ldr	r3, [pc, #216]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d061      	beq.n	80045c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d146      	bne.n	8004592 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004504:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <HAL_RCC_OscConfig+0x4cc>)
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450a:	f7ff fa33 	bl	8003974 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004512:	f7ff fa2f 	bl	8003974 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e06d      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004524:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d108      	bne.n	800454c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800453a:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	4921      	ldr	r1, [pc, #132]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a19      	ldr	r1, [r3, #32]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	430b      	orrs	r3, r1
 800455e:	491b      	ldr	r1, [pc, #108]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_RCC_OscConfig+0x4cc>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7ff fa03 	bl	8003974 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004572:	f7ff f9ff 	bl	8003974 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e03d      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x46a>
 8004590:	e035      	b.n	80045fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <HAL_RCC_OscConfig+0x4cc>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7ff f9ec 	bl	8003974 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7ff f9e8 	bl	8003974 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e026      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x498>
 80045be:	e01e      	b.n	80045fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e019      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40007000 	.word	0x40007000
 80045d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_OscConfig+0x500>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d106      	bne.n	80045fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d001      	beq.n	80045fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000

0800460c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0d0      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004620:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d910      	bls.n	8004650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b67      	ldr	r3, [pc, #412]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 0207 	bic.w	r2, r3, #7
 8004636:	4965      	ldr	r1, [pc, #404]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463e:	4b63      	ldr	r3, [pc, #396]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0b8      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d020      	beq.n	800469e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a58      	ldr	r2, [pc, #352]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 800466e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004672:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4a52      	ldr	r2, [pc, #328]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800468a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	494d      	ldr	r1, [pc, #308]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d040      	beq.n	800472c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d115      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e07f      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e073      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046da:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e06b      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4936      	ldr	r1, [pc, #216]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046fc:	f7ff f93a 	bl	8003974 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	e00a      	b.n	800471a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7ff f936 	bl	8003974 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e053      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	4b2d      	ldr	r3, [pc, #180]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 020c 	and.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	429a      	cmp	r2, r3
 800472a:	d1eb      	bne.n	8004704 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800472c:	4b27      	ldr	r3, [pc, #156]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d210      	bcs.n	800475c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 0207 	bic.w	r2, r3, #7
 8004742:	4922      	ldr	r1, [pc, #136]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b20      	ldr	r3, [pc, #128]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e032      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004768:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4916      	ldr	r1, [pc, #88]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	490e      	ldr	r1, [pc, #56]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800479a:	f000 f82d 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 800479e:	4602      	mov	r2, r0
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	490a      	ldr	r1, [pc, #40]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	5ccb      	ldrb	r3, [r1, r3]
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <HAL_RCC_ClockConfig+0x1cc>)
 80047b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCC_ClockConfig+0x1d0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff f898 	bl	80038f0 <HAL_InitTick>

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40021000 	.word	0x40021000
 80047d4:	08006d70 	.word	0x08006d70
 80047d8:	20000010 	.word	0x20000010
 80047dc:	20000014 	.word	0x20000014

080047e0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_RCC_EnableCSS+0x14>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	4242004c 	.word	0x4242004c

080047f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004812:	4b1e      	ldr	r3, [pc, #120]	; (800488c <HAL_RCC_GetSysClockFreq+0x94>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b04      	cmp	r3, #4
 8004820:	d002      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0x30>
 8004822:	2b08      	cmp	r3, #8
 8004824:	d003      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0x36>
 8004826:	e027      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <HAL_RCC_GetSysClockFreq+0x98>)
 800482a:	613b      	str	r3, [r7, #16]
      break;
 800482c:	e027      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	0c9b      	lsrs	r3, r3, #18
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	4a17      	ldr	r2, [pc, #92]	; (8004894 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004838:	5cd3      	ldrb	r3, [r2, r3]
 800483a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d010      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCC_GetSysClockFreq+0x94>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	0c5b      	lsrs	r3, r3, #17
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	4a11      	ldr	r2, [pc, #68]	; (8004898 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004852:	5cd3      	ldrb	r3, [r2, r3]
 8004854:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <HAL_RCC_GetSysClockFreq+0x98>)
 800485a:	fb03 f202 	mul.w	r2, r3, r2
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e004      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a0c      	ldr	r2, [pc, #48]	; (800489c <HAL_RCC_GetSysClockFreq+0xa4>)
 800486c:	fb02 f303 	mul.w	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	613b      	str	r3, [r7, #16]
      break;
 8004876:	e002      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_GetSysClockFreq+0x98>)
 800487a:	613b      	str	r3, [r7, #16]
      break;
 800487c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800487e:	693b      	ldr	r3, [r7, #16]
}
 8004880:	4618      	mov	r0, r3
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	007a1200 	.word	0x007a1200
 8004894:	08006d88 	.word	0x08006d88
 8004898:	08006d98 	.word	0x08006d98
 800489c:	003d0900 	.word	0x003d0900

080048a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	20000010 	.word	0x20000010

080048b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048b8:	f7ff fff2 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	0a1b      	lsrs	r3, r3, #8
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	4903      	ldr	r1, [pc, #12]	; (80048d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ca:	5ccb      	ldrb	r3, [r1, r3]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	08006d80 	.word	0x08006d80

080048dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048e0:	f7ff ffde 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	0adb      	lsrs	r3, r3, #11
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4903      	ldr	r1, [pc, #12]	; (8004900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021000 	.word	0x40021000
 8004900:	08006d80 	.word	0x08006d80

08004904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <RCC_Delay+0x34>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <RCC_Delay+0x38>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	0a5b      	lsrs	r3, r3, #9
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004920:	bf00      	nop
  }
  while (Delay --);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1e5a      	subs	r2, r3, #1
 8004926:	60fa      	str	r2, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f9      	bne.n	8004920 <RCC_Delay+0x1c>
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	20000010 	.word	0x20000010
 800493c:	10624dd3 	.word	0x10624dd3

08004940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e076      	b.n	8004a40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d108      	bne.n	800496c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004962:	d009      	beq.n	8004978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	61da      	str	r2, [r3, #28]
 800496a:	e005      	b.n	8004978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fe fd30 	bl	80033f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	ea42 0103 	orr.w	r1, r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	0c1a      	lsrs	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f002 0204 	and.w	r2, r2, #4
 8004a1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a56:	2301      	movs	r3, #1
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x26>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e198      	b.n	8004da0 <HAL_SPI_TransmitReceive+0x358>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a76:	f7fe ff7d 	bl	8003974 <HAL_GetTick>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d00f      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x70>
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9e:	d107      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x68>
 8004aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d003      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ab6:	e16d      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x82>
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ad0:	e160      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d003      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2205      	movs	r2, #5
 8004ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	887a      	ldrh	r2, [r7, #2]
 8004af6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	887a      	ldrh	r2, [r7, #2]
 8004afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	887a      	ldrh	r2, [r7, #2]
 8004b0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d007      	beq.n	8004b3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	d17c      	bne.n	8004c3e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_TransmitReceive+0x10a>
 8004b4c:	8b7b      	ldrh	r3, [r7, #26]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d16a      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b76:	e057      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d11b      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x176>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d016      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x176>
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d113      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	881a      	ldrh	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d119      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x1b8>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	b292      	uxth	r2, r2
 8004be2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c00:	f7fe feb8 	bl	8003974 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d80b      	bhi.n	8004c28 <HAL_SPI_TransmitReceive+0x1e0>
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c16:	d007      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004c26:	e0b5      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1a2      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x130>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d19d      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x130>
 8004c3c:	e080      	b.n	8004d40 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_TransmitReceive+0x204>
 8004c46:	8b7b      	ldrh	r3, [r7, #26]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d16f      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c72:	e05b      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d11c      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x274>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <HAL_SPI_TransmitReceive+0x274>
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d114      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d119      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x2b6>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d014      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cfe:	f7fe fe39 	bl	8003974 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d803      	bhi.n	8004d16 <HAL_SPI_TransmitReceive+0x2ce>
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d14:	d102      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x2d4>
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d107      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d2a:	e033      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d19e      	bne.n	8004c74 <HAL_SPI_TransmitReceive+0x22c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d199      	bne.n	8004c74 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f9b3 	bl	80050b0 <SPI_EndRxTxTransaction>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d006      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d5c:	e01a      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8a:	e003      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3730      	adds	r7, #48	; 0x30
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10e      	bne.n	8004de8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d009      	beq.n	8004de8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
    return;
 8004de6:	e0b7      	b.n	8004f58 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <HAL_SPI_IRQHandler+0x5e>
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
    return;
 8004e04:	e0a8      	b.n	8004f58 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_SPI_IRQHandler+0x74>
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 809e 	beq.w	8004f58 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8098 	beq.w	8004f58 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d023      	beq.n	8004e7a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d011      	beq.n	8004e62 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	f043 0204 	orr.w	r2, r3, #4
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	e00b      	b.n	8004e7a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	693b      	ldr	r3, [r7, #16]
        return;
 8004e78:	e06e      	b.n	8004f58 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d014      	beq.n	8004eae <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	f043 0201 	orr.w	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d04f      	beq.n	8004f56 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <HAL_SPI_IRQHandler+0x13a>
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d034      	beq.n	8004f4c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0203 	bic.w	r2, r2, #3
 8004ef0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d011      	beq.n	8004f1e <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <HAL_SPI_IRQHandler+0x1b8>)
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe feaa 	bl	8003c60 <HAL_DMA_Abort_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2a:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <HAL_SPI_IRQHandler+0x1b8>)
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fe94 	bl	8003c60 <HAL_DMA_Abort_IT>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004f4a:	e003      	b.n	8004f54 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f809 	bl	8004f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f52:	e000      	b.n	8004f56 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8004f54:	bf00      	nop
    return;
 8004f56:	bf00      	nop
  }
}
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	08004f77 	.word	0x08004f77

08004f64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff ffe7 	bl	8004f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fb0:	f7fe fce0 	bl	8003974 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fc0:	f7fe fcd8 	bl	8003974 <HAL_GetTick>
 8004fc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fc6:	4b39      	ldr	r3, [pc, #228]	; (80050ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	015b      	lsls	r3, r3, #5
 8004fcc:	0d1b      	lsrs	r3, r3, #20
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	fb02 f303 	mul.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd6:	e054      	b.n	8005082 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fde:	d050      	beq.n	8005082 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fe0:	f7fe fcc8 	bl	8003974 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d902      	bls.n	8004ff6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d13d      	bne.n	8005072 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500e:	d111      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005018:	d004      	beq.n	8005024 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005022:	d107      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503c:	d10f      	bne.n	800505e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e017      	b.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3b01      	subs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	429a      	cmp	r2, r3
 800509e:	d19b      	bne.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000010 	.word	0x20000010

080050b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2180      	movs	r1, #128	; 0x80
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff ff6a 	bl	8004fa0 <SPI_WaitFlagStateUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f043 0220 	orr.w	r2, r3, #32
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e000      	b.n	80050e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e041      	b.n	8005182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f839 	bl	800518a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f000 fbee 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d001      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e035      	b.n	8005220 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a16      	ldr	r2, [pc, #88]	; (800522c <HAL_TIM_Base_Start_IT+0x90>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIM_Base_Start_IT+0x4e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051de:	d004      	beq.n	80051ea <HAL_TIM_Base_Start_IT+0x4e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a12      	ldr	r2, [pc, #72]	; (8005230 <HAL_TIM_Base_Start_IT+0x94>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d111      	bne.n	800520e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b06      	cmp	r3, #6
 80051fa:	d010      	beq.n	800521e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520c:	e007      	b.n	800521e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0201 	orr.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40000400 	.word	0x40000400

08005234 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	f241 1311 	movw	r3, #4369	; 0x1111
 8005256:	4013      	ands	r3, r2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10f      	bne.n	800527c <HAL_TIM_Base_Stop_IT+0x48>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	f240 4344 	movw	r3, #1092	; 0x444
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <HAL_TIM_Base_Stop_IT+0x48>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e041      	b.n	8005326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fe f900 	bl	80034bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f000 fb1c 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d109      	bne.n	8005354 <HAL_TIM_PWM_Start+0x24>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e022      	b.n	800539a <HAL_TIM_PWM_Start+0x6a>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d109      	bne.n	800536e <HAL_TIM_PWM_Start+0x3e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	bf14      	ite	ne
 8005366:	2301      	movne	r3, #1
 8005368:	2300      	moveq	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	e015      	b.n	800539a <HAL_TIM_PWM_Start+0x6a>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b08      	cmp	r3, #8
 8005372:	d109      	bne.n	8005388 <HAL_TIM_PWM_Start+0x58>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e008      	b.n	800539a <HAL_TIM_PWM_Start+0x6a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e059      	b.n	8005456 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_PWM_Start+0x82>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b0:	e013      	b.n	80053da <HAL_TIM_PWM_Start+0xaa>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_PWM_Start+0x92>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c0:	e00b      	b.n	80053da <HAL_TIM_PWM_Start+0xaa>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_PWM_Start+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d0:	e003      	b.n	80053da <HAL_TIM_PWM_Start+0xaa>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2201      	movs	r2, #1
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fc72 	bl	8005ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <HAL_TIM_PWM_Start+0x130>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a16      	ldr	r2, [pc, #88]	; (8005460 <HAL_TIM_PWM_Start+0x130>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_TIM_PWM_Start+0xf0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005414:	d004      	beq.n	8005420 <HAL_TIM_PWM_Start+0xf0>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <HAL_TIM_PWM_Start+0x134>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d111      	bne.n	8005444 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b06      	cmp	r3, #6
 8005430:	d010      	beq.n	8005454 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005442:	e007      	b.n	8005454 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40000400 	.word	0x40000400

08005468 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2200      	movs	r2, #0
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fc26 	bl	8005ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a29      	ldr	r2, [pc, #164]	; (800552c <HAL_TIM_PWM_Stop+0xc4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d117      	bne.n	80054ba <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	f241 1311 	movw	r3, #4369	; 0x1111
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10f      	bne.n	80054ba <HAL_TIM_PWM_Stop+0x52>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	f240 4344 	movw	r3, #1092	; 0x444
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <HAL_TIM_PWM_Stop+0x52>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <HAL_TIM_PWM_Stop+0x82>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	f240 4344 	movw	r3, #1092	; 0x444
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <HAL_TIM_PWM_Stop+0x82>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Stop+0x92>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f8:	e013      	b.n	8005522 <HAL_TIM_PWM_Stop+0xba>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Stop+0xa2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005508:	e00b      	b.n	8005522 <HAL_TIM_PWM_Stop+0xba>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Stop+0xb2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005518:	e003      	b.n	8005522 <HAL_TIM_PWM_Stop+0xba>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40012c00 	.word	0x40012c00

08005530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d122      	bne.n	800558c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0202 	mvn.w	r2, #2
 800555c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9af 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9a2 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f9b1 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d122      	bne.n	80055e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d11b      	bne.n	80055e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0204 	mvn.w	r2, #4
 80055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f985 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f978 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f987 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d122      	bne.n	8005634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d11b      	bne.n	8005634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0208 	mvn.w	r2, #8
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2204      	movs	r2, #4
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f95b 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f94e 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f95d 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b10      	cmp	r3, #16
 8005640:	d122      	bne.n	8005688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b10      	cmp	r3, #16
 800564e:	d11b      	bne.n	8005688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0210 	mvn.w	r2, #16
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2208      	movs	r2, #8
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f931 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f924 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f933 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b01      	cmp	r3, #1
 8005694:	d10e      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d107      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0201 	mvn.w	r2, #1
 80056ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fd fd76 	bl	80031a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	2b80      	cmp	r3, #128	; 0x80
 80056c0:	d10e      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d107      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fbcc 	bl	8005e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d10e      	bne.n	800570c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d107      	bne.n	800570c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f8f7 	bl	80058fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b20      	cmp	r3, #32
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b20      	cmp	r3, #32
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0220 	mvn.w	r2, #32
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fb97 	bl	8005e66 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800575a:	2302      	movs	r3, #2
 800575c:	e0ae      	b.n	80058bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b0c      	cmp	r3, #12
 800576a:	f200 809f 	bhi.w	80058ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	080057a9 	.word	0x080057a9
 8005778:	080058ad 	.word	0x080058ad
 800577c:	080058ad 	.word	0x080058ad
 8005780:	080058ad 	.word	0x080058ad
 8005784:	080057e9 	.word	0x080057e9
 8005788:	080058ad 	.word	0x080058ad
 800578c:	080058ad 	.word	0x080058ad
 8005790:	080058ad 	.word	0x080058ad
 8005794:	0800582b 	.word	0x0800582b
 8005798:	080058ad 	.word	0x080058ad
 800579c:	080058ad 	.word	0x080058ad
 80057a0:	080058ad 	.word	0x080058ad
 80057a4:	0800586b 	.word	0x0800586b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f904 	bl	80059bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0208 	orr.w	r2, r2, #8
 80057c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0204 	bic.w	r2, r2, #4
 80057d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6999      	ldr	r1, [r3, #24]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	619a      	str	r2, [r3, #24]
      break;
 80057e6:	e064      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 f94a 	bl	8005a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6999      	ldr	r1, [r3, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	619a      	str	r2, [r3, #24]
      break;
 8005828:	e043      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f993 	bl	8005b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0208 	orr.w	r2, r2, #8
 8005844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0204 	bic.w	r2, r2, #4
 8005854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69d9      	ldr	r1, [r3, #28]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	61da      	str	r2, [r3, #28]
      break;
 8005868:	e023      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f9dd 	bl	8005c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69d9      	ldr	r1, [r3, #28]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	021a      	lsls	r2, r3, #8
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	61da      	str	r2, [r3, #28]
      break;
 80058aa:	e002      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
      break;
 80058b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <TIM_Base_SetConfig+0xa8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_Base_SetConfig+0x28>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0x28>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <TIM_Base_SetConfig+0xac>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <TIM_Base_SetConfig+0xa8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0x52>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0x52>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <TIM_Base_SetConfig+0xac>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a07      	ldr	r2, [pc, #28]	; (80059b4 <TIM_Base_SetConfig+0xa8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d103      	bne.n	80059a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	615a      	str	r2, [r3, #20]
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40000400 	.word	0x40000400

080059bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0201 	bic.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 0302 	bic.w	r3, r3, #2
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <TIM_OC1_SetConfig+0xc8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d10c      	bne.n	8005a32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0308 	bic.w	r3, r3, #8
 8005a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 0304 	bic.w	r3, r3, #4
 8005a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <TIM_OC1_SetConfig+0xc8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d111      	bne.n	8005a5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00

08005a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f023 0210 	bic.w	r2, r3, #16
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0320 	bic.w	r3, r3, #32
 8005ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <TIM_OC2_SetConfig+0xd0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10d      	bne.n	8005b04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <TIM_OC2_SetConfig+0xd0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d113      	bne.n	8005b34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	40012c00 	.word	0x40012c00

08005b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <TIM_OC3_SetConfig+0xd0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10d      	bne.n	8005bd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <TIM_OC3_SetConfig+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40012c00 	.word	0x40012c00

08005c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	031b      	lsls	r3, r3, #12
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a0f      	ldr	r2, [pc, #60]	; (8005cc8 <TIM_OC4_SetConfig+0x98>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr
 8005cc8:	40012c00 	.word	0x40012c00

08005ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2201      	movs	r2, #1
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1a      	ldr	r2, [r3, #32]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	43db      	mvns	r3, r3
 8005cee:	401a      	ands	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e041      	b.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d78:	d004      	beq.n	8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a10      	ldr	r2, [pc, #64]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d10c      	bne.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40000400 	.word	0x40000400

08005dc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e03d      	b.n	8005e5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e042      	b.n	8005f22 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fd fbd1 	bl	8003658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2224      	movs	r2, #36	; 0x24
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ecc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fe48 	bl	8006b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ee2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ef2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e04a      	b.n	8005fd2 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fd fb81 	bl	8003658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2224      	movs	r2, #36	; 0x24
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fdf8 	bl	8006b64 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005f92:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0208 	orr.w	r2, r2, #8
 8005fa2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b08a      	sub	sp, #40	; 0x28
 8005fde:	af02      	add	r7, sp, #8
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	603b      	str	r3, [r7, #0]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d16d      	bne.n	80060d6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_UART_Transmit+0x2c>
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e066      	b.n	80060d8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2221      	movs	r2, #33	; 0x21
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006018:	f7fd fcac 	bl	8003974 <HAL_GetTick>
 800601c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	d108      	bne.n	8006046 <HAL_UART_Transmit+0x6c>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	e003      	b.n	800604e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800604e:	e02a      	b.n	80060a6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	2180      	movs	r1, #128	; 0x80
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fb3f 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e036      	b.n	80060d8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800607e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	3302      	adds	r3, #2
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	e007      	b.n	8006098 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	3301      	adds	r3, #1
 8006096:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1cf      	bne.n	8006050 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fb0f 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e006      	b.n	80060d8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e000      	b.n	80060d8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
  }
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d112      	bne.n	8006120 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <HAL_UART_Receive_IT+0x26>
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e00b      	b.n	8006122 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	461a      	mov	r2, r3
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fb4f 	bl	80067ba <UART_Start_Receive_IT>
 800611c:	4603      	mov	r3, r0
 800611e:	e000      	b.n	8006122 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b0ba      	sub	sp, #232	; 0xe8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800616a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10f      	bne.n	8006192 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_UART_IRQHandler+0x66>
 800617e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fc2b 	bl	80069e6 <UART_Receive_IT>
      return;
 8006190:	e25b      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80de 	beq.w	8006358 <HAL_UART_IRQHandler+0x22c>
 800619c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80d1 	beq.w	8006358 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_UART_IRQHandler+0xae>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	f043 0201 	orr.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_IRQHandler+0xd2>
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f6:	f043 0202 	orr.w	r2, r3, #2
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <HAL_UART_IRQHandler+0xf6>
 800620a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621a:	f043 0204 	orr.w	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d011      	beq.n	8006252 <HAL_UART_IRQHandler+0x126>
 800622e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800623a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	f043 0208 	orr.w	r2, r3, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 81f2 	beq.w	8006640 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <HAL_UART_IRQHandler+0x14e>
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fbb6 	bl	80069e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <HAL_UART_IRQHandler+0x17a>
 800629e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d04f      	beq.n	8006346 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fac0 	bl	800682c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d041      	beq.n	800633e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3314      	adds	r3, #20
 80062e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1d9      	bne.n	80062ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d013      	beq.n	8006336 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	4a7e      	ldr	r2, [pc, #504]	; (800650c <HAL_UART_IRQHandler+0x3e0>)
 8006314:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631a:	4618      	mov	r0, r3
 800631c:	f7fd fca0 	bl	8003c60 <HAL_DMA_Abort_IT>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	e00e      	b.n	8006354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fc fe9a 	bl	8003070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633c:	e00a      	b.n	8006354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fc fe96 	bl	8003070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	e006      	b.n	8006354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fc fe92 	bl	8003070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006352:	e175      	b.n	8006640 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006354:	bf00      	nop
    return;
 8006356:	e173      	b.n	8006640 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	2b01      	cmp	r3, #1
 800635e:	f040 814f 	bne.w	8006600 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8148 	beq.w	8006600 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8141 	beq.w	8006600 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800637e:	2300      	movs	r3, #0
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 80b6 	beq.w	8006510 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8145 	beq.w	8006644 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063c2:	429a      	cmp	r2, r3
 80063c4:	f080 813e 	bcs.w	8006644 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	f000 8088 	beq.w	80064ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006408:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800640c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006414:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1d9      	bne.n	80063dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3314      	adds	r3, #20
 8006448:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800644c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006450:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006454:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e1      	bne.n	8006428 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3314      	adds	r3, #20
 800646a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3314      	adds	r3, #20
 8006484:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006488:	66fa      	str	r2, [r7, #108]	; 0x6c
 800648a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800648e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e3      	bne.n	8006464 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064bc:	f023 0310 	bic.w	r3, r3, #16
 80064c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80064d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e3      	bne.n	80064aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fd fb7f 	bl	8003bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	b29b      	uxth	r3, r3
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8ad 	bl	8006662 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006508:	e09c      	b.n	8006644 <HAL_UART_IRQHandler+0x518>
 800650a:	bf00      	nop
 800650c:	080068f1 	.word	0x080068f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006518:	b29b      	uxth	r3, r3
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 808e 	beq.w	8006648 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800652c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8089 	beq.w	8006648 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	330c      	adds	r3, #12
 800653c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800654c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800655a:	647a      	str	r2, [r7, #68]	; 0x44
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e3      	bne.n	8006536 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	623b      	str	r3, [r7, #32]
   return(result);
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3314      	adds	r3, #20
 800658e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006592:	633a      	str	r2, [r7, #48]	; 0x30
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e3      	bne.n	800656e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0310 	bic.w	r3, r3, #16
 80065ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065d8:	61fa      	str	r2, [r7, #28]
 80065da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	69b9      	ldr	r1, [r7, #24]
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	617b      	str	r3, [r7, #20]
   return(result);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e3      	bne.n	80065b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f832 	bl	8006662 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065fe:	e023      	b.n	8006648 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <HAL_UART_IRQHandler+0x4f4>
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f97d 	bl	8006918 <UART_Transmit_IT>
    return;
 800661e:	e014      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00e      	beq.n	800664a <HAL_UART_IRQHandler+0x51e>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f9bc 	bl	80069b6 <UART_EndTransmit_IT>
    return;
 800663e:	e004      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
    return;
 8006640:	bf00      	nop
 8006642:	e002      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
      return;
 8006644:	bf00      	nop
 8006646:	e000      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
      return;
 8006648:	bf00      	nop
  }
}
 800664a:	37e8      	adds	r7, #232	; 0xe8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800668e:	2302      	movs	r3, #2
 8006690:	e020      	b.n	80066d4 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2224      	movs	r2, #36	; 0x24
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f023 030c 	bic.w	r3, r3, #12
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f043 0308 	orr.w	r3, r3, #8
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b090      	sub	sp, #64	; 0x40
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ee:	e050      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f6:	d04c      	beq.n	8006792 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <UART_WaitOnFlagUntilTimeout+0x30>
 80066fe:	f7fd f939 	bl	8003974 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800670a:	429a      	cmp	r2, r3
 800670c:	d241      	bcs.n	8006792 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800672e:	637a      	str	r2, [r7, #52]	; 0x34
 8006730:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e5      	bne.n	800670e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3314      	adds	r3, #20
 8006748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	613b      	str	r3, [r7, #16]
   return(result);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006762:	623a      	str	r2, [r7, #32]
 8006764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	69f9      	ldr	r1, [r7, #28]
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e00f      	b.n	80067b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4013      	ands	r3, r2
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	429a      	cmp	r2, r3
 80067a0:	bf0c      	ite	eq
 80067a2:	2301      	moveq	r3, #1
 80067a4:	2300      	movne	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	79fb      	ldrb	r3, [r7, #7]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d09f      	beq.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3740      	adds	r7, #64	; 0x40
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	4613      	mov	r3, r2
 80067c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	88fa      	ldrh	r2, [r7, #6]
 80067d2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2222      	movs	r2, #34	; 0x22
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695a      	ldr	r2, [r3, #20]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0220 	orr.w	r2, r2, #32
 800681e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b095      	sub	sp, #84	; 0x54
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	330c      	adds	r3, #12
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800684a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006854:	643a      	str	r2, [r7, #64]	; 0x40
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800685a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e5      	bne.n	8006834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3314      	adds	r3, #20
 800686e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	61fb      	str	r3, [r7, #28]
   return(result);
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f023 0301 	bic.w	r3, r3, #1
 800687e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3314      	adds	r3, #20
 8006886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e5      	bne.n	8006868 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d119      	bne.n	80068d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f023 0310 	bic.w	r3, r3, #16
 80068ba:	647b      	str	r3, [r7, #68]	; 0x44
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068c4:	61ba      	str	r2, [r7, #24]
 80068c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6979      	ldr	r1, [r7, #20]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	613b      	str	r3, [r7, #16]
   return(result);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068e6:	bf00      	nop
 80068e8:	3754      	adds	r7, #84	; 0x54
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7fc fbb0 	bl	8003070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b21      	cmp	r3, #33	; 0x21
 800692a:	d13e      	bne.n	80069aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006934:	d114      	bne.n	8006960 <UART_Transmit_IT+0x48>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d110      	bne.n	8006960 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006952:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	1c9a      	adds	r2, r3, #2
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]
 800695e:	e008      	b.n	8006972 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	1c59      	adds	r1, r3, #1
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6211      	str	r1, [r2, #32]
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29b      	uxth	r3, r3
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4619      	mov	r1, r3
 8006980:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10f      	bne.n	80069a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006994:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e000      	b.n	80069ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069aa:	2302      	movs	r3, #2
  }
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fe3a 	bl	8006650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b08c      	sub	sp, #48	; 0x30
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b22      	cmp	r3, #34	; 0x22
 80069f8:	f040 80ae 	bne.w	8006b58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a04:	d117      	bne.n	8006a36 <UART_Receive_IT+0x50>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d113      	bne.n	8006a36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	1c9a      	adds	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28
 8006a34:	e026      	b.n	8006a84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a48:	d007      	beq.n	8006a5a <UART_Receive_IT+0x74>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <UART_Receive_IT+0x82>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e008      	b.n	8006a7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4619      	mov	r1, r3
 8006a92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d15d      	bne.n	8006b54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0220 	bic.w	r2, r2, #32
 8006aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d135      	bne.n	8006b4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	613b      	str	r3, [r7, #16]
   return(result);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b04:	623a      	str	r2, [r7, #32]
 8006b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	69f9      	ldr	r1, [r7, #28]
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e5      	bne.n	8006ae4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d10a      	bne.n	8006b3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fd8d 	bl	8006662 <HAL_UARTEx_RxEventCallback>
 8006b48:	e002      	b.n	8006b50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fc fa1e 	bl	8002f8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e002      	b.n	8006b5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3730      	adds	r7, #48	; 0x30
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b9e:	f023 030c 	bic.w	r3, r3, #12
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <UART_SetConfig+0x114>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d103      	bne.n	8006bd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bcc:	f7fd fe86 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	e002      	b.n	8006bda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bd4:	f7fd fe6e 	bl	80048b4 <HAL_RCC_GetPCLK1Freq>
 8006bd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009a      	lsls	r2, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf0:	4a22      	ldr	r2, [pc, #136]	; (8006c7c <UART_SetConfig+0x118>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	0119      	lsls	r1, r3, #4
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009a      	lsls	r2, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c10:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <UART_SetConfig+0x118>)
 8006c12:	fba3 0302 	umull	r0, r3, r3, r2
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	2064      	movs	r0, #100	; 0x64
 8006c1a:	fb00 f303 	mul.w	r3, r0, r3
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	3332      	adds	r3, #50	; 0x32
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <UART_SetConfig+0x118>)
 8006c26:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c30:	4419      	add	r1, r3
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009a      	lsls	r2, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <UART_SetConfig+0x118>)
 8006c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	2064      	movs	r0, #100	; 0x64
 8006c52:	fb00 f303 	mul.w	r3, r0, r3
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	3332      	adds	r3, #50	; 0x32
 8006c5c:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <UART_SetConfig+0x118>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	f003 020f 	and.w	r2, r3, #15
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40013800 	.word	0x40013800
 8006c7c:	51eb851f 	.word	0x51eb851f

08006c80 <ceilf>:
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8006c86:	3d7f      	subs	r5, #127	; 0x7f
 8006c88:	2d16      	cmp	r5, #22
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006c92:	dc25      	bgt.n	8006ce0 <ceilf+0x60>
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	da0e      	bge.n	8006cb6 <ceilf+0x36>
 8006c98:	4917      	ldr	r1, [pc, #92]	; (8006cf8 <ceilf+0x78>)
 8006c9a:	f7f9 fe7d 	bl	8000998 <__addsf3>
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	f7fa f93e 	bl	8000f20 <__aeabi_fcmpgt>
 8006ca4:	b128      	cbz	r0, 8006cb2 <ceilf+0x32>
 8006ca6:	2c00      	cmp	r4, #0
 8006ca8:	db22      	blt.n	8006cf0 <ceilf+0x70>
 8006caa:	2e00      	cmp	r6, #0
 8006cac:	bf18      	it	ne
 8006cae:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	e01a      	b.n	8006cec <ceilf+0x6c>
 8006cb6:	4e11      	ldr	r6, [pc, #68]	; (8006cfc <ceilf+0x7c>)
 8006cb8:	412e      	asrs	r6, r5
 8006cba:	4230      	tst	r0, r6
 8006cbc:	d016      	beq.n	8006cec <ceilf+0x6c>
 8006cbe:	490e      	ldr	r1, [pc, #56]	; (8006cf8 <ceilf+0x78>)
 8006cc0:	f7f9 fe6a 	bl	8000998 <__addsf3>
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f7fa f92b 	bl	8000f20 <__aeabi_fcmpgt>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d0f1      	beq.n	8006cb2 <ceilf+0x32>
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	bfc2      	ittt	gt
 8006cd2:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8006cd6:	412b      	asrgt	r3, r5
 8006cd8:	18e4      	addgt	r4, r4, r3
 8006cda:	ea24 0406 	bic.w	r4, r4, r6
 8006cde:	e7e8      	b.n	8006cb2 <ceilf+0x32>
 8006ce0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006ce4:	d302      	bcc.n	8006cec <ceilf+0x6c>
 8006ce6:	f7f9 fe57 	bl	8000998 <__addsf3>
 8006cea:	4601      	mov	r1, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006cf4:	e7dd      	b.n	8006cb2 <ceilf+0x32>
 8006cf6:	bf00      	nop
 8006cf8:	7149f2ca 	.word	0x7149f2ca
 8006cfc:	007fffff 	.word	0x007fffff

08006d00 <memset>:
 8006d00:	4603      	mov	r3, r0
 8006d02:	4402      	add	r2, r0
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d100      	bne.n	8006d0a <memset+0xa>
 8006d08:	4770      	bx	lr
 8006d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0e:	e7f9      	b.n	8006d04 <memset+0x4>

08006d10 <__libc_init_array>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	2600      	movs	r6, #0
 8006d14:	4d0c      	ldr	r5, [pc, #48]	; (8006d48 <__libc_init_array+0x38>)
 8006d16:	4c0d      	ldr	r4, [pc, #52]	; (8006d4c <__libc_init_array+0x3c>)
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	42a6      	cmp	r6, r4
 8006d1e:	d109      	bne.n	8006d34 <__libc_init_array+0x24>
 8006d20:	f000 f81a 	bl	8006d58 <_init>
 8006d24:	2600      	movs	r6, #0
 8006d26:	4d0a      	ldr	r5, [pc, #40]	; (8006d50 <__libc_init_array+0x40>)
 8006d28:	4c0a      	ldr	r4, [pc, #40]	; (8006d54 <__libc_init_array+0x44>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	d105      	bne.n	8006d3e <__libc_init_array+0x2e>
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d38:	4798      	blx	r3
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	e7ee      	b.n	8006d1c <__libc_init_array+0xc>
 8006d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d42:	4798      	blx	r3
 8006d44:	3601      	adds	r6, #1
 8006d46:	e7f2      	b.n	8006d2e <__libc_init_array+0x1e>
 8006d48:	08006d9c 	.word	0x08006d9c
 8006d4c:	08006d9c 	.word	0x08006d9c
 8006d50:	08006d9c 	.word	0x08006d9c
 8006d54:	08006da4 	.word	0x08006da4

08006d58 <_init>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr

08006d64 <_fini>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr
