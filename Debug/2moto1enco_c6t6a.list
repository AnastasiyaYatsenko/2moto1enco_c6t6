
2moto1enco_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006e98  08006e98  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e98  08006e98  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000014  08006eb8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006eb8  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cb6  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003064  00000000  00000000  00037d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  0003ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbf  00000000  00000000  0003bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b398  00000000  00000000  0003caaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124ab  00000000  00000000  00057e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f6fc  00000000  00000000  0006a2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046e0  00000000  00000000  000f99f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fe0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08006e54 	.word	0x08006e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08006e54 	.word	0x08006e54

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8000f80:	787a      	ldrb	r2, [r7, #1]
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f003 f8ea 	bl	8004160 <HAL_GPIO_WritePin>

}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	72fb      	strb	r3, [r7, #11]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8000fa8:	893b      	ldrh	r3, [r7, #8]
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffde 	bl	8000f70 <setCSLine>
	delay(docDelay);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f901 	bl	80011bc <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8000fba:	f107 0217 	add.w	r2, r7, #23
 8000fbe:	f107 010b 	add.w	r1, r7, #11
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f003 fdb3 	bl	8004b34 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f000 f8f4 	bl	80011bc <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8000fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd8:	893b      	ldrh	r3, [r7, #8]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffc7 	bl	8000f70 <setCSLine>
	return data;
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4613      	mov	r3, r2
 8001000:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001002:	f000 f8ed 	bl	80011e0 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	2200      	movs	r2, #0
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	2100      	movs	r1, #0
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff ffbd 	bl	8000f94 <spiWriteRead>
 800101a:	4603      	mov	r3, r0
 800101c:	b29b      	uxth	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001022:	2003      	movs	r0, #3
 8001024:	f000 f8ca 	bl	80011bc <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	2100      	movs	r1, #0
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ffae 	bl	8000f94 <spiWriteRead>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800103e:	4313      	orrs	r3, r2
 8001040:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	e010      	b.n	800106a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8001048:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	fa42 f303 	asr.w	r3, r2, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	b2d9      	uxtb	r1, r3
 8001058:	f107 0210 	add.w	r2, r7, #16
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	4413      	add	r3, r2
 8001060:	460a      	mov	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	3301      	adds	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	ddeb      	ble.n	8001048 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001070:	7ffb      	ldrb	r3, [r7, #31]
 8001072:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001074:	7f7a      	ldrb	r2, [r7, #29]
 8001076:	7efb      	ldrb	r3, [r7, #27]
 8001078:	4053      	eors	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	7e7b      	ldrb	r3, [r7, #25]
 800107e:	4053      	eors	r3, r2
 8001080:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001082:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001084:	4053      	eors	r3, r2
 8001086:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001088:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800108a:	4053      	eors	r3, r2
 800108c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800108e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001090:	4053      	eors	r3, r2
 8001092:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001094:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001096:	429a      	cmp	r2, r3
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d11e      	bne.n	80010e2 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80010a4:	7fbb      	ldrb	r3, [r7, #30]
 80010a6:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010a8:	7f3a      	ldrb	r2, [r7, #28]
 80010aa:	7ebb      	ldrb	r3, [r7, #26]
 80010ac:	4053      	eors	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	4053      	eors	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010b8:	4053      	eors	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010bc:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010be:	4053      	eors	r3, r2
 80010c0:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010c2:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010c4:	4053      	eors	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80010c8:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	bf0c      	ite	eq
 80010ce:	2301      	moveq	r3, #1
 80010d0:	2300      	movne	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d104      	bne.n	80010e2 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 80010d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010e0:	e002      	b.n	80010e8 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 80010e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d107      	bne.n	80010fe <getPositionSPI+0x112>
 80010ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d002      	beq.n	80010fe <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 80010f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001100:	4618      	mov	r0, r3
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <calculateAngle>:
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
	delay( docDelayLong + docDelayLong);

}

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	80fb      	strh	r3, [r7, #6]
 8001114:	4613      	mov	r3, r2
 8001116:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	2b0c      	cmp	r3, #12
 8001122:	d11e      	bne.n	8001162 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fce4 	bl	8000af4 <__aeabi_ui2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f970 	bl	8000414 <__aeabi_f2d>
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <calculateAngle+0xa8>)
 800113a:	f7ff f9c3 	bl	80004c4 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <calculateAngle+0xac>)
 800114c:	f7ff fae4 	bl	8000718 <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fbc6 	bl	80008e8 <__aeabi_d2f>
 800115c:	4603      	mov	r3, r0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e020      	b.n	80011a4 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	2b0e      	cmp	r3, #14
 8001166:	d11d      	bne.n	80011a4 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fcc2 	bl	8000af4 <__aeabi_ui2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f94e 	bl	8000414 <__aeabi_f2d>
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <calculateAngle+0xa8>)
 800117e:	f7ff f9a1 	bl	80004c4 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <calculateAngle+0xb0>)
 8001190:	f7ff fac2 	bl	8000718 <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fba4 	bl	80008e8 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 80011a4:	68fb      	ldr	r3, [r7, #12]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40768000 	.word	0x40768000
 80011b4:	40b00000 	.word	0x40b00000
 80011b8:	40d00000 	.word	0x40d00000

080011bc <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f83b 	bl	8001240 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <startDWT>:

int startDWT(){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 80011d6:	f000 f803 	bl	80011e0 <DWT_Delay_Init>

}
 80011da:	bf00      	nop
 80011dc:	4618      	mov	r0, r3
 80011de:	bd80      	pop	{r7, pc}

080011e0 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <DWT_Delay_Init+0x58>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <DWT_Delay_Init+0x58>)
 80011ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011ee:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <DWT_Delay_Init+0x58>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4a10      	ldr	r2, [pc, #64]	; (8001238 <DWT_Delay_Init+0x58>)
 80011f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011fa:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <DWT_Delay_Init+0x5c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <DWT_Delay_Init+0x5c>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <DWT_Delay_Init+0x5c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <DWT_Delay_Init+0x5c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <DWT_Delay_Init+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800121a:	bf00      	nop
    __ASM volatile ("NOP");
 800121c:	bf00      	nop
    __ASM volatile ("NOP");
 800121e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <DWT_Delay_Init+0x5c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001228:	2300      	movs	r3, #0
 800122a:	e000      	b.n	800122e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800122c:	2301      	movs	r3, #1
    }
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000edf0 	.word	0xe000edf0
 800123c:	e0001000 	.word	0xe0001000

08001240 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <DWT_Delay_us+0x48>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800124e:	f003 fb9d 	bl	800498c <HAL_RCC_GetHCLKFreq>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <DWT_Delay_us+0x4c>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	fb02 f303 	mul.w	r3, r2, r3
 8001266:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001268:	bf00      	nop
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <DWT_Delay_us+0x48>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad2      	subs	r2, r2, r3
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1acb      	subs	r3, r1, r3
 8001278:	429a      	cmp	r2, r3
 800127a:	d3f6      	bcc.n	800126a <DWT_Delay_us+0x2a>
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e0001000 	.word	0xe0001000
 800128c:	431bde83 	.word	0x431bde83

08001290 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	e9c7 0100 	strd	r0, r1, [r7]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f005 fd54 	bl	8006d7c <ceilf>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <_ZN7RoboArmC1Ehh>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(uint8_t defaultAngleT, uint8_t defaultDistanseT) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
 80012ec:	4613      	mov	r3, r2
 80012ee:	70bb      	strb	r3, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a37      	ldr	r2, [pc, #220]	; (80013d0 <_ZN7RoboArmC1Ehh+0xf0>)
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	649a      	str	r2, [r3, #72]	; 0x48
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <_ZN7RoboArmC1Ehh+0xf4>)
 8001306:	64da      	str	r2, [r3, #76]	; 0x4c
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <_ZN7RoboArmC1Ehh+0xf8>)
 800130c:	651a      	str	r2, [r3, #80]	; 0x50
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	220e      	movs	r2, #14
 8001312:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3374      	adds	r3, #116	; 0x74
 800131a:	4618      	mov	r0, r3
 800131c:	f000 ffa2 	bl	8002264 <_ZN7TMC2209C1Ev>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	339c      	adds	r3, #156	; 0x9c
 8001324:	4618      	mov	r0, r3
 8001326:	f000 ff9d 	bl	8002264 <_ZN7TMC2209C1Ev>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	33c4      	adds	r3, #196	; 0xc4
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ff98 	bl	8002264 <_ZN7TMC2209C1Ev>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	defaultAngle = defaultAngleT;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fba6 	bl	8000af4 <__aeabi_ui2f>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	defaultDistanse = defaultDistanseT;
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fb9e 	bl	8000af4 <__aeabi_ui2f>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100


	startDWT();
 80013c0:	f7ff ff07 	bl	80011d2 <startDWT>
}
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	44200000 	.word	0x44200000
 80013d4:	4673c000 	.word	0x4673c000
 80013d8:	437a0000 	.word	0x437a0000

080013dc <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80013ec:	2201      	movs	r2, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	f002 feb6 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	f002 feae 	bl	8004160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	f002 fea5 	bl	8004160 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f004 f899 	bl	8005554 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2104      	movs	r1, #4
 8001428:	4618      	mov	r0, r3
 800142a:	f004 f893 	bl	8005554 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2108      	movs	r1, #8
 8001434:	4618      	mov	r0, r3
 8001436:	f004 f88d 	bl	8005554 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f003 ff6e 	bl	8005320 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f003 ff69 	bl	8005320 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	4618      	mov	r0, r3
 8001454:	f003 ff64 	bl	8005320 <HAL_TIM_Base_Stop_IT>

	return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <_ZN7RoboArm19MoveCorrectPositionEff>:

}
*/


int RoboArm::MoveCorrectPosition(float angle, float distance) {
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b08f      	sub	sp, #60	; 0x3c
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f004 f86c 	bl	8005554 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2104      	movs	r1, #4
 8001482:	4618      	mov	r0, r3
 8001484:	f004 f866 	bl	8005554 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);				// остановили прерывание таймеров
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 ff47 	bl	8005320 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4618      	mov	r0, r3
 8001498:	f003 ff42 	bl	8005320 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 800149c:	2200      	movs	r2, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 fea6 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2102      	movs	r1, #2
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 fea1 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>

//	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
	lastPosAngle_Enc = GetAng();
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fd01 	bl	8001eb8 <_ZN7RoboArm6GetAngEv>
 80014b6:	4602      	mov	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	lastPosLinear_Enc = GetLin();
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 fcaf 	bl	8001e22 <_ZN7RoboArm6GetLinEv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	float lastPosAngle = ShiftZeroAng(lastPosAngle_Enc);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80014d2:	4619      	mov	r1, r3
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 fdbd 	bl	8002054 <_ZN7RoboArm12ShiftZeroAngEf>
 80014da:	6338      	str	r0, [r7, #48]	; 0x30
	float lastPosLinear = ShiftZeroLin(lastPosLinear_Enc);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014e2:	4619      	mov	r1, r3
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 fdd9 	bl	800209c <_ZN7RoboArm12ShiftZeroLinEf>
 80014ea:	62f8      	str	r0, [r7, #44]	; 0x2c

//	float lastPosAngle = lastPosAngle_Enc;
//	float lastPosLinear = lastPosLinear_Enc;

	float pos_ang = abs(lastPosAngle - angle);
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014f0:	f7ff fa4e 	bl	8000990 <__aeabi_fsub>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fed9 	bl	80012ae <_ZSt3absf>
 80014fc:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 80014fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001500:	f7fe ff88 	bl	8000414 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	4975      	ldr	r1, [pc, #468]	; (80016e4 <_ZN7RoboArm19MoveCorrectPositionEff+0x280>)
 800150e:	f7fe fe21 	bl	8000154 <__aeabi_dsub>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff feb9 	bl	8001290 <_ZSt3absd>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff f9df 	bl	80008e8 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 800152e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001532:	f7ff fcd5 	bl	8000ee0 <__aeabi_fcmplt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01b      	beq.n	8001574 <_ZN7RoboArm19MoveCorrectPositionEff+0x110>
		actualPosAngle = inverse_pos_ang;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001544:	f7ff fccc 	bl	8000ee0 <__aeabi_fcmplt>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <_ZN7RoboArm19MoveCorrectPositionEff+0xf6>
			tmcd_angle.disableInverseMotorDirection();
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	339c      	adds	r3, #156	; 0x9c
 8001552:	4618      	mov	r0, r3
 8001554:	f000 ff58 	bl	8002408 <_ZN7TMC220928disableInverseMotorDirectionEv>
 8001558:	e027      	b.n	80015aa <_ZN7RoboArm19MoveCorrectPositionEff+0x146>
		} else if (lastPosAngle > angle) {
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800155e:	f7ff fcdd 	bl	8000f1c <__aeabi_fcmpgt>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <_ZN7RoboArm19MoveCorrectPositionEff+0x146>
			tmcd_angle.enableInverseMotorDirection();
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	339c      	adds	r3, #156	; 0x9c
 800156c:	4618      	mov	r0, r3
 800156e:	f000 ff3b 	bl	80023e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001572:	e01a      	b.n	80015aa <_ZN7RoboArm19MoveCorrectPositionEff+0x146>
		}
	}
	else {
		actualPosAngle = pos_ang;
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800157c:	f7ff fcb0 	bl	8000ee0 <__aeabi_fcmplt>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <_ZN7RoboArm19MoveCorrectPositionEff+0x12e>
			tmcd_angle.enableInverseMotorDirection();
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	339c      	adds	r3, #156	; 0x9c
 800158a:	4618      	mov	r0, r3
 800158c:	f000 ff2c 	bl	80023e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001590:	e00b      	b.n	80015aa <_ZN7RoboArm19MoveCorrectPositionEff+0x146>
		} else if (lastPosAngle > angle) {
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001596:	f7ff fcc1 	bl	8000f1c <__aeabi_fcmpgt>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <_ZN7RoboArm19MoveCorrectPositionEff+0x146>
			tmcd_angle.disableInverseMotorDirection();
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	339c      	adds	r3, #156	; 0x9c
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 ff2f 	bl	8002408 <_ZN7TMC220928disableInverseMotorDirectionEv>
		}
	}

	if (lastPosLinear < distance) {
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ae:	f7ff fc97 	bl	8000ee0 <__aeabi_fcmplt>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <_ZN7RoboArm19MoveCorrectPositionEff+0x160>
			tmcd_linear.disableInverseMotorDirection();
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3374      	adds	r3, #116	; 0x74
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 ff23 	bl	8002408 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80015c2:	e00b      	b.n	80015dc <_ZN7RoboArm19MoveCorrectPositionEff+0x178>
		} else if (lastPosLinear > distance) {
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015c8:	f7ff fca8 	bl	8000f1c <__aeabi_fcmpgt>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <_ZN7RoboArm19MoveCorrectPositionEff+0x178>
			tmcd_linear.enableInverseMotorDirection();
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3374      	adds	r3, #116	; 0x74
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 ff06 	bl	80023e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
		}

	float actualPosDistance = abs(lastPosLinear - distance);
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015e0:	f7ff f9d6 	bl	8000990 <__aeabi_fsub>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fe61 	bl	80012ae <_ZSt3absf>
 80015ec:	6238      	str	r0, [r7, #32]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 80015ee:	493e      	ldr	r1, [pc, #248]	; (80016e8 <_ZN7RoboArm19MoveCorrectPositionEff+0x284>)
 80015f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015f2:	f7ff fad7 	bl	8000ba4 <__aeabi_fmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	493c      	ldr	r1, [pc, #240]	; (80016ec <_ZN7RoboArm19MoveCorrectPositionEff+0x288>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fb86 	bl	8000d0c <__aeabi_fdiv>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc94 	bl	8000f30 <__aeabi_f2uiz>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	649a      	str	r2, [r3, #72]	; 0x48
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a39      	ldr	r1, [r7, #32]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fac5 	bl	8000ba4 <__aeabi_fmul>
 800161a:	4603      	mov	r3, r0
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fc87 	bl	8000f30 <__aeabi_f2uiz>
 8001622:	4602      	mov	r2, r0
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	645a      	str	r2, [r3, #68]	; 0x44

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 1200;
 8001628:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800162c:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72-1;
 800162e:	2347      	movs	r3, #71	; 0x47
 8001630:	61bb      	str	r3, [r7, #24]

	float delimiter=1;
 8001632:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001636:	617b      	str	r3, [r7, #20]
	float mnoj=1;
 8001638:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800163c:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	429a      	cmp	r2, r3
 8001648:	d952      	bls.n	80016f0 <_ZN7RoboArm19MoveCorrectPositionEff+0x28c>

		htim1M1->Instance->PSC = psc;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1/2;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	0852      	lsrs	r2, r2, #1
 8001668:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fa40 	bl	8000af4 <__aeabi_ui2f>
 8001674:	4604      	mov	r4, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fa3a 	bl	8000af4 <__aeabi_ui2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fb41 	bl	8000d0c <__aeabi_fdiv>
 800168a:	4603      	mov	r3, r0
 800168c:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 800168e:	69f8      	ldr	r0, [r7, #28]
 8001690:	f7ff fa30 	bl	8000af4 <__aeabi_ui2f>
 8001694:	4603      	mov	r3, r0
 8001696:	6979      	ldr	r1, [r7, #20]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fa83 	bl	8000ba4 <__aeabi_fmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fe10 	bl	80012c6 <_ZSt4ceilf>
 80016a6:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	681c      	ldr	r4, [r3, #0]
 80016b8:	6938      	ldr	r0, [r7, #16]
 80016ba:	f7ff fc39 	bl	8000f30 <__aeabi_f2uiz>
 80016be:	4603      	mov	r3, r0
 80016c0:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 80016c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016c6:	6938      	ldr	r0, [r7, #16]
 80016c8:	f7ff fb20 	bl	8000d0c <__aeabi_fdiv>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	681c      	ldr	r4, [r3, #0]
 80016d6:	4610      	mov	r0, r2
 80016d8:	f7ff fc2a 	bl	8000f30 <__aeabi_f2uiz>
 80016dc:	4603      	mov	r3, r0
 80016de:	63a3      	str	r3, [r4, #56]	; 0x38
 80016e0:	e057      	b.n	8001792 <_ZN7RoboArm19MoveCorrectPositionEff+0x32e>
 80016e2:	bf00      	nop
 80016e4:	40768000 	.word	0x40768000
 80016e8:	48480000 	.word	0x48480000
 80016ec:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d24a      	bcs.n	8001792 <_ZN7RoboArm19MoveCorrectPositionEff+0x32e>

		htim2M2->Instance->PSC = psc;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	0852      	lsrs	r2, r2, #1
 800171a:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f9e7 	bl	8000af4 <__aeabi_ui2f>
 8001726:	4604      	mov	r4, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff f9e1 	bl	8000af4 <__aeabi_ui2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff fae8 	bl	8000d0c <__aeabi_fdiv>
 800173c:	4603      	mov	r3, r0
 800173e:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001740:	69f8      	ldr	r0, [r7, #28]
 8001742:	f7ff f9d7 	bl	8000af4 <__aeabi_ui2f>
 8001746:	4603      	mov	r3, r0
 8001748:	6979      	ldr	r1, [r7, #20]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fa2a 	bl	8000ba4 <__aeabi_fmul>
 8001750:	4603      	mov	r3, r0
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fdb7 	bl	80012c6 <_ZSt4ceilf>
 8001758:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	681c      	ldr	r4, [r3, #0]
 800176a:	6938      	ldr	r0, [r7, #16]
 800176c:	f7ff fbe0 	bl	8000f30 <__aeabi_f2uiz>
 8001770:	4603      	mov	r3, r0
 8001772:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 8001774:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001778:	6938      	ldr	r0, [r7, #16]
 800177a:	f7ff fac7 	bl	8000d0c <__aeabi_fdiv>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	681c      	ldr	r4, [r3, #0]
 8001788:	4610      	mov	r0, r2
 800178a:	f7ff fbd1 	bl	8000f30 <__aeabi_f2uiz>
 800178e:	4603      	mov	r3, r0
 8001790:	6363      	str	r3, [r4, #52]	; 0x34
	}

	stateMoveM1 = true;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	stateMoveM2 = true;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9

	SetEnable(1, true);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2101      	movs	r1, #1
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 fd23 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2102      	movs	r1, #2
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 fd1e 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fe2d 	bl	800541c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2104      	movs	r1, #4
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fe27 	bl	800541c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fd58 	bl	8005288 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 fd53 	bl	8005288 <HAL_TIM_Base_Start_IT>

	return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	373c      	adds	r7, #60	; 0x3c
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <_ZN7RoboArm11Move2MotorsEff>:
//	lastPosAngle_Enc = GetAng();
//	lastPosLinear_Enc = GetLin();
//	return 0;
//}

int RoboArm::Move2Motors(float angle, float distance) {
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08f      	sub	sp, #60	; 0x3c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fea8 	bl	8005554 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2104      	movs	r1, #4
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fea2 	bl	8005554 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);				// остановили прерывание таймеров
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fd83 	bl	8005320 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fd7e 	bl	8005320 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 8001824:	2200      	movs	r2, #0
 8001826:	2101      	movs	r1, #1
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fce2 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 800182e:	2200      	movs	r2, #0
 8001830:	2102      	movs	r1, #2
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fcdd 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>

//	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
	lastPosAngle_Enc = GetAng();
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fb3d 	bl	8001eb8 <_ZN7RoboArm6GetAngEv>
 800183e:	4602      	mov	r2, r0
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	lastPosLinear_Enc = GetLin();
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 faeb 	bl	8001e22 <_ZN7RoboArm6GetLinEv>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	float lastPosAngle = ShiftZeroAng(lastPosAngle_Enc);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800185a:	4619      	mov	r1, r3
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 fbf9 	bl	8002054 <_ZN7RoboArm12ShiftZeroAngEf>
 8001862:	6338      	str	r0, [r7, #48]	; 0x30
	float lastPosLinear = ShiftZeroLin(lastPosLinear_Enc);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800186a:	4619      	mov	r1, r3
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 fc15 	bl	800209c <_ZN7RoboArm12ShiftZeroLinEf>
 8001872:	62f8      	str	r0, [r7, #44]	; 0x2c

//	float lastPosAngle = lastPosAngle_Enc;
//	float lastPosLinear = lastPosLinear_Enc;

	float pos_ang = abs(lastPosAngle - angle);
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001878:	f7ff f88a 	bl	8000990 <__aeabi_fsub>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fd15 	bl	80012ae <_ZSt3absf>
 8001884:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 8001886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001888:	f7fe fdc4 	bl	8000414 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	4974      	ldr	r1, [pc, #464]	; (8001a68 <_ZN7RoboArm11Move2MotorsEff+0x27c>)
 8001896:	f7fe fc5d 	bl	8000154 <__aeabi_dsub>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff fcf5 	bl	8001290 <_ZSt3absd>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f81b 	bl	80008e8 <__aeabi_d2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 80018b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ba:	f7ff fb11 	bl	8000ee0 <__aeabi_fcmplt>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01b      	beq.n	80018fc <_ZN7RoboArm11Move2MotorsEff+0x110>
		actualPosAngle = inverse_pos_ang;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018cc:	f7ff fb08 	bl	8000ee0 <__aeabi_fcmplt>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <_ZN7RoboArm11Move2MotorsEff+0xf6>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.disableInverseMotorDirection();
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	339c      	adds	r3, #156	; 0x9c
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fd94 	bl	8002408 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80018e0:	e027      	b.n	8001932 <_ZN7RoboArm11Move2MotorsEff+0x146>
		} else if (lastPosAngle > angle) {
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018e6:	f7ff fb19 	bl	8000f1c <__aeabi_fcmpgt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <_ZN7RoboArm11Move2MotorsEff+0x146>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.enableInverseMotorDirection();
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	339c      	adds	r3, #156	; 0x9c
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fd77 	bl	80023e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80018fa:	e01a      	b.n	8001932 <_ZN7RoboArm11Move2MotorsEff+0x146>
		}
	}
	else {
		actualPosAngle = pos_ang;
 80018fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001904:	f7ff faec 	bl	8000ee0 <__aeabi_fcmplt>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <_ZN7RoboArm11Move2MotorsEff+0x12e>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.enableInverseMotorDirection();
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	339c      	adds	r3, #156	; 0x9c
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fd68 	bl	80023e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001918:	e00b      	b.n	8001932 <_ZN7RoboArm11Move2MotorsEff+0x146>
		} else if (lastPosAngle > angle) {
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800191e:	f7ff fafd 	bl	8000f1c <__aeabi_fcmpgt>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <_ZN7RoboArm11Move2MotorsEff+0x146>
//			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.disableInverseMotorDirection();
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	339c      	adds	r3, #156	; 0x9c
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fd6b 	bl	8002408 <_ZN7TMC220928disableInverseMotorDirectionEv>
//	if (lastPosLinear < distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
//	} else if (lastPosLinear > distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
//	}
	if (lastPosLinear < distance) {
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001936:	f7ff fad3 	bl	8000ee0 <__aeabi_fcmplt>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <_ZN7RoboArm11Move2MotorsEff+0x160>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
			tmcd_linear.disableInverseMotorDirection();
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3374      	adds	r3, #116	; 0x74
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fd5f 	bl	8002408 <_ZN7TMC220928disableInverseMotorDirectionEv>
 800194a:	e00b      	b.n	8001964 <_ZN7RoboArm11Move2MotorsEff+0x178>
		} else if (lastPosLinear > distance) {
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001950:	f7ff fae4 	bl	8000f1c <__aeabi_fcmpgt>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <_ZN7RoboArm11Move2MotorsEff+0x178>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
			tmcd_linear.enableInverseMotorDirection();
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3374      	adds	r3, #116	; 0x74
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fd42 	bl	80023e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
		}

//	actualPosAngle = abs(lastPosAngle - angle);
	float actualPosDistance = abs(lastPosLinear - distance);
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001968:	f7ff f812 	bl	8000990 <__aeabi_fsub>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fc9d 	bl	80012ae <_ZSt3absf>
 8001974:	6238      	str	r0, [r7, #32]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 8001976:	493d      	ldr	r1, [pc, #244]	; (8001a6c <_ZN7RoboArm11Move2MotorsEff+0x280>)
 8001978:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800197a:	f7ff f913 	bl	8000ba4 <__aeabi_fmul>
 800197e:	4603      	mov	r3, r0
 8001980:	493b      	ldr	r1, [pc, #236]	; (8001a70 <_ZN7RoboArm11Move2MotorsEff+0x284>)
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f9c2 	bl	8000d0c <__aeabi_fdiv>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fad0 	bl	8000f30 <__aeabi_f2uiz>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	649a      	str	r2, [r3, #72]	; 0x48
//	anglePsteps = anglePsteps+(anglePsteps*0.05);
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f901 	bl	8000ba4 <__aeabi_fmul>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fac3 	bl	8000f30 <__aeabi_f2uiz>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
//	lastPosLinear = distance;

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 30;
 80019b0:	231e      	movs	r3, #30
 80019b2:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72-1;
 80019b4:	2347      	movs	r3, #71	; 0x47
 80019b6:	61bb      	str	r3, [r7, #24]

	float delimiter=1;
 80019b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019bc:	617b      	str	r3, [r7, #20]
	float mnoj=1;
 80019be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019c2:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d951      	bls.n	8001a74 <_ZN7RoboArm11Move2MotorsEff+0x288>

		htim1M1->Instance->PSC = psc;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1/2;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	0852      	lsrs	r2, r2, #1
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f87d 	bl	8000af4 <__aeabi_ui2f>
 80019fa:	4604      	mov	r4, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f877 	bl	8000af4 <__aeabi_ui2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff f97e 	bl	8000d0c <__aeabi_fdiv>
 8001a10:	4603      	mov	r3, r0
 8001a12:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001a14:	69f8      	ldr	r0, [r7, #28]
 8001a16:	f7ff f86d 	bl	8000af4 <__aeabi_ui2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6979      	ldr	r1, [r7, #20]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f8c0 	bl	8000ba4 <__aeabi_fmul>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fc4d 	bl	80012c6 <_ZSt4ceilf>
 8001a2c:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	681c      	ldr	r4, [r3, #0]
 8001a3e:	6938      	ldr	r0, [r7, #16]
 8001a40:	f7ff fa76 	bl	8000f30 <__aeabi_f2uiz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 8001a48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a4c:	6938      	ldr	r0, [r7, #16]
 8001a4e:	f7ff f95d 	bl	8000d0c <__aeabi_fdiv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	681c      	ldr	r4, [r3, #0]
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	f7ff fa67 	bl	8000f30 <__aeabi_f2uiz>
 8001a62:	4603      	mov	r3, r0
 8001a64:	63a3      	str	r3, [r4, #56]	; 0x38
 8001a66:	e056      	b.n	8001b16 <_ZN7RoboArm11Move2MotorsEff+0x32a>
 8001a68:	40768000 	.word	0x40768000
 8001a6c:	48480000 	.word	0x48480000
 8001a70:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d24a      	bcs.n	8001b16 <_ZN7RoboArm11Move2MotorsEff+0x32a>

		htim2M2->Instance->PSC = psc;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	0852      	lsrs	r2, r2, #1
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f825 	bl	8000af4 <__aeabi_ui2f>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f81f 	bl	8000af4 <__aeabi_ui2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff f926 	bl	8000d0c <__aeabi_fdiv>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001ac4:	69f8      	ldr	r0, [r7, #28]
 8001ac6:	f7ff f815 	bl	8000af4 <__aeabi_ui2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	6979      	ldr	r1, [r7, #20]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f868 	bl	8000ba4 <__aeabi_fmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fbf5 	bl	80012c6 <_ZSt4ceilf>
 8001adc:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	681c      	ldr	r4, [r3, #0]
 8001aee:	6938      	ldr	r0, [r7, #16]
 8001af0:	f7ff fa1e 	bl	8000f30 <__aeabi_f2uiz>
 8001af4:	4603      	mov	r3, r0
 8001af6:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 8001af8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001afc:	6938      	ldr	r0, [r7, #16]
 8001afe:	f7ff f905 	bl	8000d0c <__aeabi_fdiv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f7ff fa0f 	bl	8000f30 <__aeabi_f2uiz>
 8001b12:	4603      	mov	r3, r0
 8001b14:	6363      	str	r3, [r4, #52]	; 0x34
//		htim1M1->Instance->PSC = psc;
//		htim1M1->Instance->ARR = mnoj;
//		htim1M1->Instance->CCR1 = mnoj / 2;
//	}

	stateMoveM1 = true;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	stateMoveM2 = true;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9

	SetEnable(1, true);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2101      	movs	r1, #1
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fb61 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2102      	movs	r1, #2
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fb5c 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fc6b 	bl	800541c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fc65 	bl	800541c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fb96 	bl	8005288 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fb91 	bl	8005288 <HAL_TIM_Base_Start_IT>

	return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	373c      	adds	r7, #60	; 0x3c
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}

08001b70 <_ZN7RoboArm10SetGripperEi>:
	posNowDistance = defaultDistanse;

	return 0;
}

int RoboArm::SetGripper(int opcl) {
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]

	//Встановити захват
	//TODO додати перевірку чи точно зупинились мотори
	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fce7 	bl	8005554 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fce1 	bl	8005554 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fbc2 	bl	8005320 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 fbbd 	bl	8005320 <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_2);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2104      	movs	r1, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fcd1 	bl	8005554 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim3M3);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fbb2 	bl	8005320 <HAL_TIM_Base_Stop_IT>

	SetEnable(3, false);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2103      	movs	r1, #3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fb16 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>

	//Зупинили все, 1 та 2й на утриманні
	//Обираэмо напрям
	if (opcl == 1) {
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <_ZN7RoboArm10SetGripperEi+0x6e>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_SET);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f002 fac2 	bl	8004160 <HAL_GPIO_WritePin>
 8001bdc:	e00a      	b.n	8001bf4 <_ZN7RoboArm10SetGripperEi+0x84>
	} else if (opcl == 0) {
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <_ZN7RoboArm10SetGripperEi+0x84>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_RESET);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f002 fab6 	bl	8004160 <HAL_GPIO_WritePin>
	}

	//Підібрати кроки та швидкість
	float periodM3 = 60.00;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <_ZN7RoboArm10SetGripperEi+0xf0>)
 8001bf6:	60fb      	str	r3, [r7, #12]
	uint32_t psc3 = 72 - 1;
 8001bf8:	2347      	movs	r3, #71	; 0x47
 8001bfa:	60bb      	str	r3, [r7, #8]
	htim3M3->Instance->PSC = psc3;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
	htim3M3->Instance->ARR = periodM3;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	681c      	ldr	r4, [r3, #0]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff f98f 	bl	8000f30 <__aeabi_f2uiz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3M3->Instance->CCR2 = periodM3 / 2;
 8001c16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff f876 	bl	8000d0c <__aeabi_fdiv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	681c      	ldr	r4, [r3, #0]
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f7ff f980 	bl	8000f30 <__aeabi_f2uiz>
 8001c30:	4603      	mov	r3, r0
 8001c32:	63a3      	str	r3, [r4, #56]	; 0x38

	SetEnable(3, true);
 8001c34:	2201      	movs	r2, #1
 8001c36:	2103      	movs	r1, #3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fada 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	HAL_TIM_PWM_Start(htim3M3, TIM_CHANNEL_2);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2104      	movs	r1, #4
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fbe9 	bl	800541c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim3M3);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fb1a 	bl	8005288 <HAL_TIM_Base_Start_IT>
	return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	42700000 	.word	0x42700000

08001c64 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::setPrintState(bool state) {
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8001c7e:	e003      	b.n	8001c88 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	}
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 8001caa:	2300      	movs	r3, #0
	}
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <_ZN7RoboArm17SetMicrosteps4AllEh>:


int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step){
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	339c      	adds	r3, #156	; 0x9c
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fb2a 	bl	8002324 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	33c4      	adds	r3, #196	; 0xc4
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fb23 	bl	8002324 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3374      	adds	r3, #116	; 0x74
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fb1c 	bl	8002324 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	659a      	str	r2, [r3, #88]	; 0x58
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	661a      	str	r2, [r3, #96]	; 0x60
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8bba      	ldrh	r2, [r7, #28]
 8001d1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	669a      	str	r2, [r3, #104]	; 0x68
	ResolutionEncoders = ResolutionEncodersT;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f7ff f9d8 	bl	8001108 <calculateAngle>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <_ZN7RoboArm14GetLinEncodersEf>:

float RoboArm::GetLinEncoders(float ang) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
	float pos;
	if (inverseLinZero){
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <_ZN7RoboArm14GetLinEncodersEf+0x26>
		ang = abs(360-ang);
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <_ZN7RoboArm14GetLinEncodersEf+0x4c>)
 8001d7c:	f7fe fe08 	bl	8000990 <__aeabi_fsub>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fa93 	bl	80012ae <_ZSt3absf>
 8001d88:	6038      	str	r0, [r7, #0]
	}
	pos = ang * distMax / 360.0;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe ff07 	bl	8000ba4 <__aeabi_fmul>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4905      	ldr	r1, [pc, #20]	; (8001db0 <_ZN7RoboArm14GetLinEncodersEf+0x4c>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ffb6 	bl	8000d0c <__aeabi_fdiv>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
	return pos;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	43b40000 	.word	0x43b40000

08001db4 <_ZN7RoboArm14GetPosEncodersEh>:

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d002      	beq.n	8001dcc <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d013      	beq.n	8001df2 <_ZN7RoboArm14GetPosEncodersEh+0x3e>
 8001dca:	e025      	b.n	8001e18 <_ZN7RoboArm14GetPosEncodersEh+0x64>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001de0:	f7ff f904 	bl	8000fec <getPositionSPI>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	66da      	str	r2, [r3, #108]	; 0x6c
				ResolutionEncoders);
		return posNowEnc1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df0:	e013      	b.n	8001e1a <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e06:	f7ff f8f1 	bl	8000fec <getPositionSPI>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	671a      	str	r2, [r3, #112]	; 0x70
				ResolutionEncoders);
		return posNowEnc2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	e000      	b.n	8001e1a <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	default:
		return 1;
 8001e18:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_ZN7RoboArm6GetLinEv>:

float RoboArm::GetLin() {
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b088      	sub	sp, #32
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001e2e:	2102      	movs	r1, #2
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffbf 	bl	8001db4 <_ZN7RoboArm14GetPosEncodersEh>
 8001e36:	61b8      	str	r0, [r7, #24]
	while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8001e38:	e004      	b.n	8001e44 <_ZN7RoboArm6GetLinEv+0x22>
		posnowT_2 = GetPosEncoders(2); //try again
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ffb9 	bl	8001db4 <_ZN7RoboArm14GetPosEncodersEh>
 8001e42:	61b8      	str	r0, [r7, #24]
	while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d107      	bne.n	8001e5e <_ZN7RoboArm6GetLinEv+0x3c>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	dc01      	bgt.n	8001e5e <_ZN7RoboArm6GetLinEv+0x3c>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <_ZN7RoboArm6GetLinEv+0x3e>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ea      	bne.n	8001e3a <_ZN7RoboArm6GetLinEv+0x18>

	float ang_pos = GetAngleEncoders(posnowT_2);
 8001e64:	69b9      	ldr	r1, [r7, #24]
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff68 	bl	8001d3c <_ZN7RoboArm16GetAngleEncodersEm>
 8001e6c:	6138      	str	r0, [r7, #16]
	float pos_actual = GetLinEncoders(ang_pos);
 8001e6e:	6939      	ldr	r1, [r7, #16]
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff77 	bl	8001d64 <_ZN7RoboArm14GetLinEncodersEf>
 8001e76:	60f8      	str	r0, [r7, #12]
	float pos = pos_actual + defaultDistanse;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001e7e:	4619      	mov	r1, r3
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7fe fd87 	bl	8000994 <__addsf3>
 8001e86:	4603      	mov	r3, r0
 8001e88:	617b      	str	r3, [r7, #20]
	if (pos > distMax)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7ff f843 	bl	8000f1c <__aeabi_fcmpgt>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <_ZN7RoboArm6GetLinEv+0x8a>
		pos -= distMax;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7fe fd74 	bl	8000990 <__aeabi_fsub>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	617b      	str	r3, [r7, #20]

	return pos;
 8001eac:	697b      	ldr	r3, [r7, #20]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <_ZN7RoboArm6GetAngEv>:

float RoboArm::GetAng() {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ff74 	bl	8001db4 <_ZN7RoboArm14GetPosEncodersEh>
 8001ecc:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8001ece:	e004      	b.n	8001eda <_ZN7RoboArm6GetAngEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ff6e 	bl	8001db4 <_ZN7RoboArm14GetPosEncodersEh>
 8001ed8:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d107      	bne.n	8001ef4 <_ZN7RoboArm6GetAngEv+0x3c>
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	dc01      	bgt.n	8001ef4 <_ZN7RoboArm6GetAngEv+0x3c>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <_ZN7RoboArm6GetAngEv+0x3e>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ea      	bne.n	8001ed0 <_ZN7RoboArm6GetAngEv+0x18>

	float ang_actual = GetAngleEncoders(posnowT_1);
 8001efa:	6939      	ldr	r1, [r7, #16]
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff1d 	bl	8001d3c <_ZN7RoboArm16GetAngleEncodersEm>
 8001f02:	60b8      	str	r0, [r7, #8]
	float ang = ang_actual + defaultAngle;//arm.ShiftZeroAng(ang_actual);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f7fe fd41 	bl	8000994 <__addsf3>
 8001f12:	4603      	mov	r3, r0
 8001f14:	60fb      	str	r3, [r7, #12]
	if (ang > 360.0)
 8001f16:	4909      	ldr	r1, [pc, #36]	; (8001f3c <_ZN7RoboArm6GetAngEv+0x84>)
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7fe ffff 	bl	8000f1c <__aeabi_fcmpgt>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <_ZN7RoboArm6GetAngEv+0x78>
			ang -= 360.0;
 8001f24:	4905      	ldr	r1, [pc, #20]	; (8001f3c <_ZN7RoboArm6GetAngEv+0x84>)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7fe fd32 	bl	8000990 <__aeabi_fsub>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]
	return ang;
 8001f30:	68fb      	ldr	r3, [r7, #12]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	43b40000 	.word	0x43b40000

08001f40 <_ZN7RoboArm15SetSoftwareZeroEv>:
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
	HAL_Delay(250);
	return 0;
}

int RoboArm::SetSoftwareZero() {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
//	ang_zero = GetPosEncoders(1);
//	lin_zero = GetPosEncoders(2);

	int attempts = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff30 	bl	8001db4 <_ZN7RoboArm14GetPosEncodersEh>
 8001f54:	6138      	str	r0, [r7, #16]

	while(posnowT_1 == 0xFFFF && ++attempts < 3)
 8001f56:	e004      	b.n	8001f62 <_ZN7RoboArm15SetSoftwareZeroEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001f58:	2101      	movs	r1, #1
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff2a 	bl	8001db4 <_ZN7RoboArm14GetPosEncodersEh>
 8001f60:	6138      	str	r0, [r7, #16]
	while(posnowT_1 == 0xFFFF && ++attempts < 3)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d107      	bne.n	8001f7c <_ZN7RoboArm15SetSoftwareZeroEv+0x3c>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	dc01      	bgt.n	8001f7c <_ZN7RoboArm15SetSoftwareZeroEv+0x3c>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <_ZN7RoboArm15SetSoftwareZeroEv+0x3e>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ea      	bne.n	8001f58 <_ZN7RoboArm15SetSoftwareZeroEv+0x18>

	attempts = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]

	//			float ang = posnowT*360/16384;
	ang_zero = GetAngleEncoders(posnowT_1);// - defaultAngle;// - defaultAngle; //0, 120, 240
 8001f86:	6939      	ldr	r1, [r7, #16]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fed7 	bl	8001d3c <_ZN7RoboArm16GetAngleEncodersEm>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	if (ang_zero < 0.0)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe ff9d 	bl	8000ee0 <__aeabi_fcmplt>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00b      	beq.n	8001fc4 <_ZN7RoboArm15SetSoftwareZeroEv+0x84>
		ang_zero = 360.0 + ang_zero;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <_ZN7RoboArm15SetSoftwareZeroEv+0x110>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fced 	bl	8000994 <__addsf3>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	//			un_send.params.ang = angleT;

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fef4 	bl	8001db4 <_ZN7RoboArm14GetPosEncodersEh>
 8001fcc:	60f8      	str	r0, [r7, #12]
	while(posnowT_2 == 0xFFFF && ++attempts < 3)
 8001fce:	e004      	b.n	8001fda <_ZN7RoboArm15SetSoftwareZeroEv+0x9a>
		posnowT_2 = GetPosEncoders(2); //try again
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff feee 	bl	8001db4 <_ZN7RoboArm14GetPosEncodersEh>
 8001fd8:	60f8      	str	r0, [r7, #12]
	while(posnowT_2 == 0xFFFF && ++attempts < 3)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d107      	bne.n	8001ff4 <_ZN7RoboArm15SetSoftwareZeroEv+0xb4>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	dc01      	bgt.n	8001ff4 <_ZN7RoboArm15SetSoftwareZeroEv+0xb4>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <_ZN7RoboArm15SetSoftwareZeroEv+0xb6>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ea      	bne.n	8001fd0 <_ZN7RoboArm15SetSoftwareZeroEv+0x90>
	float ang_pos = GetAngleEncoders(posnowT_2);
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fe9d 	bl	8001d3c <_ZN7RoboArm16GetAngleEncodersEm>
 8002002:	60b8      	str	r0, [r7, #8]
	lin_zero = GetLinEncoders(ang_pos);// - defaultDistanse;
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff feac 	bl	8001d64 <_ZN7RoboArm14GetLinEncodersEf>
 800200c:	4602      	mov	r2, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	if (lin_zero < 0.0)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe ff5e 	bl	8000ee0 <__aeabi_fcmplt>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <_ZN7RoboArm15SetSoftwareZeroEv+0x106>
		lin_zero = distMax + lin_zero;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f7fe fcac 	bl	8000994 <__addsf3>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	return 0;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	43b40000 	.word	0x43b40000

08002054 <_ZN7RoboArm12ShiftZeroAngEf>:
	if (lin_actual > distMax)
		lin_actual -= distMax;
	return lin_actual;
}

float RoboArm::ShiftZeroAng(float ang_actual){
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
	float ang = ang_actual - ang_zero;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002064:	4619      	mov	r1, r3
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	f7fe fc92 	bl	8000990 <__aeabi_fsub>
 800206c:	4603      	mov	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]
	if (ang < 0.0)
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7fe ff33 	bl	8000ee0 <__aeabi_fcmplt>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <_ZN7RoboArm12ShiftZeroAngEf+0x38>
		ang = 360.0 + ang;
 8002080:	4905      	ldr	r1, [pc, #20]	; (8002098 <_ZN7RoboArm12ShiftZeroAngEf+0x44>)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7fe fc86 	bl	8000994 <__addsf3>
 8002088:	4603      	mov	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
	return ang;
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	43b40000 	.word	0x43b40000

0800209c <_ZN7RoboArm12ShiftZeroLinEf>:

float RoboArm::ShiftZeroLin(float lin_actual){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	float lin = lin_actual - lin_zero;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80020ac:	4619      	mov	r1, r3
 80020ae:	6838      	ldr	r0, [r7, #0]
 80020b0:	f7fe fc6e 	bl	8000990 <__aeabi_fsub>
 80020b4:	4603      	mov	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]
	if (lin < 0.0)
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7fe ff0f 	bl	8000ee0 <__aeabi_fcmplt>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <_ZN7RoboArm12ShiftZeroLinEf+0x3c>
		lin = distMax + lin;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020cc:	4619      	mov	r1, r3
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7fe fc60 	bl	8000994 <__addsf3>
 80020d4:	4603      	mov	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]
	return lin;
 80020d8:	68fb      	ldr	r3, [r7, #12]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>:
		GPIO_TypeDef *Dir1_GPIO_Port_M1T, uint16_t Dir1_Pin_M1T,
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *Dir3_GPIO_Port_M3T, uint16_t Dir3_Pin_M3T,
		GPIO_TypeDef *En1_GPIO_Port_M1T, uint16_t En1_Pin_M1T,
		GPIO_TypeDef *En2_GPIO_Port_M2T, uint16_t En2_Pin_M2T,
		GPIO_TypeDef *En3_GPIO_Port_M3T, uint16_t En3_Pin_M3T){
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	609a      	str	r2, [r3, #8]
	htim3M3 = &htim3;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	60da      	str	r2, [r3, #12]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	615a      	str	r2, [r3, #20]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8c3a      	ldrh	r2, [r7, #32]
 800210c:	831a      	strh	r2, [r3, #24]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	61da      	str	r2, [r3, #28]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002118:	841a      	strh	r2, [r3, #32]
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
	En1_Pin_M1 = En1_Pin_M1T;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002130:	861a      	strh	r2, [r3, #48]	; 0x30
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002136:	635a      	str	r2, [r3, #52]	; 0x34
	En2_Pin_M2 = En2_Pin_M2T;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800213e:	871a      	strh	r2, [r3, #56]	; 0x38
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c
	En3_Pin_M3 = En3_Pin_M3T;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800214c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	SetEnable(1, true);
 8002150:	2201      	movs	r2, #1
 8002152:	2101      	movs	r1, #1
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f84c 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 800215a:	2201      	movs	r2, #1
 800215c:	2102      	movs	r1, #2
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f847 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 8002164:	2201      	movs	r2, #1
 8002166:	2103      	movs	r1, #3
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f842 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8002174:	2300      	movs	r3, #0
 8002176:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	f000 f88e 	bl	800229c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_2);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8002186:	2302      	movs	r3, #2
 8002188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	f000 f885 	bl	800229c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_1);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8002198:	2301      	movs	r3, #1
 800219a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	f000 f87c 	bl	800229c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	339c      	adds	r3, #156	; 0x9c
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f88b 	bl	80022c4 <_ZN7TMC22096enableEv>

//	tmcd_angle.disableAutomaticCurrentScaling();
//	tmcd_angle.disableAutomaticGradientAdaptation();

	tmcd_gripper.enable();
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	33c4      	adds	r3, #196	; 0xc4
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f886 	bl	80022c4 <_ZN7TMC22096enableEv>

//	tmcd_gripper.disableAutomaticCurrentScaling();
//	tmcd_gripper.disableAutomaticGradientAdaptation();

	tmcd_linear.enable();
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3374      	adds	r3, #116	; 0x74
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f881 	bl	80022c4 <_ZN7TMC22096enableEv>

//	tmcd_linear.disableAutomaticCurrentScaling();
//	tmcd_linear.disableAutomaticGradientAdaptation();

	SetMicrosteps4All(7);
 80021c2:	2107      	movs	r1, #7
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff fd76 	bl	8001cb6 <_ZN7RoboArm17SetMicrosteps4AllEh>



	SetEnable(1, false);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2101      	movs	r1, #1
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f80f 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2102      	movs	r1, #2
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f80a 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, false);
 80021de:	2200      	movs	r2, #0
 80021e0:	2103      	movs	r1, #3
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f805 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>

	return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	807b      	strh	r3, [r7, #2]
 80021fe:	4613      	mov	r3, r2
 8002200:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 8002202:	787b      	ldrb	r3, [r7, #1]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e001      	b.n	8002212 <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d108      	bne.n	800222a <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	4619      	mov	r1, r3
 8002224:	f001 ff9c 	bl	8004160 <HAL_GPIO_WritePin>
 8002228:	e017      	b.n	800225a <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 2) {
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d108      	bne.n	8002242 <_ZN7RoboArm9SetEnableEtb+0x50>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	4619      	mov	r1, r3
 800223c:	f001 ff90 	bl	8004160 <HAL_GPIO_WritePin>
 8002240:	e00b      	b.n	800225a <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 3) {
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d108      	bne.n	800225a <_ZN7RoboArm9SetEnableEtb+0x68>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	4619      	mov	r1, r3
 8002256:	f001 ff83 	bl	8004160 <HAL_GPIO_WritePin>
	}

	return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2203      	movs	r2, #3
 8002270:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800227a:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2203      	movs	r2, #3
 8002280:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002288:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	461a      	mov	r2, r3
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8b6 	bl	8002428 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN7TMC22096enableEv>:
//
////  pinMode(hardware_enable_pin_, OUTPUT);
////  digitalWrite(hardware_enable_pin_, HIGH);
//}
//
void TMC2209::enable() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0f      	blt.n	80022f6 <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2120      	movs	r1, #32
 80022da:	4810      	ldr	r0, [pc, #64]	; (800231c <_ZN7TMC22096enableEv+0x58>)
 80022dc:	f001 ff40 	bl	8004160 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2101      	movs	r1, #1
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <_ZN7TMC22096enableEv+0x58>)
 80022e6:	f001 ff3b 	bl	8004160 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f0:	480b      	ldr	r0, [pc, #44]	; (8002320 <_ZN7TMC22096enableEv+0x5c>)
 80022f2:	f001 ff35 	bl	8004160 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	b2d9      	uxtb	r1, r3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	7f13      	ldrb	r3, [r2, #28]
 8002306:	f361 0303 	bfi	r3, r1, #0, #4
 800230a:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f9b8 	bl	8002682 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40010800 	.word	0x40010800
 8002320:	40010c00 	.word	0x40010c00

08002324 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
//		++exponent;
//	}
//	setMicrostepsPerStepPowerOfTwo(exponent);
//}
//
void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	2b07      	cmp	r3, #7
 8002334:	d84a      	bhi.n	80023cc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 8002336:	a201      	add	r2, pc, #4	; (adr r2, 800233c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	0800235d 	.word	0x0800235d
 8002340:	0800236b 	.word	0x0800236b
 8002344:	08002379 	.word	0x08002379
 8002348:	08002387 	.word	0x08002387
 800234c:	08002395 	.word	0x08002395
 8002350:	080023a3 	.word	0x080023a3
 8002354:	080023b1 	.word	0x080023b1
 8002358:	080023bf 	.word	0x080023bf
	case 0: {
		chopper_config_.mres = MRES_001;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	7fd3      	ldrb	r3, [r2, #31]
 8002360:	2108      	movs	r1, #8
 8002362:	f361 0303 	bfi	r3, r1, #0, #4
 8002366:	77d3      	strb	r3, [r2, #31]
		break;
 8002368:	e036      	b.n	80023d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	7fd3      	ldrb	r3, [r2, #31]
 800236e:	2107      	movs	r1, #7
 8002370:	f361 0303 	bfi	r3, r1, #0, #4
 8002374:	77d3      	strb	r3, [r2, #31]
		break;
 8002376:	e02f      	b.n	80023d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	7fd3      	ldrb	r3, [r2, #31]
 800237c:	2106      	movs	r1, #6
 800237e:	f361 0303 	bfi	r3, r1, #0, #4
 8002382:	77d3      	strb	r3, [r2, #31]
		break;
 8002384:	e028      	b.n	80023d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	7fd3      	ldrb	r3, [r2, #31]
 800238a:	2105      	movs	r1, #5
 800238c:	f361 0303 	bfi	r3, r1, #0, #4
 8002390:	77d3      	strb	r3, [r2, #31]
		break;
 8002392:	e021      	b.n	80023d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	7fd3      	ldrb	r3, [r2, #31]
 8002398:	2104      	movs	r1, #4
 800239a:	f361 0303 	bfi	r3, r1, #0, #4
 800239e:	77d3      	strb	r3, [r2, #31]
		break;
 80023a0:	e01a      	b.n	80023d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	7fd3      	ldrb	r3, [r2, #31]
 80023a6:	2103      	movs	r1, #3
 80023a8:	f361 0303 	bfi	r3, r1, #0, #4
 80023ac:	77d3      	strb	r3, [r2, #31]
		break;
 80023ae:	e013      	b.n	80023d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	7fd3      	ldrb	r3, [r2, #31]
 80023b4:	2102      	movs	r1, #2
 80023b6:	f361 0303 	bfi	r3, r1, #0, #4
 80023ba:	77d3      	strb	r3, [r2, #31]
		break;
 80023bc:	e00c      	b.n	80023d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	7fd3      	ldrb	r3, [r2, #31]
 80023c2:	2101      	movs	r1, #1
 80023c4:	f361 0303 	bfi	r3, r1, #0, #4
 80023c8:	77d3      	strb	r3, [r2, #31]
		break;
 80023ca:	e005      	b.n	80023d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	7fd3      	ldrb	r3, [r2, #31]
 80023d0:	f36f 0303 	bfc	r3, #0, #4
 80023d4:	77d3      	strb	r3, [r2, #31]
		break;
 80023d6:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f952 	bl	8002682 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop

080023e8 <_ZN7TMC220927enableInverseMotorDirectionEv>:
//	driver_current_.ihold = hold_current;
//	driver_current_.iholddelay = hold_delay;
//	writeStoredDriverCurrent();
//}
//
void TMC2209::enableInverseMotorDirection() {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	7b13      	ldrb	r3, [r2, #12]
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f932 	bl	8002664 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	7b13      	ldrb	r3, [r2, #12]
 8002414:	f36f 03c3 	bfc	r3, #3, #1
 8002418:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f922 	bl	8002664 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
//	return read(ADDRESS_MSCNT);
//}
//
//// private
///* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4619      	mov	r1, r3
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f807 	bl	8002454 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f82c 	bl	80024a4 <_ZN7TMC220922setRegistersToDefaultsEv>
	//minimizeMotorCurrent();
//	setRunCurrent(100);
//	disable();
//	disableAutomaticCurrentScaling();
//	disableAutomaticGradientAdaptation();
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:
//
////	  tmcuart->RxXferCount = 0;
//
//}
//
void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	7b13      	ldrb	r3, [r2, #12]
 8002470:	f36f 0300 	bfc	r3, #0, #1
 8002474:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	7b13      	ldrb	r3, [r2, #12]
 800247a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800247e:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	7b13      	ldrb	r3, [r2, #12]
 8002484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002488:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	7b53      	ldrb	r3, [r2, #13]
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f8e5 	bl	8002664 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	7c13      	ldrb	r3, [r2, #16]
 80024b6:	2110      	movs	r1, #16
 80024b8:	f361 0304 	bfi	r3, r1, #0, #5
 80024bc:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	7c53      	ldrb	r3, [r2, #17]
 80024c2:	f043 031f 	orr.w	r3, r3, #31
 80024c6:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	7c93      	ldrb	r3, [r2, #18]
 80024cc:	2101      	movs	r1, #1
 80024ce:	f361 0303 	bfi	r3, r1, #0, #4
 80024d2:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	461a      	mov	r2, r3
 80024da:	2110      	movs	r1, #16
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f885 	bl	80025ec <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 80024e6:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	69d3      	ldr	r3, [r2, #28]
 80024ec:	2102      	movs	r1, #2
 80024ee:	f361 33d0 	bfi	r3, r1, #15, #2
 80024f2:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	8b93      	ldrh	r3, [r2, #28]
 80024f8:	f36f 13ca 	bfc	r3, #7, #4
 80024fc:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	7f13      	ldrb	r3, [r2, #28]
 8002502:	2105      	movs	r1, #5
 8002504:	f361 1306 	bfi	r3, r1, #4, #3
 8002508:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	7f13      	ldrb	r3, [r2, #28]
 800250e:	2103      	movs	r1, #3
 8002510:	f361 0303 	bfi	r3, r1, #0, #4
 8002514:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	461a      	mov	r2, r3
 800251c:	216c      	movs	r1, #108	; 0x6c
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f864 	bl	80025ec <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	461a      	mov	r2, r3
 8002530:	2170      	movs	r1, #112	; 0x70
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f85a 	bl	80025ec <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	461a      	mov	r2, r3
 8002544:	2142      	movs	r1, #66	; 0x42
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f850 	bl	80025ec <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 800254c:	2214      	movs	r2, #20
 800254e:	2111      	movs	r1, #17
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f84b 	bl	80025ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002556:	2200      	movs	r2, #0
 8002558:	2113      	movs	r1, #19
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f846 	bl	80025ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002560:	2200      	movs	r2, #0
 8002562:	2122      	movs	r1, #34	; 0x22
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f841 	bl	80025ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 800256a:	2200      	movs	r2, #0
 800256c:	2114      	movs	r1, #20
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f83c 	bl	80025ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002574:	2200      	movs	r2, #0
 8002576:	2140      	movs	r1, #64	; 0x40
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f837 	bl	80025ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 800257e:	2200      	movs	r2, #0
 8002580:	2142      	movs	r1, #66	; 0x42
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f832 	bl	80025ec <_ZN7TMC22095writeEhm>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	10000053 	.word	0x10000053
 8002594:	c10d0024 	.word	0xc10d0024

08002598 <_ZN7TMC220911reverseDataEm>:
//	driver_current_.irun = CURRENT_SETTING_MIN;
//	driver_current_.ihold = CURRENT_SETTING_MIN;
//	writeStoredDriverCurrent();
//}
//
uint32_t TMC2209::reverseData(uint32_t data) {
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80025a6:	2300      	movs	r3, #0
 80025a8:	72fb      	strb	r3, [r7, #11]
 80025aa:	e016      	b.n	80025da <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 80025ac:	7afb      	ldrb	r3, [r7, #11]
 80025ae:	f1c3 0303 	rsb	r3, r3, #3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 80025b8:	7afb      	ldrb	r3, [r7, #11]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 80025be:	7abb      	ldrb	r3, [r7, #10]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	7a7b      	ldrb	r3, [r7, #9]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	3301      	adds	r3, #1
 80025d8:	72fb      	strb	r3, [r7, #11]
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d9e5      	bls.n	80025ac <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <_ZN7TMC22095writeEhm>:
//	for (uint8_t i = 0; i < datagram_size; ++i) {
//		byte = serialRead();
//	}*/
//}
//
void TMC2209::write(uint8_t register_address, uint32_t data) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	460b      	mov	r3, r1
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8002606:	7c3b      	ldrb	r3, [r7, #16]
 8002608:	2205      	movs	r2, #5
 800260a:	f362 0303 	bfi	r3, r2, #0, #4
 800260e:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	791b      	ldrb	r3, [r3, #4]
 8002614:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8002616:	7afb      	ldrb	r3, [r7, #11]
 8002618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800261c:	b2da      	uxtb	r2, r3
 800261e:	7cbb      	ldrb	r3, [r7, #18]
 8002620:	f362 0306 	bfi	r3, r2, #0, #7
 8002624:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002626:	7cbb      	ldrb	r3, [r7, #18]
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff ffb1 	bl	8002598 <_ZN7TMC220911reverseDataEm>
 8002636:	4603      	mov	r3, r0
 8002638:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	2208      	movs	r2, #8
 8002642:	4619      	mov	r1, r3
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f82b 	bl	80026a0 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 800264a:	4603      	mov	r3, r0
 800264c:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800264e:	f107 0310 	add.w	r3, r7, #16
 8002652:	2208      	movs	r2, #8
 8002654:	4619      	mov	r1, r3
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f871 	bl	800273e <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <_ZN7TMC220923writeStoredGlobalConfigEv>:
//uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
//	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
void TMC2209::writeStoredGlobalConfig() {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	461a      	mov	r2, r3
 8002672:	2100      	movs	r1, #0
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffb9 	bl	80025ec <_ZN7TMC22095writeEhm>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_ZN7TMC220924writeStoredChopperConfigEv>:
//	if (cool_step_enabled_) {
//		write(ADDRESS_COOLCONF, cool_config_.bytes);
//	}
//}
//
void TMC2209::writeStoredChopperConfig() {
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	461a      	mov	r2, r3
 8002690:	216c      	movs	r1, #108	; 0x6c
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffaa 	bl	80025ec <_ZN7TMC22095writeEhm>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 80026a0:	b4f0      	push	{r4, r5, r6, r7}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80026b2:	2300      	movs	r3, #0
 80026b4:	757b      	strb	r3, [r7, #21]
 80026b6:	e037      	b.n	8002728 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	7d79      	ldrb	r1, [r7, #21]
 80026c0:	00c9      	lsls	r1, r1, #3
 80026c2:	f1c1 0620 	rsb	r6, r1, #32
 80026c6:	f1a1 0020 	sub.w	r0, r1, #32
 80026ca:	fa22 f401 	lsr.w	r4, r2, r1
 80026ce:	fa03 f606 	lsl.w	r6, r3, r6
 80026d2:	4334      	orrs	r4, r6
 80026d4:	fa23 f000 	lsr.w	r0, r3, r0
 80026d8:	4304      	orrs	r4, r0
 80026da:	fa23 f501 	lsr.w	r5, r3, r1
 80026de:	4623      	mov	r3, r4
 80026e0:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 80026e2:	2300      	movs	r3, #0
 80026e4:	753b      	strb	r3, [r7, #20]
 80026e6:	e019      	b.n	800271c <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	09db      	lsrs	r3, r3, #7
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	7dbb      	ldrb	r3, [r7, #22]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d007      	beq.n	800270a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	f083 0307 	eor.w	r3, r3, #7
 8002704:	b25b      	sxtb	r3, r3
 8002706:	75fb      	strb	r3, [r7, #23]
 8002708:	e002      	b.n	8002710 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 8002710:	7dbb      	ldrb	r3, [r7, #22]
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002716:	7d3b      	ldrb	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	753b      	strb	r3, [r7, #20]
 800271c:	7d3b      	ldrb	r3, [r7, #20]
 800271e:	2b07      	cmp	r3, #7
 8002720:	d9e2      	bls.n	80026e8 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002722:	7d7b      	ldrb	r3, [r7, #21]
 8002724:	3301      	adds	r3, #1
 8002726:	757b      	strb	r3, [r7, #21]
 8002728:	7d7a      	ldrb	r2, [r7, #21]
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	3b01      	subs	r3, #1
 800272e:	429a      	cmp	r2, r3
 8002730:	dbc2      	blt.n	80026b8 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 8002732:	7dfb      	ldrb	r3, [r7, #23]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bcf0      	pop	{r4, r5, r6, r7}
 800273c:	4770      	bx	lr

0800273e <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	4613      	mov	r3, r2
 800274a:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f004 f810 	bl	8006776 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6898      	ldr	r0, [r3, #8]
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	b29a      	uxth	r2, r3
 800275e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	f003 fcaf 	bl	80060c6 <HAL_UART_Transmit>
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b092      	sub	sp, #72	; 0x48
 8002774:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002776:	f001 f931 	bl	80039dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800277a:	f000 f9fb 	bl	8002b74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800277e:	f000 fc4b 	bl	8003018 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8002782:	f000 fbed 	bl	8002f60 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8002786:	f000 fa83 	bl	8002c90 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800278a:	f000 fb19 	bl	8002dc0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800278e:	f000 fb7f 	bl	8002e90 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8002792:	f000 fc13 	bl	8002fbc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8002796:	f000 fa3f 	bl	8002c18 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim1);
 800279a:	489b      	ldr	r0, [pc, #620]	; (8002a08 <main+0x298>)
 800279c:	f002 fd1c 	bl	80051d8 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim2);
 80027a0:	489a      	ldr	r0, [pc, #616]	; (8002a0c <main+0x29c>)
 80027a2:	f002 fd19 	bl	80051d8 <HAL_TIM_Base_Init>

  arm.SetSettMotors(huart2,htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 80027a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027aa:	930c      	str	r3, [sp, #48]	; 0x30
 80027ac:	4b98      	ldr	r3, [pc, #608]	; (8002a10 <main+0x2a0>)
 80027ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80027b0:	2301      	movs	r3, #1
 80027b2:	930a      	str	r3, [sp, #40]	; 0x28
 80027b4:	4b97      	ldr	r3, [pc, #604]	; (8002a14 <main+0x2a4>)
 80027b6:	9309      	str	r3, [sp, #36]	; 0x24
 80027b8:	2320      	movs	r3, #32
 80027ba:	9308      	str	r3, [sp, #32]
 80027bc:	4b95      	ldr	r3, [pc, #596]	; (8002a14 <main+0x2a4>)
 80027be:	9307      	str	r3, [sp, #28]
 80027c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c4:	9306      	str	r3, [sp, #24]
 80027c6:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <main+0x2a0>)
 80027c8:	9305      	str	r3, [sp, #20]
 80027ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ce:	9304      	str	r3, [sp, #16]
 80027d0:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <main+0x2a0>)
 80027d2:	9303      	str	r3, [sp, #12]
 80027d4:	2340      	movs	r3, #64	; 0x40
 80027d6:	9302      	str	r3, [sp, #8]
 80027d8:	4b8e      	ldr	r3, [pc, #568]	; (8002a14 <main+0x2a4>)
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	4b8e      	ldr	r3, [pc, #568]	; (8002a18 <main+0x2a8>)
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <main+0x29c>)
 80027e2:	4a89      	ldr	r2, [pc, #548]	; (8002a08 <main+0x298>)
 80027e4:	498d      	ldr	r1, [pc, #564]	; (8002a1c <main+0x2ac>)
 80027e6:	488e      	ldr	r0, [pc, #568]	; (8002a20 <main+0x2b0>)
 80027e8:	f7ff fc7b 	bl	80020e2 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>
		  Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
		  En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin);

  arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 80027ec:	230e      	movs	r3, #14
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	4b86      	ldr	r3, [pc, #536]	; (8002a10 <main+0x2a0>)
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	4a85      	ldr	r2, [pc, #532]	; (8002a10 <main+0x2a0>)
 80027fc:	4989      	ldr	r1, [pc, #548]	; (8002a24 <main+0x2b4>)
 80027fe:	4888      	ldr	r0, [pc, #544]	; (8002a20 <main+0x2b0>)
 8002800:	f7ff fa79 	bl	8001cf6 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
		  14);
  un_now.params.hold = 0;
 8002804:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <main+0x2b8>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT (&huart1, str, 1);
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 800280a:	220c      	movs	r2, #12
 800280c:	4987      	ldr	r1, [pc, #540]	; (8002a2c <main+0x2bc>)
 800280e:	4888      	ldr	r0, [pc, #544]	; (8002a30 <main+0x2c0>)
 8002810:	f003 fcdc 	bl	80061cc <HAL_UART_Receive_IT>
  arm.setPrintState(true);
 8002814:	2101      	movs	r1, #1
 8002816:	4882      	ldr	r0, [pc, #520]	; (8002a20 <main+0x2b0>)
 8002818:	f7ff fa24 	bl	8001c64 <_ZN7RoboArm13setPrintStateEb>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (startFirstMove) {
 800281c:	4b85      	ldr	r3, [pc, #532]	; (8002a34 <main+0x2c4>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d024      	beq.n	800286e <main+0xfe>
		  startFirstMove = false;
 8002824:	4b83      	ldr	r3, [pc, #524]	; (8002a34 <main+0x2c4>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]

		  if (un_now.params.hold != 0){// &&
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <main+0x2b8>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <main+0xd6>
				  //!(abs(un_now.params.ang - un_to.params.ang) < 0.001 &&
				  //  abs(un_now.params.lin - un_to.params.lin) < 0.001)) {
			  allowMove = false;
 8002832:	4b81      	ldr	r3, [pc, #516]	; (8002a38 <main+0x2c8>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
			  un_now.params.hold = 0;
 8002838:	4b7b      	ldr	r3, [pc, #492]	; (8002a28 <main+0x2b8>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
			  arm.SetGripper(0);
 800283e:	2100      	movs	r1, #0
 8002840:	4877      	ldr	r0, [pc, #476]	; (8002a20 <main+0x2b0>)
 8002842:	f7ff f995 	bl	8001b70 <_ZN7RoboArm10SetGripperEi>
		  }
		  while (!allowMove) {}
 8002846:	bf00      	nop
 8002848:	4b7b      	ldr	r3, [pc, #492]	; (8002a38 <main+0x2c8>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f8      	bne.n	8002848 <main+0xd8>
		  if (allowMove) {
 8002856:	4b78      	ldr	r3, [pc, #480]	; (8002a38 <main+0x2c8>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <main+0xfe>
			  arm.Move2Motors(un_to.params.ang, un_to.params.lin);
 800285e:	4b77      	ldr	r3, [pc, #476]	; (8002a3c <main+0x2cc>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a76      	ldr	r2, [pc, #472]	; (8002a3c <main+0x2cc>)
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4619      	mov	r1, r3
 8002868:	486d      	ldr	r0, [pc, #436]	; (8002a20 <main+0x2b0>)
 800286a:	f7fe ffbf 	bl	80017ec <_ZN7RoboArm11Move2MotorsEff>
//			  arm.MoveCorrectPosition(un_to.params.ang, un_to.params.lin);
		  }
	  }

	  if (timerFT1 && timerFT2) {
 800286e:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <main+0x2d0>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8100 	beq.w	8002a78 <main+0x308>
 8002878:	4b72      	ldr	r3, [pc, #456]	; (8002a44 <main+0x2d4>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80fb 	beq.w	8002a78 <main+0x308>

		  float lin = arm.GetLin();
 8002882:	4867      	ldr	r0, [pc, #412]	; (8002a20 <main+0x2b0>)
 8002884:	f7ff facd 	bl	8001e22 <_ZN7RoboArm6GetLinEv>
 8002888:	60f8      	str	r0, [r7, #12]
//		  un_send.params.lin = lin;
		  un_now.params.lin = arm.ShiftZeroLin(lin);
 800288a:	68f9      	ldr	r1, [r7, #12]
 800288c:	4864      	ldr	r0, [pc, #400]	; (8002a20 <main+0x2b0>)
 800288e:	f7ff fc05 	bl	800209c <_ZN7RoboArm12ShiftZeroLinEf>
 8002892:	4603      	mov	r3, r0
 8002894:	4a64      	ldr	r2, [pc, #400]	; (8002a28 <main+0x2b8>)
 8002896:	6013      	str	r3, [r2, #0]

		  float ang = arm.GetAng();
 8002898:	4861      	ldr	r0, [pc, #388]	; (8002a20 <main+0x2b0>)
 800289a:	f7ff fb0d 	bl	8001eb8 <_ZN7RoboArm6GetAngEv>
 800289e:	60b8      	str	r0, [r7, #8]
//		  un_send.params.ang = ang;
		  un_now.params.ang = arm.ShiftZeroAng(ang);
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	485f      	ldr	r0, [pc, #380]	; (8002a20 <main+0x2b0>)
 80028a4:	f7ff fbd6 	bl	8002054 <_ZN7RoboArm12ShiftZeroAngEf>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4a5f      	ldr	r2, [pc, #380]	; (8002a28 <main+0x2b8>)
 80028ac:	6053      	str	r3, [r2, #4]

		  if (posCorrected) {
 80028ae:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <main+0x2d8>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d079      	beq.n	80029aa <main+0x23a>
			  timerFT1 = false;
 80028b6:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <main+0x2d0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
			  timerFT2 = false;
 80028bc:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <main+0x2d4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
			  posCorrected = false;
 80028c2:	4b61      	ldr	r3, [pc, #388]	; (8002a48 <main+0x2d8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]

			  if (abs(un_now.params.ang - un_to.params.ang) > accuracy ||
 80028c8:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <main+0x2b8>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a5b      	ldr	r2, [pc, #364]	; (8002a3c <main+0x2cc>)
 80028ce:	6852      	ldr	r2, [r2, #4]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe f85c 	bl	8000990 <__aeabi_fsub>
 80028d8:	4603      	mov	r3, r0
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fce7 	bl	80012ae <_ZSt3absf>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <main+0x2dc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f7fe fb17 	bl	8000f1c <__aeabi_fcmpgt>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d115      	bne.n	8002920 <main+0x1b0>
					  abs(un_now.params.ang - un_to.params.ang) > accuracy) {
 80028f4:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <main+0x2b8>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a50      	ldr	r2, [pc, #320]	; (8002a3c <main+0x2cc>)
 80028fa:	6852      	ldr	r2, [r2, #4]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f846 	bl	8000990 <__aeabi_fsub>
 8002904:	4603      	mov	r3, r0
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fcd1 	bl	80012ae <_ZSt3absf>
 800290c:	4602      	mov	r2, r0
 800290e:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <main+0x2dc>)
 8002910:	681b      	ldr	r3, [r3, #0]
			  if (abs(un_now.params.ang - un_to.params.ang) > accuracy ||
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f7fe fb01 	bl	8000f1c <__aeabi_fcmpgt>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <main+0x1b4>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <main+0x1b6>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <main+0x1d2>
				  startCorrectPos = true;
 800292a:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <main+0x2e0>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
				  arm.MoveCorrectPosition(un_to.params.ang, un_to.params.lin);
 8002930:	4b42      	ldr	r3, [pc, #264]	; (8002a3c <main+0x2cc>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a41      	ldr	r2, [pc, #260]	; (8002a3c <main+0x2cc>)
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	4619      	mov	r1, r3
 800293a:	4839      	ldr	r0, [pc, #228]	; (8002a20 <main+0x2b0>)
 800293c:	f7fe fd92 	bl	8001464 <_ZN7RoboArm19MoveCorrectPositionEff>
 8002940:	e09a      	b.n	8002a78 <main+0x308>
			  } else {
				  startCorrectPos = false;
 8002942:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <main+0x2e0>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
				  if (un_now.params.hold != un_to.params.hold) {
 8002948:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <main+0x2b8>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <main+0x2cc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	429a      	cmp	r2, r3
 8002952:	d00c      	beq.n	800296e <main+0x1fe>
					  gripperMoveFinished = false;
 8002954:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <main+0x2e4>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
					  un_now.params.hold = un_to.params.hold;
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <main+0x2cc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4a32      	ldr	r2, [pc, #200]	; (8002a28 <main+0x2b8>)
 8002960:	6093      	str	r3, [r2, #8]
					  arm.SetGripper(un_to.params.hold);
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <main+0x2cc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	4619      	mov	r1, r3
 8002968:	482d      	ldr	r0, [pc, #180]	; (8002a20 <main+0x2b0>)
 800296a:	f7ff f901 	bl	8001b70 <_ZN7RoboArm10SetGripperEi>
				  }
				  while (!gripperMoveFinished) {}
 800296e:	bf00      	nop
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <main+0x2e4>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f083 0301 	eor.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f8      	bne.n	8002970 <main+0x200>
				  if (gripperMoveFinished) {
 800297e:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <main+0x2e4>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d078      	beq.n	8002a78 <main+0x308>
					  un_send.params.lin = 0;
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <main+0x2e8>)
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
					  un_send.params.ang = 0;
 800298e:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <main+0x2e8>)
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
					  un_send.params.hold = 10;
 8002996:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <main+0x2e8>)
 8002998:	220a      	movs	r2, #10
 800299a:	609a      	str	r2, [r3, #8]
					  HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 800299c:	230c      	movs	r3, #12
 800299e:	220c      	movs	r2, #12
 80029a0:	492d      	ldr	r1, [pc, #180]	; (8002a58 <main+0x2e8>)
 80029a2:	4823      	ldr	r0, [pc, #140]	; (8002a30 <main+0x2c0>)
 80029a4:	f003 fb8f 	bl	80060c6 <HAL_UART_Transmit>
 80029a8:	e066      	b.n	8002a78 <main+0x308>
							  12);
				  }
			  }
		  } else {
			  if (abs(un_now.params.ang - un_to.params.ang) > accuracy ||
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <main+0x2b8>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <main+0x2cc>)
 80029b0:	6852      	ldr	r2, [r2, #4]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd ffeb 	bl	8000990 <__aeabi_fsub>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fc76 	bl	80012ae <_ZSt3absf>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <main+0x2dc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f7fe faa6 	bl	8000f1c <__aeabi_fcmpgt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d115      	bne.n	8002a02 <main+0x292>
			  					  abs(un_now.params.ang - un_to.params.ang) > accuracy) {
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <main+0x2b8>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <main+0x2cc>)
 80029dc:	6852      	ldr	r2, [r2, #4]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd ffd5 	bl	8000990 <__aeabi_fsub>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fc60 	bl	80012ae <_ZSt3absf>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <main+0x2dc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
			  if (abs(un_now.params.ang - un_to.params.ang) > accuracy ||
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f7fe fa90 	bl	8000f1c <__aeabi_fcmpgt>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d02c      	beq.n	8002a5c <main+0x2ec>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e02b      	b.n	8002a5e <main+0x2ee>
 8002a06:	bf00      	nop
 8002a08:	20000088 	.word	0x20000088
 8002a0c:	200000d0 	.word	0x200000d0
 8002a10:	40010c00 	.word	0x40010c00
 8002a14:	40010800 	.word	0x40010800
 8002a18:	20000118 	.word	0x20000118
 8002a1c:	200001a8 	.word	0x200001a8
 8002a20:	20000240 	.word	0x20000240
 8002a24:	20000030 	.word	0x20000030
 8002a28:	20000228 	.word	0x20000228
 8002a2c:	200001f0 	.word	0x200001f0
 8002a30:	20000160 	.word	0x20000160
 8002a34:	200001fc 	.word	0x200001fc
 8002a38:	20000004 	.word	0x20000004
 8002a3c:	2000021c 	.word	0x2000021c
 8002a40:	20000200 	.word	0x20000200
 8002a44:	20000201 	.word	0x20000201
 8002a48:	20000203 	.word	0x20000203
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	20000202 	.word	0x20000202
 8002a54:	20000005 	.word	0x20000005
 8002a58:	20000210 	.word	0x20000210
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <main+0x308>
				  startCorrectPos = true;
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <main+0x3e0>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
				  arm.MoveCorrectPosition(un_to.params.ang, un_to.params.lin);
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <main+0x3e4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a39      	ldr	r2, [pc, #228]	; (8002b54 <main+0x3e4>)
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	4839      	ldr	r0, [pc, #228]	; (8002b58 <main+0x3e8>)
 8002a74:	f7fe fcf6 	bl	8001464 <_ZN7RoboArm19MoveCorrectPositionEff>
//					  12);
//		  }
//
//	  }

	  if (arm.getPrintState() && sendDataFlag) {
 8002a78:	4837      	ldr	r0, [pc, #220]	; (8002b58 <main+0x3e8>)
 8002a7a:	f7ff f90b 	bl	8001c94 <_ZN7RoboArm13getPrintStateEv>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <main+0x320>
 8002a84:	4b35      	ldr	r3, [pc, #212]	; (8002b5c <main+0x3ec>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <main+0x320>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <main+0x322>
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d022      	beq.n	8002adc <main+0x36c>
		  sendDataFlag = false;
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <main+0x3ec>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]

		  float lin = arm.GetLin();
 8002a9c:	482e      	ldr	r0, [pc, #184]	; (8002b58 <main+0x3e8>)
 8002a9e:	f7ff f9c0 	bl	8001e22 <_ZN7RoboArm6GetLinEv>
 8002aa2:	6078      	str	r0, [r7, #4]
//		  un_send.params.lin = lin;
		  un_send.params.lin = arm.ShiftZeroLin(lin);
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	482c      	ldr	r0, [pc, #176]	; (8002b58 <main+0x3e8>)
 8002aa8:	f7ff faf8 	bl	800209c <_ZN7RoboArm12ShiftZeroLinEf>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4a2c      	ldr	r2, [pc, #176]	; (8002b60 <main+0x3f0>)
 8002ab0:	6013      	str	r3, [r2, #0]

		  float ang = arm.GetAng();
 8002ab2:	4829      	ldr	r0, [pc, #164]	; (8002b58 <main+0x3e8>)
 8002ab4:	f7ff fa00 	bl	8001eb8 <_ZN7RoboArm6GetAngEv>
 8002ab8:	6038      	str	r0, [r7, #0]
//		  un_send.params.ang = ang;
		  un_send.params.ang = arm.ShiftZeroAng(ang);
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	4826      	ldr	r0, [pc, #152]	; (8002b58 <main+0x3e8>)
 8002abe:	f7ff fac9 	bl	8002054 <_ZN7RoboArm12ShiftZeroAngEf>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <main+0x3f0>)
 8002ac6:	6053      	str	r3, [r2, #4]

		  un_send.params.hold = un_now.params.hold;
 8002ac8:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <main+0x3f4>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <main+0x3f0>)
 8002ace:	6093      	str	r3, [r2, #8]

		  HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002ad0:	230c      	movs	r3, #12
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	4922      	ldr	r1, [pc, #136]	; (8002b60 <main+0x3f0>)
 8002ad6:	4824      	ldr	r0, [pc, #144]	; (8002b68 <main+0x3f8>)
 8002ad8:	f003 faf5 	bl	80060c6 <HAL_UART_Transmit>
				  12);

	  }

	  if (stopHand) {
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <main+0x3fc>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d016      	beq.n	8002b12 <main+0x3a2>
		  stopHand = false;
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <main+0x3fc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
		  arm.EmergencyStop();
 8002aea:	481b      	ldr	r0, [pc, #108]	; (8002b58 <main+0x3e8>)
 8002aec:	f7fe fc76 	bl	80013dc <_ZN7RoboArm13EmergencyStopEv>
		  un_send.params.lin = 0;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <main+0x3f0>)
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
		  un_send.params.ang = 0;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <main+0x3f0>)
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
		  un_send.params.hold = 10;
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <main+0x3f0>)
 8002b02:	220a      	movs	r2, #10
 8002b04:	609a      	str	r2, [r3, #8]
		  HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002b06:	230c      	movs	r3, #12
 8002b08:	220c      	movs	r2, #12
 8002b0a:	4915      	ldr	r1, [pc, #84]	; (8002b60 <main+0x3f0>)
 8002b0c:	4816      	ldr	r0, [pc, #88]	; (8002b68 <main+0x3f8>)
 8002b0e:	f003 fada 	bl	80060c6 <HAL_UART_Transmit>
				  12);
	  }

	  if (setZeroFlag) {
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <main+0x400>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d016      	beq.n	8002b48 <main+0x3d8>
		  setZeroFlag = false;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <main+0x400>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
//		  arm.SetZeroEncoders();
		  arm.SetSoftwareZero();
 8002b20:	480d      	ldr	r0, [pc, #52]	; (8002b58 <main+0x3e8>)
 8002b22:	f7ff fa0d 	bl	8001f40 <_ZN7RoboArm15SetSoftwareZeroEv>
		  un_send.params.lin = 0;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <main+0x3f0>)
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
		  un_send.params.ang = 0;
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <main+0x3f0>)
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	605a      	str	r2, [r3, #4]
		  un_send.params.hold = 10;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <main+0x3f0>)
 8002b38:	220a      	movs	r2, #10
 8002b3a:	609a      	str	r2, [r3, #8]
		  HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002b3c:	230c      	movs	r3, #12
 8002b3e:	220c      	movs	r2, #12
 8002b40:	4907      	ldr	r1, [pc, #28]	; (8002b60 <main+0x3f0>)
 8002b42:	4809      	ldr	r0, [pc, #36]	; (8002b68 <main+0x3f8>)
 8002b44:	f003 fabf 	bl	80060c6 <HAL_UART_Transmit>
				  12);
	  }

	  HAL_Delay(10);
 8002b48:	200a      	movs	r0, #10
 8002b4a:	f000 ffa9 	bl	8003aa0 <HAL_Delay>
  }
 8002b4e:	e665      	b.n	800281c <main+0xac>
 8002b50:	20000202 	.word	0x20000202
 8002b54:	2000021c 	.word	0x2000021c
 8002b58:	20000240 	.word	0x20000240
 8002b5c:	200001fd 	.word	0x200001fd
 8002b60:	20000210 	.word	0x20000210
 8002b64:	20000228 	.word	0x20000228
 8002b68:	20000160 	.word	0x20000160
 8002b6c:	200001fe 	.word	0x200001fe
 8002b70:	200001ff 	.word	0x200001ff

08002b74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b090      	sub	sp, #64	; 0x40
 8002b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b7a:	f107 0318 	add.w	r3, r7, #24
 8002b7e:	2228      	movs	r2, #40	; 0x28
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 f93a 	bl	8006dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bb8:	f107 0318 	add.w	r3, r7, #24
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fb19 	bl	80041f4 <HAL_RCC_OscConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002bd2:	f000 fc3d 	bl	8003450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bd6:	230f      	movs	r3, #15
 8002bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fd81 	bl	80046f8 <HAL_RCC_ClockConfig>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8002c06:	f000 fc23 	bl	8003450 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002c0a:	f001 fe5f 	bl	80048cc <HAL_RCC_EnableCSS>
}
 8002c0e:	bf00      	nop
 8002c10:	3740      	adds	r7, #64	; 0x40
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <_ZL12MX_SPI1_Initv+0x74>)
 8002c20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c4c:	2218      	movs	r2, #24
 8002c4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c64:	220a      	movs	r2, #10
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c68:	4807      	ldr	r0, [pc, #28]	; (8002c88 <_ZL12MX_SPI1_Initv+0x70>)
 8002c6a:	f001 fedf 	bl	8004a2c <HAL_SPI_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002c7e:	f000 fbe7 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000030 	.word	0x20000030
 8002c8c:	40013000 	.word	0x40013000

08002c90 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b092      	sub	sp, #72	; 0x48
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
 8002cb0:	615a      	str	r2, [r3, #20]
 8002cb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 f89e 	bl	8006dfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002cc2:	4a3e      	ldr	r2, [pc, #248]	; (8002dbc <_ZL12MX_TIM1_Initv+0x12c>)
 8002cc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8002cc6:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002cc8:	2248      	movs	r2, #72	; 0x48
 8002cca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002cd2:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cda:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ce0:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce6:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cec:	4832      	ldr	r0, [pc, #200]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002cee:	f002 fb45 	bl	800537c <HAL_TIM_PWM_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8002d02:	f000 fba5 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d12:	4619      	mov	r1, r3
 8002d14:	4828      	ldr	r0, [pc, #160]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002d16:	f003 f873 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8002d2a:	f000 fb91 	bl	8003450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d2e:	2360      	movs	r3, #96	; 0x60
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d36:	2300      	movs	r3, #0
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4e:	2200      	movs	r2, #0
 8002d50:	4619      	mov	r1, r3
 8002d52:	4819      	ldr	r0, [pc, #100]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002d54:	f002 fd6a 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf14      	ite	ne
 8002d5e:	2301      	movne	r3, #1
 8002d60:	2300      	moveq	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002d68:	f000 fb72 	bl	8003450 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	480a      	ldr	r0, [pc, #40]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002d90:	f003 f88e 	bl	8005eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bf14      	ite	ne
 8002d9a:	2301      	movne	r3, #1
 8002d9c:	2300      	moveq	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8002da4:	f000 fb54 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002da8:	4803      	ldr	r0, [pc, #12]	; (8002db8 <_ZL12MX_TIM1_Initv+0x128>)
 8002daa:	f000 fc6f 	bl	800368c <HAL_TIM_MspPostInit>

}
 8002dae:	bf00      	nop
 8002db0:	3748      	adds	r7, #72	; 0x48
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000088 	.word	0x20000088
 8002dbc:	40012c00 	.word	0x40012c00

08002dc0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc6:	f107 0320 	add.w	r3, r7, #32
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	615a      	str	r2, [r3, #20]
 8002de0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002de8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8002dea:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002dec:	2248      	movs	r2, #72	; 0x48
 8002dee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002df6:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002df8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e0a:	4820      	ldr	r0, [pc, #128]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002e0c:	f002 fab6 	bl	800537c <HAL_TIM_PWM_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf14      	ite	ne
 8002e16:	2301      	movne	r3, #1
 8002e18:	2300      	moveq	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8002e20:	f000 fb16 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e2c:	f107 0320 	add.w	r3, r7, #32
 8002e30:	4619      	mov	r1, r3
 8002e32:	4816      	ldr	r0, [pc, #88]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002e34:	f002 ffe4 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8002e48:	f000 fb02 	bl	8003450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4c:	2360      	movs	r3, #96	; 0x60
 8002e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	2204      	movs	r2, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	480a      	ldr	r0, [pc, #40]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002e64:	f002 fce2 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8002e78:	f000 faea 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e7c:	4803      	ldr	r0, [pc, #12]	; (8002e8c <_ZL12MX_TIM2_Initv+0xcc>)
 8002e7e:	f000 fc05 	bl	800368c <HAL_TIM_MspPostInit>

}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200000d0 	.word	0x200000d0

08002e90 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e96:	f107 0320 	add.w	r3, r7, #32
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	615a      	str	r2, [r3, #20]
 8002eb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002eb4:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <_ZL12MX_TIM3_Initv+0xcc>)
 8002eb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002eba:	2248      	movs	r2, #72	; 0x48
 8002ebc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002ec6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ed8:	481f      	ldr	r0, [pc, #124]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002eda:	f002 fa4f 	bl	800537c <HAL_TIM_PWM_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8002eee:	f000 faaf 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002efa:	f107 0320 	add.w	r3, r7, #32
 8002efe:	4619      	mov	r1, r3
 8002f00:	4815      	ldr	r0, [pc, #84]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f02:	f002 ff7d 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8002f16:	f000 fa9b 	bl	8003450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f1a:	2360      	movs	r3, #96	; 0x60
 8002f1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4809      	ldr	r0, [pc, #36]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f32:	f002 fc7b 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8002f46:	f000 fa83 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f4a:	4803      	ldr	r0, [pc, #12]	; (8002f58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f4c:	f000 fb9e 	bl	800368c <HAL_TIM_MspPostInit>

}
 8002f50:	bf00      	nop
 8002f52:	3728      	adds	r7, #40	; 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000118 	.word	0x20000118
 8002f5c:	40000400 	.word	0x40000400

08002f60 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f66:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f86:	220c      	movs	r2, #12
 8002f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f96:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002f98:	f002 ffed 	bl	8005f76 <HAL_UART_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002fac:	f000 fa50 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000160 	.word	0x20000160
 8002fb8:	40013800 	.word	0x40013800

08002fbc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002ff2:	4807      	ldr	r0, [pc, #28]	; (8003010 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ff4:	f003 f80f 	bl	8006016 <HAL_HalfDuplex_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003008:	f000 fa22 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200001a8 	.word	0x200001a8
 8003014:	40004400 	.word	0x40004400

08003018 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301e:	f107 0310 	add.w	r3, r7, #16
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800302c:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4a4d      	ldr	r2, [pc, #308]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 8003032:	f043 0310 	orr.w	r3, r3, #16
 8003036:	6193      	str	r3, [r2, #24]
 8003038:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003044:	4b48      	ldr	r3, [pc, #288]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	4a47      	ldr	r2, [pc, #284]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 800304a:	f043 0320 	orr.w	r3, r3, #32
 800304e:	6193      	str	r3, [r2, #24]
 8003050:	4b45      	ldr	r3, [pc, #276]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800305c:	4b42      	ldr	r3, [pc, #264]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a41      	ldr	r2, [pc, #260]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 800307a:	f043 0308 	orr.w	r3, r3, #8
 800307e:	6193      	str	r3, [r2, #24]
 8003080:	4b39      	ldr	r3, [pc, #228]	; (8003168 <_ZL12MX_GPIO_Initv+0x150>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800308c:	2200      	movs	r2, #0
 800308e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003092:	4836      	ldr	r0, [pc, #216]	; (800316c <_ZL12MX_GPIO_Initv+0x154>)
 8003094:	f001 f864 	bl	8004160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En2_Pin|Button_Pin|En1_Pin|Dir1_Pin
 8003098:	2200      	movs	r2, #0
 800309a:	f241 0171 	movw	r1, #4209	; 0x1071
 800309e:	4834      	ldr	r0, [pc, #208]	; (8003170 <_ZL12MX_GPIO_Initv+0x158>)
 80030a0:	f001 f85e 	bl	8004160 <HAL_GPIO_WritePin>
                          |Buser_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 80030a4:	2200      	movs	r2, #0
 80030a6:	f648 7143 	movw	r1, #36675	; 0x8f43
 80030aa:	4832      	ldr	r0, [pc, #200]	; (8003174 <_ZL12MX_GPIO_Initv+0x15c>)
 80030ac:	f001 f858 	bl	8004160 <HAL_GPIO_WritePin>
                          |S1_Pin|S2_Pin|En3_Pin|Dir3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80030b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b6:	2301      	movs	r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	2302      	movs	r3, #2
 80030c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	4619      	mov	r1, r3
 80030c8:	4828      	ldr	r0, [pc, #160]	; (800316c <_ZL12MX_GPIO_Initv+0x154>)
 80030ca:	f000 fecd 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : En2_Pin Button_Pin En1_Pin Dir1_Pin
                           Buser_Pin */
  GPIO_InitStruct.Pin = En2_Pin|Button_Pin|En1_Pin|Dir1_Pin
 80030ce:	f241 0371 	movw	r3, #4209	; 0x1071
 80030d2:	613b      	str	r3, [r7, #16]
                          |Buser_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d4:	2301      	movs	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030dc:	2302      	movs	r3, #2
 80030de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	4619      	mov	r1, r3
 80030e6:	4822      	ldr	r0, [pc, #136]	; (8003170 <_ZL12MX_GPIO_Initv+0x158>)
 80030e8:	f000 febe 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
                           S1_Pin S2_Pin En3_Pin Dir3_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 80030ec:	f648 7343 	movw	r3, #36675	; 0x8f43
 80030f0:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|En3_Pin|Dir3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f2:	2301      	movs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2302      	movs	r3, #2
 80030fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	4619      	mov	r1, r3
 8003104:	481b      	ldr	r0, [pc, #108]	; (8003174 <_ZL12MX_GPIO_Initv+0x15c>)
 8003106:	f000 feaf 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : EndCap1_Pin EndCap2_Pin EndCap3_Pin */
  GPIO_InitStruct.Pin = EndCap1_Pin|EndCap2_Pin|EndCap3_Pin;
 800310a:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 800310e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <_ZL12MX_GPIO_Initv+0x160>)
 8003112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003118:	f107 0310 	add.w	r3, r7, #16
 800311c:	4619      	mov	r1, r3
 800311e:	4815      	ldr	r0, [pc, #84]	; (8003174 <_ZL12MX_GPIO_Initv+0x15c>)
 8003120:	f000 fea2 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : EndCap4_Pin */
  GPIO_InitStruct.Pin = EndCap4_Pin;
 8003124:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <_ZL12MX_GPIO_Initv+0x160>)
 800312c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EndCap4_GPIO_Port, &GPIO_InitStruct);
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	4619      	mov	r1, r3
 8003138:	480d      	ldr	r0, [pc, #52]	; (8003170 <_ZL12MX_GPIO_Initv+0x158>)
 800313a:	f000 fe95 	bl	8003e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2105      	movs	r1, #5
 8003142:	2017      	movs	r0, #23
 8003144:	f000 fda7 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003148:	2017      	movs	r0, #23
 800314a:	f000 fdc0 	bl	8003cce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2105      	movs	r1, #5
 8003152:	2028      	movs	r0, #40	; 0x28
 8003154:	f000 fd9f 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003158:	2028      	movs	r0, #40	; 0x28
 800315a:	f000 fdb8 	bl	8003cce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800315e:	bf00      	nop
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	40011000 	.word	0x40011000
 8003170:	40010800 	.word	0x40010800
 8003174:	40010c00 	.word	0x40010c00
 8003178:	10110000 	.word	0x10110000

0800317c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_UART_RxCpltCallback+0x9c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d13c      	bne.n	8003206 <HAL_UART_RxCpltCallback+0x8a>
//		if(!strcmp(rx_buffer,"TEXT")) {
//		}

//		uint8_t data[] = { '\\', 0x8f, 0xf8, 'B', 'q', '}', 0x16, 'C', 1, 1, 0, 0 };
		memcpy(un_get.bytes, rx_buffer, sizeof(rx_buffer));
 800318c:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_UART_RxCpltCallback+0xa0>)
 800318e:	4a24      	ldr	r2, [pc, #144]	; (8003220 <HAL_UART_RxCpltCallback+0xa4>)
 8003190:	ca07      	ldmia	r2, {r0, r1, r2}
 8003192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		switch (un_get.params.hold) {
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <HAL_UART_RxCpltCallback+0xa0>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b4b      	cmp	r3, #75	; 0x4b
 800319c:	d025      	beq.n	80031ea <HAL_UART_RxCpltCallback+0x6e>
 800319e:	2b4b      	cmp	r3, #75	; 0x4b
 80031a0:	dc27      	bgt.n	80031f2 <HAL_UART_RxCpltCallback+0x76>
 80031a2:	2b32      	cmp	r3, #50	; 0x32
 80031a4:	d01d      	beq.n	80031e2 <HAL_UART_RxCpltCallback+0x66>
 80031a6:	2b32      	cmp	r3, #50	; 0x32
 80031a8:	dc23      	bgt.n	80031f2 <HAL_UART_RxCpltCallback+0x76>
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	dc02      	bgt.n	80031b4 <HAL_UART_RxCpltCallback+0x38>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da03      	bge.n	80031ba <HAL_UART_RxCpltCallback+0x3e>
 80031b2:	e01e      	b.n	80031f2 <HAL_UART_RxCpltCallback+0x76>
 80031b4:	2b19      	cmp	r3, #25
 80031b6:	d010      	beq.n	80031da <HAL_UART_RxCpltCallback+0x5e>
 80031b8:	e01b      	b.n	80031f2 <HAL_UART_RxCpltCallback+0x76>
		case 0:
		case 1:
			startFirstMove = true;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_UART_RxCpltCallback+0xa8>)
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
			un_to.params.lin = un_get.params.lin;
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_UART_RxCpltCallback+0xa0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_UART_RxCpltCallback+0xac>)
 80031c6:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang;
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_UART_RxCpltCallback+0xa0>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_UART_RxCpltCallback+0xac>)
 80031ce:	6053      	str	r3, [r2, #4]
			un_to.params.hold = un_get.params.hold;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_UART_RxCpltCallback+0xa0>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a14      	ldr	r2, [pc, #80]	; (8003228 <HAL_UART_RxCpltCallback+0xac>)
 80031d6:	6093      	str	r3, [r2, #8]
//			arm.moveGripper = un_get.params.hold;
			break;
 80031d8:	e00b      	b.n	80031f2 <HAL_UART_RxCpltCallback+0x76>
		case 25:
			stopHand = true;
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_UART_RxCpltCallback+0xb0>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
			break;
 80031e0:	e007      	b.n	80031f2 <HAL_UART_RxCpltCallback+0x76>
		case 50:
			sendDataFlag = true;
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <HAL_UART_RxCpltCallback+0xb4>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
			break;
 80031e8:	e003      	b.n	80031f2 <HAL_UART_RxCpltCallback+0x76>
		case 75:
			setZeroFlag = true;
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_UART_RxCpltCallback+0xb8>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
			break;
 80031f0:	bf00      	nop
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80031f2:	220c      	movs	r2, #12
 80031f4:	2100      	movs	r1, #0
 80031f6:	480a      	ldr	r0, [pc, #40]	; (8003220 <HAL_UART_RxCpltCallback+0xa4>)
 80031f8:	f003 fe00 	bl	8006dfc <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80031fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003200:	480d      	ldr	r0, [pc, #52]	; (8003238 <HAL_UART_RxCpltCallback+0xbc>)
 8003202:	f000 ffc5 	bl	8004190 <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8003206:	220c      	movs	r2, #12
 8003208:	4905      	ldr	r1, [pc, #20]	; (8003220 <HAL_UART_RxCpltCallback+0xa4>)
 800320a:	4803      	ldr	r0, [pc, #12]	; (8003218 <HAL_UART_RxCpltCallback+0x9c>)
 800320c:	f002 ffde 	bl	80061cc <HAL_UART_Receive_IT>
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000160 	.word	0x20000160
 800321c:	20000204 	.word	0x20000204
 8003220:	200001f0 	.word	0x200001f0
 8003224:	200001fc 	.word	0x200001fc
 8003228:	2000021c 	.word	0x2000021c
 800322c:	200001fe 	.word	0x200001fe
 8003230:	200001fd 	.word	0x200001fd
 8003234:	200001ff 	.word	0x200001ff
 8003238:	40011000 	.word	0x40011000

0800323c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a4e      	ldr	r2, [pc, #312]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d129      	bne.n	80032a2 <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		cntImpulse1++;
 800324e:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	4a4c      	ldr	r2, [pc, #304]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003256:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 8003258:	4b4c      	ldr	r3, [pc, #304]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800325a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800325c:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	f200 808a 	bhi.w	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003266:	2100      	movs	r1, #0
 8003268:	4849      	ldr	r0, [pc, #292]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800326a:	f002 f973 	bl	8005554 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 800326e:	4848      	ldr	r0, [pc, #288]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003270:	f002 f856 	bl	8005320 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(1, false);
 8003274:	2200      	movs	r2, #0
 8003276:	2101      	movs	r1, #1
 8003278:	4844      	ldr	r0, [pc, #272]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800327a:	f7fe ffba 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1 = 0;
 800327e:	4b42      	ldr	r3, [pc, #264]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1 = false;
 8003284:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003286:	2200      	movs	r2, #0
 8003288:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			timerFT1 = true;
 800328c:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
			if (startCorrectPos) {posCorrected = true;}
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d06f      	beq.n	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>
 800329a:	4b40      	ldr	r3, [pc, #256]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
//    HAL_IncTick();
//  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032a0:	e06b      	b.n	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>
	} else if (htim->Instance == TIM2) {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d128      	bne.n	80032fe <HAL_TIM_PeriodElapsedCallback+0xc2>
		cntImpulse2++;
 80032ac:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	4a3b      	ldr	r2, [pc, #236]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80032b4:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 80032b6:	4b35      	ldr	r3, [pc, #212]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80032b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ba:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d85b      	bhi.n	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80032c2:	2104      	movs	r1, #4
 80032c4:	4837      	ldr	r0, [pc, #220]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80032c6:	f002 f945 	bl	8005554 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 80032ca:	4836      	ldr	r0, [pc, #216]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80032cc:	f002 f828 	bl	8005320 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, false);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2102      	movs	r1, #2
 80032d4:	482d      	ldr	r0, [pc, #180]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80032d6:	f7fe ff8c 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2 = 0;
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
			arm.stateMoveM2 = false;
 80032e0:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
			timerFT2 = true;
 80032e8:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
			if (startCorrectPos) {posCorrected = true;}
 80032ee:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d041      	beq.n	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
}
 80032fc:	e03d      	b.n	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>
	} else if (htim->Instance == TIM3) {
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d138      	bne.n	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>
		cntImpulse3++;
 8003308:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003310:	6013      	str	r3, [r2, #0]
		if (cntImpulse3 >= arm.gripperPsteps) {
 8003312:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fbec 	bl	8000af4 <__aeabi_ui2f>
 800331c:	4602      	mov	r2, r0
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7fd fdef 	bl	8000f08 <__aeabi_fcmpge>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d100      	bne.n	8003332 <HAL_TIM_PeriodElapsedCallback+0xf6>
}
 8003330:	e023      	b.n	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003332:	2104      	movs	r1, #4
 8003334:	481f      	ldr	r0, [pc, #124]	; (80033b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003336:	f002 f90d 	bl	8005554 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 800333a:	481e      	ldr	r0, [pc, #120]	; (80033b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800333c:	f001 fff0 	bl	8005320 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(3, false);
 8003340:	2200      	movs	r2, #0
 8003342:	2103      	movs	r1, #3
 8003344:	4811      	ldr	r0, [pc, #68]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003346:	f7fe ff54 	bl	80021f2 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse3 = 0;
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
			arm.stateMoveM3 = false;
 8003350:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003352:	2200      	movs	r2, #0
 8003354:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
			if (un_now.params.hold == 1) {
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_TIM_PeriodElapsedCallback+0x132>
				allowMove = false;
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
				gripperMoveFinished = true;
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
}
 800336c:	e005      	b.n	800337a <HAL_TIM_PeriodElapsedCallback+0x13e>
				allowMove = true;
 800336e:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
				gripperMoveFinished = true;
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40012c00 	.word	0x40012c00
 8003388:	20000234 	.word	0x20000234
 800338c:	20000240 	.word	0x20000240
 8003390:	20000088 	.word	0x20000088
 8003394:	20000200 	.word	0x20000200
 8003398:	20000202 	.word	0x20000202
 800339c:	20000203 	.word	0x20000203
 80033a0:	20000238 	.word	0x20000238
 80033a4:	200000d0 	.word	0x200000d0
 80033a8:	20000201 	.word	0x20000201
 80033ac:	40000400 	.word	0x40000400
 80033b0:	2000023c 	.word	0x2000023c
 80033b4:	20000118 	.word	0x20000118
 80033b8:	20000228 	.word	0x20000228
 80033bc:	20000004 	.word	0x20000004
 80033c0:	20000005 	.word	0x20000005

080033c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EndCap1_Pin) {
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d4:	d106      	bne.n	80033e4 <HAL_GPIO_EXTI_Callback+0x20>
	    //gripper is fully opened, no move allowed
		allowMove = false;
 80033d6:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_GPIO_EXTI_Callback+0x74>)
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
		gripperMoveFinished = true;
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_GPIO_EXTI_Callback+0x78>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
		  arm.stateMoveM2 = false;
		  timerFT2 = true;
	  } else {
	      __NOP();
	  }
}
 80033e2:	e024      	b.n	800342e <HAL_GPIO_EXTI_Callback+0x6a>
	  } else if (GPIO_Pin == EndCap2_Pin) {
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ea:	d106      	bne.n	80033fa <HAL_GPIO_EXTI_Callback+0x36>
		allowMove = true;
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_GPIO_EXTI_Callback+0x74>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
		gripperMoveFinished = true;
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_GPIO_EXTI_Callback+0x78>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
}
 80033f8:	e019      	b.n	800342e <HAL_GPIO_EXTI_Callback+0x6a>
	  } else if (GPIO_Pin == EndCap3_Pin || GPIO_Pin == EndCap4_Pin) {
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_EXTI_Callback+0x44>
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003406:	d111      	bne.n	800342c <HAL_GPIO_EXTI_Callback+0x68>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8003408:	2104      	movs	r1, #4
 800340a:	480d      	ldr	r0, [pc, #52]	; (8003440 <HAL_GPIO_EXTI_Callback+0x7c>)
 800340c:	f002 f8a2 	bl	8005554 <HAL_TIM_PWM_Stop>
		  HAL_TIM_Base_Stop_IT(&htim2);
 8003410:	480b      	ldr	r0, [pc, #44]	; (8003440 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003412:	f001 ff85 	bl	8005320 <HAL_TIM_Base_Stop_IT>
		  cntImpulse2 = 0;
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_GPIO_EXTI_Callback+0x80>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
		  arm.stateMoveM2 = false;
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <HAL_GPIO_EXTI_Callback+0x84>)
 800341e:	2200      	movs	r2, #0
 8003420:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
		  timerFT2 = true;
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_GPIO_EXTI_Callback+0x88>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
}
 800342a:	e000      	b.n	800342e <HAL_GPIO_EXTI_Callback+0x6a>
	      __NOP();
 800342c:	bf00      	nop
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000004 	.word	0x20000004
 800343c:	20000005 	.word	0x20000005
 8003440:	200000d0 	.word	0x200000d0
 8003444:	20000238 	.word	0x20000238
 8003448:	20000240 	.word	0x20000240
 800344c:	20000201 	.word	0x20000201

08003450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003454:	b672      	cpsid	i
}
 8003456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003458:	e7fe      	b.n	8003458 <Error_Handler+0x8>
	...

0800345c <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d109      	bne.n	8003480 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003472:	4293      	cmp	r3, r2
 8003474:	d104      	bne.n	8003480 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(120, 124);
 8003476:	227c      	movs	r2, #124	; 0x7c
 8003478:	2178      	movs	r1, #120	; 0x78
 800347a:	4803      	ldr	r0, [pc, #12]	; (8003488 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800347c:	f7fd ff30 	bl	80012e0 <_ZN7RoboArmC1Ehh>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000240 	.word	0x20000240

0800348c <_GLOBAL__sub_I_hspi1>:
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
 8003490:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003494:	2001      	movs	r0, #1
 8003496:	f7ff ffe1 	bl	800345c <_Z41__static_initialization_and_destruction_0ii>
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_MspInit+0x6c>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	4a18      	ldr	r2, [pc, #96]	; (8003508 <HAL_MspInit+0x6c>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6193      	str	r3, [r2, #24]
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_MspInit+0x6c>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_MspInit+0x6c>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <HAL_MspInit+0x6c>)
 80034c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c4:	61d3      	str	r3, [r2, #28]
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_MspInit+0x6c>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2105      	movs	r1, #5
 80034d6:	2005      	movs	r0, #5
 80034d8:	f000 fbdd 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80034dc:	2005      	movs	r0, #5
 80034de:	f000 fbf6 	bl	8003cce <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_MspInit+0x70>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_MspInit+0x70>)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	40010000 	.word	0x40010000

08003510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_SPI_MspInit+0xb4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d145      	bne.n	80035bc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_SPI_MspInit+0xb8>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <HAL_SPI_MspInit+0xb8>)
 8003536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800353a:	6193      	str	r3, [r2, #24]
 800353c:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_SPI_MspInit+0xb8>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003548:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <HAL_SPI_MspInit+0xb8>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <HAL_SPI_MspInit+0xb8>)
 800354e:	f043 0308 	orr.w	r3, r3, #8
 8003552:	6193      	str	r3, [r2, #24]
 8003554:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_SPI_MspInit+0xb8>)
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003560:	2328      	movs	r3, #40	; 0x28
 8003562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003568:	2303      	movs	r3, #3
 800356a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4619      	mov	r1, r3
 8003572:	4816      	ldr	r0, [pc, #88]	; (80035cc <HAL_SPI_MspInit+0xbc>)
 8003574:	f000 fc78 	bl	8003e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003578:	2310      	movs	r3, #16
 800357a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	4810      	ldr	r0, [pc, #64]	; (80035cc <HAL_SPI_MspInit+0xbc>)
 800358c:	f000 fc6c 	bl	8003e68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_SPI_MspInit+0xc0>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_SPI_MspInit+0xc0>)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2105      	movs	r1, #5
 80035b0:	2023      	movs	r0, #35	; 0x23
 80035b2:	f000 fb70 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80035b6:	2023      	movs	r0, #35	; 0x23
 80035b8:	f000 fb89 	bl	8003cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035bc:	bf00      	nop
 80035be:	3728      	adds	r7, #40	; 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40013000 	.word	0x40013000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40010c00 	.word	0x40010c00
 80035d0:	40010000 	.word	0x40010000

080035d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_TIM_PWM_MspInit+0xac>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d114      	bne.n	8003610 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	4a26      	ldr	r2, [pc, #152]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 80035ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035f0:	6193      	str	r3, [r2, #24]
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	2105      	movs	r1, #5
 8003602:	2019      	movs	r0, #25
 8003604:	f000 fb47 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003608:	2019      	movs	r0, #25
 800360a:	f000 fb60 	bl	8003cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800360e:	e032      	b.n	8003676 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d114      	bne.n	8003644 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	61d3      	str	r3, [r2, #28]
 8003626:	4b17      	ldr	r3, [pc, #92]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2105      	movs	r1, #5
 8003636:	201c      	movs	r0, #28
 8003638:	f000 fb2d 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800363c:	201c      	movs	r0, #28
 800363e:	f000 fb46 	bl	8003cce <HAL_NVIC_EnableIRQ>
}
 8003642:	e018      	b.n	8003676 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <HAL_TIM_PWM_MspInit+0xb4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d113      	bne.n	8003676 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	61d3      	str	r3, [r2, #28]
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_TIM_PWM_MspInit+0xb0>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	2105      	movs	r1, #5
 800366a:	201d      	movs	r0, #29
 800366c:	f000 fb13 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003670:	201d      	movs	r0, #29
 8003672:	f000 fb2c 	bl	8003cce <HAL_NVIC_EnableIRQ>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40021000 	.word	0x40021000
 8003688:	40000400 	.word	0x40000400

0800368c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 0318 	add.w	r3, r7, #24
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2e      	ldr	r2, [pc, #184]	; (8003760 <HAL_TIM_MspPostInit+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d119      	bne.n	80036e0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ac:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6193      	str	r3, [r2, #24]
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2302      	movs	r3, #2
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	f107 0318 	add.w	r3, r7, #24
 80036d6:	4619      	mov	r1, r3
 80036d8:	4823      	ldr	r0, [pc, #140]	; (8003768 <HAL_TIM_MspPostInit+0xdc>)
 80036da:	f000 fbc5 	bl	8003e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036de:	e03a      	b.n	8003756 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d118      	bne.n	800371c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	6193      	str	r3, [r2, #24]
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003702:	2302      	movs	r3, #2
 8003704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2302      	movs	r3, #2
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370e:	f107 0318 	add.w	r3, r7, #24
 8003712:	4619      	mov	r1, r3
 8003714:	4814      	ldr	r0, [pc, #80]	; (8003768 <HAL_TIM_MspPostInit+0xdc>)
 8003716:	f000 fba7 	bl	8003e68 <HAL_GPIO_Init>
}
 800371a:	e01c      	b.n	8003756 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a12      	ldr	r2, [pc, #72]	; (800376c <HAL_TIM_MspPostInit+0xe0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d117      	bne.n	8003756 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6193      	str	r3, [r2, #24]
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_TIM_MspPostInit+0xd8>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	2302      	movs	r3, #2
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374a:	f107 0318 	add.w	r3, r7, #24
 800374e:	4619      	mov	r1, r3
 8003750:	4805      	ldr	r0, [pc, #20]	; (8003768 <HAL_TIM_MspPostInit+0xdc>)
 8003752:	f000 fb89 	bl	8003e68 <HAL_GPIO_Init>
}
 8003756:	bf00      	nop
 8003758:	3728      	adds	r7, #40	; 0x28
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40021000 	.word	0x40021000
 8003768:	40010800 	.word	0x40010800
 800376c:	40000400 	.word	0x40000400

08003770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 0318 	add.w	r3, r7, #24
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <HAL_UART_MspInit+0x104>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d13a      	bne.n	8003806 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_UART_MspInit+0x108>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_UART_MspInit+0x108>)
 8003796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379a:	6193      	str	r3, [r2, #24]
 800379c:	4b36      	ldr	r3, [pc, #216]	; (8003878 <HAL_UART_MspInit+0x108>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a8:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	4a32      	ldr	r2, [pc, #200]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6193      	str	r3, [r2, #24]
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ca:	2303      	movs	r3, #3
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ce:	f107 0318 	add.w	r3, r7, #24
 80037d2:	4619      	mov	r1, r3
 80037d4:	4829      	ldr	r0, [pc, #164]	; (800387c <HAL_UART_MspInit+0x10c>)
 80037d6:	f000 fb47 	bl	8003e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e8:	f107 0318 	add.w	r3, r7, #24
 80037ec:	4619      	mov	r1, r3
 80037ee:	4823      	ldr	r0, [pc, #140]	; (800387c <HAL_UART_MspInit+0x10c>)
 80037f0:	f000 fb3a 	bl	8003e68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2105      	movs	r1, #5
 80037f8:	2025      	movs	r0, #37	; 0x25
 80037fa:	f000 fa4c 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037fe:	2025      	movs	r0, #37	; 0x25
 8003800:	f000 fa65 	bl	8003cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003804:	e032      	b.n	800386c <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <HAL_UART_MspInit+0x110>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d12d      	bne.n	800386c <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_UART_MspInit+0x108>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_UART_MspInit+0x108>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	61d3      	str	r3, [r2, #28]
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_UART_MspInit+0x108>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003828:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_UART_MspInit+0x108>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4a12      	ldr	r2, [pc, #72]	; (8003878 <HAL_UART_MspInit+0x108>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	6193      	str	r3, [r2, #24]
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_UART_MspInit+0x108>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003840:	2304      	movs	r3, #4
 8003842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003844:	2312      	movs	r3, #18
 8003846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003848:	2301      	movs	r3, #1
 800384a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003850:	f107 0318 	add.w	r3, r7, #24
 8003854:	4619      	mov	r1, r3
 8003856:	4809      	ldr	r0, [pc, #36]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003858:	f000 fb06 	bl	8003e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800385c:	2200      	movs	r2, #0
 800385e:	2105      	movs	r1, #5
 8003860:	2026      	movs	r0, #38	; 0x26
 8003862:	f000 fa18 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003866:	2026      	movs	r0, #38	; 0x26
 8003868:	f000 fa31 	bl	8003cce <HAL_NVIC_EnableIRQ>
}
 800386c:	bf00      	nop
 800386e:	3728      	adds	r7, #40	; 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40013800 	.word	0x40013800
 8003878:	40021000 	.word	0x40021000
 800387c:	40010800 	.word	0x40010800
 8003880:	40004400 	.word	0x40004400

08003884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <NMI_Handler+0x4>

0800388a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <HardFault_Handler+0x4>

08003890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003894:	e7fe      	b.n	8003894 <MemManage_Handler+0x4>

08003896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800389a:	e7fe      	b.n	800389a <BusFault_Handler+0x4>

0800389c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <UsageFault_Handler+0x4>

080038a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ca:	f000 f8cd 	bl	8003a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap3_Pin);
 80038e2:	2080      	movs	r0, #128	; 0x80
 80038e4:	f000 fc6e 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}

080038ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <TIM1_UP_IRQHandler+0x10>)
 80038f2:	f001 fe93 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000088 	.word	0x20000088

08003900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <TIM2_IRQHandler+0x10>)
 8003906:	f001 fe89 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200000d0 	.word	0x200000d0

08003914 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <TIM3_IRQHandler+0x10>)
 800391a:	f001 fe7f 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000118 	.word	0x20000118

08003928 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <SPI1_IRQHandler+0x10>)
 800392e:	f001 fab1 	bl	8004e94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000030 	.word	0x20000030

0800393c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <USART1_IRQHandler+0x10>)
 8003942:	f002 fc69 	bl	8006218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000160 	.word	0x20000160

08003950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <USART2_IRQHandler+0x10>)
 8003956:	f002 fc5f 	bl	8006218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200001a8 	.word	0x200001a8

08003964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap4_Pin);
 8003968:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800396c:	f000 fc2a 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap1_Pin);
 8003970:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003974:	f000 fc26 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap2_Pin);
 8003978:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800397c:	f000 fc22 	bl	80041c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}

08003984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003990:	f7ff fff8 	bl	8003984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003994:	480b      	ldr	r0, [pc, #44]	; (80039c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003996:	490c      	ldr	r1, [pc, #48]	; (80039c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003998:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800399a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800399c:	e002      	b.n	80039a4 <LoopCopyDataInit>

0800399e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800399e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a2:	3304      	adds	r3, #4

080039a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a8:	d3f9      	bcc.n	800399e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80039ac:	4c09      	ldr	r4, [pc, #36]	; (80039d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b0:	e001      	b.n	80039b6 <LoopFillZerobss>

080039b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b4:	3204      	adds	r2, #4

080039b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b8:	d3fb      	bcc.n	80039b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ba:	f003 fa27 	bl	8006e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039be:	f7fe fed7 	bl	8002770 <main>
  bx lr
 80039c2:	4770      	bx	lr
  ldr r0, =_sdata
 80039c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80039cc:	08006ea4 	.word	0x08006ea4
  ldr r2, =_sbss
 80039d0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80039d4:	20000368 	.word	0x20000368

080039d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039d8:	e7fe      	b.n	80039d8 <ADC1_2_IRQHandler>
	...

080039dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_Init+0x28>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <HAL_Init+0x28>)
 80039e6:	f043 0310 	orr.w	r3, r3, #16
 80039ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ec:	2003      	movs	r0, #3
 80039ee:	f000 f947 	bl	8003c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039f2:	200f      	movs	r0, #15
 80039f4:	f000 f808 	bl	8003a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039f8:	f7ff fd50 	bl	800349c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000

08003a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_InitTick+0x54>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_InitTick+0x58>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f95f 	bl	8003cea <HAL_SYSTICK_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00e      	b.n	8003a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b0f      	cmp	r3, #15
 8003a3a:	d80a      	bhi.n	8003a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a44:	f000 f927 	bl	8003c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a48:	4a06      	ldr	r2, [pc, #24]	; (8003a64 <HAL_InitTick+0x5c>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000008 	.word	0x20000008
 8003a60:	20000010 	.word	0x20000010
 8003a64:	2000000c 	.word	0x2000000c

08003a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_IncTick+0x1c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_IncTick+0x20>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4413      	add	r3, r2
 8003a78:	4a03      	ldr	r2, [pc, #12]	; (8003a88 <HAL_IncTick+0x20>)
 8003a7a:	6013      	str	r3, [r2, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20000010 	.word	0x20000010
 8003a88:	20000364 	.word	0x20000364

08003a8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <HAL_GetTick+0x10>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000364 	.word	0x20000364

08003aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7ff fff0 	bl	8003a8c <HAL_GetTick>
 8003aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab8:	d005      	beq.n	8003ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_Delay+0x44>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ac6:	bf00      	nop
 8003ac8:	f7ff ffe0 	bl	8003a8c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d8f7      	bhi.n	8003ac8 <HAL_Delay+0x28>
  {
  }
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000010 	.word	0x20000010

08003ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <__NVIC_SetPriorityGrouping+0x44>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b04:	4013      	ands	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b1a:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <__NVIC_SetPriorityGrouping+0x44>)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	60d3      	str	r3, [r2, #12]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <__NVIC_GetPriorityGrouping+0x18>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	f003 0307 	and.w	r3, r3, #7
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db0b      	blt.n	8003b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	f003 021f 	and.w	r2, r3, #31
 8003b64:	4906      	ldr	r1, [pc, #24]	; (8003b80 <__NVIC_EnableIRQ+0x34>)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100

08003b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	db0a      	blt.n	8003bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	490c      	ldr	r1, [pc, #48]	; (8003bd0 <__NVIC_SetPriority+0x4c>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bac:	e00a      	b.n	8003bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4908      	ldr	r1, [pc, #32]	; (8003bd4 <__NVIC_SetPriority+0x50>)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	3b04      	subs	r3, #4
 8003bbc:	0112      	lsls	r2, r2, #4
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	761a      	strb	r2, [r3, #24]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e100 	.word	0xe000e100
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f1c3 0307 	rsb	r3, r3, #7
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf28      	it	cs
 8003bf6:	2304      	movcs	r3, #4
 8003bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d902      	bls.n	8003c08 <NVIC_EncodePriority+0x30>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3b03      	subs	r3, #3
 8003c06:	e000      	b.n	8003c0a <NVIC_EncodePriority+0x32>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43d9      	mvns	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c30:	4313      	orrs	r3, r2
         );
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	; 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4c:	d301      	bcc.n	8003c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00f      	b.n	8003c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <SysTick_Config+0x40>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5a:	210f      	movs	r1, #15
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c60:	f7ff ff90 	bl	8003b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <SysTick_Config+0x40>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <SysTick_Config+0x40>)
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	e000e010 	.word	0xe000e010

08003c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff2d 	bl	8003ae8 <__NVIC_SetPriorityGrouping>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca8:	f7ff ff42 	bl	8003b30 <__NVIC_GetPriorityGrouping>
 8003cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7ff ff90 	bl	8003bd8 <NVIC_EncodePriority>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff5f 	bl	8003b84 <__NVIC_SetPriority>
}
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff35 	bl	8003b4c <__NVIC_EnableIRQ>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffa2 	bl	8003c3c <SysTick_Config>
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d008      	beq.n	8003d2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e020      	b.n	8003d6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 020e 	bic.w	r2, r2, #14
 8003d3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d005      	beq.n	8003d9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2204      	movs	r2, #4
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	e051      	b.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 020e 	bic.w	r2, r2, #14
 8003daa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_DMA_Abort_IT+0xd4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d029      	beq.n	8003e1a <HAL_DMA_Abort_IT+0xa2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <HAL_DMA_Abort_IT+0xd8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d022      	beq.n	8003e16 <HAL_DMA_Abort_IT+0x9e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_DMA_Abort_IT+0xdc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01a      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x98>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <HAL_DMA_Abort_IT+0xe0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d012      	beq.n	8003e0a <HAL_DMA_Abort_IT+0x92>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_DMA_Abort_IT+0xe4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00a      	beq.n	8003e04 <HAL_DMA_Abort_IT+0x8c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <HAL_DMA_Abort_IT+0xe8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d102      	bne.n	8003dfe <HAL_DMA_Abort_IT+0x86>
 8003df8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003dfc:	e00e      	b.n	8003e1c <HAL_DMA_Abort_IT+0xa4>
 8003dfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e02:	e00b      	b.n	8003e1c <HAL_DMA_Abort_IT+0xa4>
 8003e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e08:	e008      	b.n	8003e1c <HAL_DMA_Abort_IT+0xa4>
 8003e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0e:	e005      	b.n	8003e1c <HAL_DMA_Abort_IT+0xa4>
 8003e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e14:	e002      	b.n	8003e1c <HAL_DMA_Abort_IT+0xa4>
 8003e16:	2310      	movs	r3, #16
 8003e18:	e000      	b.n	8003e1c <HAL_DMA_Abort_IT+0xa4>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <HAL_DMA_Abort_IT+0xec>)
 8003e1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
    } 
  }
  return status;
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40020008 	.word	0x40020008
 8003e50:	4002001c 	.word	0x4002001c
 8003e54:	40020030 	.word	0x40020030
 8003e58:	40020044 	.word	0x40020044
 8003e5c:	40020058 	.word	0x40020058
 8003e60:	4002006c 	.word	0x4002006c
 8003e64:	40020000 	.word	0x40020000

08003e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b08b      	sub	sp, #44	; 0x2c
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e76:	2300      	movs	r3, #0
 8003e78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e7a:	e161      	b.n	8004140 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	f040 8150 	bne.w	800413a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4a97      	ldr	r2, [pc, #604]	; (80040fc <HAL_GPIO_Init+0x294>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d05e      	beq.n	8003f62 <HAL_GPIO_Init+0xfa>
 8003ea4:	4a95      	ldr	r2, [pc, #596]	; (80040fc <HAL_GPIO_Init+0x294>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d875      	bhi.n	8003f96 <HAL_GPIO_Init+0x12e>
 8003eaa:	4a95      	ldr	r2, [pc, #596]	; (8004100 <HAL_GPIO_Init+0x298>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d058      	beq.n	8003f62 <HAL_GPIO_Init+0xfa>
 8003eb0:	4a93      	ldr	r2, [pc, #588]	; (8004100 <HAL_GPIO_Init+0x298>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d86f      	bhi.n	8003f96 <HAL_GPIO_Init+0x12e>
 8003eb6:	4a93      	ldr	r2, [pc, #588]	; (8004104 <HAL_GPIO_Init+0x29c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d052      	beq.n	8003f62 <HAL_GPIO_Init+0xfa>
 8003ebc:	4a91      	ldr	r2, [pc, #580]	; (8004104 <HAL_GPIO_Init+0x29c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d869      	bhi.n	8003f96 <HAL_GPIO_Init+0x12e>
 8003ec2:	4a91      	ldr	r2, [pc, #580]	; (8004108 <HAL_GPIO_Init+0x2a0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d04c      	beq.n	8003f62 <HAL_GPIO_Init+0xfa>
 8003ec8:	4a8f      	ldr	r2, [pc, #572]	; (8004108 <HAL_GPIO_Init+0x2a0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d863      	bhi.n	8003f96 <HAL_GPIO_Init+0x12e>
 8003ece:	4a8f      	ldr	r2, [pc, #572]	; (800410c <HAL_GPIO_Init+0x2a4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d046      	beq.n	8003f62 <HAL_GPIO_Init+0xfa>
 8003ed4:	4a8d      	ldr	r2, [pc, #564]	; (800410c <HAL_GPIO_Init+0x2a4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d85d      	bhi.n	8003f96 <HAL_GPIO_Init+0x12e>
 8003eda:	2b12      	cmp	r3, #18
 8003edc:	d82a      	bhi.n	8003f34 <HAL_GPIO_Init+0xcc>
 8003ede:	2b12      	cmp	r3, #18
 8003ee0:	d859      	bhi.n	8003f96 <HAL_GPIO_Init+0x12e>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <HAL_GPIO_Init+0x80>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f63 	.word	0x08003f63
 8003eec:	08003f3d 	.word	0x08003f3d
 8003ef0:	08003f4f 	.word	0x08003f4f
 8003ef4:	08003f91 	.word	0x08003f91
 8003ef8:	08003f97 	.word	0x08003f97
 8003efc:	08003f97 	.word	0x08003f97
 8003f00:	08003f97 	.word	0x08003f97
 8003f04:	08003f97 	.word	0x08003f97
 8003f08:	08003f97 	.word	0x08003f97
 8003f0c:	08003f97 	.word	0x08003f97
 8003f10:	08003f97 	.word	0x08003f97
 8003f14:	08003f97 	.word	0x08003f97
 8003f18:	08003f97 	.word	0x08003f97
 8003f1c:	08003f97 	.word	0x08003f97
 8003f20:	08003f97 	.word	0x08003f97
 8003f24:	08003f97 	.word	0x08003f97
 8003f28:	08003f97 	.word	0x08003f97
 8003f2c:	08003f45 	.word	0x08003f45
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	4a76      	ldr	r2, [pc, #472]	; (8004110 <HAL_GPIO_Init+0x2a8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f3a:	e02c      	b.n	8003f96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	623b      	str	r3, [r7, #32]
          break;
 8003f42:	e029      	b.n	8003f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	623b      	str	r3, [r7, #32]
          break;
 8003f4c:	e024      	b.n	8003f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	3308      	adds	r3, #8
 8003f54:	623b      	str	r3, [r7, #32]
          break;
 8003f56:	e01f      	b.n	8003f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	623b      	str	r3, [r7, #32]
          break;
 8003f60:	e01a      	b.n	8003f98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	623b      	str	r3, [r7, #32]
          break;
 8003f6e:	e013      	b.n	8003f98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d105      	bne.n	8003f84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f78:	2308      	movs	r3, #8
 8003f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	611a      	str	r2, [r3, #16]
          break;
 8003f82:	e009      	b.n	8003f98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f84:	2308      	movs	r3, #8
 8003f86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	615a      	str	r2, [r3, #20]
          break;
 8003f8e:	e003      	b.n	8003f98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f90:	2300      	movs	r3, #0
 8003f92:	623b      	str	r3, [r7, #32]
          break;
 8003f94:	e000      	b.n	8003f98 <HAL_GPIO_Init+0x130>
          break;
 8003f96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2bff      	cmp	r3, #255	; 0xff
 8003f9c:	d801      	bhi.n	8003fa2 <HAL_GPIO_Init+0x13a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	e001      	b.n	8003fa6 <HAL_GPIO_Init+0x13e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2bff      	cmp	r3, #255	; 0xff
 8003fac:	d802      	bhi.n	8003fb4 <HAL_GPIO_Init+0x14c>
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	e002      	b.n	8003fba <HAL_GPIO_Init+0x152>
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	3b08      	subs	r3, #8
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	210f      	movs	r1, #15
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	401a      	ands	r2, r3
 8003fcc:	6a39      	ldr	r1, [r7, #32]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80a9 	beq.w	800413a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fe8:	4b4a      	ldr	r3, [pc, #296]	; (8004114 <HAL_GPIO_Init+0x2ac>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	4a49      	ldr	r2, [pc, #292]	; (8004114 <HAL_GPIO_Init+0x2ac>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6193      	str	r3, [r2, #24]
 8003ff4:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_GPIO_Init+0x2ac>)
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004000:	4a45      	ldr	r2, [pc, #276]	; (8004118 <HAL_GPIO_Init+0x2b0>)
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	3302      	adds	r3, #2
 8004008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	220f      	movs	r2, #15
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3d      	ldr	r2, [pc, #244]	; (800411c <HAL_GPIO_Init+0x2b4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00d      	beq.n	8004048 <HAL_GPIO_Init+0x1e0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3c      	ldr	r2, [pc, #240]	; (8004120 <HAL_GPIO_Init+0x2b8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <HAL_GPIO_Init+0x1dc>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a3b      	ldr	r2, [pc, #236]	; (8004124 <HAL_GPIO_Init+0x2bc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d101      	bne.n	8004040 <HAL_GPIO_Init+0x1d8>
 800403c:	2302      	movs	r3, #2
 800403e:	e004      	b.n	800404a <HAL_GPIO_Init+0x1e2>
 8004040:	2303      	movs	r3, #3
 8004042:	e002      	b.n	800404a <HAL_GPIO_Init+0x1e2>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_GPIO_Init+0x1e2>
 8004048:	2300      	movs	r3, #0
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	f002 0203 	and.w	r2, r2, #3
 8004050:	0092      	lsls	r2, r2, #2
 8004052:	4093      	lsls	r3, r2
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800405a:	492f      	ldr	r1, [pc, #188]	; (8004118 <HAL_GPIO_Init+0x2b0>)
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	3302      	adds	r3, #2
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004074:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	492b      	ldr	r1, [pc, #172]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]
 8004080:	e006      	b.n	8004090 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	43db      	mvns	r3, r3
 800408a:	4927      	ldr	r1, [pc, #156]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 800408c:	4013      	ands	r3, r2
 800408e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800409c:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	4921      	ldr	r1, [pc, #132]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60cb      	str	r3, [r1, #12]
 80040a8:	e006      	b.n	80040b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040aa:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	491d      	ldr	r1, [pc, #116]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	4917      	ldr	r1, [pc, #92]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
 80040d0:	e006      	b.n	80040e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	43db      	mvns	r3, r3
 80040da:	4913      	ldr	r1, [pc, #76]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040dc:	4013      	ands	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01f      	beq.n	800412c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	490d      	ldr	r1, [pc, #52]	; (8004128 <HAL_GPIO_Init+0x2c0>)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
 80040f8:	e01f      	b.n	800413a <HAL_GPIO_Init+0x2d2>
 80040fa:	bf00      	nop
 80040fc:	10320000 	.word	0x10320000
 8004100:	10310000 	.word	0x10310000
 8004104:	10220000 	.word	0x10220000
 8004108:	10210000 	.word	0x10210000
 800410c:	10120000 	.word	0x10120000
 8004110:	10110000 	.word	0x10110000
 8004114:	40021000 	.word	0x40021000
 8004118:	40010000 	.word	0x40010000
 800411c:	40010800 	.word	0x40010800
 8004120:	40010c00 	.word	0x40010c00
 8004124:	40011000 	.word	0x40011000
 8004128:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_GPIO_Init+0x2f4>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	43db      	mvns	r3, r3
 8004134:	4909      	ldr	r1, [pc, #36]	; (800415c <HAL_GPIO_Init+0x2f4>)
 8004136:	4013      	ands	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	3301      	adds	r3, #1
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	f47f ae96 	bne.w	8003e7c <HAL_GPIO_Init+0x14>
  }
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	372c      	adds	r7, #44	; 0x2c
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40010400 	.word	0x40010400

08004160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
 800416c:	4613      	mov	r3, r2
 800416e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004170:	787b      	ldrb	r3, [r7, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800417c:	e003      	b.n	8004186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800417e:	887b      	ldrh	r3, [r7, #2]
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	611a      	str	r2, [r3, #16]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4013      	ands	r3, r2
 80041a8:	041a      	lsls	r2, r3, #16
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	43d9      	mvns	r1, r3
 80041ae:	887b      	ldrh	r3, [r7, #2]
 80041b0:	400b      	ands	r3, r1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	611a      	str	r2, [r3, #16]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041da:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff f8ee 	bl	80033c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40010400 	.word	0x40010400

080041f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e272      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8087 	beq.w	8004322 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004214:	4b92      	ldr	r3, [pc, #584]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b04      	cmp	r3, #4
 800421e:	d00c      	beq.n	800423a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004220:	4b8f      	ldr	r3, [pc, #572]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b08      	cmp	r3, #8
 800422a:	d112      	bne.n	8004252 <HAL_RCC_OscConfig+0x5e>
 800422c:	4b8c      	ldr	r3, [pc, #560]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d10b      	bne.n	8004252 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423a:	4b89      	ldr	r3, [pc, #548]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d06c      	beq.n	8004320 <HAL_RCC_OscConfig+0x12c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d168      	bne.n	8004320 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e24c      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x76>
 800425c:	4b80      	ldr	r3, [pc, #512]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a7f      	ldr	r2, [pc, #508]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	e02e      	b.n	80042c8 <HAL_RCC_OscConfig+0xd4>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x98>
 8004272:	4b7b      	ldr	r3, [pc, #492]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a7a      	ldr	r2, [pc, #488]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b78      	ldr	r3, [pc, #480]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a77      	ldr	r2, [pc, #476]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e01d      	b.n	80042c8 <HAL_RCC_OscConfig+0xd4>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0xbc>
 8004296:	4b72      	ldr	r3, [pc, #456]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a71      	ldr	r2, [pc, #452]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 800429c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b6f      	ldr	r3, [pc, #444]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6e      	ldr	r2, [pc, #440]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0xd4>
 80042b0:	4b6b      	ldr	r3, [pc, #428]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a6a      	ldr	r2, [pc, #424]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b68      	ldr	r3, [pc, #416]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a67      	ldr	r2, [pc, #412]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80042c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7ff fbdc 	bl	8003a8c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d8:	f7ff fbd8 	bl	8003a8c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e200      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0xe4>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7ff fbc8 	bl	8003a8c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004300:	f7ff fbc4 	bl	8003a8c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1ec      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b53      	ldr	r3, [pc, #332]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x10c>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d063      	beq.n	80043f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800432e:	4b4c      	ldr	r3, [pc, #304]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800433a:	4b49      	ldr	r3, [pc, #292]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b08      	cmp	r3, #8
 8004344:	d11c      	bne.n	8004380 <HAL_RCC_OscConfig+0x18c>
 8004346:	4b46      	ldr	r3, [pc, #280]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d116      	bne.n	8004380 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	4b43      	ldr	r3, [pc, #268]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_RCC_OscConfig+0x176>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e1c0      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b3d      	ldr	r3, [pc, #244]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4939      	ldr	r1, [pc, #228]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	e03a      	b.n	80043f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <HAL_RCC_OscConfig+0x270>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7ff fb7d 	bl	8003a8c <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004396:	f7ff fb79 	bl	8003a8c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1a1      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4927      	ldr	r1, [pc, #156]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]
 80043c8:	e015      	b.n	80043f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <HAL_RCC_OscConfig+0x270>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7ff fb5c 	bl	8003a8c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d8:	f7ff fb58 	bl	8003a8c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e180      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d03a      	beq.n	8004478 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d019      	beq.n	800443e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440a:	4b17      	ldr	r3, [pc, #92]	; (8004468 <HAL_RCC_OscConfig+0x274>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004410:	f7ff fb3c 	bl	8003a8c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004418:	f7ff fb38 	bl	8003a8c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e160      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_RCC_OscConfig+0x26c>)
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004436:	2001      	movs	r0, #1
 8004438:	f000 fada 	bl	80049f0 <RCC_Delay>
 800443c:	e01c      	b.n	8004478 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <HAL_RCC_OscConfig+0x274>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004444:	f7ff fb22 	bl	8003a8c <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800444a:	e00f      	b.n	800446c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800444c:	f7ff fb1e 	bl	8003a8c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d908      	bls.n	800446c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e146      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	42420000 	.word	0x42420000
 8004468:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446c:	4b92      	ldr	r3, [pc, #584]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e9      	bne.n	800444c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80a6 	beq.w	80045d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448a:	4b8b      	ldr	r3, [pc, #556]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	4b88      	ldr	r3, [pc, #544]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4a87      	ldr	r2, [pc, #540]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	61d3      	str	r3, [r2, #28]
 80044a2:	4b85      	ldr	r3, [pc, #532]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b82      	ldr	r3, [pc, #520]	; (80046bc <HAL_RCC_OscConfig+0x4c8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d118      	bne.n	80044f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044be:	4b7f      	ldr	r3, [pc, #508]	; (80046bc <HAL_RCC_OscConfig+0x4c8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7e      	ldr	r2, [pc, #504]	; (80046bc <HAL_RCC_OscConfig+0x4c8>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ca:	f7ff fadf 	bl	8003a8c <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d2:	f7ff fadb 	bl	8003a8c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b64      	cmp	r3, #100	; 0x64
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e103      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	4b75      	ldr	r3, [pc, #468]	; (80046bc <HAL_RCC_OscConfig+0x4c8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x312>
 80044f8:	4b6f      	ldr	r3, [pc, #444]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4a6e      	ldr	r2, [pc, #440]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6213      	str	r3, [r2, #32]
 8004504:	e02d      	b.n	8004562 <HAL_RCC_OscConfig+0x36e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x334>
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	4a69      	ldr	r2, [pc, #420]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	6213      	str	r3, [r2, #32]
 800451a:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4a66      	ldr	r2, [pc, #408]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	6213      	str	r3, [r2, #32]
 8004526:	e01c      	b.n	8004562 <HAL_RCC_OscConfig+0x36e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b05      	cmp	r3, #5
 800452e:	d10c      	bne.n	800454a <HAL_RCC_OscConfig+0x356>
 8004530:	4b61      	ldr	r3, [pc, #388]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4a60      	ldr	r2, [pc, #384]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	f043 0304 	orr.w	r3, r3, #4
 800453a:	6213      	str	r3, [r2, #32]
 800453c:	4b5e      	ldr	r3, [pc, #376]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	4a5d      	ldr	r2, [pc, #372]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6213      	str	r3, [r2, #32]
 8004548:	e00b      	b.n	8004562 <HAL_RCC_OscConfig+0x36e>
 800454a:	4b5b      	ldr	r3, [pc, #364]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	4a5a      	ldr	r2, [pc, #360]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6213      	str	r3, [r2, #32]
 8004556:	4b58      	ldr	r3, [pc, #352]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4a57      	ldr	r2, [pc, #348]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d015      	beq.n	8004596 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456a:	f7ff fa8f 	bl	8003a8c <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7ff fa8b 	bl	8003a8c <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e0b1      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004588:	4b4b      	ldr	r3, [pc, #300]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ee      	beq.n	8004572 <HAL_RCC_OscConfig+0x37e>
 8004594:	e014      	b.n	80045c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7ff fa79 	bl	8003a8c <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7ff fa75 	bl	8003a8c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e09b      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b4:	4b40      	ldr	r3, [pc, #256]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ee      	bne.n	800459e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d105      	bne.n	80045d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c6:	4b3c      	ldr	r3, [pc, #240]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	4a3b      	ldr	r2, [pc, #236]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8087 	beq.w	80046ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045dc:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d061      	beq.n	80046ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d146      	bne.n	800467e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f0:	4b33      	ldr	r3, [pc, #204]	; (80046c0 <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7ff fa49 	bl	8003a8c <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fe:	f7ff fa45 	bl	8003a8c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e06d      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004610:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d108      	bne.n	8004638 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004626:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	4921      	ldr	r1, [pc, #132]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004638:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a19      	ldr	r1, [r3, #32]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	430b      	orrs	r3, r1
 800464a:	491b      	ldr	r1, [pc, #108]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCC_OscConfig+0x4cc>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7ff fa19 	bl	8003a8c <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465e:	f7ff fa15 	bl	8003a8c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e03d      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x46a>
 800467c:	e035      	b.n	80046ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_RCC_OscConfig+0x4cc>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7ff fa02 	bl	8003a8c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468c:	f7ff f9fe 	bl	8003a8c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e026      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x498>
 80046aa:	e01e      	b.n	80046ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e019      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40007000 	.word	0x40007000
 80046c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_OscConfig+0x500>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d106      	bne.n	80046e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0d0      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b6a      	ldr	r3, [pc, #424]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d910      	bls.n	800473c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 0207 	bic.w	r2, r3, #7
 8004722:	4965      	ldr	r1, [pc, #404]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	4313      	orrs	r3, r2
 8004728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b63      	ldr	r3, [pc, #396]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0b8      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004754:	4b59      	ldr	r3, [pc, #356]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a58      	ldr	r2, [pc, #352]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800475e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800476c:	4b53      	ldr	r3, [pc, #332]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4a52      	ldr	r2, [pc, #328]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b50      	ldr	r3, [pc, #320]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	494d      	ldr	r1, [pc, #308]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d040      	beq.n	8004818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d115      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b41      	ldr	r3, [pc, #260]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e073      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	4b3d      	ldr	r3, [pc, #244]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06b      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	4b39      	ldr	r3, [pc, #228]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4936      	ldr	r1, [pc, #216]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e8:	f7ff f950 	bl	8003a8c <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7ff f94c 	bl	8003a8c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e053      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4b2d      	ldr	r3, [pc, #180]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 020c 	and.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	429a      	cmp	r2, r3
 8004816:	d1eb      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d210      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0207 	bic.w	r2, r3, #7
 800482e:	4922      	ldr	r1, [pc, #136]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e032      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4916      	ldr	r1, [pc, #88]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	490e      	ldr	r1, [pc, #56]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004886:	f000 f82d 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 800488a:	4602      	mov	r2, r0
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	490a      	ldr	r1, [pc, #40]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	5ccb      	ldrb	r3, [r1, r3]
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1cc>)
 80048a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048a2:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1d0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff f8ae 	bl	8003a08 <HAL_InitTick>

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40022000 	.word	0x40022000
 80048bc:	40021000 	.word	0x40021000
 80048c0:	08006e6c 	.word	0x08006e6c
 80048c4:	20000008 	.word	0x20000008
 80048c8:	2000000c 	.word	0x2000000c

080048cc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <HAL_RCC_EnableCSS+0x14>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	4242004c 	.word	0x4242004c

080048e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_RCC_GetSysClockFreq+0x94>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b04      	cmp	r3, #4
 800490c:	d002      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x30>
 800490e:	2b08      	cmp	r3, #8
 8004910:	d003      	beq.n	800491a <HAL_RCC_GetSysClockFreq+0x36>
 8004912:	e027      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <HAL_RCC_GetSysClockFreq+0x98>)
 8004916:	613b      	str	r3, [r7, #16]
      break;
 8004918:	e027      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	0c9b      	lsrs	r3, r3, #18
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	4a17      	ldr	r2, [pc, #92]	; (8004980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004924:	5cd3      	ldrb	r3, [r2, r3]
 8004926:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d010      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_RCC_GetSysClockFreq+0x94>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	0c5b      	lsrs	r3, r3, #17
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	4a11      	ldr	r2, [pc, #68]	; (8004984 <HAL_RCC_GetSysClockFreq+0xa0>)
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a0d      	ldr	r2, [pc, #52]	; (800497c <HAL_RCC_GetSysClockFreq+0x98>)
 8004946:	fb03 f202 	mul.w	r2, r3, r2
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e004      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004958:	fb02 f303 	mul.w	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	613b      	str	r3, [r7, #16]
      break;
 8004962:	e002      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_RCC_GetSysClockFreq+0x98>)
 8004966:	613b      	str	r3, [r7, #16]
      break;
 8004968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496a:	693b      	ldr	r3, [r7, #16]
}
 800496c:	4618      	mov	r0, r3
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
 800497c:	007a1200 	.word	0x007a1200
 8004980:	08006e84 	.word	0x08006e84
 8004984:	08006e94 	.word	0x08006e94
 8004988:	003d0900 	.word	0x003d0900

0800498c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004990:	4b02      	ldr	r3, [pc, #8]	; (800499c <HAL_RCC_GetHCLKFreq+0x10>)
 8004992:	681b      	ldr	r3, [r3, #0]
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	20000008 	.word	0x20000008

080049a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049a4:	f7ff fff2 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	0a1b      	lsrs	r3, r3, #8
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4903      	ldr	r1, [pc, #12]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000
 80049c4:	08006e7c 	.word	0x08006e7c

080049c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049cc:	f7ff ffde 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	0adb      	lsrs	r3, r3, #11
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4903      	ldr	r1, [pc, #12]	; (80049ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000
 80049ec:	08006e7c 	.word	0x08006e7c

080049f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <RCC_Delay+0x34>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <RCC_Delay+0x38>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	0a5b      	lsrs	r3, r3, #9
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a0c:	bf00      	nop
  }
  while (Delay --);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1e5a      	subs	r2, r3, #1
 8004a12:	60fa      	str	r2, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f9      	bne.n	8004a0c <RCC_Delay+0x1c>
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr
 8004a24:	20000008 	.word	0x20000008
 8004a28:	10624dd3 	.word	0x10624dd3

08004a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e076      	b.n	8004b2c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d108      	bne.n	8004a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4e:	d009      	beq.n	8004a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	61da      	str	r2, [r3, #28]
 8004a56:	e005      	b.n	8004a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fe fd46 	bl	8003510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	ea42 0103 	orr.w	r1, r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	0c1a      	lsrs	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f002 0204 	and.w	r2, r2, #4
 8004b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	; 0x30
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b42:	2301      	movs	r3, #1
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_SPI_TransmitReceive+0x26>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e198      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x358>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b62:	f7fe ff93 	bl	8003a8c <HAL_GetTick>
 8004b66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b78:	887b      	ldrh	r3, [r7, #2]
 8004b7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d00f      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0x70>
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8a:	d107      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x68>
 8004b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d003      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ba2:	e16d      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_SPI_TransmitReceive+0x82>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_SPI_TransmitReceive+0x82>
 8004bb0:	887b      	ldrh	r3, [r7, #2]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bbc:	e160      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d003      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2205      	movs	r2, #5
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	887a      	ldrh	r2, [r7, #2]
 8004be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	887a      	ldrh	r2, [r7, #2]
 8004be8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	887a      	ldrh	r2, [r7, #2]
 8004bfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d007      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2e:	d17c      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x10a>
 8004c38:	8b7b      	ldrh	r3, [r7, #26]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d16a      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c62:	e057      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d11b      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x176>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d016      	beq.n	8004caa <HAL_SPI_TransmitReceive+0x176>
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d113      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d119      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x1b8>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d014      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	b292      	uxth	r2, r2
 8004cce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	1c9a      	adds	r2, r3, #2
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cec:	f7fe fece 	bl	8003a8c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d80b      	bhi.n	8004d14 <HAL_SPI_TransmitReceive+0x1e0>
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d02:	d007      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d12:	e0b5      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1a2      	bne.n	8004c64 <HAL_SPI_TransmitReceive+0x130>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d19d      	bne.n	8004c64 <HAL_SPI_TransmitReceive+0x130>
 8004d28:	e080      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x204>
 8004d32:	8b7b      	ldrh	r3, [r7, #26]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d16f      	bne.n	8004e18 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	7812      	ldrb	r2, [r2, #0]
 8004d44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d5e:	e05b      	b.n	8004e18 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d11c      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x274>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d017      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x274>
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d114      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d119      	bne.n	8004dea <HAL_SPI_TransmitReceive+0x2b6>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d014      	beq.n	8004dea <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de6:	2301      	movs	r3, #1
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004dea:	f7fe fe4f 	bl	8003a8c <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d803      	bhi.n	8004e02 <HAL_SPI_TransmitReceive+0x2ce>
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e00:	d102      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x2d4>
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d107      	bne.n	8004e18 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e16:	e033      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d19e      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x22c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d199      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f9b3 	bl	800519c <SPI_EndRxTxTransaction>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d006      	beq.n	8004e4a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e48:	e01a      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e76:	e003      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3730      	adds	r7, #48	; 0x30
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d009      	beq.n	8004ed4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
    return;
 8004ed2:	e0b7      	b.n	8005044 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_SPI_IRQHandler+0x5e>
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
    return;
 8004ef0:	e0a8      	b.n	8005044 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_SPI_IRQHandler+0x74>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 809e 	beq.w	8005044 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8098 	beq.w	8005044 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d023      	beq.n	8004f66 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d011      	beq.n	8004f4e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2e:	f043 0204 	orr.w	r2, r3, #4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	e00b      	b.n	8004f66 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	693b      	ldr	r3, [r7, #16]
        return;
 8004f64:	e06e      	b.n	8005044 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d014      	beq.n	8004f9a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d04f      	beq.n	8005042 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <HAL_SPI_IRQHandler+0x13a>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d034      	beq.n	8005038 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0203 	bic.w	r2, r2, #3
 8004fdc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	4a18      	ldr	r2, [pc, #96]	; (800504c <HAL_SPI_IRQHandler+0x1b8>)
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe fec0 	bl	8003d78 <HAL_DMA_Abort_IT>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	4a0d      	ldr	r2, [pc, #52]	; (800504c <HAL_SPI_IRQHandler+0x1b8>)
 8005018:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe feaa 	bl	8003d78 <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005036:	e003      	b.n	8005040 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f809 	bl	8005050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800503e:	e000      	b.n	8005042 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005040:	bf00      	nop
    return;
 8005042:	bf00      	nop
  }
}
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	08005063 	.word	0x08005063

08005050 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff ffe7 	bl	8005050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	4613      	mov	r3, r2
 800509a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800509c:	f7fe fcf6 	bl	8003a8c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	4413      	add	r3, r2
 80050aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050ac:	f7fe fcee 	bl	8003a8c <HAL_GetTick>
 80050b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050b2:	4b39      	ldr	r3, [pc, #228]	; (8005198 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	015b      	lsls	r3, r3, #5
 80050b8:	0d1b      	lsrs	r3, r3, #20
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	fb02 f303 	mul.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c2:	e054      	b.n	800516e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ca:	d050      	beq.n	800516e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050cc:	f7fe fcde 	bl	8003a8c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d902      	bls.n	80050e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d13d      	bne.n	800515e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fa:	d111      	bne.n	8005120 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	d004      	beq.n	8005110 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510e:	d107      	bne.n	8005120 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005128:	d10f      	bne.n	800514a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e017      	b.n	800518e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3b01      	subs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4013      	ands	r3, r2
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	429a      	cmp	r2, r3
 800518a:	d19b      	bne.n	80050c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000008 	.word	0x20000008

0800519c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2180      	movs	r1, #128	; 0x80
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff ff6a 	bl	800508c <SPI_WaitFlagStateUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e000      	b.n	80051d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e041      	b.n	800526e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f839 	bl	8005276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fbee 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d001      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e035      	b.n	800530c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a16      	ldr	r2, [pc, #88]	; (8005318 <HAL_TIM_Base_Start_IT+0x90>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_TIM_Base_Start_IT+0x4e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ca:	d004      	beq.n	80052d6 <HAL_TIM_Base_Start_IT+0x4e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a12      	ldr	r2, [pc, #72]	; (800531c <HAL_TIM_Base_Start_IT+0x94>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d111      	bne.n	80052fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b06      	cmp	r3, #6
 80052e6:	d010      	beq.n	800530a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f8:	e007      	b.n	800530a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40000400 	.word	0x40000400

08005320 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005342:	4013      	ands	r3, r2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10f      	bne.n	8005368 <HAL_TIM_Base_Stop_IT+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a1a      	ldr	r2, [r3, #32]
 800534e:	f240 4344 	movw	r3, #1092	; 0x444
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <HAL_TIM_Base_Stop_IT+0x48>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e041      	b.n	8005412 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fe f916 	bl	80035d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f000 fb1c 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <HAL_TIM_PWM_Start+0x24>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e022      	b.n	8005486 <HAL_TIM_PWM_Start+0x6a>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b04      	cmp	r3, #4
 8005444:	d109      	bne.n	800545a <HAL_TIM_PWM_Start+0x3e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b01      	cmp	r3, #1
 8005450:	bf14      	ite	ne
 8005452:	2301      	movne	r3, #1
 8005454:	2300      	moveq	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	e015      	b.n	8005486 <HAL_TIM_PWM_Start+0x6a>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d109      	bne.n	8005474 <HAL_TIM_PWM_Start+0x58>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	bf14      	ite	ne
 800546c:	2301      	movne	r3, #1
 800546e:	2300      	moveq	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e008      	b.n	8005486 <HAL_TIM_PWM_Start+0x6a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e059      	b.n	8005542 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0x82>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800549c:	e013      	b.n	80054c6 <HAL_TIM_PWM_Start+0xaa>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0x92>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ac:	e00b      	b.n	80054c6 <HAL_TIM_PWM_Start+0xaa>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Start+0xa2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054bc:	e003      	b.n	80054c6 <HAL_TIM_PWM_Start+0xaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2201      	movs	r2, #1
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fc72 	bl	8005db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1c      	ldr	r2, [pc, #112]	; (800554c <HAL_TIM_PWM_Start+0x130>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d107      	bne.n	80054ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a16      	ldr	r2, [pc, #88]	; (800554c <HAL_TIM_PWM_Start+0x130>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_TIM_PWM_Start+0xf0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005500:	d004      	beq.n	800550c <HAL_TIM_PWM_Start+0xf0>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a12      	ldr	r2, [pc, #72]	; (8005550 <HAL_TIM_PWM_Start+0x134>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d111      	bne.n	8005530 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b06      	cmp	r3, #6
 800551c:	d010      	beq.n	8005540 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	e007      	b.n	8005540 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40000400 	.word	0x40000400

08005554 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fc26 	bl	8005db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a29      	ldr	r2, [pc, #164]	; (8005618 <HAL_TIM_PWM_Stop+0xc4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d117      	bne.n	80055a6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_TIM_PWM_Stop+0x52>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	f240 4344 	movw	r3, #1092	; 0x444
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d107      	bne.n	80055a6 <HAL_TIM_PWM_Stop+0x52>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10f      	bne.n	80055d6 <HAL_TIM_PWM_Stop+0x82>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	f240 4344 	movw	r3, #1092	; 0x444
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_PWM_Stop+0x82>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_PWM_Stop+0x92>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	e013      	b.n	800560e <HAL_TIM_PWM_Stop+0xba>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_PWM_Stop+0xa2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f4:	e00b      	b.n	800560e <HAL_TIM_PWM_Stop+0xba>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_PWM_Stop+0xb2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005604:	e003      	b.n	800560e <HAL_TIM_PWM_Stop+0xba>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40012c00 	.word	0x40012c00

0800561c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0202 	mvn.w	r2, #2
 8005648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9af 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f9a2 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f9b1 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0204 	mvn.w	r2, #4
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f985 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f978 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f987 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0208 	mvn.w	r2, #8
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2204      	movs	r2, #4
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f95b 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f94e 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f95d 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b10      	cmp	r3, #16
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0210 	mvn.w	r2, #16
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2208      	movs	r2, #8
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f931 	bl	80059c2 <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f924 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f933 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0201 	mvn.w	r2, #1
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fd fd4e 	bl	800323c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fbcc 	bl	8005f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f8f7 	bl	80059e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0220 	mvn.w	r2, #32
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fb97 	bl	8005f52 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e0ae      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b0c      	cmp	r3, #12
 8005856:	f200 809f 	bhi.w	8005998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005895 	.word	0x08005895
 8005864:	08005999 	.word	0x08005999
 8005868:	08005999 	.word	0x08005999
 800586c:	08005999 	.word	0x08005999
 8005870:	080058d5 	.word	0x080058d5
 8005874:	08005999 	.word	0x08005999
 8005878:	08005999 	.word	0x08005999
 800587c:	08005999 	.word	0x08005999
 8005880:	08005917 	.word	0x08005917
 8005884:	08005999 	.word	0x08005999
 8005888:	08005999 	.word	0x08005999
 800588c:	08005999 	.word	0x08005999
 8005890:	08005957 	.word	0x08005957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 f904 	bl	8005aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0208 	orr.w	r2, r2, #8
 80058ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0204 	bic.w	r2, r2, #4
 80058be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6999      	ldr	r1, [r3, #24]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	619a      	str	r2, [r3, #24]
      break;
 80058d2:	e064      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f94a 	bl	8005b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	619a      	str	r2, [r3, #24]
      break;
 8005914:	e043      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f993 	bl	8005c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0208 	orr.w	r2, r2, #8
 8005930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0204 	bic.w	r2, r2, #4
 8005940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69d9      	ldr	r1, [r3, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	61da      	str	r2, [r3, #28]
      break;
 8005954:	e023      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f9dd 	bl	8005d1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	021a      	lsls	r2, r3, #8
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	61da      	str	r2, [r3, #28]
      break;
 8005996:	e002      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a25      	ldr	r2, [pc, #148]	; (8005aa0 <TIM_Base_SetConfig+0xa8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d007      	beq.n	8005a20 <TIM_Base_SetConfig+0x28>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d003      	beq.n	8005a20 <TIM_Base_SetConfig+0x28>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a22      	ldr	r2, [pc, #136]	; (8005aa4 <TIM_Base_SetConfig+0xac>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d108      	bne.n	8005a32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <TIM_Base_SetConfig+0xa8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_Base_SetConfig+0x52>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d003      	beq.n	8005a4a <TIM_Base_SetConfig+0x52>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <TIM_Base_SetConfig+0xac>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <TIM_Base_SetConfig+0xa8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d103      	bne.n	8005a90 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	615a      	str	r2, [r3, #20]
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40000400 	.word	0x40000400

08005aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f023 0201 	bic.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 0302 	bic.w	r3, r3, #2
 8005af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <TIM_OC1_SetConfig+0xc8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10c      	bne.n	8005b1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0308 	bic.w	r3, r3, #8
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <TIM_OC1_SetConfig+0xc8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d111      	bne.n	8005b4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00

08005b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f023 0210 	bic.w	r2, r3, #16
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0320 	bic.w	r3, r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <TIM_OC2_SetConfig+0xd0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10d      	bne.n	8005bf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a14      	ldr	r2, [pc, #80]	; (8005c44 <TIM_OC2_SetConfig+0xd0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d113      	bne.n	8005c20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	40012c00 	.word	0x40012c00

08005c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <TIM_OC3_SetConfig+0xd0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d10d      	bne.n	8005cc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <TIM_OC3_SetConfig+0xd0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d113      	bne.n	8005cf2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	621a      	str	r2, [r3, #32]
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00

08005d1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	021b      	lsls	r3, r3, #8
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	031b      	lsls	r3, r3, #12
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a0f      	ldr	r2, [pc, #60]	; (8005db4 <TIM_OC4_SetConfig+0x98>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d109      	bne.n	8005d90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	019b      	lsls	r3, r3, #6
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr
 8005db4:	40012c00 	.word	0x40012c00

08005db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2201      	movs	r2, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	fa01 f303 	lsl.w	r3, r1, r3
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e041      	b.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e64:	d004      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10c      	bne.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40000400 	.word	0x40000400

08005eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e03d      	b.n	8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e042      	b.n	800600e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fd fbe7 	bl	8003770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2224      	movs	r2, #36	; 0x24
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fe50 	bl	8006c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fde:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e04a      	b.n	80060be <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7fd fb97 	bl	8003770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2224      	movs	r2, #36	; 0x24
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006058:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fe00 	bl	8006c60 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800606e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800607e:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0208 	orr.w	r2, r2, #8
 800608e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800609e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b08a      	sub	sp, #40	; 0x28
 80060ca:	af02      	add	r7, sp, #8
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	603b      	str	r3, [r7, #0]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d16d      	bne.n	80061c2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_UART_Transmit+0x2c>
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e066      	b.n	80061c4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2221      	movs	r2, #33	; 0x21
 8006100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006104:	f7fd fcc2 	bl	8003a8c <HAL_GetTick>
 8006108:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611e:	d108      	bne.n	8006132 <HAL_UART_Transmit+0x6c>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e003      	b.n	800613a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800613a:	e02a      	b.n	8006192 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2200      	movs	r2, #0
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fb48 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e036      	b.n	80061c4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800616a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	3302      	adds	r3, #2
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e007      	b.n	8006184 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3301      	adds	r3, #1
 8006182:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1cf      	bne.n	800613c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2200      	movs	r2, #0
 80061a4:	2140      	movs	r1, #64	; 0x40
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fb18 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e006      	b.n	80061c4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e000      	b.n	80061c4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80061c2:	2302      	movs	r3, #2
  }
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d112      	bne.n	800620c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <HAL_UART_Receive_IT+0x26>
 80061ec:	88fb      	ldrh	r3, [r7, #6]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e00b      	b.n	800620e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	461a      	mov	r2, r3
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fb58 	bl	80068b8 <UART_Start_Receive_IT>
 8006208:	4603      	mov	r3, r0
 800620a:	e000      	b.n	800620e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b0ba      	sub	sp, #232	; 0xe8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800623e:	2300      	movs	r3, #0
 8006240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <HAL_UART_IRQHandler+0x66>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fc34 	bl	8006ae4 <UART_Receive_IT>
      return;
 800627c:	e25b      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800627e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80de 	beq.w	8006444 <HAL_UART_IRQHandler+0x22c>
 8006288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80d1 	beq.w	8006444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <HAL_UART_IRQHandler+0xae>
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	f043 0201 	orr.w	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_UART_IRQHandler+0xd2>
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	f043 0202 	orr.w	r2, r3, #2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_UART_IRQHandler+0xf6>
 80062f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006306:	f043 0204 	orr.w	r2, r3, #4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d011      	beq.n	800633e <HAL_UART_IRQHandler+0x126>
 800631a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006336:	f043 0208 	orr.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 81f2 	beq.w	800672c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_IRQHandler+0x14e>
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fbbf 	bl	8006ae4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <HAL_UART_IRQHandler+0x17a>
 800638a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d04f      	beq.n	8006432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fac9 	bl	800692a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d041      	beq.n	800642a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3314      	adds	r3, #20
 80063ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1d9      	bne.n	80063a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d013      	beq.n	8006422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	4a7e      	ldr	r2, [pc, #504]	; (80065f8 <HAL_UART_IRQHandler+0x3e0>)
 8006400:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006406:	4618      	mov	r0, r3
 8006408:	f7fd fcb6 	bl	8003d78 <HAL_DMA_Abort_IT>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	e00e      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f993 	bl	800674e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	e00a      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f98f 	bl	800674e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e006      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f98b 	bl	800674e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800643e:	e175      	b.n	800672c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	bf00      	nop
    return;
 8006442:	e173      	b.n	800672c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 814f 	bne.w	80066ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8148 	beq.w	80066ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8141 	beq.w	80066ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800646a:	2300      	movs	r3, #0
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80b6 	beq.w	80065fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800649c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8145 	beq.w	8006730 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ae:	429a      	cmp	r2, r3
 80064b0:	f080 813e 	bcs.w	8006730 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	f000 8088 	beq.w	80065d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80064f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006500:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800650c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1d9      	bne.n	80064c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3314      	adds	r3, #20
 8006534:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006538:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800653c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006540:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800654a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e1      	bne.n	8006514 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3314      	adds	r3, #20
 8006556:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3314      	adds	r3, #20
 8006570:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006574:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006576:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800657a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e3      	bne.n	8006550 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a8:	f023 0310 	bic.w	r3, r3, #16
 80065ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80065bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e3      	bne.n	8006596 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fb95 	bl	8003d02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f8b6 	bl	8006760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f4:	e09c      	b.n	8006730 <HAL_UART_IRQHandler+0x518>
 80065f6:	bf00      	nop
 80065f8:	080069ef 	.word	0x080069ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006604:	b29b      	uxth	r3, r3
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 808e 	beq.w	8006734 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8089 	beq.w	8006734 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006646:	647a      	str	r2, [r7, #68]	; 0x44
 8006648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800664c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e3      	bne.n	8006622 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3314      	adds	r3, #20
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	623b      	str	r3, [r7, #32]
   return(result);
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3314      	adds	r3, #20
 800667a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800667e:	633a      	str	r2, [r7, #48]	; 0x30
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e3      	bne.n	800665a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0310 	bic.w	r3, r3, #16
 80066b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066c4:	61fa      	str	r2, [r7, #28]
 80066c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	617b      	str	r3, [r7, #20]
   return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e3      	bne.n	80066a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f83b 	bl	8006760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066ea:	e023      	b.n	8006734 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <HAL_UART_IRQHandler+0x4f4>
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f986 	bl	8006a16 <UART_Transmit_IT>
    return;
 800670a:	e014      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800670c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <HAL_UART_IRQHandler+0x51e>
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f9c5 	bl	8006ab4 <UART_EndTransmit_IT>
    return;
 800672a:	e004      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
    return;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
      return;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
      return;
 8006734:	bf00      	nop
  }
}
 8006736:	37e8      	adds	r7, #232	; 0xe8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800678c:	2302      	movs	r3, #2
 800678e:	e020      	b.n	80067d2 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2224      	movs	r2, #36	; 0x24
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 030c 	bic.w	r3, r3, #12
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f043 0308 	orr.w	r3, r3, #8
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b090      	sub	sp, #64	; 0x40
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ec:	e050      	b.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f4:	d04c      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0x30>
 80067fc:	f7fd f946 	bl	8003a8c <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006808:	429a      	cmp	r2, r3
 800680a:	d241      	bcs.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800682c:	637a      	str	r2, [r7, #52]	; 0x34
 800682e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	613b      	str	r3, [r7, #16]
   return(result);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006860:	623a      	str	r2, [r7, #32]
 8006862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	69f9      	ldr	r1, [r7, #28]
 8006866:	6a3a      	ldr	r2, [r7, #32]
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	61bb      	str	r3, [r7, #24]
   return(result);
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e00f      	b.n	80068b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d09f      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3740      	adds	r7, #64	; 0x40
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2222      	movs	r2, #34	; 0x22
 80068e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695a      	ldr	r2, [r3, #20]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0220 	orr.w	r2, r2, #32
 800691c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800692a:	b480      	push	{r7}
 800692c:	b095      	sub	sp, #84	; 0x54
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006952:	643a      	str	r2, [r7, #64]	; 0x40
 8006954:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e5      	bne.n	8006932 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3314      	adds	r3, #20
 800696c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	61fb      	str	r3, [r7, #28]
   return(result);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	64bb      	str	r3, [r7, #72]	; 0x48
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3314      	adds	r3, #20
 8006984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800698c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e5      	bne.n	8006966 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d119      	bne.n	80069d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	647b      	str	r3, [r7, #68]	; 0x44
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	330c      	adds	r3, #12
 80069c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c2:	61ba      	str	r2, [r7, #24]
 80069c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6979      	ldr	r1, [r7, #20]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	613b      	str	r3, [r7, #16]
   return(result);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e5      	bne.n	80069a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069e4:	bf00      	nop
 80069e6:	3754      	adds	r7, #84	; 0x54
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff fea0 	bl	800674e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b21      	cmp	r3, #33	; 0x21
 8006a28:	d13e      	bne.n	8006aa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d114      	bne.n	8006a5e <UART_Transmit_IT+0x48>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d110      	bne.n	8006a5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	621a      	str	r2, [r3, #32]
 8006a5c:	e008      	b.n	8006a70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6211      	str	r1, [r2, #32]
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10f      	bne.n	8006aa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e000      	b.n	8006aaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
  }
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fe31 	bl	800673c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08c      	sub	sp, #48	; 0x30
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b22      	cmp	r3, #34	; 0x22
 8006af6:	f040 80ae 	bne.w	8006c56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	d117      	bne.n	8006b34 <UART_Receive_IT+0x50>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d113      	bne.n	8006b34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	1c9a      	adds	r2, r3, #2
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	629a      	str	r2, [r3, #40]	; 0x28
 8006b32:	e026      	b.n	8006b82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b46:	d007      	beq.n	8006b58 <UART_Receive_IT+0x74>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <UART_Receive_IT+0x82>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	e008      	b.n	8006b78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d15d      	bne.n	8006c52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0220 	bic.w	r2, r2, #32
 8006ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695a      	ldr	r2, [r3, #20]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0201 	bic.w	r2, r2, #1
 8006bc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d135      	bne.n	8006c48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c02:	623a      	str	r2, [r7, #32]
 8006c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	69f9      	ldr	r1, [r7, #28]
 8006c08:	6a3a      	ldr	r2, [r7, #32]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d10a      	bne.n	8006c3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff fd8d 	bl	8006760 <HAL_UARTEx_RxEventCallback>
 8006c46:	e002      	b.n	8006c4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7fc fa97 	bl	800317c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e002      	b.n	8006c58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e000      	b.n	8006c58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c56:	2302      	movs	r3, #2
  }
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3730      	adds	r7, #48	; 0x30
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c9a:	f023 030c 	bic.w	r3, r3, #12
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <UART_SetConfig+0x114>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d103      	bne.n	8006cd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cc8:	f7fd fe7e 	bl	80049c8 <HAL_RCC_GetPCLK2Freq>
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	e002      	b.n	8006cd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cd0:	f7fd fe66 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 8006cd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009a      	lsls	r2, r3, #2
 8006ce0:	441a      	add	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cec:	4a22      	ldr	r2, [pc, #136]	; (8006d78 <UART_SetConfig+0x118>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	0119      	lsls	r1, r3, #4
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009a      	lsls	r2, r3, #2
 8006d00:	441a      	add	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <UART_SetConfig+0x118>)
 8006d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	2064      	movs	r0, #100	; 0x64
 8006d16:	fb00 f303 	mul.w	r3, r0, r3
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	3332      	adds	r3, #50	; 0x32
 8006d20:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <UART_SetConfig+0x118>)
 8006d22:	fba2 2303 	umull	r2, r3, r2, r3
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d2c:	4419      	add	r1, r3
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009a      	lsls	r2, r3, #2
 8006d38:	441a      	add	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <UART_SetConfig+0x118>)
 8006d46:	fba3 0302 	umull	r0, r3, r3, r2
 8006d4a:	095b      	lsrs	r3, r3, #5
 8006d4c:	2064      	movs	r0, #100	; 0x64
 8006d4e:	fb00 f303 	mul.w	r3, r0, r3
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	3332      	adds	r3, #50	; 0x32
 8006d58:	4a07      	ldr	r2, [pc, #28]	; (8006d78 <UART_SetConfig+0x118>)
 8006d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	f003 020f 	and.w	r2, r3, #15
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	440a      	add	r2, r1
 8006d6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40013800 	.word	0x40013800
 8006d78:	51eb851f 	.word	0x51eb851f

08006d7c <ceilf>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8006d82:	3d7f      	subs	r5, #127	; 0x7f
 8006d84:	2d16      	cmp	r5, #22
 8006d86:	4601      	mov	r1, r0
 8006d88:	4604      	mov	r4, r0
 8006d8a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006d8e:	dc25      	bgt.n	8006ddc <ceilf+0x60>
 8006d90:	2d00      	cmp	r5, #0
 8006d92:	da0e      	bge.n	8006db2 <ceilf+0x36>
 8006d94:	4917      	ldr	r1, [pc, #92]	; (8006df4 <ceilf+0x78>)
 8006d96:	f7f9 fdfd 	bl	8000994 <__addsf3>
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f7fa f8be 	bl	8000f1c <__aeabi_fcmpgt>
 8006da0:	b128      	cbz	r0, 8006dae <ceilf+0x32>
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	db22      	blt.n	8006dec <ceilf+0x70>
 8006da6:	2e00      	cmp	r6, #0
 8006da8:	bf18      	it	ne
 8006daa:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8006dae:	4621      	mov	r1, r4
 8006db0:	e01a      	b.n	8006de8 <ceilf+0x6c>
 8006db2:	4e11      	ldr	r6, [pc, #68]	; (8006df8 <ceilf+0x7c>)
 8006db4:	412e      	asrs	r6, r5
 8006db6:	4230      	tst	r0, r6
 8006db8:	d016      	beq.n	8006de8 <ceilf+0x6c>
 8006dba:	490e      	ldr	r1, [pc, #56]	; (8006df4 <ceilf+0x78>)
 8006dbc:	f7f9 fdea 	bl	8000994 <__addsf3>
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	f7fa f8ab 	bl	8000f1c <__aeabi_fcmpgt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d0f1      	beq.n	8006dae <ceilf+0x32>
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	bfc2      	ittt	gt
 8006dce:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8006dd2:	412b      	asrgt	r3, r5
 8006dd4:	18e4      	addgt	r4, r4, r3
 8006dd6:	ea24 0406 	bic.w	r4, r4, r6
 8006dda:	e7e8      	b.n	8006dae <ceilf+0x32>
 8006ddc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006de0:	d302      	bcc.n	8006de8 <ceilf+0x6c>
 8006de2:	f7f9 fdd7 	bl	8000994 <__addsf3>
 8006de6:	4601      	mov	r1, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006df0:	e7dd      	b.n	8006dae <ceilf+0x32>
 8006df2:	bf00      	nop
 8006df4:	7149f2ca 	.word	0x7149f2ca
 8006df8:	007fffff 	.word	0x007fffff

08006dfc <memset>:
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	4402      	add	r2, r0
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d100      	bne.n	8006e06 <memset+0xa>
 8006e04:	4770      	bx	lr
 8006e06:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0a:	e7f9      	b.n	8006e00 <memset+0x4>

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	2600      	movs	r6, #0
 8006e10:	4d0c      	ldr	r5, [pc, #48]	; (8006e44 <__libc_init_array+0x38>)
 8006e12:	4c0d      	ldr	r4, [pc, #52]	; (8006e48 <__libc_init_array+0x3c>)
 8006e14:	1b64      	subs	r4, r4, r5
 8006e16:	10a4      	asrs	r4, r4, #2
 8006e18:	42a6      	cmp	r6, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	f000 f81a 	bl	8006e54 <_init>
 8006e20:	2600      	movs	r6, #0
 8006e22:	4d0a      	ldr	r5, [pc, #40]	; (8006e4c <__libc_init_array+0x40>)
 8006e24:	4c0a      	ldr	r4, [pc, #40]	; (8006e50 <__libc_init_array+0x44>)
 8006e26:	1b64      	subs	r4, r4, r5
 8006e28:	10a4      	asrs	r4, r4, #2
 8006e2a:	42a6      	cmp	r6, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e34:	4798      	blx	r3
 8006e36:	3601      	adds	r6, #1
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3e:	4798      	blx	r3
 8006e40:	3601      	adds	r6, #1
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08006e98 	.word	0x08006e98
 8006e48:	08006e98 	.word	0x08006e98
 8006e4c:	08006e98 	.word	0x08006e98
 8006e50:	08006ea0 	.word	0x08006ea0

08006e54 <_init>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	bf00      	nop
 8006e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5a:	bc08      	pop	{r3}
 8006e5c:	469e      	mov	lr, r3
 8006e5e:	4770      	bx	lr

08006e60 <_fini>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	bf00      	nop
 8006e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e66:	bc08      	pop	{r3}
 8006e68:	469e      	mov	lr, r3
 8006e6a:	4770      	bx	lr
