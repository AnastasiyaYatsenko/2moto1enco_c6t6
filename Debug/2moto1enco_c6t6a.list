
2moto1enco_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079dc  080079dc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080079dc  080079dc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079dc  080079dc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080079e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000020  08007a08  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08007a08  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ee7  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003166  00000000  00000000  00038f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  0003c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2f  00000000  00000000  0003d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b398  00000000  00000000  0003deef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c9a  00000000  00000000  00059287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090052  00000000  00000000  0006bf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004aa0  00000000  00000000  000fbf74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00100a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08007998 	.word	0x08007998

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08007998 	.word	0x08007998

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_frsub>:
 8000a98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a9c:	e002      	b.n	8000aa4 <__addsf3>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_fsub>:
 8000aa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa4 <__addsf3>:
 8000aa4:	0042      	lsls	r2, r0, #1
 8000aa6:	bf1f      	itttt	ne
 8000aa8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aac:	ea92 0f03 	teqne	r2, r3
 8000ab0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab8:	d06a      	beq.n	8000b90 <__addsf3+0xec>
 8000aba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000abe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac2:	bfc1      	itttt	gt
 8000ac4:	18d2      	addgt	r2, r2, r3
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	4048      	eorgt	r0, r1
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	bfb8      	it	lt
 8000ace:	425b      	neglt	r3, r3
 8000ad0:	2b19      	cmp	r3, #25
 8000ad2:	bf88      	it	hi
 8000ad4:	4770      	bxhi	lr
 8000ad6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ade:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4249      	negne	r1, r1
 8000af6:	ea92 0f03 	teq	r2, r3
 8000afa:	d03f      	beq.n	8000b7c <__addsf3+0xd8>
 8000afc:	f1a2 0201 	sub.w	r2, r2, #1
 8000b00:	fa41 fc03 	asr.w	ip, r1, r3
 8000b04:	eb10 000c 	adds.w	r0, r0, ip
 8000b08:	f1c3 0320 	rsb	r3, r3, #32
 8000b0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	d502      	bpl.n	8000b1c <__addsf3+0x78>
 8000b16:	4249      	negs	r1, r1
 8000b18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b20:	d313      	bcc.n	8000b4a <__addsf3+0xa6>
 8000b22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b26:	d306      	bcc.n	8000b36 <__addsf3+0x92>
 8000b28:	0840      	lsrs	r0, r0, #1
 8000b2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2e:	f102 0201 	add.w	r2, r2, #1
 8000b32:	2afe      	cmp	r2, #254	; 0xfe
 8000b34:	d251      	bcs.n	8000bda <__addsf3+0x136>
 8000b36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3e:	bf08      	it	eq
 8000b40:	f020 0001 	biceq.w	r0, r0, #1
 8000b44:	ea40 0003 	orr.w	r0, r0, r3
 8000b48:	4770      	bx	lr
 8000b4a:	0049      	lsls	r1, r1, #1
 8000b4c:	eb40 0000 	adc.w	r0, r0, r0
 8000b50:	3a01      	subs	r2, #1
 8000b52:	bf28      	it	cs
 8000b54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b58:	d2ed      	bcs.n	8000b36 <__addsf3+0x92>
 8000b5a:	fab0 fc80 	clz	ip, r0
 8000b5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b62:	ebb2 020c 	subs.w	r2, r2, ip
 8000b66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6a:	bfaa      	itet	ge
 8000b6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b70:	4252      	neglt	r2, r2
 8000b72:	4318      	orrge	r0, r3
 8000b74:	bfbc      	itt	lt
 8000b76:	40d0      	lsrlt	r0, r2
 8000b78:	4318      	orrlt	r0, r3
 8000b7a:	4770      	bx	lr
 8000b7c:	f092 0f00 	teq	r2, #0
 8000b80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b84:	bf06      	itte	eq
 8000b86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8a:	3201      	addeq	r2, #1
 8000b8c:	3b01      	subne	r3, #1
 8000b8e:	e7b5      	b.n	8000afc <__addsf3+0x58>
 8000b90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b98:	bf18      	it	ne
 8000b9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9e:	d021      	beq.n	8000be4 <__addsf3+0x140>
 8000ba0:	ea92 0f03 	teq	r2, r3
 8000ba4:	d004      	beq.n	8000bb0 <__addsf3+0x10c>
 8000ba6:	f092 0f00 	teq	r2, #0
 8000baa:	bf08      	it	eq
 8000bac:	4608      	moveq	r0, r1
 8000bae:	4770      	bx	lr
 8000bb0:	ea90 0f01 	teq	r0, r1
 8000bb4:	bf1c      	itt	ne
 8000bb6:	2000      	movne	r0, #0
 8000bb8:	4770      	bxne	lr
 8000bba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bbe:	d104      	bne.n	8000bca <__addsf3+0x126>
 8000bc0:	0040      	lsls	r0, r0, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	4770      	bx	lr
 8000bca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bce:	bf3c      	itt	cc
 8000bd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bxcc	lr
 8000bd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	4770      	bx	lr
 8000be4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be8:	bf16      	itet	ne
 8000bea:	4608      	movne	r0, r1
 8000bec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf0:	4601      	movne	r1, r0
 8000bf2:	0242      	lsls	r2, r0, #9
 8000bf4:	bf06      	itte	eq
 8000bf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfa:	ea90 0f01 	teqeq	r0, r1
 8000bfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_ui2f>:
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e004      	b.n	8000c14 <__aeabi_i2f+0x8>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_i2f>:
 8000c0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c10:	bf48      	it	mi
 8000c12:	4240      	negmi	r0, r0
 8000c14:	ea5f 0c00 	movs.w	ip, r0
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c20:	4601      	mov	r1, r0
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	e01c      	b.n	8000c62 <__aeabi_l2f+0x2a>

08000c28 <__aeabi_ul2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e00a      	b.n	8000c4c <__aeabi_l2f+0x14>
 8000c36:	bf00      	nop

08000c38 <__aeabi_l2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c44:	d502      	bpl.n	8000c4c <__aeabi_l2f+0x14>
 8000c46:	4240      	negs	r0, r0
 8000c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4c:	ea5f 0c01 	movs.w	ip, r1
 8000c50:	bf02      	ittt	eq
 8000c52:	4684      	moveq	ip, r0
 8000c54:	4601      	moveq	r1, r0
 8000c56:	2000      	moveq	r0, #0
 8000c58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c5c:	bf08      	it	eq
 8000c5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c66:	fabc f28c 	clz	r2, ip
 8000c6a:	3a08      	subs	r2, #8
 8000c6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c70:	db10      	blt.n	8000c94 <__aeabi_l2f+0x5c>
 8000c72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c76:	4463      	add	r3, ip
 8000c78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c84:	fa20 f202 	lsr.w	r2, r0, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	f020 0001 	biceq.w	r0, r0, #1
 8000c92:	4770      	bx	lr
 8000c94:	f102 0220 	add.w	r2, r2, #32
 8000c98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_fmul>:
 8000cb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc2:	ea92 0f0c 	teqne	r2, ip
 8000cc6:	ea93 0f0c 	teqne	r3, ip
 8000cca:	d06f      	beq.n	8000dac <__aeabi_fmul+0xf8>
 8000ccc:	441a      	add	r2, r3
 8000cce:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd2:	0240      	lsls	r0, r0, #9
 8000cd4:	bf18      	it	ne
 8000cd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cda:	d01e      	beq.n	8000d1a <__aeabi_fmul+0x66>
 8000cdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf4:	bf3e      	ittt	cc
 8000cf6:	0049      	lslcc	r1, r1, #1
 8000cf8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	ea40 0001 	orr.w	r0, r0, r1
 8000d02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d06:	2afd      	cmp	r2, #253	; 0xfd
 8000d08:	d81d      	bhi.n	8000d46 <__aeabi_fmul+0x92>
 8000d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d12:	bf08      	it	eq
 8000d14:	f020 0001 	biceq.w	r0, r0, #1
 8000d18:	4770      	bx	lr
 8000d1a:	f090 0f00 	teq	r0, #0
 8000d1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d22:	bf08      	it	eq
 8000d24:	0249      	lsleq	r1, r1, #9
 8000d26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2e:	3a7f      	subs	r2, #127	; 0x7f
 8000d30:	bfc2      	ittt	gt
 8000d32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3a:	4770      	bxgt	lr
 8000d3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	3a01      	subs	r2, #1
 8000d46:	dc5d      	bgt.n	8000e04 <__aeabi_fmul+0x150>
 8000d48:	f112 0f19 	cmn.w	r2, #25
 8000d4c:	bfdc      	itt	le
 8000d4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d52:	4770      	bxle	lr
 8000d54:	f1c2 0200 	rsb	r2, r2, #0
 8000d58:	0041      	lsls	r1, r0, #1
 8000d5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5e:	f1c2 0220 	rsb	r2, r2, #32
 8000d62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6a:	f140 0000 	adc.w	r0, r0, #0
 8000d6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d72:	bf08      	it	eq
 8000d74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d78:	4770      	bx	lr
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fmul+0xce>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fmul+0xe6>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e78f      	b.n	8000ccc <__aeabi_fmul+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	bf18      	it	ne
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d00a      	beq.n	8000dd2 <__aeabi_fmul+0x11e>
 8000dbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc0:	bf18      	it	ne
 8000dc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc6:	d1d8      	bne.n	8000d7a <__aeabi_fmul+0xc6>
 8000dc8:	ea80 0001 	eor.w	r0, r0, r1
 8000dcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	bf17      	itett	ne
 8000dd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	f091 0f00 	teqne	r1, #0
 8000de2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de6:	d014      	beq.n	8000e12 <__aeabi_fmul+0x15e>
 8000de8:	ea92 0f0c 	teq	r2, ip
 8000dec:	d101      	bne.n	8000df2 <__aeabi_fmul+0x13e>
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	d10f      	bne.n	8000e12 <__aeabi_fmul+0x15e>
 8000df2:	ea93 0f0c 	teq	r3, ip
 8000df6:	d103      	bne.n	8000e00 <__aeabi_fmul+0x14c>
 8000df8:	024b      	lsls	r3, r1, #9
 8000dfa:	bf18      	it	ne
 8000dfc:	4608      	movne	r0, r1
 8000dfe:	d108      	bne.n	8000e12 <__aeabi_fmul+0x15e>
 8000e00:	ea80 0001 	eor.w	r0, r0, r1
 8000e04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	4770      	bx	lr
 8000e12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fdiv>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d069      	beq.n	8000f08 <__aeabi_fdiv+0xec>
 8000e34:	eba2 0203 	sub.w	r2, r2, r3
 8000e38:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3c:	0249      	lsls	r1, r1, #9
 8000e3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e42:	d037      	beq.n	8000eb4 <__aeabi_fdiv+0x98>
 8000e44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e54:	428b      	cmp	r3, r1
 8000e56:	bf38      	it	cc
 8000e58:	005b      	lslcc	r3, r3, #1
 8000e5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e62:	428b      	cmp	r3, r1
 8000e64:	bf24      	itt	cs
 8000e66:	1a5b      	subcs	r3, r3, r1
 8000e68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e70:	bf24      	itt	cs
 8000e72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7e:	bf24      	itt	cs
 8000e80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e8c:	bf24      	itt	cs
 8000e8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9e:	d1e0      	bne.n	8000e62 <__aeabi_fdiv+0x46>
 8000ea0:	2afd      	cmp	r2, #253	; 0xfd
 8000ea2:	f63f af50 	bhi.w	8000d46 <__aeabi_fmul+0x92>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ebc:	327f      	adds	r2, #127	; 0x7f
 8000ebe:	bfc2      	ittt	gt
 8000ec0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec8:	4770      	bxgt	lr
 8000eca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	3a01      	subs	r2, #1
 8000ed4:	e737      	b.n	8000d46 <__aeabi_fmul+0x92>
 8000ed6:	f092 0f00 	teq	r2, #0
 8000eda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0040      	lsleq	r0, r0, #1
 8000ee2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee6:	3a01      	subeq	r2, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fdiv+0xc2>
 8000eea:	ea40 000c 	orr.w	r0, r0, ip
 8000eee:	f093 0f00 	teq	r3, #0
 8000ef2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0049      	lsleq	r1, r1, #1
 8000efa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efe:	3b01      	subeq	r3, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fdiv+0xda>
 8000f02:	ea41 010c 	orr.w	r1, r1, ip
 8000f06:	e795      	b.n	8000e34 <__aeabi_fdiv+0x18>
 8000f08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	d108      	bne.n	8000f24 <__aeabi_fdiv+0x108>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	f47f af7d 	bne.w	8000e12 <__aeabi_fmul+0x15e>
 8000f18:	ea93 0f0c 	teq	r3, ip
 8000f1c:	f47f af70 	bne.w	8000e00 <__aeabi_fmul+0x14c>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e776      	b.n	8000e12 <__aeabi_fmul+0x15e>
 8000f24:	ea93 0f0c 	teq	r3, ip
 8000f28:	d104      	bne.n	8000f34 <__aeabi_fdiv+0x118>
 8000f2a:	024b      	lsls	r3, r1, #9
 8000f2c:	f43f af4c 	beq.w	8000dc8 <__aeabi_fmul+0x114>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e76e      	b.n	8000e12 <__aeabi_fmul+0x15e>
 8000f34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f38:	bf18      	it	ne
 8000f3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3e:	d1ca      	bne.n	8000ed6 <__aeabi_fdiv+0xba>
 8000f40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f44:	f47f af5c 	bne.w	8000e00 <__aeabi_fmul+0x14c>
 8000f48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f4c:	f47f af3c 	bne.w	8000dc8 <__aeabi_fmul+0x114>
 8000f50:	e75f      	b.n	8000e12 <__aeabi_fmul+0x15e>
 8000f52:	bf00      	nop

08000f54 <__gesf2>:
 8000f54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f58:	e006      	b.n	8000f68 <__cmpsf2+0x4>
 8000f5a:	bf00      	nop

08000f5c <__lesf2>:
 8000f5c:	f04f 0c01 	mov.w	ip, #1
 8000f60:	e002      	b.n	8000f68 <__cmpsf2+0x4>
 8000f62:	bf00      	nop

08000f64 <__cmpsf2>:
 8000f64:	f04f 0c01 	mov.w	ip, #1
 8000f68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f78:	bf18      	it	ne
 8000f7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7e:	d011      	beq.n	8000fa4 <__cmpsf2+0x40>
 8000f80:	b001      	add	sp, #4
 8000f82:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f86:	bf18      	it	ne
 8000f88:	ea90 0f01 	teqne	r0, r1
 8000f8c:	bf58      	it	pl
 8000f8e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f92:	bf88      	it	hi
 8000f94:	17c8      	asrhi	r0, r1, #31
 8000f96:	bf38      	it	cc
 8000f98:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f9c:	bf18      	it	ne
 8000f9e:	f040 0001 	orrne.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	d102      	bne.n	8000fb0 <__cmpsf2+0x4c>
 8000faa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fae:	d105      	bne.n	8000fbc <__cmpsf2+0x58>
 8000fb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb4:	d1e4      	bne.n	8000f80 <__cmpsf2+0x1c>
 8000fb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fba:	d0e1      	beq.n	8000f80 <__cmpsf2+0x1c>
 8000fbc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_cfrcmple>:
 8000fc4:	4684      	mov	ip, r0
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	4661      	mov	r1, ip
 8000fca:	e7ff      	b.n	8000fcc <__aeabi_cfcmpeq>

08000fcc <__aeabi_cfcmpeq>:
 8000fcc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fce:	f7ff ffc9 	bl	8000f64 <__cmpsf2>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	bf48      	it	mi
 8000fd6:	f110 0f00 	cmnmi.w	r0, #0
 8000fda:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fdc <__aeabi_fcmpeq>:
 8000fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe0:	f7ff fff4 	bl	8000fcc <__aeabi_cfcmpeq>
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2001      	moveq	r0, #1
 8000fe8:	2000      	movne	r0, #0
 8000fea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fee:	bf00      	nop

08000ff0 <__aeabi_fcmplt>:
 8000ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff4:	f7ff ffea 	bl	8000fcc <__aeabi_cfcmpeq>
 8000ff8:	bf34      	ite	cc
 8000ffa:	2001      	movcc	r0, #1
 8000ffc:	2000      	movcs	r0, #0
 8000ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001002:	bf00      	nop

08001004 <__aeabi_fcmple>:
 8001004:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001008:	f7ff ffe0 	bl	8000fcc <__aeabi_cfcmpeq>
 800100c:	bf94      	ite	ls
 800100e:	2001      	movls	r0, #1
 8001010:	2000      	movhi	r0, #0
 8001012:	f85d fb08 	ldr.w	pc, [sp], #8
 8001016:	bf00      	nop

08001018 <__aeabi_fcmpge>:
 8001018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800101c:	f7ff ffd2 	bl	8000fc4 <__aeabi_cfrcmple>
 8001020:	bf94      	ite	ls
 8001022:	2001      	movls	r0, #1
 8001024:	2000      	movhi	r0, #0
 8001026:	f85d fb08 	ldr.w	pc, [sp], #8
 800102a:	bf00      	nop

0800102c <__aeabi_fcmpgt>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff ffc8 	bl	8000fc4 <__aeabi_cfrcmple>
 8001034:	bf34      	ite	cc
 8001036:	2001      	movcc	r0, #1
 8001038:	2000      	movcs	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_f2uiz>:
 8001040:	0042      	lsls	r2, r0, #1
 8001042:	d20e      	bcs.n	8001062 <__aeabi_f2uiz+0x22>
 8001044:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001048:	d30b      	bcc.n	8001062 <__aeabi_f2uiz+0x22>
 800104a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800104e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001052:	d409      	bmi.n	8001068 <__aeabi_f2uiz+0x28>
 8001054:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800105c:	fa23 f002 	lsr.w	r0, r3, r2
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr
 8001068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800106c:	d101      	bne.n	8001072 <__aeabi_f2uiz+0x32>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	d102      	bne.n	8001078 <__aeabi_f2uiz+0x38>
 8001072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001076:	4770      	bx	lr
 8001078:	f04f 0000 	mov.w	r0, #0
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8001090:	787a      	ldrb	r2, [r7, #1]
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f003 fdfd 	bl	8004c96 <HAL_GPIO_WritePin>

}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	461a      	mov	r2, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	72fb      	strb	r3, [r7, #11]
 80010b4:	4613      	mov	r3, r2
 80010b6:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffde 	bl	8001080 <setCSLine>
	delay(docDelay);
 80010c4:	2004      	movs	r0, #4
 80010c6:	f000 f923 	bl	8001310 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 80010ca:	f107 0217 	add.w	r2, r7, #23
 80010ce:	f107 010b 	add.w	r1, r7, #11
 80010d2:	230a      	movs	r3, #10
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f004 fac5 	bl	8005668 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 80010de:	2004      	movs	r0, #4
 80010e0:	f000 f916 	bl	8001310 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 80010e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010e8:	893b      	ldrh	r3, [r7, #8]
 80010ea:	4619      	mov	r1, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffc7 	bl	8001080 <setCSLine>
	return data;
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	; 0x30
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	460b      	mov	r3, r1
 800110c:	80fb      	strh	r3, [r7, #6]
 800110e:	4613      	mov	r3, r2
 8001110:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001112:	f000 f90f 	bl	8001334 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	2200      	movs	r2, #0
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	2100      	movs	r1, #0
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ffbd 	bl	80010a4 <spiWriteRead>
 800112a:	4603      	mov	r3, r0
 800112c:	b29b      	uxth	r3, r3
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001132:	2004      	movs	r0, #4
 8001134:	f000 f8ec 	bl	8001310 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	2201      	movs	r2, #1
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	2100      	movs	r1, #0
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff ffae 	bl	80010a4 <spiWriteRead>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800114e:	4313      	orrs	r3, r2
 8001150:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	e010      	b.n	800117a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8001158:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	fa42 f303 	asr.w	r3, r2, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	b2d9      	uxtb	r1, r3
 8001168:	f107 0210 	add.w	r2, r7, #16
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	4413      	add	r3, r2
 8001170:	460a      	mov	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	3301      	adds	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	ddeb      	ble.n	8001158 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001184:	7f7a      	ldrb	r2, [r7, #29]
 8001186:	7efb      	ldrb	r3, [r7, #27]
 8001188:	4053      	eors	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	7e7b      	ldrb	r3, [r7, #25]
 800118e:	4053      	eors	r3, r2
 8001190:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001192:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001194:	4053      	eors	r3, r2
 8001196:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001198:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800119a:	4053      	eors	r3, r2
 800119c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800119e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011a0:	4053      	eors	r3, r2
 80011a2:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 80011a4:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80011b0:	4299      	cmp	r1, r3
 80011b2:	d11e      	bne.n	80011f2 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80011b4:	7fbb      	ldrb	r3, [r7, #30]
 80011b6:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011b8:	7f3a      	ldrb	r2, [r7, #28]
 80011ba:	7ebb      	ldrb	r3, [r7, #26]
 80011bc:	4053      	eors	r3, r2
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	4053      	eors	r3, r2
 80011c4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80011c6:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011c8:	4053      	eors	r3, r2
 80011ca:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011ce:	4053      	eors	r3, r2
 80011d0:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80011d2:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011d4:	4053      	eors	r3, r2
 80011d6:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80011d8:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80011da:	429a      	cmp	r2, r3
 80011dc:	bf0c      	ite	eq
 80011de:	2301      	moveq	r3, #1
 80011e0:	2300      	movne	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 80011e4:	4299      	cmp	r1, r3
 80011e6:	d104      	bne.n	80011f2 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 80011e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80011ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011f0:	e002      	b.n	80011f8 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 80011f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f6:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d107      	bne.n	800120e <getPositionSPI+0x112>
 80011fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001204:	4293      	cmp	r3, r2
 8001206:	d002      	beq.n	800120e <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 8001208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 800120e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001210:	4618      	mov	r0, r3
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	4613      	mov	r3, r2
 8001224:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	2200      	movs	r2, #0
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	2100      	movs	r1, #0
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff ff37 	bl	80010a4 <spiWriteRead>
	delay( docDelay);
 8001236:	2004      	movs	r0, #4
 8001238:	f000 f86a 	bl	8001310 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	2201      	movs	r2, #1
 8001240:	9200      	str	r2, [sp, #0]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	2170      	movs	r1, #112	; 0x70
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff ff2c 	bl	80010a4 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 800124c:	2078      	movs	r0, #120	; 0x78
 800124e:	f000 f85f 	bl	8001310 <delay>

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	4613      	mov	r3, r2
 800126a:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d11e      	bne.n	80012b6 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fcc2 	bl	8000c04 <__aeabi_ui2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f8c6 	bl	8000414 <__aeabi_f2d>
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <calculateAngle+0xa8>)
 800128e:	f7ff f919 	bl	80004c4 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <calculateAngle+0xac>)
 80012a0:	f7ff fa3a 	bl	8000718 <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fba4 	bl	80009f8 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e020      	b.n	80012f8 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 80012b6:	797b      	ldrb	r3, [r7, #5]
 80012b8:	2b0e      	cmp	r3, #14
 80012ba:	d11d      	bne.n	80012f8 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fca0 	bl	8000c04 <__aeabi_ui2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f8a4 	bl	8000414 <__aeabi_f2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <calculateAngle+0xa8>)
 80012d2:	f7ff f8f7 	bl	80004c4 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <calculateAngle+0xb0>)
 80012e4:	f7ff fa18 	bl	8000718 <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fb82 	bl	80009f8 <__aeabi_d2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 80012f8:	68fb      	ldr	r3, [r7, #12]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40768000 	.word	0x40768000
 8001308:	40b00000 	.word	0x40b00000
 800130c:	40d00000 	.word	0x40d00000

08001310 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f83b 	bl	8001394 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <startDWT>:

int startDWT(){
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 800132a:	f000 f803 	bl	8001334 <DWT_Delay_Init>

}
 800132e:	bf00      	nop
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}

08001334 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <DWT_Delay_Init+0x58>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4a13      	ldr	r2, [pc, #76]	; (800138c <DWT_Delay_Init+0x58>)
 800133e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001342:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <DWT_Delay_Init+0x58>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a10      	ldr	r2, [pc, #64]	; (800138c <DWT_Delay_Init+0x58>)
 800134a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <DWT_Delay_Init+0x5c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <DWT_Delay_Init+0x5c>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800136e:	bf00      	nop
    __ASM volatile ("NOP");
 8001370:	bf00      	nop
    __ASM volatile ("NOP");
 8001372:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800137c:	2300      	movs	r3, #0
 800137e:	e000      	b.n	8001382 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001380:	2301      	movs	r3, #1
    }
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000edf0 	.word	0xe000edf0
 8001390:	e0001000 	.word	0xe0001000

08001394 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <DWT_Delay_us+0x48>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80013a2:	f004 f88d 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <DWT_Delay_us+0x4c>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80013bc:	bf00      	nop
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <DWT_Delay_us+0x48>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad2      	subs	r2, r2, r3
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1acb      	subs	r3, r1, r3
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3f6      	bcc.n	80013be <DWT_Delay_us+0x2a>
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e0001000 	.word	0xe0001000
 80013e0:	431bde83 	.word	0x431bde83

080013e4 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	e9c7 0100 	strd	r0, r1, [r7]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f006 fa4c 	bl	80078c0 <ceilf>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <_ZN7RoboArmC1Eff>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(float defaultAngleT, float defaultDistanseT) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2210      	movs	r2, #16
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fbdb 	bl	8000c0c <__aeabi_i2f>
 8001456:	4602      	mov	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	441a      	add	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	675a      	str	r2, [r3, #116]	; 0x74
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	679a      	str	r2, [r3, #120]	; 0x78
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4a40      	ldr	r2, [pc, #256]	; (800157c <_ZN7RoboArmC1Eff+0x148>)
 800147a:	67da      	str	r2, [r3, #124]	; 0x7c
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4a3f      	ldr	r2, [pc, #252]	; (800157c <_ZN7RoboArmC1Eff+0x148>)
 8001480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f648 6294 	movw	r2, #36500	; 0x8e94
 800148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f247 7224 	movw	r2, #30500	; 0x7724
 8001494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a33      	ldr	r2, [pc, #204]	; (8001580 <_ZN7RoboArmC1Eff+0x14c>)
 80014b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a32      	ldr	r2, [pc, #200]	; (8001584 <_ZN7RoboArmC1Eff+0x150>)
 80014bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	220e      	movs	r2, #14
 80014c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	33b8      	adds	r3, #184	; 0xb8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 feee 	bl	80022ae <_ZN7TMC2209C1Ev>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	33e0      	adds	r3, #224	; 0xe0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fee9 	bl	80022ae <_ZN7TMC2209C1Ev>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fee3 	bl	80022ae <_ZN7TMC2209C1Ev>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	defaultAngle = defaultAngleT;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	defaultDistanse = defaultDistanseT;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	startDWT();
 800156c:	f7ff fedb 	bl	8001326 <startDWT>
}
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	000105b8 	.word	0x000105b8
 8001580:	43520000 	.word	0x43520000
 8001584:	42400000 	.word	0x42400000

08001588 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001598:	2201      	movs	r2, #1
 800159a:	4619      	mov	r1, r3
 800159c:	f003 fb7b 	bl	8004c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015aa:	2201      	movs	r2, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	f003 fb72 	bl	8004c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80015bc:	2201      	movs	r2, #1
 80015be:	4619      	mov	r1, r3
 80015c0:	f003 fb69 	bl	8004c96 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fd5c 	bl	8006088 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2104      	movs	r1, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 fd56 	bl	8006088 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	2108      	movs	r1, #8
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fd50 	bl	8006088 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 fc31 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 fc2c 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fc27 	bl	8005e54 <HAL_TIM_Base_Stop_IT>

	return 0;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_ZN7RoboArm11Move2MotorsEff>:
////    std::cout<<"== Поточна дистанція по енкодеру: "<<distPsteps/steps4OneMM<<" mm"<<std::endl; //поточна дистанція по енкодеру
//
//     return distPsteps/steps4OneMM;
// }

int RoboArm::Move2Motors(float angle, float distance) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b08f      	sub	sp, #60	; 0x3c
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f004 fd30 	bl	8006088 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2104      	movs	r1, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fd2a 	bl	8006088 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);			// остановили прерывание таймеров
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4618      	mov	r0, r3
 800163a:	f004 fc0b 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fc06 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
	// COMMENT 4
//	SetEnable(1, false);
//	SetEnable(2, false);

//	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
	lastPosAngle_Enc = GetAng();
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 fcdd 	bl	8002008 <_ZN7RoboArm6GetAngEv>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	lastPosLinear_Enc = GetLin();
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 fc5a 	bl	8001f10 <_ZN7RoboArm6GetLinEv>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	float lastPosAngle = lastPosAngle_Enc;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lastPosLinear = lastPosLinear_Enc;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28

	float pos_ang = abs(lastPosAngle - angle);
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001678:	f7ff fa12 	bl	8000aa0 <__aeabi_fsub>
 800167c:	4603      	mov	r3, r0
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff febf 	bl	8001402 <_ZSt3absf>
 8001684:	6278      	str	r0, [r7, #36]	; 0x24
	float inverse_pos_ang = abs(360.0 - pos_ang);
 8001686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001688:	f7fe fec4 	bl	8000414 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	f04f 0000 	mov.w	r0, #0
 8001694:	4975      	ldr	r1, [pc, #468]	; (800186c <_ZN7RoboArm11Move2MotorsEff+0x25c>)
 8001696:	f7fe fd5d 	bl	8000154 <__aeabi_dsub>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fe9f 	bl	80013e4 <_ZSt3absd>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f9a3 	bl	80009f8 <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	623b      	str	r3, [r7, #32]
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 80016b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b8:	6a38      	ldr	r0, [r7, #32]
 80016ba:	f7ff fc99 	bl	8000ff0 <__aeabi_fcmplt>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <_ZN7RoboArm11Move2MotorsEff+0xde>
		actualPosAngle = inverse_pos_ang;
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016cc:	f7ff fc90 	bl	8000ff0 <__aeabi_fcmplt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <_ZN7RoboArm11Move2MotorsEff+0xd2>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.disableInverseMotorDirection();
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	33e0      	adds	r3, #224	; 0xe0
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 ff14 	bl	8002508 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80016e0:	e019      	b.n	8001716 <_ZN7RoboArm11Move2MotorsEff+0x106>
		} else {//if (lastPosAngle > angle) {
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);

			tmcd_angle.enableInverseMotorDirection();
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	33e0      	adds	r3, #224	; 0xe0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fefe 	bl	80024e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80016ec:	e013      	b.n	8001716 <_ZN7RoboArm11Move2MotorsEff+0x106>
		}
	} else {
		actualPosAngle = pos_ang;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016f6:	f7ff fc7b 	bl	8000ff0 <__aeabi_fcmplt>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <_ZN7RoboArm11Move2MotorsEff+0xfc>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.enableInverseMotorDirection();
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	33e0      	adds	r3, #224	; 0xe0
 8001704:	4618      	mov	r0, r3
 8001706:	f000 feef 	bl	80024e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
 800170a:	e004      	b.n	8001716 <_ZN7RoboArm11Move2MotorsEff+0x106>
		} else {//if (lastPosAngle > angle) {
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.disableInverseMotorDirection();
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	33e0      	adds	r3, #224	; 0xe0
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fef9 	bl	8002508 <_ZN7TMC220928disableInverseMotorDirectionEv>
		}
	}

	if (lastPosLinear < distance) {
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800171a:	f7ff fc69 	bl	8000ff0 <__aeabi_fcmplt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <_ZN7RoboArm11Move2MotorsEff+0x120>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
		tmcd_linear.enableInverseMotorDirection();
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	33b8      	adds	r3, #184	; 0xb8
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fedd 	bl	80024e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
 800172e:	e004      	b.n	800173a <_ZN7RoboArm11Move2MotorsEff+0x12a>
	} else {//if (lastPosLinear > distance) {
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
		tmcd_linear.disableInverseMotorDirection();
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	33b8      	adds	r3, #184	; 0xb8
 8001734:	4618      	mov	r0, r3
 8001736:	f000 fee7 	bl	8002508 <_ZN7TMC220928disableInverseMotorDirectionEv>
	}

	float actualPosDistance = abs(lastPosLinear - distance);
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800173e:	f7ff f9af 	bl	8000aa0 <__aeabi_fsub>
 8001742:	4603      	mov	r3, r0
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fe5c 	bl	8001402 <_ZSt3absf>
 800174a:	61f8      	str	r0, [r7, #28]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa57 	bl	8000c0c <__aeabi_i2f>
 800175e:	4603      	mov	r3, r0
 8001760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff faa6 	bl	8000cb4 <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	4941      	ldr	r1, [pc, #260]	; (8001870 <_ZN7RoboArm11Move2MotorsEff+0x260>)
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fb55 	bl	8000e1c <__aeabi_fdiv>
 8001772:	4603      	mov	r3, r0
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fc63 	bl	8001040 <__aeabi_f2uiz>
 800177a:	4602      	mov	r2, r0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	679a      	str	r2, [r3, #120]	; 0x78

	distPsteps = actualPosDistance * steps4OneMM; //кількість кроків для такої дистанції
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa41 	bl	8000c0c <__aeabi_i2f>
 800178a:	4603      	mov	r3, r0
 800178c:	69f9      	ldr	r1, [r7, #28]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fa90 	bl	8000cb4 <__aeabi_fmul>
 8001794:	4603      	mov	r3, r0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fc52 	bl	8001040 <__aeabi_f2uiz>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	675a      	str	r2, [r3, #116]	; 0x74

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 300;
 80017a2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
	if (State == ArmCorrectPosition){
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 80017ae:	2b16      	cmp	r3, #22
 80017b0:	d102      	bne.n	80017b8 <_ZN7RoboArm11Move2MotorsEff+0x1a8>
		periodM1 = 600;
 80017b2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
	}
	uint32_t psc = 72 - 1;
 80017b8:	2347      	movs	r3, #71	; 0x47
 80017ba:	61bb      	str	r3, [r7, #24]

	float delimiter = 1;
 80017bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017c0:	617b      	str	r3, [r7, #20]
	float mnoj = 1;
 80017c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017c6:	613b      	str	r3, [r7, #16]

	if (anglePsteps >= distPsteps) {
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d34f      	bcc.n	8001874 <_ZN7RoboArm11Move2MotorsEff+0x264>

		htim1M1->Instance->PSC = psc;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1 / 2;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017f0:	0852      	lsrs	r2, r2, #1
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fa03 	bl	8000c04 <__aeabi_ui2f>
 80017fe:	4604      	mov	r4, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f9fd 	bl	8000c04 <__aeabi_ui2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fb04 	bl	8000e1c <__aeabi_fdiv>
 8001814:	4603      	mov	r3, r0
 8001816:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800181a:	f7ff f9f3 	bl	8000c04 <__aeabi_ui2f>
 800181e:	4603      	mov	r3, r0
 8001820:	6979      	ldr	r1, [r7, #20]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fa46 	bl	8000cb4 <__aeabi_fmul>
 8001828:	4603      	mov	r3, r0
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fdf5 	bl	800141a <_ZSt4ceilf>
 8001830:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	681c      	ldr	r4, [r3, #0]
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	f7ff fbfc 	bl	8001040 <__aeabi_f2uiz>
 8001848:	4603      	mov	r3, r0
 800184a:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 800184c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001850:	6938      	ldr	r0, [r7, #16]
 8001852:	f7ff fae3 	bl	8000e1c <__aeabi_fdiv>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	681c      	ldr	r4, [r3, #0]
 8001860:	4610      	mov	r0, r2
 8001862:	f7ff fbed 	bl	8001040 <__aeabi_f2uiz>
 8001866:	4603      	mov	r3, r0
 8001868:	63a3      	str	r3, [r4, #56]	; 0x38
 800186a:	e054      	b.n	8001916 <_ZN7RoboArm11Move2MotorsEff+0x306>
 800186c:	40768000 	.word	0x40768000
 8001870:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187c:	429a      	cmp	r2, r3
 800187e:	d24a      	bcs.n	8001916 <_ZN7RoboArm11Move2MotorsEff+0x306>

		htim2M2->Instance->PSC = psc;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800189c:	0852      	lsrs	r2, r2, #1
 800189e:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f9ad 	bl	8000c04 <__aeabi_ui2f>
 80018aa:	4604      	mov	r4, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f9a7 	bl	8000c04 <__aeabi_ui2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff faae 	bl	8000e1c <__aeabi_fdiv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 80018c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018c6:	f7ff f99d 	bl	8000c04 <__aeabi_ui2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	6979      	ldr	r1, [r7, #20]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f9f0 	bl	8000cb4 <__aeabi_fmul>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fd9f 	bl	800141a <_ZSt4ceilf>
 80018dc:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	681c      	ldr	r4, [r3, #0]
 80018ee:	6938      	ldr	r0, [r7, #16]
 80018f0:	f7ff fba6 	bl	8001040 <__aeabi_f2uiz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 80018f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018fc:	6938      	ldr	r0, [r7, #16]
 80018fe:	f7ff fa8d 	bl	8000e1c <__aeabi_fdiv>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	681c      	ldr	r4, [r3, #0]
 800190c:	4610      	mov	r0, r2
 800190e:	f7ff fb97 	bl	8001040 <__aeabi_f2uiz>
 8001912:	4603      	mov	r3, r0
 8001914:	6363      	str	r3, [r4, #52]	; 0x34
	}

	stateMoveM1 = true;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	stateMoveM2 = true;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	// COMMENT 5
//	SetEnable(1, true);
//	SetEnable(2, true);

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fb0f 	bl	8005f50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	2104      	movs	r1, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f004 fb09 	bl	8005f50 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fa3a 	bl	8005dbc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	4618      	mov	r0, r3
 800194e:	f004 fa35 	bl	8005dbc <HAL_TIM_Base_Start_IT>

	return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	373c      	adds	r7, #60	; 0x3c
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}

0800195c <_ZN7RoboArm14Set2StepMotorsEfifi>:

int RoboArm::Set2StepMotors(float stepLinT, int periodLinT, float stepAngleT,
		int periodAngleT) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
//	if (stepAngleT < 0) {
//		temp_val = -1.0*stepAngleT;
//	}


	anglePsteps=abs(stepAngleT);
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f7ff fd49 	bl	8001402 <_ZSt3absf>
 8001970:	4603      	mov	r3, r0
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fb64 	bl	8001040 <__aeabi_f2uiz>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	679a      	str	r2, [r3, #120]	; 0x78
	distPsteps=abs(stepLinT);
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f7ff fd3f 	bl	8001402 <_ZSt3absf>
 8001984:	4603      	mov	r3, r0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb5a 	bl	8001040 <__aeabi_f2uiz>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	675a      	str	r2, [r3, #116]	; 0x74

	uint32_t psc = 72 - 1;
 8001992:	2347      	movs	r3, #71	; 0x47
 8001994:	61fb      	str	r3, [r7, #28]

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fb73 	bl	8006088 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	2104      	movs	r1, #4
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fb6d 	bl	8006088 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT (htim1M1);			// остановили прерывание таймеров
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fa4e 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (htim2M2);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fa49 	bl	8005e54 <HAL_TIM_Base_Stop_IT>

	//COMMENT 6
//	SetEnable(1, false);
//	SetEnable(2, false);

	float tempAngDir = 0, tempLinDir = 0;
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
	if (stepAngleT < 0) {
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f7ff fb0c 	bl	8000ff0 <__aeabi_fcmplt>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <_ZN7RoboArm14Set2StepMotorsEfifi+0x8e>
		tmcd_angle.disableInverseMotorDirection(); // TODO change on rpi?
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	33e0      	adds	r3, #224	; 0xe0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fd90 	bl	8002508 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80019e8:	e004      	b.n	80019f4 <_ZN7RoboArm14Set2StepMotorsEfifi+0x98>
//		tempAngDir = -1;
	} else {//if (stepAngleT > 0) {
		tmcd_angle.enableInverseMotorDirection();  // TODO
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	33e0      	adds	r3, #224	; 0xe0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fd7a 	bl	80024e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
//		tempAngDir = 1;
	}

	if (stepLinT < 0) {
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f7ff faf9 	bl	8000ff0 <__aeabi_fcmplt>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <_ZN7RoboArm14Set2StepMotorsEfifi+0xb4>
		tmcd_linear.enableInverseMotorDirection();
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	33b8      	adds	r3, #184	; 0xb8
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fd6d 	bl	80024e8 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001a0e:	e004      	b.n	8001a1a <_ZN7RoboArm14Set2StepMotorsEfifi+0xbe>
//		tempLinDir = -1;
	} else {//if (stepLinT > 0) {
		tmcd_linear.disableInverseMotorDirection();
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	33b8      	adds	r3, #184	; 0xb8
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fd77 	bl	8002508 <_ZN7TMC220928disableInverseMotorDirectionEv>
//		tempLinDir = 1;
	}

	if (periodAngleT % 2 != 0) { periodAngleT += 1;}
 8001a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <_ZN7RoboArm14Set2StepMotorsEfifi+0xce>
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	3301      	adds	r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
	if (periodLinT % 2 != 0) { periodLinT += 1;}
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <_ZN7RoboArm14Set2StepMotorsEfifi+0xde>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3301      	adds	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]

	htim1M1->Instance->PSC = psc;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
	htim1M1->Instance->ARR = periodAngleT;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1M1->Instance->CCR1 = periodAngleT / 2;
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	0fda      	lsrs	r2, r3, #31
 8001a52:	4413      	add	r3, r2
 8001a54:	105b      	asrs	r3, r3, #1
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	635a      	str	r2, [r3, #52]	; 0x34

	htim2M2->Instance->PSC = psc;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
	htim2M2->Instance->ARR = periodLinT;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
	htim2M2->Instance->CCR2 = periodLinT / 2;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0fda      	lsrs	r2, r3, #31
 8001a78:	4413      	add	r3, r2
 8001a7a:	105b      	asrs	r3, r3, #1
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38


	return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZN7RoboArm15Move2StepMotorsEv>:

int RoboArm::Move2StepMotors(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

	stateMoveM1 = true;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	stateMoveM2 = true;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	// COMMENT 7
//	SetEnable(1, true);
//	SetEnable(2, true);

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fa4e 	bl	8005f50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2104      	movs	r1, #4
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fa48 	bl	8005f50 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 f979 	bl	8005dbc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 f974 	bl	8005dbc <HAL_TIM_Base_Start_IT>

	return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_ZN7RoboArm13SetBuserStateEi>:
return 0;
}



int RoboArm::SetBuserState(int State) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	//State 1......9
	if (State > 0 && State < 10) {
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	dd24      	ble.n	8001b38 <_ZN7RoboArm13SetBuserStateEi+0x5a>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	dc21      	bgt.n	8001b38 <_ZN7RoboArm13SetBuserStateEi+0x5a>
		for (int t = 0; t <= State; t++) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e01a      	b.n	8001b30 <_ZN7RoboArm13SetBuserStateEi+0x52>
			for (int i = 0; i <= 200; i++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	e00e      	b.n	8001b1e <_ZN7RoboArm13SetBuserStateEi+0x40>
				HAL_GPIO_TogglePin(Buser_GPIO_Port_Ind, Buser_Pin_Ind);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f003 f8da 	bl	8004cc6 <HAL_GPIO_TogglePin>
				HAL_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f002 fd48 	bl	80045a8 <HAL_Delay>
			for (int i = 0; i <= 200; i++) {
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2bc8      	cmp	r3, #200	; 0xc8
 8001b22:	dded      	ble.n	8001b00 <_ZN7RoboArm13SetBuserStateEi+0x22>
			}
			HAL_Delay(100);
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	f002 fd3f 	bl	80045a8 <HAL_Delay>
		for (int t = 0; t <= State; t++) {
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dde0      	ble.n	8001afa <_ZN7RoboArm13SetBuserStateEi+0x1c>
		}
	}
	return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZN7RoboArm15GetGripperStateEv>:
	posNowDistance = defaultDistanse;

	return 0;
}

int RoboArm::GetGripperState() {
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	//EndCap1_Pin - зацеп зацеплен - ВЕРХНИЙ НАЖАт
	//EndCap2_Pin - зацеп расцеплен, можно двигать рукой - НИЖНИЙ

	GPIO_PinState pin_UP, pin_DOWN;

	pin_UP = HAL_GPIO_ReadPin(EndCap1_GPIO_PortG, EndCap1_PinG);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f003 f886 	bl	8004c68 <HAL_GPIO_ReadPin>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
	pin_DOWN = HAL_GPIO_ReadPin(EndCap2_GPIO_PortG, EndCap2_PinG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f003 f87b 	bl	8004c68 <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73bb      	strb	r3, [r7, #14]

	if (pin_UP == GPIO_PIN_SET && pin_DOWN == GPIO_PIN_RESET) {
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d104      	bne.n	8001b86 <_ZN7RoboArm15GetGripperStateEv+0x44>
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <_ZN7RoboArm15GetGripperStateEv+0x44>
		return 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <_ZN7RoboArm15GetGripperStateEv+0x64>
	} else if (pin_DOWN == GPIO_PIN_SET && pin_UP == GPIO_PIN_RESET) {
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d104      	bne.n	8001b96 <_ZN7RoboArm15GetGripperStateEv+0x54>
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <_ZN7RoboArm15GetGripperStateEv+0x54>
		return 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e007      	b.n	8001ba6 <_ZN7RoboArm15GetGripperStateEv+0x64>
	} else if (isLoose == true) {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <_ZN7RoboArm15GetGripperStateEv+0x62>
		return 2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e000      	b.n	8001ba6 <_ZN7RoboArm15GetGripperStateEv+0x64>
	} else {
		return 3; //error
 8001ba4:	2303      	movs	r3, #3
	}
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>:

int RoboArm::SetSettGripper(GPIO_TypeDef *EndCap1_GPIO_PortT,
		uint16_t EndCap1_PinT, GPIO_TypeDef *EndCap2_GPIO_PortT,
		uint16_t EndCap2_PinT, GPIO_TypeDef *EndCap3_GPIO_PortT,
		uint16_t EndCap3_PinT, GPIO_TypeDef *EndCap4_GPIO_PortT,
		uint16_t EndCap4_PinT) {
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]

	EndCap1_GPIO_PortG = EndCap1_GPIO_PortT;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	64da      	str	r2, [r3, #76]	; 0x4c
	EndCap1_PinG = EndCap1_PinT;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	88fa      	ldrh	r2, [r7, #6]
 8001bc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	EndCap2_GPIO_PortG = EndCap2_GPIO_PortT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
	EndCap2_PinG = EndCap2_PinT;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8b3a      	ldrh	r2, [r7, #24]
 8001bd6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	EndCap3_GPIO_PortG = EndCap3_GPIO_PortT;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c
	EndCap3_PinG = EndCap3_PinT;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8c3a      	ldrh	r2, [r7, #32]
 8001be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	EndCap4_GPIO_PortG = EndCap4_GPIO_PortT;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bec:	665a      	str	r2, [r3, #100]	; 0x64
	EndCap4_PinG = EndCap4_PinT;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	return 0;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
	...

08001c04 <_ZN7RoboArm10SetGripperEii>:

int RoboArm::SetGripper(int start_state, int opcl) {
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]

	//Встановити захват
	//TODO додати перевірку чи точно зупинились мотори
	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 fa36 	bl	8006088 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2104      	movs	r1, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fa30 	bl	8006088 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 f911 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 f90c 	bl	8005e54 <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_2);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	2104      	movs	r1, #4
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 fa20 	bl	8006088 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim3M3);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 f901 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
//	SetEnable(3, false);

	//Зупинили все, 1 та 2й на утриманні
	//Обираємо напрям
	//TODO loose state
	isLoose = false;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	lastGripState = start_state;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	if (opcl == 2) {
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d104      	bne.n	8001c74 <_ZN7RoboArm10SetGripperEii+0x70>
		toLoose = true;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8001c72:	e003      	b.n	8001c7c <_ZN7RoboArm10SetGripperEii+0x78>
	} else {
		toLoose = false;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	}
	if ((opcl == 1) || (opcl == 2 && start_state == 0)) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d005      	beq.n	8001c8e <_ZN7RoboArm10SetGripperEii+0x8a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d10b      	bne.n	8001ca0 <_ZN7RoboArm10SetGripperEii+0x9c>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d108      	bne.n	8001ca0 <_ZN7RoboArm10SetGripperEii+0x9c>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_SET);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c96:	2201      	movs	r2, #1
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f002 fffc 	bl	8004c96 <HAL_GPIO_WritePin>
 8001c9e:	e010      	b.n	8001cc2 <_ZN7RoboArm10SetGripperEii+0xbe>
	} else if ((opcl == 0) || (opcl == 2 && start_state == 1)) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <_ZN7RoboArm10SetGripperEii+0xae>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d10a      	bne.n	8001cc2 <_ZN7RoboArm10SetGripperEii+0xbe>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <_ZN7RoboArm10SetGripperEii+0xbe>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_RESET);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f002 ffea 	bl	8004c96 <HAL_GPIO_WritePin>
	}

	//Підібрати кроки та швидкість
	float periodM3 = 30.00;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <_ZN7RoboArm10SetGripperEii+0x120>)
 8001cc4:	617b      	str	r3, [r7, #20]
	uint32_t psc3 = 72 - 1;
 8001cc6:	2347      	movs	r3, #71	; 0x47
 8001cc8:	613b      	str	r3, [r7, #16]
	htim3M3->Instance->PSC = psc3;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
	htim3M3->Instance->ARR = periodM3;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	681c      	ldr	r4, [r3, #0]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff f9b0 	bl	8001040 <__aeabi_f2uiz>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3M3->Instance->CCR2 = periodM3 / 2;
 8001ce4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7ff f897 	bl	8000e1c <__aeabi_fdiv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	681c      	ldr	r4, [r3, #0]
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f7ff f9a1 	bl	8001040 <__aeabi_f2uiz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	63a3      	str	r3, [r4, #56]	; 0x38

	// COMMENT 9
//	SetEnable(3, true);
	HAL_TIM_PWM_Start(htim3M3, TIM_CHANNEL_2);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	2104      	movs	r1, #4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 f921 	bl	8005f50 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim3M3);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 f852 	bl	8005dbc <HAL_TIM_Base_Start_IT>
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	41f00000 	.word	0x41f00000

08001d28 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::setPrintState(bool state) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8001d42:	e003      	b.n	8001d4c <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	}
	return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 8001d6e:	2300      	movs	r3, #0
	}
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <_ZN7RoboArm17SetMicrosteps4AllEh>:

int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step) {
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	33e0      	adds	r3, #224	; 0xe0
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fb0e 	bl	80023b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fb06 	bl	80023b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	33b8      	adds	r3, #184	; 0xb8
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 faff 	bl	80023b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>:

int RoboArm::SetLinAngMicrostepsAndParams(uint8_t microsteps_per_step) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	33e0      	adds	r3, #224	; 0xe0
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 faed 	bl	80023b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
//	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	33b8      	adds	r3, #184	; 0xb8
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fae6 	bl	80023b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	int steps = 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<microsteps_per_step; i++){
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	e005      	b.n	8001dfa <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh+0x3e>
		steps *= 2;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<microsteps_per_step; i++){
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	3301      	adds	r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf5      	blt.n	8001dee <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh+0x32>
	}

	drvMicroSteps = steps;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	601a      	str	r2, [r3, #0]
//	gripperPsteps = 523*arm.drvMicroSteps;
	steps4OneMM = motorStep * drvMicroSteps / (beltRatio * spoolStep);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	609a      	str	r2, [r3, #8]

	return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	887a      	ldrh	r2, [r7, #2]
 8001e42:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8bba      	ldrh	r2, [r7, #28]
 8001e4a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	ResolutionEncoders = ResolutionEncodersT;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f7ff f9ea 	bl	800125c <calculateAngle>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_ZN7RoboArm14GetPosEncodersEh>:
	}
	pos = ang * distMax / 360.0;
	return pos;
}

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d002      	beq.n	8001eaa <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d017      	beq.n	8001ed8 <_ZN7RoboArm14GetPosEncodersEh+0x46>
 8001ea8:	e02d      	b.n	8001f06 <_ZN7RoboArm14GetPosEncodersEh+0x74>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ec2:	f7ff f91b 	bl	80010fc <getPositionSPI>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				ResolutionEncoders);
		return posNowEnc1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ed6:	e017      	b.n	8001f08 <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ef0:	f7ff f904 	bl	80010fc <getPositionSPI>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				ResolutionEncoders);
		return posNowEnc2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001f04:	e000      	b.n	8001f08 <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	default:
		return 1;
 8001f06:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_ZN7RoboArm6GetLinEv>:

float RoboArm::GetLin() {
 8001f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001f1e:	2102      	movs	r1, #2
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffb6 	bl	8001e92 <_ZN7RoboArm14GetPosEncodersEh>
 8001f26:	6138      	str	r0, [r7, #16]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001f28:	e004      	b.n	8001f34 <_ZN7RoboArm6GetLinEv+0x24>
		posnowT_2 = GetPosEncoders(2); //try again
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ffb0 	bl	8001e92 <_ZN7RoboArm14GetPosEncodersEh>
 8001f32:	6138      	str	r0, [r7, #16]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d107      	bne.n	8001f4e <_ZN7RoboArm6GetLinEv+0x3e>
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	dc01      	bgt.n	8001f4e <_ZN7RoboArm6GetLinEv+0x3e>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <_ZN7RoboArm6GetLinEv+0x40>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ea      	bne.n	8001f2a <_ZN7RoboArm6GetLinEv+0x1a>

	float pos = -1.0;
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <_ZN7RoboArm6GetLinEv+0xec>)
 8001f56:	60fb      	str	r3, [r7, #12]
	float enc2mm = 16384.0 / (2.0 * 20.0 * 33.0 * 33.0 / (13.0 * 13.0)); //число одиниць енкодера на 1 мм лінійного руху
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <_ZN7RoboArm6GetLinEv+0xf0>)
 8001f5a:	60bb      	str	r3, [r7, #8]

	// 0-5000 on encoder = 124mm-48mm;
	if (posnowT_2 <= 5000) {
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d812      	bhi.n	8001f8c <_ZN7RoboArm6GetLinEv+0x7c>
		//the motor is somewhere between 48mm and 124mm
		pos = defaultDistanse - float(posnowT_2) / enc2mm;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 8001f6c:	6938      	ldr	r0, [r7, #16]
 8001f6e:	f7fe fe49 	bl	8000c04 <__aeabi_ui2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe ff50 	bl	8000e1c <__aeabi_fdiv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7fe fd8d 	bl	8000aa0 <__aeabi_fsub>
 8001f86:	4603      	mov	r3, r0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	e030      	b.n	8001fee <_ZN7RoboArm6GetLinEv+0xde>

	} else { //if (posnowT_2 <= 9000){ //приблизно по факту десь +- 8963
		pos = defaultDistanse + (16384.0 - float(posnowT_2)) / enc2mm;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fa3e 	bl	8000414 <__aeabi_f2d>
 8001f98:	4604      	mov	r4, r0
 8001f9a:	460d      	mov	r5, r1
 8001f9c:	6938      	ldr	r0, [r7, #16]
 8001f9e:	f7fe fe31 	bl	8000c04 <__aeabi_ui2f>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fa35 	bl	8000414 <__aeabi_f2d>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	4914      	ldr	r1, [pc, #80]	; (8002004 <_ZN7RoboArm6GetLinEv+0xf4>)
 8001fb4:	f7fe f8ce 	bl	8000154 <__aeabi_dsub>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4690      	mov	r8, r2
 8001fbe:	4699      	mov	r9, r3
 8001fc0:	68b8      	ldr	r0, [r7, #8]
 8001fc2:	f7fe fa27 	bl	8000414 <__aeabi_f2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4640      	mov	r0, r8
 8001fcc:	4649      	mov	r1, r9
 8001fce:	f7fe fba3 	bl	8000718 <__aeabi_ddiv>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f7fe f8bd 	bl	8000158 <__adddf3>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fd07 	bl	80009f8 <__aeabi_d2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	60fb      	str	r3, [r7, #12]
		// the motor is somewhere 124...end of the hand

	}


	return pos;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ffa:	bf00      	nop
 8001ffc:	bf800000 	.word	0xbf800000
 8002000:	427e42ab 	.word	0x427e42ab
 8002004:	40d00000 	.word	0x40d00000

08002008 <_ZN7RoboArm6GetAngEv>:

float RoboArm::GetAng() {
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8002014:	2101      	movs	r1, #1
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff3b 	bl	8001e92 <_ZN7RoboArm14GetPosEncodersEh>
 800201c:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 800201e:	e004      	b.n	800202a <_ZN7RoboArm6GetAngEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8002020:	2101      	movs	r1, #1
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff35 	bl	8001e92 <_ZN7RoboArm14GetPosEncodersEh>
 8002028:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002030:	4293      	cmp	r3, r2
 8002032:	d107      	bne.n	8002044 <_ZN7RoboArm6GetAngEv+0x3c>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b05      	cmp	r3, #5
 800203e:	dc01      	bgt.n	8002044 <_ZN7RoboArm6GetAngEv+0x3c>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <_ZN7RoboArm6GetAngEv+0x3e>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ea      	bne.n	8002020 <_ZN7RoboArm6GetAngEv+0x18>

//	if (posnowT_1 == 0xFFFF) {
//			return -1;
//	}

	float ang_actual = GetAngleEncoders(posnowT_1);
 800204a:	6939      	ldr	r1, [r7, #16]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff0d 	bl	8001e6c <_ZN7RoboArm16GetAngleEncodersEm>
 8002052:	60b8      	str	r0, [r7, #8]
	float ang = 360 - ang_actual + defaultAngle; //arm.ShiftZeroAng(ang_actual);
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	4810      	ldr	r0, [pc, #64]	; (8002098 <_ZN7RoboArm6GetAngEv+0x90>)
 8002058:	f7fe fd22 	bl	8000aa0 <__aeabi_fsub>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f7fe fd1b 	bl	8000aa4 <__addsf3>
 800206e:	4603      	mov	r3, r0
 8002070:	60fb      	str	r3, [r7, #12]
	if (ang > 360.0)
 8002072:	4909      	ldr	r1, [pc, #36]	; (8002098 <_ZN7RoboArm6GetAngEv+0x90>)
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7fe ffd9 	bl	800102c <__aeabi_fcmpgt>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <_ZN7RoboArm6GetAngEv+0x84>
		ang -= 360.0;
 8002080:	4905      	ldr	r1, [pc, #20]	; (8002098 <_ZN7RoboArm6GetAngEv+0x90>)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7fe fd0c 	bl	8000aa0 <__aeabi_fsub>
 8002088:	4603      	mov	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
	return ang;
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	43b40000 	.word	0x43b40000

0800209c <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	HAL_Delay(300);
 80020a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020a8:	f002 fa7e 	bl	80045a8 <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80020c4:	f7ff f81a 	bl	80010fc <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80020e0:	f7ff f80c 	bl	80010fc <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80020f6:	461a      	mov	r2, r3
 80020f8:	f7ff f88e 	bl	8001218 <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800210e:	461a      	mov	r2, r3
 8002110:	f7ff f882 	bl	8001218 <setZeroSPI>
	HAL_Delay(250);
 8002114:	20fa      	movs	r0, #250	; 0xfa
 8002116:	f002 fa47 	bl	80045a8 <HAL_Delay>
	return 0;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>:
		uint16_t Dir2_Pin_M2T, GPIO_TypeDef *Dir3_GPIO_Port_M3T,
		uint16_t Dir3_Pin_M3T, GPIO_TypeDef *En1_GPIO_Port_M1T,
		uint16_t En1_Pin_M1T, GPIO_TypeDef *En2_GPIO_Port_M2T,
		uint16_t En2_Pin_M2T, GPIO_TypeDef *En3_GPIO_Port_M3T,
		uint16_t En3_Pin_M3T, GPIO_TypeDef *Buser_GPIO_Port_IndT,
		uint16_t Buser_Pin_IndT) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
	htim2M2 = &htim2;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	611a      	str	r2, [r3, #16]
	htim3M3 = &htim3;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	615a      	str	r2, [r3, #20]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	61da      	str	r2, [r3, #28]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8c3a      	ldrh	r2, [r7, #32]
 800214e:	841a      	strh	r2, [r3, #32]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800215a:	851a      	strh	r2, [r3, #40]	; 0x28
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002166:	861a      	strh	r2, [r3, #48]	; 0x30

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
	En1_Pin_M1 = En1_Pin_M1T;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002172:	871a      	strh	r2, [r3, #56]	; 0x38
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002178:	63da      	str	r2, [r3, #60]	; 0x3c
	En2_Pin_M2 = En2_Pin_M2T;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002188:	645a      	str	r2, [r3, #68]	; 0x44
	En3_Pin_M3 = En3_Pin_M3T;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002190:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
	En3_Pin_M3 = En3_Pin_M3T;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80021a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	Buser_GPIO_Port_Ind = Buser_GPIO_Port_IndT;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021a8:	66da      	str	r2, [r3, #108]	; 0x6c
	Buser_Pin_Ind = Buser_Pin_IndT;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80021b0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	SetEnable(1, true);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2101      	movs	r1, #1
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f83e 	bl	800223a <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 80021be:	2201      	movs	r2, #1
 80021c0:	2102      	movs	r1, #2
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f839 	bl	800223a <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 80021c8:	2201      	movs	r2, #1
 80021ca:	2103      	movs	r1, #3
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f834 	bl	800223a <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 80021d8:	2300      	movs	r3, #0
 80021da:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	f000 f881 	bl	80022e6 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_2);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f503 7084 	add.w	r0, r3, #264	; 0x108
 80021ea:	2302      	movs	r3, #2
 80021ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	f000 f878 	bl	80022e6 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_1);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 80021fc:	2301      	movs	r3, #1
 80021fe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	f000 f86f 	bl	80022e6 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33e0      	adds	r3, #224	; 0xe0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f87f 	bl	8002310 <_ZN7TMC22096enableEv>
	tmcd_gripper.enable();
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f879 	bl	8002310 <_ZN7TMC22096enableEv>
	tmcd_linear.enable();
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	33b8      	adds	r3, #184	; 0xb8
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f874 	bl	8002310 <_ZN7TMC22096enableEv>

	SetMicrosteps4All(7);
 8002228:	2107      	movs	r1, #7
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff fda5 	bl	8001d7a <_ZN7RoboArm17SetMicrosteps4AllEh>
	// COMMENT 1
//	SetEnable(1, false);
//	SetEnable(2, false);
//	SetEnable(3, false);

	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
 8002246:	4613      	mov	r3, r2
 8002248:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 800224a:	787b      	ldrb	r3, [r7, #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e001      	b.n	800225a <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d108      	bne.n	8002272 <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	4619      	mov	r1, r3
 800226c:	f002 fd13 	bl	8004c96 <HAL_GPIO_WritePin>
 8002270:	e018      	b.n	80022a4 <_ZN7RoboArm9SetEnableEtb+0x6a>
	} else if (numMotor == 2) {
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d109      	bne.n	800228c <_ZN7RoboArm9SetEnableEtb+0x52>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	4619      	mov	r1, r3
 8002286:	f002 fd06 	bl	8004c96 <HAL_GPIO_WritePin>
 800228a:	e00b      	b.n	80022a4 <_ZN7RoboArm9SetEnableEtb+0x6a>
	} else if (numMotor == 3) {
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d108      	bne.n	80022a4 <_ZN7RoboArm9SetEnableEtb+0x6a>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	4619      	mov	r1, r3
 80022a0:	f002 fcf9 	bl	8004c96 <HAL_GPIO_WritePin>
	}

	return 0;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c4:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d2:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	761a      	strb	r2, [r3, #24]
}
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	461a      	mov	r2, r3
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f911 	bl	8002528 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <_ZN7TMC22096enableEv>:
//
////  pinMode(hardware_enable_pin_, OUTPUT);
////  digitalWrite(hardware_enable_pin_, HIGH);
//}
//
void TMC2209::enable() {
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0f      	blt.n	8002342 <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	2120      	movs	r1, #32
 8002326:	4810      	ldr	r0, [pc, #64]	; (8002368 <_ZN7TMC22096enableEv+0x58>)
 8002328:	f002 fcb5 	bl	8004c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2101      	movs	r1, #1
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <_ZN7TMC22096enableEv+0x58>)
 8002332:	f002 fcb0 	bl	8004c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233c:	480b      	ldr	r0, [pc, #44]	; (800236c <_ZN7TMC22096enableEv+0x5c>)
 800233e:	f002 fcaa 	bl	8004c96 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	b2d9      	uxtb	r1, r3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	7f13      	ldrb	r3, [r2, #28]
 8002352:	f361 0303 	bfi	r3, r1, #0, #4
 8002356:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fa89 	bl	8002870 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40010800 	.word	0x40010800
 800236c:	40010c00 	.word	0x40010c00

08002370 <_ZN7TMC22099constrainEttt>:
	}
	chopper_config_.toff = TOFF_DISABLE;
	writeStoredChopperConfig();
}
//
uint16_t TMC2209::constrain(uint16_t x, uint16_t y, uint16_t z) {
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	817b      	strh	r3, [r7, #10]
 8002382:	460b      	mov	r3, r1
 8002384:	813b      	strh	r3, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
	if (x < y) {
 800238a:	897a      	ldrh	r2, [r7, #10]
 800238c:	893b      	ldrh	r3, [r7, #8]
 800238e:	429a      	cmp	r2, r3
 8002390:	d201      	bcs.n	8002396 <_ZN7TMC22099constrainEttt+0x26>
		return y;
 8002392:	893b      	ldrh	r3, [r7, #8]
 8002394:	e006      	b.n	80023a4 <_ZN7TMC22099constrainEttt+0x34>
	} else if (x > z) {
 8002396:	897a      	ldrh	r2, [r7, #10]
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	429a      	cmp	r2, r3
 800239c:	d901      	bls.n	80023a2 <_ZN7TMC22099constrainEttt+0x32>
		return z;
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	e000      	b.n	80023a4 <_ZN7TMC22099constrainEttt+0x34>
	} else {
		return x;
 80023a2:	897b      	ldrh	r3, [r7, #10]
	}
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
	...

080023b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
//		++exponent;
//	}
//	setMicrostepsPerStepPowerOfTwo(exponent);
//}
//
void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	2b07      	cmp	r3, #7
 80023c0:	d84a      	bhi.n	8002458 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023e9 	.word	0x080023e9
 80023cc:	080023f7 	.word	0x080023f7
 80023d0:	08002405 	.word	0x08002405
 80023d4:	08002413 	.word	0x08002413
 80023d8:	08002421 	.word	0x08002421
 80023dc:	0800242f 	.word	0x0800242f
 80023e0:	0800243d 	.word	0x0800243d
 80023e4:	0800244b 	.word	0x0800244b
	case 0: {
		chopper_config_.mres = MRES_001;
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	7fd3      	ldrb	r3, [r2, #31]
 80023ec:	2108      	movs	r1, #8
 80023ee:	f361 0303 	bfi	r3, r1, #0, #4
 80023f2:	77d3      	strb	r3, [r2, #31]
		break;
 80023f4:	e036      	b.n	8002464 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	7fd3      	ldrb	r3, [r2, #31]
 80023fa:	2107      	movs	r1, #7
 80023fc:	f361 0303 	bfi	r3, r1, #0, #4
 8002400:	77d3      	strb	r3, [r2, #31]
		break;
 8002402:	e02f      	b.n	8002464 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	7fd3      	ldrb	r3, [r2, #31]
 8002408:	2106      	movs	r1, #6
 800240a:	f361 0303 	bfi	r3, r1, #0, #4
 800240e:	77d3      	strb	r3, [r2, #31]
		break;
 8002410:	e028      	b.n	8002464 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	7fd3      	ldrb	r3, [r2, #31]
 8002416:	2105      	movs	r1, #5
 8002418:	f361 0303 	bfi	r3, r1, #0, #4
 800241c:	77d3      	strb	r3, [r2, #31]
		break;
 800241e:	e021      	b.n	8002464 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	7fd3      	ldrb	r3, [r2, #31]
 8002424:	2104      	movs	r1, #4
 8002426:	f361 0303 	bfi	r3, r1, #0, #4
 800242a:	77d3      	strb	r3, [r2, #31]
		break;
 800242c:	e01a      	b.n	8002464 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	7fd3      	ldrb	r3, [r2, #31]
 8002432:	2103      	movs	r1, #3
 8002434:	f361 0303 	bfi	r3, r1, #0, #4
 8002438:	77d3      	strb	r3, [r2, #31]
		break;
 800243a:	e013      	b.n	8002464 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	7fd3      	ldrb	r3, [r2, #31]
 8002440:	2102      	movs	r1, #2
 8002442:	f361 0303 	bfi	r3, r1, #0, #4
 8002446:	77d3      	strb	r3, [r2, #31]
		break;
 8002448:	e00c      	b.n	8002464 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	7fd3      	ldrb	r3, [r2, #31]
 800244e:	2101      	movs	r1, #1
 8002450:	f361 0303 	bfi	r3, r1, #0, #4
 8002454:	77d3      	strb	r3, [r2, #31]
		break;
 8002456:	e005      	b.n	8002464 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	7fd3      	ldrb	r3, [r2, #31]
 800245c:	f36f 0303 	bfc	r3, #0, #4
 8002460:	77d3      	strb	r3, [r2, #31]
		break;
 8002462:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa03 	bl	8002870 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop

08002474 <_ZN7TMC220913setRunCurrentEh>:

void TMC2209::setRunCurrent(uint8_t percent) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
	uint8_t run_current = percentToCurrentSetting(percent);
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	4619      	mov	r1, r3
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f975 	bl	8002774 <_ZN7TMC220923percentToCurrentSettingEh>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
	driver_current_.irun = run_current;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	b2d9      	uxtb	r1, r3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	7c53      	ldrb	r3, [r2, #17]
 800249a:	f361 0304 	bfi	r3, r1, #0, #5
 800249e:	7453      	strb	r3, [r2, #17]
	writeStoredDriverCurrent();
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9b9 	bl	8002818 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_ZN7TMC220914setHoldCurrentEh>:
//
void TMC2209::setHoldCurrent(uint8_t percent) {
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70fb      	strb	r3, [r7, #3]
	uint8_t hold_current = percentToCurrentSetting(percent);
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f958 	bl	8002774 <_ZN7TMC220923percentToCurrentSettingEh>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]

	driver_current_.ihold = hold_current;
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	b2d9      	uxtb	r1, r3
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	7c13      	ldrb	r3, [r2, #16]
 80024d4:	f361 0304 	bfi	r3, r1, #0, #5
 80024d8:	7413      	strb	r3, [r2, #16]
	writeStoredDriverCurrent();
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f99c 	bl	8002818 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_ZN7TMC220927enableInverseMotorDirectionEv>:
//	driver_current_.ihold = hold_current;
//	driver_current_.iholddelay = hold_delay;
//	writeStoredDriverCurrent();
//}
//
void TMC2209::enableInverseMotorDirection() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	7b13      	ldrb	r3, [r2, #12]
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f97d 	bl	80027fa <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	7b13      	ldrb	r3, [r2, #12]
 8002514:	f36f 03c3 	bfc	r3, #3, #1
 8002518:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f96d 	bl	80027fa <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
//	return read(ADDRESS_MSCNT);
//}
//
//// private
///* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	4619      	mov	r1, r3
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f80f 	bl	8002564 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f834 	bl	80025b4 <_ZN7TMC220922setRegistersToDefaultsEv>

	//minimizeMotorCurrent();
	setRunCurrent(70);
 800254c:	2146      	movs	r1, #70	; 0x46
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff ff90 	bl	8002474 <_ZN7TMC220913setRunCurrentEh>
	setHoldCurrent(20);
 8002554:	2114      	movs	r1, #20
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f7ff ffa9 	bl	80024ae <_ZN7TMC220914setHoldCurrentEh>
//	disable();
//	disableAutomaticCurrentScaling();
//	disableAutomaticGradientAdaptation();
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:
//
////	  tmcuart->RxXferCount = 0;
//
//}
//
void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	7b13      	ldrb	r3, [r2, #12]
 8002580:	f36f 0300 	bfc	r3, #0, #1
 8002584:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	7b13      	ldrb	r3, [r2, #12]
 800258a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258e:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	7b13      	ldrb	r3, [r2, #12]
 8002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002598:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	7b53      	ldrb	r3, [r2, #13]
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f928 	bl	80027fa <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	7c13      	ldrb	r3, [r2, #16]
 80025c6:	2110      	movs	r1, #16
 80025c8:	f361 0304 	bfi	r3, r1, #0, #5
 80025cc:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	7c53      	ldrb	r3, [r2, #17]
 80025d2:	f043 031f 	orr.w	r3, r3, #31
 80025d6:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	7c93      	ldrb	r3, [r2, #18]
 80025dc:	2101      	movs	r1, #1
 80025de:	f361 0303 	bfi	r3, r1, #0, #4
 80025e2:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	461a      	mov	r2, r3
 80025ea:	2110      	movs	r1, #16
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f885 	bl	80026fc <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 80025f6:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	69d3      	ldr	r3, [r2, #28]
 80025fc:	2102      	movs	r1, #2
 80025fe:	f361 33d0 	bfi	r3, r1, #15, #2
 8002602:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	8b93      	ldrh	r3, [r2, #28]
 8002608:	f36f 13ca 	bfc	r3, #7, #4
 800260c:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	7f13      	ldrb	r3, [r2, #28]
 8002612:	2105      	movs	r1, #5
 8002614:	f361 1306 	bfi	r3, r1, #4, #3
 8002618:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	7f13      	ldrb	r3, [r2, #28]
 800261e:	2103      	movs	r1, #3
 8002620:	f361 0303 	bfi	r3, r1, #0, #4
 8002624:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	461a      	mov	r2, r3
 800262c:	216c      	movs	r1, #108	; 0x6c
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f864 	bl	80026fc <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	461a      	mov	r2, r3
 8002640:	2170      	movs	r1, #112	; 0x70
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f85a 	bl	80026fc <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	461a      	mov	r2, r3
 8002654:	2142      	movs	r1, #66	; 0x42
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f850 	bl	80026fc <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 800265c:	2214      	movs	r2, #20
 800265e:	2111      	movs	r1, #17
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f84b 	bl	80026fc <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002666:	2200      	movs	r2, #0
 8002668:	2113      	movs	r1, #19
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f846 	bl	80026fc <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002670:	2200      	movs	r2, #0
 8002672:	2122      	movs	r1, #34	; 0x22
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f841 	bl	80026fc <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 800267a:	2200      	movs	r2, #0
 800267c:	2114      	movs	r1, #20
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f83c 	bl	80026fc <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002684:	2200      	movs	r2, #0
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f837 	bl	80026fc <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 800268e:	2200      	movs	r2, #0
 8002690:	2142      	movs	r1, #66	; 0x42
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f832 	bl	80026fc <_ZN7TMC22095writeEhm>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	10000053 	.word	0x10000053
 80026a4:	c10d0024 	.word	0xc10d0024

080026a8 <_ZN7TMC220911reverseDataEm>:
//	driver_current_.irun = CURRENT_SETTING_MIN;
//	driver_current_.ihold = CURRENT_SETTING_MIN;
//	writeStoredDriverCurrent();
//}
//
uint32_t TMC2209::reverseData(uint32_t data) {
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80026b6:	2300      	movs	r3, #0
 80026b8:	72fb      	strb	r3, [r7, #11]
 80026ba:	e016      	b.n	80026ea <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 80026bc:	7afb      	ldrb	r3, [r7, #11]
 80026be:	f1c3 0303 	rsb	r3, r3, #3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 80026ce:	7abb      	ldrb	r3, [r7, #10]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	7a7b      	ldrb	r3, [r7, #9]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	3301      	adds	r3, #1
 80026e8:	72fb      	strb	r3, [r7, #11]
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d9e5      	bls.n	80026bc <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <_ZN7TMC22095writeEhm>:
//	for (uint8_t i = 0; i < datagram_size; ++i) {
//		byte = serialRead();
//	}*/
//}
//
void TMC2209::write(uint8_t register_address, uint32_t data) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	460b      	mov	r3, r1
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8002716:	7c3b      	ldrb	r3, [r7, #16]
 8002718:	2205      	movs	r2, #5
 800271a:	f362 0303 	bfi	r3, r2, #0, #4
 800271e:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	791b      	ldrb	r3, [r3, #4]
 8002724:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272c:	b2da      	uxtb	r2, r3
 800272e:	7cbb      	ldrb	r3, [r7, #18]
 8002730:	f362 0306 	bfi	r3, r2, #0, #7
 8002734:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002736:	7cbb      	ldrb	r3, [r7, #18]
 8002738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273c:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff ffb1 	bl	80026a8 <_ZN7TMC220911reverseDataEm>
 8002746:	4603      	mov	r3, r0
 8002748:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	2208      	movs	r2, #8
 8002752:	4619      	mov	r1, r3
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f89a 	bl	800288e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	2208      	movs	r2, #8
 8002764:	4619      	mov	r1, r3
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f8e0 	bl	800292c <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZN7TMC220923percentToCurrentSettingEh>:
	}

	return reverseData(read_reply_datagram.data);
}
//
uint8_t TMC2209::percentToCurrentSetting(uint8_t percent) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	b299      	uxth	r1, r3
 8002784:	2364      	movs	r3, #100	; 0x64
 8002786:	2200      	movs	r2, #0
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff fdf1 	bl	8002370 <_ZN7TMC22099constrainEttt>
 800278e:	4603      	mov	r3, r0
 8002790:	73fb      	strb	r3, [r7, #15]
	uint8_t current_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX,
 8002792:	7bf9      	ldrb	r1, [r7, #15]
 8002794:	231f      	movs	r3, #31
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2364      	movs	r3, #100	; 0x64
 800279e:	2200      	movs	r2, #0
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f807 	bl	80027b4 <_ZN7TMC22093mapEhhhhh>
 80027a6:	4603      	mov	r3, r0
 80027a8:	73bb      	strb	r3, [r7, #14]
			CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
	return current_setting;
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_ZN7TMC22093mapEhhhhh>:
//	uint8_t percent = map(current_setting, CURRENT_SETTING_MIN,
//			CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
uint8_t TMC2209::map(uint8_t x, uint8_t in_min,  uint8_t in_max, uint8_t out_min, uint8_t out_max){
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	70fb      	strb	r3, [r7, #3]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70bb      	strb	r3, [r7, #2]
 80027ca:	4613      	mov	r3, r2
 80027cc:	707b      	strb	r3, [r7, #1]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	78bb      	ldrb	r3, [r7, #2]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	7d39      	ldrb	r1, [r7, #20]
 80027d6:	7c3a      	ldrb	r2, [r7, #16]
 80027d8:	1a8a      	subs	r2, r1, r2
 80027da:	fb03 f202 	mul.w	r2, r3, r2
 80027de:	7879      	ldrb	r1, [r7, #1]
 80027e0:	78bb      	ldrb	r3, [r7, #2]
 80027e2:	1acb      	subs	r3, r1, r3
 80027e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	7c3b      	ldrb	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	b2db      	uxtb	r3, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <_ZN7TMC220923writeStoredGlobalConfigEv>:
//uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
//	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
void TMC2209::writeStoredGlobalConfig() {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	461a      	mov	r2, r3
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ff76 	bl	80026fc <_ZN7TMC22095writeEhm>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZN7TMC220924writeStoredDriverCurrentEv>:
//
//uint32_t TMC2209::readGlobalConfigBytes() {
//	return read(ADDRESS_GCONF);
//}
//
void TMC2209::writeStoredDriverCurrent() {
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	461a      	mov	r2, r3
 8002826:	2110      	movs	r1, #16
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff67 	bl	80026fc <_ZN7TMC22095writeEhm>

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7c5b      	ldrb	r3, [r3, #17]
 8002832:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b13      	cmp	r3, #19
 800283a:	d905      	bls.n	8002848 <_ZN7TMC220924writeStoredDriverCurrentEv+0x30>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	7d53      	ldrb	r3, [r2, #21]
 8002840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002844:	7553      	strb	r3, [r2, #21]
 8002846:	e004      	b.n	8002852 <_ZN7TMC220924writeStoredDriverCurrentEv+0x3a>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	7d53      	ldrb	r3, [r2, #21]
 800284c:	f36f 13c7 	bfc	r3, #7, #1
 8002850:	7553      	strb	r3, [r2, #21]
	}
	if (cool_step_enabled_) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7e1b      	ldrb	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <_ZN7TMC220924writeStoredDriverCurrentEv+0x50>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	461a      	mov	r2, r3
 8002860:	2142      	movs	r1, #66	; 0x42
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff4a 	bl	80026fc <_ZN7TMC22095writeEhm>
	}
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZN7TMC220924writeStoredChopperConfigEv>:
//
void TMC2209::writeStoredChopperConfig() {
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	461a      	mov	r2, r3
 800287e:	216c      	movs	r1, #108	; 0x6c
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff3b 	bl	80026fc <_ZN7TMC22095writeEhm>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 800288e:	b4f0      	push	{r4, r5, r6, r7}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	4613      	mov	r3, r2
 800289a:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80028a0:	2300      	movs	r3, #0
 80028a2:	757b      	strb	r3, [r7, #21]
 80028a4:	e037      	b.n	8002916 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	7d79      	ldrb	r1, [r7, #21]
 80028ae:	00c9      	lsls	r1, r1, #3
 80028b0:	f1c1 0620 	rsb	r6, r1, #32
 80028b4:	f1a1 0020 	sub.w	r0, r1, #32
 80028b8:	fa22 f401 	lsr.w	r4, r2, r1
 80028bc:	fa03 f606 	lsl.w	r6, r3, r6
 80028c0:	4334      	orrs	r4, r6
 80028c2:	fa23 f000 	lsr.w	r0, r3, r0
 80028c6:	4304      	orrs	r4, r0
 80028c8:	fa23 f501 	lsr.w	r5, r3, r1
 80028cc:	4623      	mov	r3, r4
 80028ce:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	753b      	strb	r3, [r7, #20]
 80028d4:	e019      	b.n	800290a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	09db      	lsrs	r3, r3, #7
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	7dbb      	ldrb	r3, [r7, #22]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d007      	beq.n	80028f8 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	b25b      	sxtb	r3, r3
 80028ee:	f083 0307 	eor.w	r3, r3, #7
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	75fb      	strb	r3, [r7, #23]
 80028f6:	e002      	b.n	80028fe <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 80028fe:	7dbb      	ldrb	r3, [r7, #22]
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002904:	7d3b      	ldrb	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	753b      	strb	r3, [r7, #20]
 800290a:	7d3b      	ldrb	r3, [r7, #20]
 800290c:	2b07      	cmp	r3, #7
 800290e:	d9e2      	bls.n	80028d6 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002910:	7d7b      	ldrb	r3, [r7, #21]
 8002912:	3301      	adds	r3, #1
 8002914:	757b      	strb	r3, [r7, #21]
 8002916:	7d7a      	ldrb	r2, [r7, #21]
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	3b01      	subs	r3, #1
 800291c:	429a      	cmp	r2, r3
 800291e:	dbc2      	blt.n	80028a6 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bcf0      	pop	{r4, r5, r6, r7}
 800292a:	4770      	bx	lr

0800292c <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f004 fcaa 	bl	8007298 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6898      	ldr	r0, [r3, #8]
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	b29a      	uxth	r2, r3
 800294c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	f004 f952 	bl	8006bfa <HAL_UART_Transmit>
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b09c      	sub	sp, #112	; 0x70
 8002964:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002966:	f001 fdbd 	bl	80044e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800296a:	f000 fc49 	bl	8003200 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800296e:	f000 fe99 	bl	80036a4 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8002972:	f000 fe3b 	bl	80035ec <_ZL19MX_USART1_UART_Initv>
	MX_TIM1_Init();
 8002976:	f000 fcd1 	bl	800331c <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 800297a:	f000 fd67 	bl	800344c <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 800297e:	f000 fdcd 	bl	800351c <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 8002982:	f000 fe61 	bl	8003648 <_ZL19MX_USART2_UART_Initv>
	MX_SPI1_Init();
 8002986:	f000 fc8d 	bl	80032a4 <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim1);
 800298a:	4886      	ldr	r0, [pc, #536]	; (8002ba4 <main+0x244>)
 800298c:	f003 f9be 	bl	8005d0c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 8002990:	4885      	ldr	r0, [pc, #532]	; (8002ba8 <main+0x248>)
 8002992:	f003 f9bb 	bl	8005d0c <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2, htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 8002996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299a:	930e      	str	r3, [sp, #56]	; 0x38
 800299c:	4b83      	ldr	r3, [pc, #524]	; (8002bac <main+0x24c>)
 800299e:	930d      	str	r3, [sp, #52]	; 0x34
 80029a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a4:	930c      	str	r3, [sp, #48]	; 0x30
 80029a6:	4b82      	ldr	r3, [pc, #520]	; (8002bb0 <main+0x250>)
 80029a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80029aa:	2301      	movs	r3, #1
 80029ac:	930a      	str	r3, [sp, #40]	; 0x28
 80029ae:	4b7f      	ldr	r3, [pc, #508]	; (8002bac <main+0x24c>)
 80029b0:	9309      	str	r3, [sp, #36]	; 0x24
 80029b2:	2320      	movs	r3, #32
 80029b4:	9308      	str	r3, [sp, #32]
 80029b6:	4b7d      	ldr	r3, [pc, #500]	; (8002bac <main+0x24c>)
 80029b8:	9307      	str	r3, [sp, #28]
 80029ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029be:	9306      	str	r3, [sp, #24]
 80029c0:	4b7b      	ldr	r3, [pc, #492]	; (8002bb0 <main+0x250>)
 80029c2:	9305      	str	r3, [sp, #20]
 80029c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c8:	9304      	str	r3, [sp, #16]
 80029ca:	4b79      	ldr	r3, [pc, #484]	; (8002bb0 <main+0x250>)
 80029cc:	9303      	str	r3, [sp, #12]
 80029ce:	2340      	movs	r3, #64	; 0x40
 80029d0:	9302      	str	r3, [sp, #8]
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <main+0x24c>)
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	4b77      	ldr	r3, [pc, #476]	; (8002bb4 <main+0x254>)
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <main+0x248>)
 80029dc:	4a71      	ldr	r2, [pc, #452]	; (8002ba4 <main+0x244>)
 80029de:	4976      	ldr	r1, [pc, #472]	; (8002bb8 <main+0x258>)
 80029e0:	4876      	ldr	r0, [pc, #472]	; (8002bbc <main+0x25c>)
 80029e2:	f7ff fb9f 	bl	8002124 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>
	Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
	En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin,
	Buser_GPIO_Port, Buser_Pin);
	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 80029e6:	230e      	movs	r3, #14
 80029e8:	9302      	str	r3, [sp, #8]
 80029ea:	2302      	movs	r3, #2
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	4b70      	ldr	r3, [pc, #448]	; (8002bb0 <main+0x250>)
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2301      	movs	r3, #1
 80029f4:	4a6e      	ldr	r2, [pc, #440]	; (8002bb0 <main+0x250>)
 80029f6:	4972      	ldr	r1, [pc, #456]	; (8002bc0 <main+0x260>)
 80029f8:	4870      	ldr	r0, [pc, #448]	; (8002bbc <main+0x25c>)
 80029fa:	f7ff fa11 	bl	8001e20 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
			14);

	//Додано функція
	arm.SetSettGripper(EndCap1_GPIO_Port, EndCap1_Pin, EndCap2_GPIO_Port,
 80029fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a02:	9304      	str	r3, [sp, #16]
 8002a04:	4b69      	ldr	r3, [pc, #420]	; (8002bac <main+0x24c>)
 8002a06:	9303      	str	r3, [sp, #12]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <main+0x250>)
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4b66      	ldr	r3, [pc, #408]	; (8002bb0 <main+0x250>)
 8002a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a1c:	4964      	ldr	r1, [pc, #400]	; (8002bb0 <main+0x250>)
 8002a1e:	4867      	ldr	r0, [pc, #412]	; (8002bbc <main+0x25c>)
 8002a20:	f7ff f8c5 	bl	8001bae <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT (&huart1, str, 1);
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002a24:	221c      	movs	r2, #28
 8002a26:	4967      	ldr	r1, [pc, #412]	; (8002bc4 <main+0x264>)
 8002a28:	4867      	ldr	r0, [pc, #412]	; (8002bc8 <main+0x268>)
 8002a2a:	f004 f969 	bl	8006d00 <HAL_UART_Receive_IT>
	arm.setPrintState(true);
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4862      	ldr	r0, [pc, #392]	; (8002bbc <main+0x25c>)
 8002a32:	f7ff f979 	bl	8001d28 <_ZN7RoboArm13setPrintStateEb>

	arm.SetBuserState(8);
 8002a36:	2108      	movs	r1, #8
 8002a38:	4860      	ldr	r0, [pc, #384]	; (8002bbc <main+0x25c>)
 8002a3a:	f7ff f850 	bl	8001ade <_ZN7RoboArm13SetBuserStateEi>
//	arm.SetBuserState(4);

//В останне запишемо поточне положення зачепа
	arm.lastGripState = arm.GetGripperState();
 8002a3e:	485f      	ldr	r0, [pc, #380]	; (8002bbc <main+0x25c>)
 8002a40:	f7ff f87f 	bl	8001b42 <_ZN7RoboArm15GetGripperStateEv>
 8002a44:	4603      	mov	r3, r0
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <main+0x25c>)
 8002a4a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	arm.State = arm.ArmSTAND;
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	; (8002bbc <main+0x25c>)
 8002a50:	2206      	movs	r2, #6
 8002a52:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

	for (int i=0; i<3; i++){
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5a:	e00b      	b.n	8002a74 <main+0x114>
		arm.GetLin();
 8002a5c:	4857      	ldr	r0, [pc, #348]	; (8002bbc <main+0x25c>)
 8002a5e:	f7ff fa57 	bl	8001f10 <_ZN7RoboArm6GetLinEv>
		HAL_Delay(10);
 8002a62:	200a      	movs	r0, #10
 8002a64:	f001 fda0 	bl	80045a8 <HAL_Delay>
		arm.GetAng();
 8002a68:	4854      	ldr	r0, [pc, #336]	; (8002bbc <main+0x25c>)
 8002a6a:	f7ff facd 	bl	8002008 <_ZN7RoboArm6GetAngEv>
	for (int i=0; i<3; i++){
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	3301      	adds	r3, #1
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	ddf0      	ble.n	8002a5c <main+0xfc>
	}

	arm.SetLinAngMicrostepsAndParams(4);
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	484f      	ldr	r0, [pc, #316]	; (8002bbc <main+0x25c>)
 8002a7e:	f7ff f99d 	bl	8001dbc <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>
			}
		}

		//!!!!!!!!!ЯКЩО зараз йде рух зацепа то ми постійно в цій умові перевіряємо стан зацепа і виставляємо флаг

		if (arm.State == arm.ArmGripPreMOVE || arm.State == arm.ArmGripMOVE || arm.State == arm.ArmGripMOVERetry) {
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <main+0x25c>)
 8002a84:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002a88:	2b0a      	cmp	r3, #10
 8002a8a:	d009      	beq.n	8002aa0 <main+0x140>
 8002a8c:	4b4b      	ldr	r3, [pc, #300]	; (8002bbc <main+0x25c>)
 8002a8e:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d004      	beq.n	8002aa0 <main+0x140>
 8002a96:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <main+0x25c>)
 8002a98:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002a9c:	2b14      	cmp	r3, #20
 8002a9e:	d101      	bne.n	8002aa4 <main+0x144>

			debounce_check_pins_and_set_flag();
 8002aa0:	f001 f81e 	bl	8003ae0 <_Z32debounce_check_pins_and_set_flagv>

		}

		// +2 початок руху якщо прийшли нові дані
		if (arm.State == arm.ArmSTART) {
 8002aa4:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <main+0x25c>)
 8002aa6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d131      	bne.n	8002b12 <main+0x1b2>
			arm.State = arm.ArmSTAND;
 8002aae:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <main+0x25c>)
 8002ab0:	2206      	movs	r2, #6
 8002ab2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			//перевіряємо статус зацепа якщо він зачеплений то ОПУСКАЄМО (це не вірна логіка)
			//+1
			int tempGripState = arm.GetGripperState();
 8002ab6:	4841      	ldr	r0, [pc, #260]	; (8002bbc <main+0x25c>)
 8002ab8:	f7ff f843 	bl	8001b42 <_ZN7RoboArm15GetGripperStateEv>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24
			//Зберігли попередній стан

			// TODO here is the problem with 2 -> 0!!!
			if ((tempGripState == 1 && un_to.params.hold == 0) || (tempGripState == 1 && un_to.params.hold == 2) || (tempGripState == 2 && un_to.params.hold == 0)) { //якщо піднятий +1.1 і треба опустити
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d103      	bne.n	8002acc <main+0x16c>
 8002ac4:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <main+0x26c>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <main+0x188>
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d103      	bne.n	8002ada <main+0x17a>
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <main+0x26c>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d006      	beq.n	8002ae8 <main+0x188>
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d114      	bne.n	8002b0a <main+0x1aa>
 8002ae0:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <main+0x26c>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d110      	bne.n	8002b0a <main+0x1aa>
//			if (un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
				arm.State = arm.ArmGripPreMOVE;
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <main+0x25c>)
 8002aea:	220a      	movs	r2, #10
 8002aec:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
				arm.lastGripState = tempGripState; //записали поточне положеня
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <main+0x25c>)
 8002af6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
				arm.SetGripper(tempGripState, un_to.params.hold);
 8002afa:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <main+0x26c>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	461a      	mov	r2, r3
 8002b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b02:	482e      	ldr	r0, [pc, #184]	; (8002bbc <main+0x25c>)
 8002b04:	f7ff f87e 	bl	8001c04 <_ZN7RoboArm10SetGripperEii>
 8002b08:	e003      	b.n	8002b12 <main+0x1b2>
			} else { //if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
				//+3
				arm.State = arm.ArmGripPreENDMOVE;
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <main+0x25c>)
 8002b0c:	220c      	movs	r2, #12
 8002b0e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			}
		}

		//обробка кількість кроків та періоди.
		if (arm.State == arm.ArmStepSTART) {
 8002b12:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <main+0x25c>)
 8002b14:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d114      	bne.n	8002b46 <main+0x1e6>
			arm.State = arm.ArmSTAND;
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <main+0x25c>)
 8002b1e:	2206      	movs	r2, #6
 8002b20:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			arm.Set2StepMotors(un_to.params.lin, un_to.params.PoT_lin,
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <main+0x26c>)
 8002b26:	6819      	ldr	r1, [r3, #0]
 8002b28:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <main+0x26c>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <main+0x26c>)
 8002b2e:	6858      	ldr	r0, [r3, #4]
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <main+0x26c>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	4603      	mov	r3, r0
 8002b38:	4820      	ldr	r0, [pc, #128]	; (8002bbc <main+0x25c>)
 8002b3a:	f7fe ff0f 	bl	800195c <_ZN7RoboArm14Set2StepMotorsEfifi>
					un_to.params.ang, un_to.params.PoT_ang);
			arm.State = arm.ArmStepWaitMOVE;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <main+0x25c>)
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		}

		if (arm.State == arm.ArmStepWaitMOVE) {
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <main+0x25c>)
 8002b48:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d143      	bne.n	8002bd8 <main+0x278>
			int tempGripState = arm.GetGripperState();
 8002b50:	481a      	ldr	r0, [pc, #104]	; (8002bbc <main+0x25c>)
 8002b52:	f7fe fff6 	bl	8001b42 <_ZN7RoboArm15GetGripperStateEv>
 8002b56:	6238      	str	r0, [r7, #32]
			//Зберігли попередній стан

			// TODO loose state
			if ((tempGripState == 1 && un_to.params.hold == 0) || (tempGripState == 1 && un_to.params.hold == 2) || (tempGripState == 2 && un_to.params.hold == 0)) { //якщо піднятий +1.1 і треба опустити
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d103      	bne.n	8002b66 <main+0x206>
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <main+0x26c>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <main+0x222>
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d103      	bne.n	8002b74 <main+0x214>
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <main+0x26c>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d006      	beq.n	8002b82 <main+0x222>
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d12a      	bne.n	8002bd0 <main+0x270>
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <main+0x26c>)
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d126      	bne.n	8002bd0 <main+0x270>
				arm.State = arm.ArmGripPreMOVEStep;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <main+0x25c>)
 8002b84:	220b      	movs	r2, #11
 8002b86:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
				arm.lastGripState = tempGripState; //записали поточне положеня
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <main+0x25c>)
 8002b90:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
				arm.SetGripper(tempGripState, un_to.params.hold);
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <main+0x26c>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6a39      	ldr	r1, [r7, #32]
 8002b9c:	4807      	ldr	r0, [pc, #28]	; (8002bbc <main+0x25c>)
 8002b9e:	f7ff f831 	bl	8001c04 <_ZN7RoboArm10SetGripperEii>
 8002ba2:	e019      	b.n	8002bd8 <main+0x278>
 8002ba4:	20000094 	.word	0x20000094
 8002ba8:	200000dc 	.word	0x200000dc
 8002bac:	40010800 	.word	0x40010800
 8002bb0:	40010c00 	.word	0x40010c00
 8002bb4:	20000124 	.word	0x20000124
 8002bb8:	200001b4 	.word	0x200001b4
 8002bbc:	2000028c 	.word	0x2000028c
 8002bc0:	2000003c 	.word	0x2000003c
 8002bc4:	200001fc 	.word	0x200001fc
 8002bc8:	2000016c 	.word	0x2000016c
 8002bcc:	2000025c 	.word	0x2000025c
			} else { //if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
				//+3
				arm.State = arm.ArmGripPreENDMOVEStep;
 8002bd0:	4ba7      	ldr	r3, [pc, #668]	; (8002e70 <main+0x510>)
 8002bd2:	220d      	movs	r2, #13
 8002bd4:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			}
		}

		if (arm.State == arm.ArmGripPreENDMOVEStep) {
 8002bd8:	4ba5      	ldr	r3, [pc, #660]	; (8002e70 <main+0x510>)
 8002bda:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002bde:	2b0d      	cmp	r3, #13
 8002be0:	d122      	bne.n	8002c28 <main+0x2c8>
//			stepsSetFlagSent = true;
			arm.State = arm.ArmSTAND;
 8002be2:	4ba3      	ldr	r3, [pc, #652]	; (8002e70 <main+0x510>)
 8002be4:	2206      	movs	r2, #6
 8002be6:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			un_send.params.lin = 0.0;
 8002bea:	4ba2      	ldr	r3, [pc, #648]	; (8002e74 <main+0x514>)
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0.0;
 8002bf2:	4ba0      	ldr	r3, [pc, #640]	; (8002e74 <main+0x514>)
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	605a      	str	r2, [r3, #4]
			un_send.params.PoT_lin = 0;
 8002bfa:	4b9e      	ldr	r3, [pc, #632]	; (8002e74 <main+0x514>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002c00:	4b9c      	ldr	r3, [pc, #624]	; (8002e74 <main+0x514>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
			un_send.params.lin_2 = 0;
 8002c06:	4b9b      	ldr	r3, [pc, #620]	; (8002e74 <main+0x514>)
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8002c0e:	4b99      	ldr	r3, [pc, #612]	; (8002e74 <main+0x514>)
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
			un_send.params.hold = 10;
 8002c16:	4b97      	ldr	r3, [pc, #604]	; (8002e74 <main+0x514>)
 8002c18:	220a      	movs	r2, #10
 8002c1a:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002c1c:	230c      	movs	r3, #12
 8002c1e:	221c      	movs	r2, #28
 8002c20:	4994      	ldr	r1, [pc, #592]	; (8002e74 <main+0x514>)
 8002c22:	4895      	ldr	r0, [pc, #596]	; (8002e78 <main+0x518>)
 8002c24:	f003 ffe9 	bl	8006bfa <HAL_UART_Transmit>
					12);
		}

		if (arm.State == arm.ArmStepStartMOVE) {
 8002c28:	4b91      	ldr	r3, [pc, #580]	; (8002e70 <main+0x510>)
 8002c2a:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d10e      	bne.n	8002c50 <main+0x2f0>
			arm.State = arm.ArmStepMOVE;
 8002c32:	4b8f      	ldr	r3, [pc, #572]	; (8002e70 <main+0x510>)
 8002c34:	2204      	movs	r2, #4
 8002c36:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			//В останне запишемо поточне положення зачепа
			arm.lastGripState = arm.GetGripperState();
 8002c3a:	488d      	ldr	r0, [pc, #564]	; (8002e70 <main+0x510>)
 8002c3c:	f7fe ff81 	bl	8001b42 <_ZN7RoboArm15GetGripperStateEv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b8a      	ldr	r3, [pc, #552]	; (8002e70 <main+0x510>)
 8002c46:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
//			} else { //if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
//				//+3
//				arm.State = arm.ArmGripPreENDMOVEStep;
//			}

			arm.Move2StepMotors();
 8002c4a:	4889      	ldr	r0, [pc, #548]	; (8002e70 <main+0x510>)
 8002c4c:	f7fe ff20 	bl	8001a90 <_ZN7RoboArm15Move2StepMotorsEv>
//			stepsSetFlagSent = false;
		}

		//+4 опустили якщо треба було або починаємо одночасний рух моторів.
		if (arm.State == arm.ArmGripPreENDMOVE) {
 8002c50:	4b87      	ldr	r3, [pc, #540]	; (8002e70 <main+0x510>)
 8002c52:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d10b      	bne.n	8002c72 <main+0x312>
			arm.State = arm.ArmMOVE;
 8002c5a:	4b85      	ldr	r3, [pc, #532]	; (8002e70 <main+0x510>)
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002c62:	4b86      	ldr	r3, [pc, #536]	; (8002e7c <main+0x51c>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4a85      	ldr	r2, [pc, #532]	; (8002e7c <main+0x51c>)
 8002c68:	6912      	ldr	r2, [r2, #16]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4880      	ldr	r0, [pc, #512]	; (8002e70 <main+0x510>)
 8002c6e:	f7fe fccf 	bl	8001610 <_ZN7RoboArm11Move2MotorsEff>
		}

		if (arm.State == arm.ArmGripPreENDMOVEStep) {
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <main+0x510>)
 8002c74:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002c78:	2b0d      	cmp	r3, #13
 8002c7a:	d106      	bne.n	8002c8a <main+0x32a>
			arm.State = arm.ArmMOVE;
 8002c7c:	4b7c      	ldr	r3, [pc, #496]	; (8002e70 <main+0x510>)
 8002c7e:	2205      	movs	r2, #5
 8002c80:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			arm.Move2StepMotors();
 8002c84:	487a      	ldr	r0, [pc, #488]	; (8002e70 <main+0x510>)
 8002c86:	f7fe ff03 	bl	8001a90 <_ZN7RoboArm15Move2StepMotorsEv>
		}

		if (arm.anglePsteps == 0 && (arm.State == arm.ArmMOVE || arm.State == arm.ArmStepMOVE || arm.State == arm.ArmCorrectPosition)){
 8002c8a:	4b79      	ldr	r3, [pc, #484]	; (8002e70 <main+0x510>)
 8002c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11b      	bne.n	8002cca <main+0x36a>
 8002c92:	4b77      	ldr	r3, [pc, #476]	; (8002e70 <main+0x510>)
 8002c94:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d009      	beq.n	8002cb0 <main+0x350>
 8002c9c:	4b74      	ldr	r3, [pc, #464]	; (8002e70 <main+0x510>)
 8002c9e:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d004      	beq.n	8002cb0 <main+0x350>
 8002ca6:	4b72      	ldr	r3, [pc, #456]	; (8002e70 <main+0x510>)
 8002ca8:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002cac:	2b16      	cmp	r3, #22
 8002cae:	d10c      	bne.n	8002cca <main+0x36a>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4873      	ldr	r0, [pc, #460]	; (8002e80 <main+0x520>)
 8002cb4:	f003 f9e8 	bl	8006088 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002cb8:	4871      	ldr	r0, [pc, #452]	; (8002e80 <main+0x520>)
 8002cba:	f003 f8cb 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
			cntImpulse1 = 0;
 8002cbe:	4b71      	ldr	r3, [pc, #452]	; (8002e84 <main+0x524>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
			timerFT1 = true;
 8002cc4:	4b70      	ldr	r3, [pc, #448]	; (8002e88 <main+0x528>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
		}

		if (arm.distPsteps == 0 && (arm.State == arm.ArmMOVE || arm.State == arm.ArmStepMOVE || arm.State == arm.ArmCorrectPosition)){
 8002cca:	4b69      	ldr	r3, [pc, #420]	; (8002e70 <main+0x510>)
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11b      	bne.n	8002d0a <main+0x3aa>
 8002cd2:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <main+0x510>)
 8002cd4:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d009      	beq.n	8002cf0 <main+0x390>
 8002cdc:	4b64      	ldr	r3, [pc, #400]	; (8002e70 <main+0x510>)
 8002cde:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d004      	beq.n	8002cf0 <main+0x390>
 8002ce6:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <main+0x510>)
 8002ce8:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002cec:	2b16      	cmp	r3, #22
 8002cee:	d10c      	bne.n	8002d0a <main+0x3aa>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	4866      	ldr	r0, [pc, #408]	; (8002e8c <main+0x52c>)
 8002cf4:	f003 f9c8 	bl	8006088 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002cf8:	4864      	ldr	r0, [pc, #400]	; (8002e8c <main+0x52c>)
 8002cfa:	f003 f8ab 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
			cntImpulse2 = 0;
 8002cfe:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <main+0x530>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
			timerFT2 = true;
 8002d04:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <main+0x534>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
		}

		if (timerFT1 && timerFT2 && arm.State == arm.ArmMOVE) {
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <main+0x528>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d030      	beq.n	8002d74 <main+0x414>
 8002d12:	4b60      	ldr	r3, [pc, #384]	; (8002e94 <main+0x534>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02c      	beq.n	8002d74 <main+0x414>
 8002d1a:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <main+0x510>)
 8002d1c:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d127      	bne.n	8002d74 <main+0x414>
			timerFT1 = false;
 8002d24:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <main+0x528>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002d2a:	4b5a      	ldr	r3, [pc, #360]	; (8002e94 <main+0x534>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
			arm.State = arm.ArmCorrectPosition;
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <main+0x510>)
 8002d32:	2216      	movs	r2, #22
 8002d34:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			current_correctAttempt = 0;
 8002d38:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <main+0x538>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

			lin_beforeCorrect = arm.GetLin();
 8002d3e:	484c      	ldr	r0, [pc, #304]	; (8002e70 <main+0x510>)
 8002d40:	f7ff f8e6 	bl	8001f10 <_ZN7RoboArm6GetLinEv>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a55      	ldr	r2, [pc, #340]	; (8002e9c <main+0x53c>)
 8002d48:	6013      	str	r3, [r2, #0]
//			un_send.params.lin = 0;
//			un_send.params.lin_2 = lin;
			HAL_Delay(10);
 8002d4a:	200a      	movs	r0, #10
 8002d4c:	f001 fc2c 	bl	80045a8 <HAL_Delay>
			ang_beforeCorrect = arm.GetAng();
 8002d50:	4847      	ldr	r0, [pc, #284]	; (8002e70 <main+0x510>)
 8002d52:	f7ff f959 	bl	8002008 <_ZN7RoboArm6GetAngEv>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <main+0x540>)
 8002d5a:	6013      	str	r3, [r2, #0]

//			arm.drvMicroSteps = 128;
//			arm.gripperPsteps = 523*arm.drvMicroSteps;
//			arm.steps4OneMM = motorStep * arm.drvMicroSteps / (beltRatio * spoolStep);

			arm.SetLinAngMicrostepsAndParams(7);
 8002d5c:	2107      	movs	r1, #7
 8002d5e:	4844      	ldr	r0, [pc, #272]	; (8002e70 <main+0x510>)
 8002d60:	f7ff f82c 	bl	8001dbc <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>

			// TODO change microsteps to 128
			// UPDATE VALUES FOR ARM, LIKE STEPS FOR 1 MM
//			arm.SetBuserState(2);
			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002d64:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <main+0x51c>)
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	4a44      	ldr	r2, [pc, #272]	; (8002e7c <main+0x51c>)
 8002d6a:	6912      	ldr	r2, [r2, #16]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4840      	ldr	r0, [pc, #256]	; (8002e70 <main+0x510>)
 8002d70:	f7fe fc4e 	bl	8001610 <_ZN7RoboArm11Move2MotorsEff>
		}



		//+5 обидва мотори доїхали по статусам в таймерах
		if (timerFT1 && timerFT2 && arm.State == arm.ArmStepMOVE) {
 8002d74:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <main+0x528>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d030      	beq.n	8002dde <main+0x47e>
 8002d7c:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <main+0x534>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02c      	beq.n	8002dde <main+0x47e>
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <main+0x510>)
 8002d86:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d127      	bne.n	8002dde <main+0x47e>
			timerFT1 = false;
 8002d8e:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <main+0x528>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002d94:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <main+0x534>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			arm.State = arm.ArmCorrectPosition;
 8002d9a:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <main+0x510>)
 8002d9c:	2216      	movs	r2, #22
 8002d9e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			current_correctAttempt = 0;
 8002da2:	4b3d      	ldr	r3, [pc, #244]	; (8002e98 <main+0x538>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

			lin_beforeCorrect = arm.GetLin();
 8002da8:	4831      	ldr	r0, [pc, #196]	; (8002e70 <main+0x510>)
 8002daa:	f7ff f8b1 	bl	8001f10 <_ZN7RoboArm6GetLinEv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <main+0x53c>)
 8002db2:	6013      	str	r3, [r2, #0]
			HAL_Delay(10);
 8002db4:	200a      	movs	r0, #10
 8002db6:	f001 fbf7 	bl	80045a8 <HAL_Delay>
			ang_beforeCorrect = arm.GetAng();
 8002dba:	482d      	ldr	r0, [pc, #180]	; (8002e70 <main+0x510>)
 8002dbc:	f7ff f924 	bl	8002008 <_ZN7RoboArm6GetAngEv>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4a37      	ldr	r2, [pc, #220]	; (8002ea0 <main+0x540>)
 8002dc4:	6013      	str	r3, [r2, #0]

			arm.SetLinAngMicrostepsAndParams(7);
 8002dc6:	2107      	movs	r1, #7
 8002dc8:	4829      	ldr	r0, [pc, #164]	; (8002e70 <main+0x510>)
 8002dca:	f7fe fff7 	bl	8001dbc <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>

			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <main+0x51c>)
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <main+0x51c>)
 8002dd4:	6912      	ldr	r2, [r2, #16]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4825      	ldr	r0, [pc, #148]	; (8002e70 <main+0x510>)
 8002dda:	f7fe fc19 	bl	8001610 <_ZN7RoboArm11Move2MotorsEff>
		}
		if (timerFT1 && timerFT2	&& arm.State == arm.ArmCorrectPosition) {
 8002dde:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <main+0x528>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 809d 	beq.w	8002f22 <main+0x5c2>
 8002de8:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <main+0x534>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8098 	beq.w	8002f22 <main+0x5c2>
 8002df2:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <main+0x510>)
 8002df4:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002df8:	2b16      	cmp	r3, #22
 8002dfa:	f040 8092 	bne.w	8002f22 <main+0x5c2>
//			arm.SetBuserState(3);
			timerFT1 = false;
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <main+0x528>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002e04:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <main+0x534>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]

			float lin = arm.GetLin();
 8002e0a:	4819      	ldr	r0, [pc, #100]	; (8002e70 <main+0x510>)
 8002e0c:	f7ff f880 	bl	8001f10 <_ZN7RoboArm6GetLinEv>
 8002e10:	61f8      	str	r0, [r7, #28]
			float ang = arm.GetAng();
 8002e12:	4817      	ldr	r0, [pc, #92]	; (8002e70 <main+0x510>)
 8002e14:	f7ff f8f8 	bl	8002008 <_ZN7RoboArm6GetAngEv>
 8002e18:	61b8      	str	r0, [r7, #24]
			float delta_lin = abs(lin - un_to.params.lin_2);
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <main+0x51c>)
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	69f8      	ldr	r0, [r7, #28]
 8002e22:	f7fd fe3d 	bl	8000aa0 <__aeabi_fsub>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe faea 	bl	8001402 <_ZSt3absf>
 8002e2e:	6178      	str	r0, [r7, #20]
			float delta_ang = abs(ang - un_to.params.ang_2);
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <main+0x51c>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	4619      	mov	r1, r3
 8002e36:	69b8      	ldr	r0, [r7, #24]
 8002e38:	f7fd fe32 	bl	8000aa0 <__aeabi_fsub>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fadf 	bl	8001402 <_ZSt3absf>
 8002e44:	62b8      	str	r0, [r7, #40]	; 0x28
			if (360.0 - delta_ang < delta_ang){
 8002e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e48:	f7fd fae4 	bl	8000414 <__aeabi_f2d>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	f04f 0000 	mov.w	r0, #0
 8002e54:	4913      	ldr	r1, [pc, #76]	; (8002ea4 <main+0x544>)
 8002e56:	f7fd f97d 	bl	8000154 <__aeabi_dsub>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4614      	mov	r4, r2
 8002e60:	461d      	mov	r5, r3
 8002e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e64:	f7fd fad6 	bl	8000414 <__aeabi_f2d>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	e01b      	b.n	8002ea8 <main+0x548>
 8002e70:	2000028c 	.word	0x2000028c
 8002e74:	20000240 	.word	0x20000240
 8002e78:	2000016c 	.word	0x2000016c
 8002e7c:	2000025c 	.word	0x2000025c
 8002e80:	20000094 	.word	0x20000094
 8002e84:	20000280 	.word	0x20000280
 8002e88:	20000219 	.word	0x20000219
 8002e8c:	200000dc 	.word	0x200000dc
 8002e90:	20000284 	.word	0x20000284
 8002e94:	2000021a 	.word	0x2000021a
 8002e98:	20000220 	.word	0x20000220
 8002e9c:	20000278 	.word	0x20000278
 8002ea0:	2000027c 	.word	0x2000027c
 8002ea4:	40768000 	.word	0x40768000
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f7fd fd7d 	bl	80009a8 <__aeabi_dcmplt>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <main+0x560>
				delta_ang = 360.0 - delta_ang;
 8002eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb6:	4862      	ldr	r0, [pc, #392]	; (8003040 <main+0x6e0>)
 8002eb8:	f7fd fdf2 	bl	8000aa0 <__aeabi_fsub>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			if (((delta_lin <= accuracy) && (delta_ang <= accuracy)) || current_correctAttempt >= max_correctAttempts){
 8002ec0:	4b60      	ldr	r3, [pc, #384]	; (8003044 <main+0x6e4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7fe f89c 	bl	8001004 <__aeabi_fcmple>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <main+0x584>
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <main+0x6e4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f7fe f893 	bl	8001004 <__aeabi_fcmple>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <main+0x590>
 8002ee4:	4b58      	ldr	r3, [pc, #352]	; (8003048 <main+0x6e8>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b58      	ldr	r3, [pc, #352]	; (800304c <main+0x6ec>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	db0b      	blt.n	8002f08 <main+0x5a8>
//				timerFT1 = false;
//				timerFT2 = false;
				arm.State = arm.ArmGripPermit;
 8002ef0:	4b57      	ldr	r3, [pc, #348]	; (8003050 <main+0x6f0>)
 8002ef2:	2215      	movs	r2, #21
 8002ef4:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
				current_correctAttempt = 0;
 8002ef8:	4b53      	ldr	r3, [pc, #332]	; (8003048 <main+0x6e8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
				arm.SetLinAngMicrostepsAndParams(4);
 8002efe:	2104      	movs	r1, #4
 8002f00:	4853      	ldr	r0, [pc, #332]	; (8003050 <main+0x6f0>)
 8002f02:	f7fe ff5b 	bl	8001dbc <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>
 8002f06:	e00c      	b.n	8002f22 <main+0x5c2>
			} else {
				current_correctAttempt += 1;
 8002f08:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <main+0x6e8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a4e      	ldr	r2, [pc, #312]	; (8003048 <main+0x6e8>)
 8002f10:	6013      	str	r3, [r2, #0]
				arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002f12:	4b50      	ldr	r3, [pc, #320]	; (8003054 <main+0x6f4>)
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <main+0x6f4>)
 8002f18:	6912      	ldr	r2, [r2, #16]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	484c      	ldr	r0, [pc, #304]	; (8003050 <main+0x6f0>)
 8002f1e:	f7fe fb77 	bl	8001610 <_ZN7RoboArm11Move2MotorsEff>
////			arm.gripperPsteps = 523*arm.drvMicroSteps;
////			arm.steps4OneMM = motorStep * arm.drvMicroSteps / (beltRatio * spoolStep);
//			arm.SetLinAngMicrostepsAndParams(4);
		}

		if (arm.State == arm.ArmGripPermit) {
 8002f22:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <main+0x6f0>)
 8002f24:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002f28:	2b15      	cmp	r3, #21
 8002f2a:	d133      	bne.n	8002f94 <main+0x634>
			//+6 Перевірка статуса зацепа чи він не посередині і встановлюємо потрібний опускаємо
//			arm.SetBuserState(1);
			int tempGripState = arm.GetGripperState();
 8002f2c:	4848      	ldr	r0, [pc, #288]	; (8003050 <main+0x6f0>)
 8002f2e:	f7fe fe08 	bl	8001b42 <_ZN7RoboArm15GetGripperStateEv>
 8002f32:	6138      	str	r0, [r7, #16]
			//TODO add loose state
			if ((tempGripState == 1 || tempGripState == 0 || tempGripState == 2)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d005      	beq.n	8002f46 <main+0x5e6>
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <main+0x5e6>
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d115      	bne.n	8002f72 <main+0x612>
					&& (tempGripState != un_to.params.hold)) {
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <main+0x6f4>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d010      	beq.n	8002f72 <main+0x612>

				arm.lastGripState = tempGripState; //записали поточне положеня
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <main+0x6f0>)
 8002f56:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

				arm.State = arm.ArmGripMOVE;
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <main+0x6f0>)
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
				arm.SetGripper(tempGripState, un_to.params.hold);
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <main+0x6f4>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	461a      	mov	r2, r3
 8002f68:	6939      	ldr	r1, [r7, #16]
 8002f6a:	4839      	ldr	r0, [pc, #228]	; (8003050 <main+0x6f0>)
 8002f6c:	f7fe fe4a 	bl	8001c04 <_ZN7RoboArm10SetGripperEii>
 8002f70:	e010      	b.n	8002f94 <main+0x634>
			} else if (tempGripState == un_to.params.hold) {
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <main+0x6f4>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d104      	bne.n	8002f86 <main+0x626>
				arm.State = arm.ArmGripENDMOVE;
 8002f7c:	4b34      	ldr	r3, [pc, #208]	; (8003050 <main+0x6f0>)
 8002f7e:	2209      	movs	r2, #9
 8002f80:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8002f84:	e006      	b.n	8002f94 <main+0x634>
			} else if (tempGripState == 3) {
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d103      	bne.n	8002f94 <main+0x634>
				arm.State = arm.ArmGripMOVEError;  //!!!!!!!!!!!!!!!! УВАГА ТУТ
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <main+0x6f0>)
 8002f8e:	2213      	movs	r2, #19
 8002f90:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			}
		}

		//якщо кроки закінчились а кінцевік не спрацював
		if (arm.State == arm.ArmGripMOVEError) {
 8002f94:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <main+0x6f0>)
 8002f96:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002f9a:	2b13      	cmp	r3, #19
 8002f9c:	d108      	bne.n	8002fb0 <main+0x650>
			arm.State = arm.ArmGripMOVERetry;
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <main+0x6f0>)
 8002fa0:	2214      	movs	r2, #20
 8002fa2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			//їдемо в протилежну сторону
			arm.SetGripper(1, 0); // TODO to last stable position
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4829      	ldr	r0, [pc, #164]	; (8003050 <main+0x6f0>)
 8002fac:	f7fe fe2a 	bl	8001c04 <_ZN7RoboArm10SetGripperEii>
//		if (arm.GetGripperState()==un_to.params.hold && arm.State = arm.ArmGripENDMOVE){
//			arm.State = arm.ArmGripENDMOVE;
//		}

		// +7 закінчили рух зацепа
		if (arm.State == arm.ArmGripENDMOVE) {
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <main+0x6f0>)
 8002fb2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	d135      	bne.n	8003026 <main+0x6c6>
			arm.State = arm.ArmSTAND;
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <main+0x6f0>)
 8002fbc:	2206      	movs	r2, #6
 8002fbe:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			float lin = arm.GetLin();
 8002fc2:	4823      	ldr	r0, [pc, #140]	; (8003050 <main+0x6f0>)
 8002fc4:	f7fe ffa4 	bl	8001f10 <_ZN7RoboArm6GetLinEv>
 8002fc8:	60f8      	str	r0, [r7, #12]
//			un_send.params.lin = 0;
			un_send.params.lin = lin_beforeCorrect;
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <main+0x6f8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a23      	ldr	r2, [pc, #140]	; (800305c <main+0x6fc>)
 8002fd0:	6013      	str	r3, [r2, #0]
			un_send.params.lin_2 = lin;
 8002fd2:	4a22      	ldr	r2, [pc, #136]	; (800305c <main+0x6fc>)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6113      	str	r3, [r2, #16]
			HAL_Delay(10);
 8002fd8:	200a      	movs	r0, #10
 8002fda:	f001 fae5 	bl	80045a8 <HAL_Delay>
			float ang = arm.GetAng();
 8002fde:	481c      	ldr	r0, [pc, #112]	; (8003050 <main+0x6f0>)
 8002fe0:	f7ff f812 	bl	8002008 <_ZN7RoboArm6GetAngEv>
 8002fe4:	60b8      	str	r0, [r7, #8]
//			un_send.params.ang = 0;
			un_send.params.ang = ang_beforeCorrect;
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <main+0x700>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <main+0x6fc>)
 8002fec:	6053      	str	r3, [r2, #4]
			un_send.params.ang_2 = ang;
 8002fee:	4a1b      	ldr	r2, [pc, #108]	; (800305c <main+0x6fc>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	6153      	str	r3, [r2, #20]
			un_send.params.hold = arm.GetGripperState()+10;
 8002ff4:	4816      	ldr	r0, [pc, #88]	; (8003050 <main+0x6f0>)
 8002ff6:	f7fe fda4 	bl	8001b42 <_ZN7RoboArm15GetGripperStateEv>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	330a      	adds	r3, #10
 8002ffe:	4a17      	ldr	r2, [pc, #92]	; (800305c <main+0x6fc>)
 8003000:	6193      	str	r3, [r2, #24]
			un_send.params.PoT_lin = 0;
 8003002:	4b16      	ldr	r3, [pc, #88]	; (800305c <main+0x6fc>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <main+0x6fc>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]

			gripperMoveFinished = false;
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <main+0x704>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
			moveFinished = false;
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <main+0x708>)
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),12);
 800301a:	230c      	movs	r3, #12
 800301c:	221c      	movs	r2, #28
 800301e:	490f      	ldr	r1, [pc, #60]	; (800305c <main+0x6fc>)
 8003020:	4812      	ldr	r0, [pc, #72]	; (800306c <main+0x70c>)
 8003022:	f003 fdea 	bl	8006bfa <HAL_UART_Transmit>

		}

		//запит на читання координат
		if (arm.getPrintState() && arm.State == arm.ArmGetData) {
 8003026:	480a      	ldr	r0, [pc, #40]	; (8003050 <main+0x6f0>)
 8003028:	f7fe fe96 	bl	8001d58 <_ZN7RoboArm13getPrintStateEv>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01e      	beq.n	8003070 <main+0x710>
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <main+0x6f0>)
 8003034:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003038:	2b10      	cmp	r3, #16
 800303a:	d119      	bne.n	8003070 <main+0x710>
 800303c:	2301      	movs	r3, #1
 800303e:	e018      	b.n	8003072 <main+0x712>
 8003040:	43b40000 	.word	0x43b40000
 8003044:	20000004 	.word	0x20000004
 8003048:	20000220 	.word	0x20000220
 800304c:	20000008 	.word	0x20000008
 8003050:	2000028c 	.word	0x2000028c
 8003054:	2000025c 	.word	0x2000025c
 8003058:	20000278 	.word	0x20000278
 800305c:	20000240 	.word	0x20000240
 8003060:	2000027c 	.word	0x2000027c
 8003064:	20000000 	.word	0x20000000
 8003068:	2000021d 	.word	0x2000021d
 800306c:	2000016c 	.word	0x2000016c
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02e      	beq.n	80030d4 <main+0x774>
			arm.State = arm.ArmSTAND;
 8003076:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <main+0x88c>)
 8003078:	2206      	movs	r2, #6
 800307a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			float lin = arm.GetLin();
 800307e:	485b      	ldr	r0, [pc, #364]	; (80031ec <main+0x88c>)
 8003080:	f7fe ff46 	bl	8001f10 <_ZN7RoboArm6GetLinEv>
 8003084:	6078      	str	r0, [r7, #4]
			un_send.params.lin = 0;
 8003086:	4b5a      	ldr	r3, [pc, #360]	; (80031f0 <main+0x890>)
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
			un_send.params.lin_2 = lin;
 800308e:	4a58      	ldr	r2, [pc, #352]	; (80031f0 <main+0x890>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6113      	str	r3, [r2, #16]
//		  un_send.params.lin = arm.ShiftZeroLin(lin); //це для АМТ223С-V
			HAL_Delay(10);
 8003094:	200a      	movs	r0, #10
 8003096:	f001 fa87 	bl	80045a8 <HAL_Delay>
			float ang = arm.GetAng();
 800309a:	4854      	ldr	r0, [pc, #336]	; (80031ec <main+0x88c>)
 800309c:	f7fe ffb4 	bl	8002008 <_ZN7RoboArm6GetAngEv>
 80030a0:	6038      	str	r0, [r7, #0]
			un_send.params.ang = 0;
 80030a2:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <main+0x890>)
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	605a      	str	r2, [r3, #4]
			un_send.params.ang_2 = ang;
 80030aa:	4a51      	ldr	r2, [pc, #324]	; (80031f0 <main+0x890>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6153      	str	r3, [r2, #20]
//		  un_send.params.ang = arm.ShiftZeroAng(ang); //це для АМТ223С-V
			un_send.params.hold = arm.GetGripperState();
 80030b0:	484e      	ldr	r0, [pc, #312]	; (80031ec <main+0x88c>)
 80030b2:	f7fe fd46 	bl	8001b42 <_ZN7RoboArm15GetGripperStateEv>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4a4d      	ldr	r2, [pc, #308]	; (80031f0 <main+0x890>)
 80030ba:	6193      	str	r3, [r2, #24]
			un_send.params.PoT_lin = 0;
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <main+0x890>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 80030c2:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <main+0x890>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80030c8:	230c      	movs	r3, #12
 80030ca:	221c      	movs	r2, #28
 80030cc:	4948      	ldr	r1, [pc, #288]	; (80031f0 <main+0x890>)
 80030ce:	4849      	ldr	r0, [pc, #292]	; (80031f4 <main+0x894>)
 80030d0:	f003 fd93 	bl	8006bfa <HAL_UART_Transmit>
					12);
		}

		//екстренна зупинка
		if (arm.State == arm.ArmSTOP) {
 80030d4:	4b45      	ldr	r3, [pc, #276]	; (80031ec <main+0x88c>)
 80030d6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	d128      	bne.n	8003130 <main+0x7d0>
			stopHand = false;
 80030de:	4b46      	ldr	r3, [pc, #280]	; (80031f8 <main+0x898>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 80030e4:	4841      	ldr	r0, [pc, #260]	; (80031ec <main+0x88c>)
 80030e6:	f7fe fa4f 	bl	8001588 <_ZN7RoboArm13EmergencyStopEv>

			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 80030ea:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <main+0x890>)
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 80030f2:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <main+0x890>)
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 80030fa:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <main+0x890>)
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8003102:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <main+0x890>)
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 800310a:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <main+0x890>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8003110:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <main+0x890>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
			un_send.params.hold = 10;
 8003116:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <main+0x890>)
 8003118:	220a      	movs	r2, #10
 800311a:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 800311c:	230c      	movs	r3, #12
 800311e:	221c      	movs	r2, #28
 8003120:	4933      	ldr	r1, [pc, #204]	; (80031f0 <main+0x890>)
 8003122:	4834      	ldr	r0, [pc, #208]	; (80031f4 <main+0x894>)
 8003124:	f003 fd69 	bl	8006bfa <HAL_UART_Transmit>
					12);
			arm.State = arm.ArmSTAND;
 8003128:	4b30      	ldr	r3, [pc, #192]	; (80031ec <main+0x88c>)
 800312a:	2206      	movs	r2, #6
 800312c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		}

		//встановлення нуля
		if (arm.State == arm.ArmSetZero) {
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <main+0x88c>)
 8003132:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003136:	2b11      	cmp	r3, #17
 8003138:	d12d      	bne.n	8003196 <main+0x836>
			arm.State = arm.ArmSTAND;
 800313a:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <main+0x88c>)
 800313c:	2206      	movs	r2, #6
 800313e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			arm.SetZeroEncoders();
 8003142:	482a      	ldr	r0, [pc, #168]	; (80031ec <main+0x88c>)
 8003144:	f7fe ffaa 	bl	800209c <_ZN7RoboArm15SetZeroEncodersEv>
//		  arm.SetSoftwareZero();
			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 8003148:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <main+0x890>)
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <main+0x890>)
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <main+0x890>)
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <main+0x890>)
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 8003168:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <main+0x890>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <main+0x890>)
 8003170:	2200      	movs	r2, #0
 8003172:	60da      	str	r2, [r3, #12]
			un_send.params.lin_2 = 0;
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <main+0x890>)
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <main+0x890>)
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
			un_send.params.hold = 10;
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <main+0x890>)
 8003186:	220a      	movs	r2, #10
 8003188:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 800318a:	230c      	movs	r3, #12
 800318c:	221c      	movs	r2, #28
 800318e:	4918      	ldr	r1, [pc, #96]	; (80031f0 <main+0x890>)
 8003190:	4818      	ldr	r0, [pc, #96]	; (80031f4 <main+0x894>)
 8003192:	f003 fd32 	bl	8006bfa <HAL_UART_Transmit>
					12);

//			arm.State = arm.ArmSTAND;
		}

		if (arm.State == arm.ArmGetVers) {
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <main+0x88c>)
 8003198:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 800319c:	2b12      	cmp	r3, #18
 800319e:	f47f ac70 	bne.w	8002a82 <main+0x122>
			arm.State = arm.ArmSTAND;
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <main+0x88c>)
 80031a4:	2206      	movs	r2, #6
 80031a6:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			un_send.params.lin = 0;
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <main+0x890>)
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <main+0x890>)
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <main+0x890>)
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <main+0x890>)
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <main+0x890>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <main+0x890>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
			un_send.params.hold = version;
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <main+0x89c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <main+0x890>)
 80031dc:	6193      	str	r3, [r2, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80031de:	230c      	movs	r3, #12
 80031e0:	221c      	movs	r2, #28
 80031e2:	4903      	ldr	r1, [pc, #12]	; (80031f0 <main+0x890>)
 80031e4:	4803      	ldr	r0, [pc, #12]	; (80031f4 <main+0x894>)
 80031e6:	f003 fd08 	bl	8006bfa <HAL_UART_Transmit>
					12);
		}
	}
 80031ea:	e44a      	b.n	8002a82 <main+0x122>
 80031ec:	2000028c 	.word	0x2000028c
 80031f0:	20000240 	.word	0x20000240
 80031f4:	2000016c 	.word	0x2000016c
 80031f8:	20000218 	.word	0x20000218
 80031fc:	2000000c 	.word	0x2000000c

08003200 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b090      	sub	sp, #64	; 0x40
 8003204:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003206:	f107 0318 	add.w	r3, r7, #24
 800320a:	2228      	movs	r2, #40	; 0x28
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fb96 	bl	8007940 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003222:	2301      	movs	r3, #1
 8003224:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800322a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800322c:	2300      	movs	r3, #0
 800322e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003230:	2301      	movs	r3, #1
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003234:	2302      	movs	r3, #2
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800323e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003244:	f107 0318 	add.w	r3, r7, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f001 fd6d 	bl	8004d28 <HAL_RCC_OscConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 800325e:	f000 fe57 	bl	8003f10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003262:	230f      	movs	r3, #15
 8003264:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003266:	2302      	movs	r3, #2
 8003268:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800326e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003272:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003278:	1d3b      	adds	r3, r7, #4
 800327a:	2102      	movs	r1, #2
 800327c:	4618      	mov	r0, r3
 800327e:	f001 ffd5 	bl	800522c <HAL_RCC_ClockConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8003292:	f000 fe3d 	bl	8003f10 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8003296:	f002 f8b3 	bl	8005400 <HAL_RCC_EnableCSS>
}
 800329a:	bf00      	nop
 800329c:	3740      	adds	r7, #64	; 0x40
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None HAL_Delay(1);
 }
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032aa:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <_ZL12MX_SPI1_Initv+0x74>)
 80032ac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032b4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032d8:	2218      	movs	r2, #24
 80032da:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032de:	2200      	movs	r2, #0
 80032e0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e8:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032f0:	220a      	movs	r2, #10
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80032f4:	4807      	ldr	r0, [pc, #28]	; (8003314 <_ZL12MX_SPI1_Initv+0x70>)
 80032f6:	f002 f933 	bl	8005560 <HAL_SPI_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800330a:	f000 fe01 	bl	8003f10 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000003c 	.word	0x2000003c
 8003318:	40013000 	.word	0x40013000

0800331c <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b092      	sub	sp, #72	; 0x48
 8003320:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003322:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800332c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
 800333c:	615a      	str	r2, [r3, #20]
 800333e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	2220      	movs	r2, #32
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f004 fafa 	bl	8007940 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800334c:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 800334e:	4a3e      	ldr	r2, [pc, #248]	; (8003448 <_ZL12MX_TIM1_Initv+0x12c>)
 8003350:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 8003352:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 8003354:	2248      	movs	r2, #72	; 0x48
 8003356:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 800335e:	4b39      	ldr	r3, [pc, #228]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 8003360:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003364:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800336c:	4b35      	ldr	r3, [pc, #212]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003372:	4b34      	ldr	r3, [pc, #208]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003378:	4832      	ldr	r0, [pc, #200]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 800337a:	f002 fd99 	bl	8005eb0 <HAL_TIM_PWM_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800338e:	f000 fdbf 	bl	8003f10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800339a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800339e:	4619      	mov	r1, r3
 80033a0:	4828      	ldr	r0, [pc, #160]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 80033a2:	f003 fac7 	bl	8006934 <HAL_TIMEx_MasterConfigSynchronization>
 80033a6:	4603      	mov	r3, r0
			!= HAL_OK) {
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 80033b6:	f000 fdab 	bl	8003f10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ba:	2360      	movs	r3, #96	; 0x60
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033c6:	2300      	movs	r3, #0
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033ce:	2300      	movs	r3, #0
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80033d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033da:	2200      	movs	r2, #0
 80033dc:	4619      	mov	r1, r3
 80033de:	4819      	ldr	r0, [pc, #100]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 80033e0:	f002 ffbe 	bl	8006360 <HAL_TIM_PWM_ConfigChannel>
 80033e4:	4603      	mov	r3, r0
			!= HAL_OK) {
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 80033f4:	f000 fd8c 	bl	8003f10 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800340c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003410:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	4619      	mov	r1, r3
 800341a:	480a      	ldr	r0, [pc, #40]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 800341c:	f003 fae2 	bl	80069e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003420:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <_ZL12MX_TIM1_Initv+0x118>
		Error_Handler();
 8003430:	f000 fd6e 	bl	8003f10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003434:	4803      	ldr	r0, [pc, #12]	; (8003444 <_ZL12MX_TIM1_Initv+0x128>)
 8003436:	f000 fead 	bl	8004194 <HAL_TIM_MspPostInit>

}
 800343a:	bf00      	nop
 800343c:	3748      	adds	r7, #72	; 0x48
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000094 	.word	0x20000094
 8003448:	40012c00 	.word	0x40012c00

0800344c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003452:	f107 0320 	add.w	r3, r7, #32
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	611a      	str	r2, [r3, #16]
 800346a:	615a      	str	r2, [r3, #20]
 800346c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800346e:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 8003470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003474:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8003476:	4b28      	ldr	r3, [pc, #160]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 8003478:	2248      	movs	r2, #72	; 0x48
 800347a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8003482:	4b25      	ldr	r3, [pc, #148]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 8003484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003488:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348a:	4b23      	ldr	r3, [pc, #140]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8003496:	4820      	ldr	r0, [pc, #128]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 8003498:	f002 fd0a 	bl	8005eb0 <HAL_TIM_PWM_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 80034ac:	f000 fd30 	bl	8003f10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034b0:	2300      	movs	r3, #0
 80034b2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80034b8:	f107 0320 	add.w	r3, r7, #32
 80034bc:	4619      	mov	r1, r3
 80034be:	4816      	ldr	r0, [pc, #88]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 80034c0:	f003 fa38 	bl	8006934 <HAL_TIMEx_MasterConfigSynchronization>
 80034c4:	4603      	mov	r3, r0
			!= HAL_OK) {
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 80034d4:	f000 fd1c 	bl	8003f10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034d8:	2360      	movs	r3, #96	; 0x60
 80034da:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	2204      	movs	r2, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	480a      	ldr	r0, [pc, #40]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 80034f0:	f002 ff36 	bl	8006360 <HAL_TIM_PWM_ConfigChannel>
 80034f4:	4603      	mov	r3, r0
			!= HAL_OK) {
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <_ZL12MX_TIM2_Initv+0xbc>
		Error_Handler();
 8003504:	f000 fd04 	bl	8003f10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8003508:	4803      	ldr	r0, [pc, #12]	; (8003518 <_ZL12MX_TIM2_Initv+0xcc>)
 800350a:	f000 fe43 	bl	8004194 <HAL_TIM_MspPostInit>

}
 800350e:	bf00      	nop
 8003510:	3728      	adds	r7, #40	; 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200000dc 	.word	0x200000dc

0800351c <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003522:	f107 0320 	add.w	r3, r7, #32
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	615a      	str	r2, [r3, #20]
 800353c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800353e:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 8003540:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <_ZL12MX_TIM3_Initv+0xcc>)
 8003542:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72;
 8003544:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 8003546:	2248      	movs	r2, #72	; 0x48
 8003548:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8003550:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 8003552:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003556:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003558:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800355e:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8003564:	481f      	ldr	r0, [pc, #124]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 8003566:	f002 fca3 	bl	8005eb0 <HAL_TIM_PWM_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <_ZL12MX_TIM3_Initv+0x62>
		Error_Handler();
 800357a:	f000 fcc9 	bl	8003f10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003586:	f107 0320 	add.w	r3, r7, #32
 800358a:	4619      	mov	r1, r3
 800358c:	4815      	ldr	r0, [pc, #84]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 800358e:	f003 f9d1 	bl	8006934 <HAL_TIMEx_MasterConfigSynchronization>
 8003592:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <_ZL12MX_TIM3_Initv+0x8a>
		Error_Handler();
 80035a2:	f000 fcb5 	bl	8003f10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035a6:	2360      	movs	r3, #96	; 0x60
 80035a8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	2204      	movs	r2, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4809      	ldr	r0, [pc, #36]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 80035be:	f002 fecf 	bl	8006360 <HAL_TIM_PWM_ConfigChannel>
 80035c2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <_ZL12MX_TIM3_Initv+0xba>
		Error_Handler();
 80035d2:	f000 fc9d 	bl	8003f10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80035d6:	4803      	ldr	r0, [pc, #12]	; (80035e4 <_ZL12MX_TIM3_Initv+0xc8>)
 80035d8:	f000 fddc 	bl	8004194 <HAL_TIM_MspPostInit>

}
 80035dc:	bf00      	nop
 80035de:	3728      	adds	r7, #40	; 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000124 	.word	0x20000124
 80035e8:	40000400 	.word	0x40000400

080035ec <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 80035f2:	4a14      	ldr	r2, [pc, #80]	; (8003644 <_ZL19MX_USART1_UART_Initv+0x58>)
 80035f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 80035f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 800360c:	2200      	movs	r2, #0
 800360e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003612:	220c      	movs	r2, #12
 8003614:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 800361e:	2200      	movs	r2, #0
 8003620:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003622:	4807      	ldr	r0, [pc, #28]	; (8003640 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003624:	f003 fa41 	bl	8006aaa <HAL_UART_Init>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8003638:	f000 fc6a 	bl	8003f10 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	2000016c 	.word	0x2000016c
 8003644:	40013800 	.word	0x40013800

08003648 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
//
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 800364e:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003650:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003658:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 800366e:	220c      	movs	r2, #12
 8003670:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 800367a:	2200      	movs	r2, #0
 800367c:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 800367e:	4807      	ldr	r0, [pc, #28]	; (800369c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003680:	f003 fa63 	bl	8006b4a <HAL_HalfDuplex_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8003694:	f000 fc3c 	bl	8003f10 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
//
	/* USER CODE END USART2_Init 2 */

}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}
 800369c:	200001b4 	.word	0x200001b4
 80036a0:	40004400 	.word	0x40004400

080036a4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80036aa:	f107 0310 	add.w	r3, r7, #16
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80036b8:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	4a4d      	ldr	r2, [pc, #308]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036be:	f043 0310 	orr.w	r3, r3, #16
 80036c2:	6193      	str	r3, [r2, #24]
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80036d0:	4b48      	ldr	r3, [pc, #288]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	4a47      	ldr	r2, [pc, #284]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036d6:	f043 0320 	orr.w	r3, r3, #32
 80036da:	6193      	str	r3, [r2, #24]
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4a41      	ldr	r2, [pc, #260]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	6193      	str	r3, [r2, #24]
 80036f4:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003700:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	4a3b      	ldr	r2, [pc, #236]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 8003706:	f043 0308 	orr.w	r3, r3, #8
 800370a:	6193      	str	r3, [r2, #24]
 800370c:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <_ZL12MX_GPIO_Initv+0x150>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8003718:	2200      	movs	r2, #0
 800371a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800371e:	4836      	ldr	r0, [pc, #216]	; (80037f8 <_ZL12MX_GPIO_Initv+0x154>)
 8003720:	f001 fab9 	bl	8004c96 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8003724:	2200      	movs	r2, #0
 8003726:	f241 0171 	movw	r1, #4209	; 0x1071
 800372a:	4834      	ldr	r0, [pc, #208]	; (80037fc <_ZL12MX_GPIO_Initv+0x158>)
 800372c:	f001 fab3 	bl	8004c96 <HAL_GPIO_WritePin>
	En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8003730:	2200      	movs	r2, #0
 8003732:	f648 7143 	movw	r1, #36675	; 0x8f43
 8003736:	4832      	ldr	r0, [pc, #200]	; (8003800 <_ZL12MX_GPIO_Initv+0x15c>)
 8003738:	f001 faad 	bl	8004c96 <HAL_GPIO_WritePin>
			CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin | S2_Pin | En3_Pin
					| Dir3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 800373c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003740:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003742:	2301      	movs	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374a:	2302      	movs	r3, #2
 800374c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800374e:	f107 0310 	add.w	r3, r7, #16
 8003752:	4619      	mov	r1, r3
 8003754:	4828      	ldr	r0, [pc, #160]	; (80037f8 <_ZL12MX_GPIO_Initv+0x154>)
 8003756:	f001 f90b 	bl	8004970 <HAL_GPIO_Init>

	/*Configure GPIO pins : En2_Pin Button_Pin En1_Pin Dir1_Pin
	 Buser_Pin */
	GPIO_InitStruct.Pin = En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin;
 800375a:	f241 0371 	movw	r3, #4209	; 0x1071
 800375e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003760:	2301      	movs	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	2302      	movs	r3, #2
 800376a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	4619      	mov	r1, r3
 8003772:	4822      	ldr	r0, [pc, #136]	; (80037fc <_ZL12MX_GPIO_Initv+0x158>)
 8003774:	f001 f8fc 	bl	8004970 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
	 S1_Pin S2_Pin En3_Pin Dir3_Pin */
	GPIO_InitStruct.Pin = CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin
 8003778:	f648 7343 	movw	r3, #36675	; 0x8f43
 800377c:	613b      	str	r3, [r7, #16]
			| S2_Pin | En3_Pin | Dir3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800377e:	2301      	movs	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003786:	2302      	movs	r3, #2
 8003788:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378a:	f107 0310 	add.w	r3, r7, #16
 800378e:	4619      	mov	r1, r3
 8003790:	481b      	ldr	r0, [pc, #108]	; (8003800 <_ZL12MX_GPIO_Initv+0x15c>)
 8003792:	f001 f8ed 	bl	8004970 <HAL_GPIO_Init>

	/*Configure GPIO pins : EndCap1_Pin EndCap2_Pin EndCap3_Pin */
	GPIO_InitStruct.Pin = EndCap1_Pin | EndCap2_Pin | EndCap3_Pin;
 8003796:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 800379a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <_ZL12MX_GPIO_Initv+0x160>)
 800379e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	4619      	mov	r1, r3
 80037aa:	4815      	ldr	r0, [pc, #84]	; (8003800 <_ZL12MX_GPIO_Initv+0x15c>)
 80037ac:	f001 f8e0 	bl	8004970 <HAL_GPIO_Init>

	/*Configure GPIO pin : EndCap4_Pin */
	GPIO_InitStruct.Pin = EndCap4_Pin;
 80037b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037b6:	4b13      	ldr	r3, [pc, #76]	; (8003804 <_ZL12MX_GPIO_Initv+0x160>)
 80037b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(EndCap4_GPIO_Port, &GPIO_InitStruct);
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	4619      	mov	r1, r3
 80037c4:	480d      	ldr	r0, [pc, #52]	; (80037fc <_ZL12MX_GPIO_Initv+0x158>)
 80037c6:	f001 f8d3 	bl	8004970 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2105      	movs	r1, #5
 80037ce:	2017      	movs	r0, #23
 80037d0:	f000 ffe5 	bl	800479e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80037d4:	2017      	movs	r0, #23
 80037d6:	f000 fffe 	bl	80047d6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2105      	movs	r1, #5
 80037de:	2028      	movs	r0, #40	; 0x28
 80037e0:	f000 ffdd 	bl	800479e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037e4:	2028      	movs	r0, #40	; 0x28
 80037e6:	f000 fff6 	bl	80047d6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80037ea:	bf00      	nop
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40011000 	.word	0x40011000
 80037fc:	40010800 	.word	0x40010800
 8003800:	40010c00 	.word	0x40010c00
 8003804:	10110000 	.word	0x10110000

08003808 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a84      	ldr	r2, [pc, #528]	; (8003a24 <HAL_UART_RxCpltCallback+0x21c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	f040 80fb 	bne.w	8003a10 <HAL_UART_RxCpltCallback+0x208>
		// копіюємо отримані дані у rx_buffer
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 800381a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800381e:	4882      	ldr	r0, [pc, #520]	; (8003a28 <HAL_UART_RxCpltCallback+0x220>)
 8003820:	f001 fa51 	bl	8004cc6 <HAL_GPIO_TogglePin>
		memcpy(un_get.bytes, rx_buffer, sizeof(rx_buffer));
 8003824:	4a81      	ldr	r2, [pc, #516]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 8003826:	4b82      	ldr	r3, [pc, #520]	; (8003a30 <HAL_UART_RxCpltCallback+0x228>)
 8003828:	4614      	mov	r4, r2
 800382a:	461d      	mov	r5, r3
 800382c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800382e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003830:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003834:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		switch (un_get.params.hold) {
 8003838:	4b7c      	ldr	r3, [pc, #496]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b02      	cmp	r3, #2
 800383e:	dc79      	bgt.n	8003934 <HAL_UART_RxCpltCallback+0x12c>
 8003840:	2b00      	cmp	r3, #0
 8003842:	da7c      	bge.n	800393e <HAL_UART_RxCpltCallback+0x136>
 8003844:	e0df      	b.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>
 8003846:	3b19      	subs	r3, #25
 8003848:	2b37      	cmp	r3, #55	; 0x37
 800384a:	f200 80dc 	bhi.w	8003a06 <HAL_UART_RxCpltCallback+0x1fe>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <HAL_UART_RxCpltCallback+0x4c>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	0800397d 	.word	0x0800397d
 8003858:	08003a07 	.word	0x08003a07
 800385c:	08003a07 	.word	0x08003a07
 8003860:	08003a07 	.word	0x08003a07
 8003864:	08003a07 	.word	0x08003a07
 8003868:	080039a5 	.word	0x080039a5
 800386c:	080039a5 	.word	0x080039a5
 8003870:	080039a5 	.word	0x080039a5
 8003874:	08003a07 	.word	0x08003a07
 8003878:	08003a07 	.word	0x08003a07
 800387c:	08003a07 	.word	0x08003a07
 8003880:	08003a07 	.word	0x08003a07
 8003884:	08003a07 	.word	0x08003a07
 8003888:	08003a07 	.word	0x08003a07
 800388c:	08003a07 	.word	0x08003a07
 8003890:	080039fd 	.word	0x080039fd
 8003894:	08003a07 	.word	0x08003a07
 8003898:	08003a07 	.word	0x08003a07
 800389c:	08003a07 	.word	0x08003a07
 80038a0:	08003a07 	.word	0x08003a07
 80038a4:	08003a07 	.word	0x08003a07
 80038a8:	08003a07 	.word	0x08003a07
 80038ac:	08003a07 	.word	0x08003a07
 80038b0:	08003a07 	.word	0x08003a07
 80038b4:	08003a07 	.word	0x08003a07
 80038b8:	08003987 	.word	0x08003987
 80038bc:	08003a07 	.word	0x08003a07
 80038c0:	08003a07 	.word	0x08003a07
 80038c4:	08003a07 	.word	0x08003a07
 80038c8:	08003a07 	.word	0x08003a07
 80038cc:	08003a07 	.word	0x08003a07
 80038d0:	08003a07 	.word	0x08003a07
 80038d4:	08003a07 	.word	0x08003a07
 80038d8:	08003a07 	.word	0x08003a07
 80038dc:	08003a07 	.word	0x08003a07
 80038e0:	08003a07 	.word	0x08003a07
 80038e4:	08003a07 	.word	0x08003a07
 80038e8:	08003a07 	.word	0x08003a07
 80038ec:	08003a07 	.word	0x08003a07
 80038f0:	08003a07 	.word	0x08003a07
 80038f4:	08003a07 	.word	0x08003a07
 80038f8:	08003a07 	.word	0x08003a07
 80038fc:	08003a07 	.word	0x08003a07
 8003900:	08003a07 	.word	0x08003a07
 8003904:	08003a07 	.word	0x08003a07
 8003908:	08003a07 	.word	0x08003a07
 800390c:	08003a07 	.word	0x08003a07
 8003910:	08003a07 	.word	0x08003a07
 8003914:	08003a07 	.word	0x08003a07
 8003918:	08003a07 	.word	0x08003a07
 800391c:	08003991 	.word	0x08003991
 8003920:	08003a07 	.word	0x08003a07
 8003924:	08003a07 	.word	0x08003a07
 8003928:	08003a07 	.word	0x08003a07
 800392c:	08003a07 	.word	0x08003a07
 8003930:	0800399b 	.word	0x0800399b
 8003934:	2b50      	cmp	r3, #80	; 0x50
 8003936:	dc66      	bgt.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>
 8003938:	2b19      	cmp	r3, #25
 800393a:	da84      	bge.n	8003846 <HAL_UART_RxCpltCallback+0x3e>
 800393c:	e063      	b.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>
			//startFirstMove = true;

			//статус початку руху  +1
//			arm.SetBuserState(1);
//			HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
			arm.State = arm.ArmSTART;
 800393e:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_UART_RxCpltCallback+0x22c>)
 8003940:	2200      	movs	r2, #0
 8003942:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

			un_to.params.lin = un_get.params.lin;
 8003946:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a3b      	ldr	r2, [pc, #236]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 800394c:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang;
 800394e:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a39      	ldr	r2, [pc, #228]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 8003954:	6053      	str	r3, [r2, #4]
			un_to.params.PoT_ang = 0;
 8003956:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 8003958:	2200      	movs	r2, #0
 800395a:	60da      	str	r2, [r3, #12]
			un_to.params.PoT_lin = 0;
 800395c:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
			un_to.params.lin_2 = un_get.params.lin_2;
 8003962:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	4a34      	ldr	r2, [pc, #208]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 8003968:	6113      	str	r3, [r2, #16]
			un_to.params.ang_2 = un_get.params.ang_2;
 800396a:	4b30      	ldr	r3, [pc, #192]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4a32      	ldr	r2, [pc, #200]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 8003970:	6153      	str	r3, [r2, #20]
			un_to.params.hold = un_get.params.hold;
 8003972:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	4a30      	ldr	r2, [pc, #192]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 8003978:	6193      	str	r3, [r2, #24]
//			arm.moveGripper = un_get.params.hold;
			break;
 800397a:	e044      	b.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>

		case 25:
			//25 = екстренна зупинка

			arm.State = arm.ArmSTOP;
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_UART_RxCpltCallback+0x22c>)
 800397e:	220f      	movs	r2, #15
 8003980:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			//оце би на переривання якесь повісити, щоб якщо натиснули в дашборді - то остаточно вирубати.
			break;
 8003984:	e03f      	b.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>
		case 50:
			//50 = get-запит
			//sendDataFlag = true;
			arm.State = arm.ArmGetData;
 8003986:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_UART_RxCpltCallback+0x22c>)
 8003988:	2210      	movs	r2, #16
 800398a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			break;
 800398e:	e03a      	b.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>
		case 75:
			//75 = встановлення нуля
			//	setZeroFlag = true;
			arm.State = arm.ArmSetZero;
 8003990:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_UART_RxCpltCallback+0x22c>)
 8003992:	2211      	movs	r2, #17
 8003994:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			break;
 8003998:	e035      	b.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>
		case 80:
			arm.State = arm.ArmGetVers;
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_UART_RxCpltCallback+0x22c>)
 800399c:	2212      	movs	r2, #18
 800399e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			break;
 80039a2:	e030      	b.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>
		case 31: //так робити погано але ладна)
		case 30:
		case 32:
//			arm.SetBuserState(1);
//			HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
			arm.State = arm.ArmStepSTART;
 80039a4:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <HAL_UART_RxCpltCallback+0x22c>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			un_to.params.lin = un_get.params.lin; //це кроки 1
 80039ac:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a21      	ldr	r2, [pc, #132]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 80039b2:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang; //це кроки 2
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 80039ba:	6053      	str	r3, [r2, #4]
			un_to.params.PoT_ang = un_get.params.PoT_ang; //це період 2
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 80039c2:	60d3      	str	r3, [r2, #12]
			un_to.params.PoT_lin = un_get.params.PoT_lin; //це період 1
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 80039ca:	6093      	str	r3, [r2, #8]
			un_to.params.lin_2 = un_get.params.lin_2;
 80039cc:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 80039d2:	6113      	str	r3, [r2, #16]
			un_to.params.ang_2 = un_get.params.ang_2;
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 80039da:	6153      	str	r3, [r2, #20]
			un_to.params.hold = un_get.params.hold % 10; //парсимо hold 0 або 1
 80039dc:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <HAL_UART_RxCpltCallback+0x224>)
 80039de:	6999      	ldr	r1, [r3, #24]
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <HAL_UART_RxCpltCallback+0x234>)
 80039e2:	fb83 2301 	smull	r2, r3, r3, r1
 80039e6:	109a      	asrs	r2, r3, #2
 80039e8:	17cb      	asrs	r3, r1, #31
 80039ea:	1ad2      	subs	r2, r2, r3
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	1aca      	subs	r2, r1, r3
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <HAL_UART_RxCpltCallback+0x230>)
 80039f8:	619a      	str	r2, [r3, #24]

			break;
 80039fa:	e004      	b.n	8003a06 <HAL_UART_RxCpltCallback+0x1fe>

		case 40:
			//перевірка чи були налаштовані таймери до цього для руху по крокам
			arm.State = arm.ArmStepStartMOVE;
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_UART_RxCpltCallback+0x22c>)
 80039fe:	2203      	movs	r2, #3
 8003a00:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

			break;
 8003a04:	bf00      	nop

		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003a06:	221c      	movs	r2, #28
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4809      	ldr	r0, [pc, #36]	; (8003a30 <HAL_UART_RxCpltCallback+0x228>)
 8003a0c:	f003 ff98 	bl	8007940 <memset>
//		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8003a10:	221c      	movs	r2, #28
 8003a12:	4907      	ldr	r1, [pc, #28]	; (8003a30 <HAL_UART_RxCpltCallback+0x228>)
 8003a14:	4803      	ldr	r0, [pc, #12]	; (8003a24 <HAL_UART_RxCpltCallback+0x21c>)
 8003a16:	f003 f973 	bl	8006d00 <HAL_UART_Receive_IT>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bdb0      	pop	{r4, r5, r7, pc}
 8003a22:	bf00      	nop
 8003a24:	2000016c 	.word	0x2000016c
 8003a28:	40011000 	.word	0x40011000
 8003a2c:	20000224 	.word	0x20000224
 8003a30:	200001fc 	.word	0x200001fc
 8003a34:	2000028c 	.word	0x2000028c
 8003a38:	2000025c 	.word	0x2000025c
 8003a3c:	66666667 	.word	0x66666667

08003a40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]
		//	timerFT2 = true;
	}
//	else {
//		__NOP();
//	}
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_UART_ErrorCallback+0x84>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d133      	bne.n	8003ace <HAL_UART_ErrorCallback+0x7a>
		if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_UART_ErrorCallback+0x2c>
			// переполнение
			arm.SetBuserState(2);
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4818      	ldr	r0, [pc, #96]	; (8003adc <HAL_UART_ErrorCallback+0x88>)
 8003a7c:	f7fe f82f 	bl	8001ade <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_PE) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_UART_ErrorCallback+0x46>
			// Ошибка четности
			arm.SetBuserState(3);
 8003a92:	2103      	movs	r1, #3
 8003a94:	4811      	ldr	r0, [pc, #68]	; (8003adc <HAL_UART_ErrorCallback+0x88>)
 8003a96:	f7fe f822 	bl	8001ade <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_NE) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_UART_ErrorCallback+0x60>
			// Ошибка зашумление
			arm.SetBuserState(4);
 8003aac:	2104      	movs	r1, #4
 8003aae:	480b      	ldr	r0, [pc, #44]	; (8003adc <HAL_UART_ErrorCallback+0x88>)
 8003ab0:	f7fe f815 	bl	8001ade <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_FE) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_UART_ErrorCallback+0x7a>
			// Ошибка кадрирования
			arm.SetBuserState(5);
 8003ac6:	2105      	movs	r1, #5
 8003ac8:	4804      	ldr	r0, [pc, #16]	; (8003adc <HAL_UART_ErrorCallback+0x88>)
 8003aca:	f7fe f808 	bl	8001ade <_ZN7RoboArm13SetBuserStateEi>
		}
	}
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	2000028c 	.word	0x2000028c

08003ae0 <_Z32debounce_check_pins_and_set_flagv>:

void debounce_check_pins_and_set_flag() {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
	static bool checkFlag1 = false;
	static bool checkFlag2 = false;
//	static uint8_t last_EndCap1_state = GPIO_PIN_RESET;
//	static uint8_t last_EndCap2_state = GPIO_PIN_RESET;
	static uint8_t last_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
			arm.EndCap1_PinG);
 8003ae6:	4b71      	ldr	r3, [pc, #452]	; (8003cac <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f3bf 8f5b 	dmb	ish
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01a      	beq.n	8003b36 <_Z32debounce_check_pins_and_set_flagv+0x56>
 8003b00:	486a      	ldr	r0, [pc, #424]	; (8003cac <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 8003b02:	f003 fecd 	bl	80078a0 <__cxa_guard_acquire>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00f      	beq.n	8003b36 <_Z32debounce_check_pins_and_set_flagv+0x56>
	static uint8_t last_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 8003b16:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	4a65      	ldr	r2, [pc, #404]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003b1c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 f8a0 	bl	8004c68 <HAL_GPIO_ReadPin>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
			arm.EndCap1_PinG);
 8003b2c:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	485e      	ldr	r0, [pc, #376]	; (8003cac <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 8003b32:	f003 fec1 	bl	80078b8 <__cxa_guard_release>
	static uint8_t last_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
			arm.EndCap2_PinG);
 8003b36:	4b60      	ldr	r3, [pc, #384]	; (8003cb8 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f3bf 8f5b 	dmb	ish
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01a      	beq.n	8003b86 <_Z32debounce_check_pins_and_set_flagv+0xa6>
 8003b50:	4859      	ldr	r0, [pc, #356]	; (8003cb8 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 8003b52:	f003 fea5 	bl	80078a0 <__cxa_guard_acquire>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00f      	beq.n	8003b86 <_Z32debounce_check_pins_and_set_flagv+0xa6>
	static uint8_t last_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 8003b66:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	4a51      	ldr	r2, [pc, #324]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003b6c:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 f878 	bl	8004c68 <HAL_GPIO_ReadPin>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
			arm.EndCap2_PinG);
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	484d      	ldr	r0, [pc, #308]	; (8003cb8 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 8003b82:	f003 fe99 	bl	80078b8 <__cxa_guard_release>
	uint32_t current_time = HAL_GetTick();
 8003b86:	f000 fd05 	bl	8004594 <HAL_GetTick>
 8003b8a:	6078      	str	r0, [r7, #4]

	// Перевірка чи пройшла достатня затримка для уникнення дребезгу
	if (current_time - last_check_time >= debounce_delay) {
 8003b8c:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <_Z32debounce_check_pins_and_set_flagv+0x1e0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <_Z32debounce_check_pins_and_set_flagv+0x1e4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	f0c0 8083 	bcc.w	8003ca4 <_Z32debounce_check_pins_and_set_flagv+0x1c4>
		// Оновлення часу останньої перевірки
		last_check_time = current_time;
 8003b9e:	4a48      	ldr	r2, [pc, #288]	; (8003cc0 <_Z32debounce_check_pins_and_set_flagv+0x1e0>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6013      	str	r3, [r2, #0]

		// Перевірка стану піну EndCap1
		uint8_t current_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 8003ba4:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	4a41      	ldr	r2, [pc, #260]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003baa:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 f859 	bl	8004c68 <HAL_GPIO_ReadPin>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	70fb      	strb	r3, [r7, #3]
				arm.EndCap1_PinG);

		if (current_EndCap1_state == GPIO_PIN_SET
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d120      	bne.n	8003c02 <_Z32debounce_check_pins_and_set_flagv+0x122>
				&& last_EndCap1_state == GPIO_PIN_RESET) {
 8003bc0:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11c      	bne.n	8003c02 <_Z32debounce_check_pins_and_set_flagv+0x122>
			if (checkFlag1) {
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00f      	beq.n	8003bf0 <_Z32debounce_check_pins_and_set_flagv+0x110>
				checkFlag1 = false;
 8003bd0:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
				gripIntFlag = true;
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <_Z32debounce_check_pins_and_set_flagv+0x1ec>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
				HAL_GPIO_TogglePin(arm.Buser_GPIO_Port_Ind, arm.Buser_Pin_Ind);
 8003bdc:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	4a33      	ldr	r2, [pc, #204]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003be2:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 f86c 	bl	8004cc6 <HAL_GPIO_TogglePin>
			if (checkFlag1) {
 8003bee:	e00f      	b.n	8003c10 <_Z32debounce_check_pins_and_set_flagv+0x130>
			} else {
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8003bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bf4:	4836      	ldr	r0, [pc, #216]	; (8003cd0 <_Z32debounce_check_pins_and_set_flagv+0x1f0>)
 8003bf6:	f001 f866 	bl	8004cc6 <HAL_GPIO_TogglePin>
				checkFlag1 = true;
 8003bfa:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	701a      	strb	r2, [r3, #0]
			if (checkFlag1) {
 8003c00:	e006      	b.n	8003c10 <_Z32debounce_check_pins_and_set_flagv+0x130>
			}
		} else {
			if (checkFlag1) {
 8003c02:	4b31      	ldr	r3, [pc, #196]	; (8003cc8 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <_Z32debounce_check_pins_and_set_flagv+0x130>
				checkFlag1 = false;
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (!checkFlag1) {
 8003c10:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	f083 0301 	eor.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <_Z32debounce_check_pins_and_set_flagv+0x144>
			last_EndCap1_state = current_EndCap1_state;
 8003c1e:	4a25      	ldr	r2, [pc, #148]	; (8003cb4 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	7013      	strb	r3, [r2, #0]
		}

		// Перевірка стану піну EndCap2
		uint8_t current_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 8003c24:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	4a21      	ldr	r2, [pc, #132]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003c2a:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 f819 	bl	8004c68 <HAL_GPIO_ReadPin>
 8003c36:	4603      	mov	r3, r0
 8003c38:	70bb      	strb	r3, [r7, #2]
//		if (current_EndCap2_state == GPIO_PIN_SET
//				&& last_EndCap2_state == GPIO_PIN_RESET) {
//			gripIntFlag = true;
//		}
//		last_EndCap2_state = current_EndCap2_state;
		if (current_EndCap2_state == GPIO_PIN_SET
 8003c3a:	78bb      	ldrb	r3, [r7, #2]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d120      	bne.n	8003c82 <_Z32debounce_check_pins_and_set_flagv+0x1a2>
				&& last_EndCap2_state == GPIO_PIN_RESET) {
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d11c      	bne.n	8003c82 <_Z32debounce_check_pins_and_set_flagv+0x1a2>
			if (checkFlag2) {
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00f      	beq.n	8003c70 <_Z32debounce_check_pins_and_set_flagv+0x190>
				checkFlag2 = false;
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
				gripIntFlag = true;
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <_Z32debounce_check_pins_and_set_flagv+0x1ec>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
				HAL_GPIO_TogglePin(arm.Buser_GPIO_Port_Ind, arm.Buser_Pin_Ind);
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003c62:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 f82c 	bl	8004cc6 <HAL_GPIO_TogglePin>
			if (checkFlag2) {
 8003c6e:	e00f      	b.n	8003c90 <_Z32debounce_check_pins_and_set_flagv+0x1b0>
			} else {
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8003c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c74:	4816      	ldr	r0, [pc, #88]	; (8003cd0 <_Z32debounce_check_pins_and_set_flagv+0x1f0>)
 8003c76:	f001 f826 	bl	8004cc6 <HAL_GPIO_TogglePin>
				checkFlag2 = true;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
			if (checkFlag2) {
 8003c80:	e006      	b.n	8003c90 <_Z32debounce_check_pins_and_set_flagv+0x1b0>
			}
		} else {
			if (checkFlag2) {
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <_Z32debounce_check_pins_and_set_flagv+0x1b0>
				checkFlag2 = false;
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (!checkFlag2) {
 8003c90:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	f083 0301 	eor.w	r3, r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <_Z32debounce_check_pins_and_set_flagv+0x1c4>
			last_EndCap2_state = current_EndCap2_state;
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 8003ca0:	78bb      	ldrb	r3, [r7, #2]
 8003ca2:	7013      	strb	r3, [r2, #0]
		}
	}
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000408 	.word	0x20000408
 8003cb0:	2000028c 	.word	0x2000028c
 8003cb4:	20000406 	.word	0x20000406
 8003cb8:	20000410 	.word	0x20000410
 8003cbc:	2000040c 	.word	0x2000040c
 8003cc0:	20000400 	.word	0x20000400
 8003cc4:	20000010 	.word	0x20000010
 8003cc8:	20000404 	.word	0x20000404
 8003ccc:	2000021c 	.word	0x2000021c
 8003cd0:	40011000 	.word	0x40011000
 8003cd4:	20000405 	.word	0x20000405

08003cd8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a7d      	ldr	r2, [pc, #500]	; (8003edc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d119      	bne.n	8003d1e <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		cntImpulse1++;
 8003cea:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	4a7b      	ldr	r2, [pc, #492]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003cf2:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 8003cf4:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003cf6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003cf8:	4b79      	ldr	r3, [pc, #484]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f200 80e9 	bhi.w	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003d02:	2100      	movs	r1, #0
 8003d04:	4878      	ldr	r0, [pc, #480]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003d06:	f002 f9bf 	bl	8006088 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8003d0a:	4877      	ldr	r0, [pc, #476]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003d0c:	f002 f8a2 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
//			arm.SetEnable(1, false);
			// COMMENT 10
//			arm.SetEnable(1, true);
			cntImpulse1 = 0;
 8003d10:	4b73      	ldr	r3, [pc, #460]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
			timerFT1 = true;
 8003d16:	4b75      	ldr	r3, [pc, #468]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
//    HAL_IncTick();
//  }
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003d1c:	e0da      	b.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
	} else if (htim->Instance == TIM2) {
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d119      	bne.n	8003d5c <HAL_TIM_PeriodElapsedCallback+0x84>
		cntImpulse2++;
 8003d28:	4b71      	ldr	r3, [pc, #452]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	4a70      	ldr	r2, [pc, #448]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003d30:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 8003d32:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003d34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003d36:	4b6e      	ldr	r3, [pc, #440]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f200 80ca 	bhi.w	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8003d40:	2104      	movs	r1, #4
 8003d42:	486c      	ldr	r0, [pc, #432]	; (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003d44:	f002 f9a0 	bl	8006088 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8003d48:	486a      	ldr	r0, [pc, #424]	; (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003d4a:	f002 f883 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
			cntImpulse2 = 0;
 8003d4e:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
			timerFT2 = true;
 8003d54:	4b68      	ldr	r3, [pc, #416]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
}
 8003d5a:	e0bb      	b.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
	} else if (htim->Instance == TIM3) {
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a66      	ldr	r2, [pc, #408]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	f040 80b6 	bne.w	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
		cntImpulse3++;
 8003d68:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	4a64      	ldr	r2, [pc, #400]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003d70:	6013      	str	r3, [r2, #0]
		if ((arm.toLoose == true) && ((arm.lastGripState == 0 && cntImpulse3 >= arm.gripperPstepsLoose_fromUnhold) || (
 8003d72:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003d74:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d153      	bne.n	8003e24 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8003d7c:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003d7e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8003d86:	4b57      	ldr	r3, [pc, #348]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003d88:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d8c:	4b5c      	ldr	r3, [pc, #368]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d90b      	bls.n	8003dac <HAL_TIM_PeriodElapsedCallback+0xd4>
				arm.lastGripState == 1 && cntImpulse3 >= arm.gripperPstepsLoose_fromHold))) {
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003d96:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
		if ((arm.toLoose == true) && ((arm.lastGripState == 0 && cntImpulse3 >= arm.gripperPstepsLoose_fromUnhold) || (
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d142      	bne.n	8003e24 <HAL_TIM_PeriodElapsedCallback+0x14c>
				arm.lastGripState == 1 && cntImpulse3 >= arm.gripperPstepsLoose_fromHold))) {
 8003d9e:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003da0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003da4:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d83b      	bhi.n	8003e24 <HAL_TIM_PeriodElapsedCallback+0x14c>
			gripIntFlag = false;
 8003dac:	4b55      	ldr	r3, [pc, #340]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003db2:	2104      	movs	r1, #4
 8003db4:	4854      	ldr	r0, [pc, #336]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003db6:	f002 f967 	bl	8006088 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8003dba:	4853      	ldr	r0, [pc, #332]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003dbc:	f002 f84a 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
			if (arm.State == arm.ArmGripPreMOVE) {
 8003dc0:	4b48      	ldr	r3, [pc, #288]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003dc2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003dc6:	2b0a      	cmp	r3, #10
 8003dc8:	d104      	bne.n	8003dd4 <HAL_TIM_PeriodElapsedCallback+0xfc>
				arm.State = arm.ArmGripPreENDMOVE;
 8003dca:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003dcc:	220c      	movs	r2, #12
 8003dce:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8003dd2:	e01c      	b.n	8003e0e <HAL_TIM_PeriodElapsedCallback+0x136>
			} else if (arm.State == arm.ArmGripPreMOVEStep) {
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003dd6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003dda:	2b0b      	cmp	r3, #11
 8003ddc:	d104      	bne.n	8003de8 <HAL_TIM_PeriodElapsedCallback+0x110>
				arm.State = arm.ArmGripPreENDMOVEStep;
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003de0:	220d      	movs	r2, #13
 8003de2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8003de6:	e012      	b.n	8003e0e <HAL_TIM_PeriodElapsedCallback+0x136>
			} else if (arm.State == arm.ArmGripMOVE) {
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003dea:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d104      	bne.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x124>
				arm.State = arm.ArmGripENDMOVE;
 8003df2:	4b3c      	ldr	r3, [pc, #240]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003df4:	2209      	movs	r2, #9
 8003df6:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8003dfa:	e008      	b.n	8003e0e <HAL_TIM_PeriodElapsedCallback+0x136>
			} else if (arm.State == arm.ArmGripMOVERetry) {
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003dfe:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003e02:	2b14      	cmp	r3, #20
 8003e04:	d103      	bne.n	8003e0e <HAL_TIM_PeriodElapsedCallback+0x136>
				arm.State = arm.ArmGripPermit;
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e08:	2215      	movs	r2, #21
 8003e0a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			cntImpulse3 = 0;
 8003e0e:	4b3c      	ldr	r3, [pc, #240]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
			timerFT3 = true;
 8003e14:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
			arm.isLoose = true;
 8003e1a:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8003e22:	e057      	b.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
		else if (cntImpulse3 >= arm.gripperPsteps && gripIntFlag == false) {
 8003e24:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e28:	4b35      	ldr	r3, [pc, #212]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d80f      	bhi.n	8003e50 <HAL_TIM_PeriodElapsedCallback+0x178>
 8003e30:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_TIM_PeriodElapsedCallback+0x178>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003e38:	2104      	movs	r1, #4
 8003e3a:	4833      	ldr	r0, [pc, #204]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003e3c:	f002 f924 	bl	8006088 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8003e40:	4831      	ldr	r0, [pc, #196]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003e42:	f002 f807 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
			arm.State = arm.ArmGripMOVEError;
 8003e46:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e48:	2213      	movs	r2, #19
 8003e4a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8003e4e:	e041      	b.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
		} else if (cntImpulse3 >= arm.gripperPsteps || gripIntFlag == true) {
 8003e50:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e52:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d903      	bls.n	8003e64 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d137      	bne.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			gripIntFlag = false;
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003e6a:	2104      	movs	r1, #4
 8003e6c:	4826      	ldr	r0, [pc, #152]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003e6e:	f002 f90b 	bl	8006088 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8003e72:	4825      	ldr	r0, [pc, #148]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003e74:	f001 ffee 	bl	8005e54 <HAL_TIM_Base_Stop_IT>
			if (arm.State == arm.ArmGripPreMOVE) {
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e7a:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003e7e:	2b0a      	cmp	r3, #10
 8003e80:	d104      	bne.n	8003e8c <HAL_TIM_PeriodElapsedCallback+0x1b4>
				arm.State = arm.ArmGripPreENDMOVE;
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e84:	220c      	movs	r2, #12
 8003e86:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8003e8a:	e01c      	b.n	8003ec6 <HAL_TIM_PeriodElapsedCallback+0x1ee>
			} else if (arm.State == arm.ArmGripPreMOVEStep) {
 8003e8c:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e8e:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003e92:	2b0b      	cmp	r3, #11
 8003e94:	d104      	bne.n	8003ea0 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				arm.State = arm.ArmGripPreENDMOVEStep;
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003e98:	220d      	movs	r2, #13
 8003e9a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8003e9e:	e012      	b.n	8003ec6 <HAL_TIM_PeriodElapsedCallback+0x1ee>
			} else if (arm.State == arm.ArmGripMOVE) {
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003ea2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d104      	bne.n	8003eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
				arm.State = arm.ArmGripENDMOVE;
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003eac:	2209      	movs	r2, #9
 8003eae:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8003eb2:	e008      	b.n	8003ec6 <HAL_TIM_PeriodElapsedCallback+0x1ee>
			} else if (arm.State == arm.ArmGripMOVERetry) {
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003eb6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8003eba:	2b14      	cmp	r3, #20
 8003ebc:	d103      	bne.n	8003ec6 <HAL_TIM_PeriodElapsedCallback+0x1ee>
				arm.State = arm.ArmGripPermit;
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003ec0:	2215      	movs	r2, #21
 8003ec2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
			cntImpulse3 = 0;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
			timerFT3 = true;
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
}
 8003ed2:	e7ff      	b.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	20000280 	.word	0x20000280
 8003ee4:	2000028c 	.word	0x2000028c
 8003ee8:	20000094 	.word	0x20000094
 8003eec:	20000219 	.word	0x20000219
 8003ef0:	20000284 	.word	0x20000284
 8003ef4:	200000dc 	.word	0x200000dc
 8003ef8:	2000021a 	.word	0x2000021a
 8003efc:	40000400 	.word	0x40000400
 8003f00:	20000288 	.word	0x20000288
 8003f04:	2000021c 	.word	0x2000021c
 8003f08:	20000124 	.word	0x20000124
 8003f0c:	2000021b 	.word	0x2000021b

08003f10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//повинен пропищати при помилці; треба перевірити
	for (int t = 0; t <= 4; t++) {
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	e016      	b.n	8003f4a <Error_Handler+0x3a>
		for (int i = 0; i <= 200; i++) {
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	e00a      	b.n	8003f38 <Error_Handler+0x28>
			HAL_GPIO_TogglePin(Buser_GPIO_Port, Buser_Pin);
 8003f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f26:	480c      	ldr	r0, [pc, #48]	; (8003f58 <Error_Handler+0x48>)
 8003f28:	f000 fecd 	bl	8004cc6 <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f000 fb3b 	bl	80045a8 <HAL_Delay>
		for (int i = 0; i <= 200; i++) {
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2bc8      	cmp	r3, #200	; 0xc8
 8003f3c:	ddf1      	ble.n	8003f22 <Error_Handler+0x12>
		}
		HAL_Delay(100);
 8003f3e:	2064      	movs	r0, #100	; 0x64
 8003f40:	f000 fb32 	bl	80045a8 <HAL_Delay>
	for (int t = 0; t <= 4; t++) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3301      	adds	r3, #1
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	dde5      	ble.n	8003f1c <Error_Handler+0xc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f50:	b672      	cpsid	i
}
 8003f52:	bf00      	nop
	}
	__disable_irq();
	while (1) {
 8003f54:	e7fe      	b.n	8003f54 <Error_Handler+0x44>
 8003f56:	bf00      	nop
 8003f58:	40010800 	.word	0x40010800

08003f5c <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d109      	bne.n	8003f80 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d104      	bne.n	8003f80 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(240.0, 124.0);
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003f78:	4904      	ldr	r1, [pc, #16]	; (8003f8c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8003f7a:	4805      	ldr	r0, [pc, #20]	; (8003f90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003f7c:	f7fd fa5a 	bl	8001434 <_ZN7RoboArmC1Eff>
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	42f80000 	.word	0x42f80000
 8003f8c:	43700000 	.word	0x43700000
 8003f90:	2000028c 	.word	0x2000028c

08003f94 <_GLOBAL__sub_I_hspi1>:
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7ff ffdd 	bl	8003f5c <_Z41__static_initialization_and_destruction_0ii>
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_MspInit+0x6c>)
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_MspInit+0x6c>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	6193      	str	r3, [r2, #24]
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <HAL_MspInit+0x6c>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <HAL_MspInit+0x6c>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4a12      	ldr	r2, [pc, #72]	; (8004010 <HAL_MspInit+0x6c>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	61d3      	str	r3, [r2, #28]
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <HAL_MspInit+0x6c>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2105      	movs	r1, #5
 8003fde:	2005      	movs	r0, #5
 8003fe0:	f000 fbdd 	bl	800479e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003fe4:	2005      	movs	r0, #5
 8003fe6:	f000 fbf6 	bl	80047d6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_MspInit+0x70>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	4a04      	ldr	r2, [pc, #16]	; (8004014 <HAL_MspInit+0x70>)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	40010000 	.word	0x40010000

08004018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a26      	ldr	r2, [pc, #152]	; (80040cc <HAL_SPI_MspInit+0xb4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d145      	bne.n	80040c4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_SPI_MspInit+0xb8>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <HAL_SPI_MspInit+0xb8>)
 800403e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004042:	6193      	str	r3, [r2, #24]
 8004044:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_SPI_MspInit+0xb8>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004050:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <HAL_SPI_MspInit+0xb8>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_SPI_MspInit+0xb8>)
 8004056:	f043 0308 	orr.w	r3, r3, #8
 800405a:	6193      	str	r3, [r2, #24]
 800405c:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <HAL_SPI_MspInit+0xb8>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004068:	2328      	movs	r3, #40	; 0x28
 800406a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406c:	2302      	movs	r3, #2
 800406e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	4619      	mov	r1, r3
 800407a:	4816      	ldr	r0, [pc, #88]	; (80040d4 <HAL_SPI_MspInit+0xbc>)
 800407c:	f000 fc78 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004080:	2310      	movs	r3, #16
 8004082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004084:	2300      	movs	r3, #0
 8004086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	4619      	mov	r1, r3
 8004092:	4810      	ldr	r0, [pc, #64]	; (80040d4 <HAL_SPI_MspInit+0xbc>)
 8004094:	f000 fc6c 	bl	8004970 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_SPI_MspInit+0xc0>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <HAL_SPI_MspInit+0xc0>)
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80040b4:	2200      	movs	r2, #0
 80040b6:	2105      	movs	r1, #5
 80040b8:	2023      	movs	r0, #35	; 0x23
 80040ba:	f000 fb70 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80040be:	2023      	movs	r0, #35	; 0x23
 80040c0:	f000 fb89 	bl	80047d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040c4:	bf00      	nop
 80040c6:	3728      	adds	r7, #40	; 0x28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40013000 	.word	0x40013000
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40010c00 	.word	0x40010c00
 80040d8:	40010000 	.word	0x40010000

080040dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a27      	ldr	r2, [pc, #156]	; (8004188 <HAL_TIM_PWM_MspInit+0xac>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d114      	bne.n	8004118 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	4a26      	ldr	r2, [pc, #152]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 80040f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040f8:	6193      	str	r3, [r2, #24]
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004106:	2200      	movs	r2, #0
 8004108:	2105      	movs	r1, #5
 800410a:	2019      	movs	r0, #25
 800410c:	f000 fb47 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004110:	2019      	movs	r0, #25
 8004112:	f000 fb60 	bl	80047d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004116:	e032      	b.n	800417e <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004120:	d114      	bne.n	800414c <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	61d3      	str	r3, [r2, #28]
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800413a:	2200      	movs	r2, #0
 800413c:	2105      	movs	r1, #5
 800413e:	201c      	movs	r0, #28
 8004140:	f000 fb2d 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004144:	201c      	movs	r0, #28
 8004146:	f000 fb46 	bl	80047d6 <HAL_NVIC_EnableIRQ>
}
 800414a:	e018      	b.n	800417e <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <HAL_TIM_PWM_MspInit+0xb4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d113      	bne.n	800417e <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004156:	4b0d      	ldr	r3, [pc, #52]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	4a0c      	ldr	r2, [pc, #48]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	61d3      	str	r3, [r2, #28]
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_TIM_PWM_MspInit+0xb0>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	2105      	movs	r1, #5
 8004172:	201d      	movs	r0, #29
 8004174:	f000 fb13 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004178:	201d      	movs	r0, #29
 800417a:	f000 fb2c 	bl	80047d6 <HAL_NVIC_EnableIRQ>
}
 800417e:	bf00      	nop
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40021000 	.word	0x40021000
 8004190:	40000400 	.word	0x40000400

08004194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	f107 0318 	add.w	r3, r7, #24
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2e      	ldr	r2, [pc, #184]	; (8004268 <HAL_TIM_MspPostInit+0xd4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d119      	bne.n	80041e8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4a2c      	ldr	r2, [pc, #176]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6193      	str	r3, [r2, #24]
 80041c0:	4b2a      	ldr	r3, [pc, #168]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d2:	2302      	movs	r3, #2
 80041d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d6:	2302      	movs	r3, #2
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041da:	f107 0318 	add.w	r3, r7, #24
 80041de:	4619      	mov	r1, r3
 80041e0:	4823      	ldr	r0, [pc, #140]	; (8004270 <HAL_TIM_MspPostInit+0xdc>)
 80041e2:	f000 fbc5 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80041e6:	e03a      	b.n	800425e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d118      	bne.n	8004224 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f2:	4b1e      	ldr	r3, [pc, #120]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	4a1d      	ldr	r2, [pc, #116]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	6193      	str	r3, [r2, #24]
 80041fe:	4b1b      	ldr	r3, [pc, #108]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800420a:	2302      	movs	r3, #2
 800420c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420e:	2302      	movs	r3, #2
 8004210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004212:	2302      	movs	r3, #2
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004216:	f107 0318 	add.w	r3, r7, #24
 800421a:	4619      	mov	r1, r3
 800421c:	4814      	ldr	r0, [pc, #80]	; (8004270 <HAL_TIM_MspPostInit+0xdc>)
 800421e:	f000 fba7 	bl	8004970 <HAL_GPIO_Init>
}
 8004222:	e01c      	b.n	800425e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a12      	ldr	r2, [pc, #72]	; (8004274 <HAL_TIM_MspPostInit+0xe0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d117      	bne.n	800425e <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	4a0e      	ldr	r2, [pc, #56]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 8004234:	f043 0304 	orr.w	r3, r3, #4
 8004238:	6193      	str	r3, [r2, #24]
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_TIM_MspPostInit+0xd8>)
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424a:	2302      	movs	r3, #2
 800424c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424e:	2302      	movs	r3, #2
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004252:	f107 0318 	add.w	r3, r7, #24
 8004256:	4619      	mov	r1, r3
 8004258:	4805      	ldr	r0, [pc, #20]	; (8004270 <HAL_TIM_MspPostInit+0xdc>)
 800425a:	f000 fb89 	bl	8004970 <HAL_GPIO_Init>
}
 800425e:	bf00      	nop
 8004260:	3728      	adds	r7, #40	; 0x28
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40021000 	.word	0x40021000
 8004270:	40010800 	.word	0x40010800
 8004274:	40000400 	.word	0x40000400

08004278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	f107 0318 	add.w	r3, r7, #24
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a3a      	ldr	r2, [pc, #232]	; (800437c <HAL_UART_MspInit+0x104>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d13a      	bne.n	800430e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004298:	4b39      	ldr	r3, [pc, #228]	; (8004380 <HAL_UART_MspInit+0x108>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4a38      	ldr	r2, [pc, #224]	; (8004380 <HAL_UART_MspInit+0x108>)
 800429e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042a2:	6193      	str	r3, [r2, #24]
 80042a4:	4b36      	ldr	r3, [pc, #216]	; (8004380 <HAL_UART_MspInit+0x108>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b0:	4b33      	ldr	r3, [pc, #204]	; (8004380 <HAL_UART_MspInit+0x108>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	4a32      	ldr	r2, [pc, #200]	; (8004380 <HAL_UART_MspInit+0x108>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6193      	str	r3, [r2, #24]
 80042bc:	4b30      	ldr	r3, [pc, #192]	; (8004380 <HAL_UART_MspInit+0x108>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80042c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ce:	2302      	movs	r3, #2
 80042d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042d2:	2303      	movs	r3, #3
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d6:	f107 0318 	add.w	r3, r7, #24
 80042da:	4619      	mov	r1, r3
 80042dc:	4829      	ldr	r0, [pc, #164]	; (8004384 <HAL_UART_MspInit+0x10c>)
 80042de:	f000 fb47 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042ec:	2301      	movs	r3, #1
 80042ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f0:	f107 0318 	add.w	r3, r7, #24
 80042f4:	4619      	mov	r1, r3
 80042f6:	4823      	ldr	r0, [pc, #140]	; (8004384 <HAL_UART_MspInit+0x10c>)
 80042f8:	f000 fb3a 	bl	8004970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80042fc:	2200      	movs	r2, #0
 80042fe:	2105      	movs	r1, #5
 8004300:	2025      	movs	r0, #37	; 0x25
 8004302:	f000 fa4c 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004306:	2025      	movs	r0, #37	; 0x25
 8004308:	f000 fa65 	bl	80047d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800430c:	e032      	b.n	8004374 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_UART_MspInit+0x110>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d12d      	bne.n	8004374 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_UART_MspInit+0x108>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	4a18      	ldr	r2, [pc, #96]	; (8004380 <HAL_UART_MspInit+0x108>)
 800431e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004322:	61d3      	str	r3, [r2, #28]
 8004324:	4b16      	ldr	r3, [pc, #88]	; (8004380 <HAL_UART_MspInit+0x108>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <HAL_UART_MspInit+0x108>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_UART_MspInit+0x108>)
 8004336:	f043 0304 	orr.w	r3, r3, #4
 800433a:	6193      	str	r3, [r2, #24]
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_UART_MspInit+0x108>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004348:	2304      	movs	r3, #4
 800434a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800434c:	2312      	movs	r3, #18
 800434e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004350:	2301      	movs	r3, #1
 8004352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004354:	2303      	movs	r3, #3
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004358:	f107 0318 	add.w	r3, r7, #24
 800435c:	4619      	mov	r1, r3
 800435e:	4809      	ldr	r0, [pc, #36]	; (8004384 <HAL_UART_MspInit+0x10c>)
 8004360:	f000 fb06 	bl	8004970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	2105      	movs	r1, #5
 8004368:	2026      	movs	r0, #38	; 0x26
 800436a:	f000 fa18 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800436e:	2026      	movs	r0, #38	; 0x26
 8004370:	f000 fa31 	bl	80047d6 <HAL_NVIC_EnableIRQ>
}
 8004374:	bf00      	nop
 8004376:	3728      	adds	r7, #40	; 0x28
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40013800 	.word	0x40013800
 8004380:	40021000 	.word	0x40021000
 8004384:	40010800 	.word	0x40010800
 8004388:	40004400 	.word	0x40004400

0800438c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004390:	e7fe      	b.n	8004390 <NMI_Handler+0x4>

08004392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004396:	e7fe      	b.n	8004396 <HardFault_Handler+0x4>

08004398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800439c:	e7fe      	b.n	800439c <MemManage_Handler+0x4>

0800439e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043a2:	e7fe      	b.n	80043a2 <BusFault_Handler+0x4>

080043a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043a8:	e7fe      	b.n	80043a8 <UsageFault_Handler+0x4>

080043aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr

080043c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043d2:	f000 f8cd 	bl	8004570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}

080043da <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap3_Pin);
 80043ea:	2080      	movs	r0, #128	; 0x80
 80043ec:	f000 fc84 	bl	8004cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043f8:	4802      	ldr	r0, [pc, #8]	; (8004404 <TIM1_UP_IRQHandler+0x10>)
 80043fa:	f001 fea9 	bl	8006150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000094 	.word	0x20000094

08004408 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800440c:	4802      	ldr	r0, [pc, #8]	; (8004418 <TIM2_IRQHandler+0x10>)
 800440e:	f001 fe9f 	bl	8006150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200000dc 	.word	0x200000dc

0800441c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <TIM3_IRQHandler+0x10>)
 8004422:	f001 fe95 	bl	8006150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000124 	.word	0x20000124

08004430 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004434:	4802      	ldr	r0, [pc, #8]	; (8004440 <SPI1_IRQHandler+0x10>)
 8004436:	f001 fac7 	bl	80059c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2000003c 	.word	0x2000003c

08004444 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004448:	4802      	ldr	r0, [pc, #8]	; (8004454 <USART1_IRQHandler+0x10>)
 800444a:	f002 fc7f 	bl	8006d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	2000016c 	.word	0x2000016c

08004458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800445c:	4802      	ldr	r0, [pc, #8]	; (8004468 <USART2_IRQHandler+0x10>)
 800445e:	f002 fc75 	bl	8006d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	200001b4 	.word	0x200001b4

0800446c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap4_Pin);
 8004470:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004474:	f000 fc40 	bl	8004cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap1_Pin);
 8004478:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800447c:	f000 fc3c 	bl	8004cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap2_Pin);
 8004480:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004484:	f000 fc38 	bl	8004cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004488:	bf00      	nop
 800448a:	bd80      	pop	{r7, pc}

0800448c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004498:	f7ff fff8 	bl	800448c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800449c:	480b      	ldr	r0, [pc, #44]	; (80044cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800449e:	490c      	ldr	r1, [pc, #48]	; (80044d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80044a0:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80044a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044a4:	e002      	b.n	80044ac <LoopCopyDataInit>

080044a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044aa:	3304      	adds	r3, #4

080044ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044b0:	d3f9      	bcc.n	80044a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044b2:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80044b4:	4c09      	ldr	r4, [pc, #36]	; (80044dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044b8:	e001      	b.n	80044be <LoopFillZerobss>

080044ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044bc:	3204      	adds	r2, #4

080044be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044c0:	d3fb      	bcc.n	80044ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044c2:	f003 fa45 	bl	8007950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044c6:	f7fe fa4b 	bl	8002960 <main>
  bx lr
 80044ca:	4770      	bx	lr
  ldr r0, =_sdata
 80044cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044d0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80044d4:	080079e8 	.word	0x080079e8
  ldr r2, =_sbss
 80044d8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80044dc:	20000418 	.word	0x20000418

080044e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044e0:	e7fe      	b.n	80044e0 <ADC1_2_IRQHandler>
	...

080044e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044e8:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_Init+0x28>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a07      	ldr	r2, [pc, #28]	; (800450c <HAL_Init+0x28>)
 80044ee:	f043 0310 	orr.w	r3, r3, #16
 80044f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044f4:	2003      	movs	r0, #3
 80044f6:	f000 f947 	bl	8004788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044fa:	200f      	movs	r0, #15
 80044fc:	f000 f808 	bl	8004510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004500:	f7ff fd50 	bl	8003fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40022000 	.word	0x40022000

08004510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004518:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_InitTick+0x54>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_InitTick+0x58>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	4619      	mov	r1, r3
 8004522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004526:	fbb3 f3f1 	udiv	r3, r3, r1
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f95f 	bl	80047f2 <HAL_SYSTICK_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e00e      	b.n	800455c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b0f      	cmp	r3, #15
 8004542:	d80a      	bhi.n	800455a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004544:	2200      	movs	r2, #0
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800454c:	f000 f927 	bl	800479e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004550:	4a06      	ldr	r2, [pc, #24]	; (800456c <HAL_InitTick+0x5c>)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e000      	b.n	800455c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000014 	.word	0x20000014
 8004568:	2000001c 	.word	0x2000001c
 800456c:	20000018 	.word	0x20000018

08004570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_IncTick+0x1c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_IncTick+0x20>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4413      	add	r3, r2
 8004580:	4a03      	ldr	r2, [pc, #12]	; (8004590 <HAL_IncTick+0x20>)
 8004582:	6013      	str	r3, [r2, #0]
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	2000001c 	.word	0x2000001c
 8004590:	20000414 	.word	0x20000414

08004594 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return uwTick;
 8004598:	4b02      	ldr	r3, [pc, #8]	; (80045a4 <HAL_GetTick+0x10>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	20000414 	.word	0x20000414

080045a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045b0:	f7ff fff0 	bl	8004594 <HAL_GetTick>
 80045b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c0:	d005      	beq.n	80045ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <HAL_Delay+0x44>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045ce:	bf00      	nop
 80045d0:	f7ff ffe0 	bl	8004594 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d8f7      	bhi.n	80045d0 <HAL_Delay+0x28>
  {
  }
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000001c 	.word	0x2000001c

080045f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800460c:	4013      	ands	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800461c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004622:	4a04      	ldr	r2, [pc, #16]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	60d3      	str	r3, [r2, #12]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__NVIC_GetPriorityGrouping+0x18>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 0307 	and.w	r3, r3, #7
}
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	2b00      	cmp	r3, #0
 8004664:	db0b      	blt.n	800467e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	4906      	ldr	r1, [pc, #24]	; (8004688 <__NVIC_EnableIRQ+0x34>)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2001      	movs	r0, #1
 8004676:	fa00 f202 	lsl.w	r2, r0, r2
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	e000e100 	.word	0xe000e100

0800468c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469c:	2b00      	cmp	r3, #0
 800469e:	db0a      	blt.n	80046b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	490c      	ldr	r1, [pc, #48]	; (80046d8 <__NVIC_SetPriority+0x4c>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	0112      	lsls	r2, r2, #4
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	440b      	add	r3, r1
 80046b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b4:	e00a      	b.n	80046cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4908      	ldr	r1, [pc, #32]	; (80046dc <__NVIC_SetPriority+0x50>)
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	3b04      	subs	r3, #4
 80046c4:	0112      	lsls	r2, r2, #4
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	440b      	add	r3, r1
 80046ca:	761a      	strb	r2, [r3, #24]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	e000e100 	.word	0xe000e100
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	; 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f1c3 0307 	rsb	r3, r3, #7
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	bf28      	it	cs
 80046fe:	2304      	movcs	r3, #4
 8004700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3304      	adds	r3, #4
 8004706:	2b06      	cmp	r3, #6
 8004708:	d902      	bls.n	8004710 <NVIC_EncodePriority+0x30>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3b03      	subs	r3, #3
 800470e:	e000      	b.n	8004712 <NVIC_EncodePriority+0x32>
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	401a      	ands	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa01 f303 	lsl.w	r3, r1, r3
 8004732:	43d9      	mvns	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	4313      	orrs	r3, r2
         );
}
 800473a:	4618      	mov	r0, r3
 800473c:	3724      	adds	r7, #36	; 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004754:	d301      	bcc.n	800475a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004756:	2301      	movs	r3, #1
 8004758:	e00f      	b.n	800477a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <SysTick_Config+0x40>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004762:	210f      	movs	r1, #15
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004768:	f7ff ff90 	bl	800468c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <SysTick_Config+0x40>)
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004772:	4b04      	ldr	r3, [pc, #16]	; (8004784 <SysTick_Config+0x40>)
 8004774:	2207      	movs	r2, #7
 8004776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000e010 	.word	0xe000e010

08004788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff2d 	bl	80045f0 <__NVIC_SetPriorityGrouping>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	4603      	mov	r3, r0
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047b0:	f7ff ff42 	bl	8004638 <__NVIC_GetPriorityGrouping>
 80047b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	6978      	ldr	r0, [r7, #20]
 80047bc:	f7ff ff90 	bl	80046e0 <NVIC_EncodePriority>
 80047c0:	4602      	mov	r2, r0
 80047c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ff5f 	bl	800468c <__NVIC_SetPriority>
}
 80047ce:	bf00      	nop
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff35 	bl	8004654 <__NVIC_EnableIRQ>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ffa2 	bl	8004744 <SysTick_Config>
 8004800:	4603      	mov	r3, r0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d008      	beq.n	8004834 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2204      	movs	r2, #4
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e020      	b.n	8004876 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 020e 	bic.w	r2, r2, #14
 8004842:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	2101      	movs	r1, #1
 800485e:	fa01 f202 	lsl.w	r2, r1, r2
 8004862:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d005      	beq.n	80048a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2204      	movs	r2, #4
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	e051      	b.n	8004948 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 020e 	bic.w	r2, r2, #14
 80048b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_DMA_Abort_IT+0xd4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d029      	beq.n	8004922 <HAL_DMA_Abort_IT+0xa2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a21      	ldr	r2, [pc, #132]	; (8004958 <HAL_DMA_Abort_IT+0xd8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d022      	beq.n	800491e <HAL_DMA_Abort_IT+0x9e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_DMA_Abort_IT+0xdc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01a      	beq.n	8004918 <HAL_DMA_Abort_IT+0x98>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <HAL_DMA_Abort_IT+0xe0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d012      	beq.n	8004912 <HAL_DMA_Abort_IT+0x92>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <HAL_DMA_Abort_IT+0xe4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00a      	beq.n	800490c <HAL_DMA_Abort_IT+0x8c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <HAL_DMA_Abort_IT+0xe8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d102      	bne.n	8004906 <HAL_DMA_Abort_IT+0x86>
 8004900:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004904:	e00e      	b.n	8004924 <HAL_DMA_Abort_IT+0xa4>
 8004906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800490a:	e00b      	b.n	8004924 <HAL_DMA_Abort_IT+0xa4>
 800490c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004910:	e008      	b.n	8004924 <HAL_DMA_Abort_IT+0xa4>
 8004912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004916:	e005      	b.n	8004924 <HAL_DMA_Abort_IT+0xa4>
 8004918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800491c:	e002      	b.n	8004924 <HAL_DMA_Abort_IT+0xa4>
 800491e:	2310      	movs	r3, #16
 8004920:	e000      	b.n	8004924 <HAL_DMA_Abort_IT+0xa4>
 8004922:	2301      	movs	r3, #1
 8004924:	4a11      	ldr	r2, [pc, #68]	; (800496c <HAL_DMA_Abort_IT+0xec>)
 8004926:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
    } 
  }
  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40020008 	.word	0x40020008
 8004958:	4002001c 	.word	0x4002001c
 800495c:	40020030 	.word	0x40020030
 8004960:	40020044 	.word	0x40020044
 8004964:	40020058 	.word	0x40020058
 8004968:	4002006c 	.word	0x4002006c
 800496c:	40020000 	.word	0x40020000

08004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004970:	b480      	push	{r7}
 8004972:	b08b      	sub	sp, #44	; 0x2c
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800497e:	2300      	movs	r3, #0
 8004980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004982:	e161      	b.n	8004c48 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004984:	2201      	movs	r2, #1
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	429a      	cmp	r2, r3
 800499e:	f040 8150 	bne.w	8004c42 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4a97      	ldr	r2, [pc, #604]	; (8004c04 <HAL_GPIO_Init+0x294>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d05e      	beq.n	8004a6a <HAL_GPIO_Init+0xfa>
 80049ac:	4a95      	ldr	r2, [pc, #596]	; (8004c04 <HAL_GPIO_Init+0x294>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d875      	bhi.n	8004a9e <HAL_GPIO_Init+0x12e>
 80049b2:	4a95      	ldr	r2, [pc, #596]	; (8004c08 <HAL_GPIO_Init+0x298>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d058      	beq.n	8004a6a <HAL_GPIO_Init+0xfa>
 80049b8:	4a93      	ldr	r2, [pc, #588]	; (8004c08 <HAL_GPIO_Init+0x298>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d86f      	bhi.n	8004a9e <HAL_GPIO_Init+0x12e>
 80049be:	4a93      	ldr	r2, [pc, #588]	; (8004c0c <HAL_GPIO_Init+0x29c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d052      	beq.n	8004a6a <HAL_GPIO_Init+0xfa>
 80049c4:	4a91      	ldr	r2, [pc, #580]	; (8004c0c <HAL_GPIO_Init+0x29c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d869      	bhi.n	8004a9e <HAL_GPIO_Init+0x12e>
 80049ca:	4a91      	ldr	r2, [pc, #580]	; (8004c10 <HAL_GPIO_Init+0x2a0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d04c      	beq.n	8004a6a <HAL_GPIO_Init+0xfa>
 80049d0:	4a8f      	ldr	r2, [pc, #572]	; (8004c10 <HAL_GPIO_Init+0x2a0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d863      	bhi.n	8004a9e <HAL_GPIO_Init+0x12e>
 80049d6:	4a8f      	ldr	r2, [pc, #572]	; (8004c14 <HAL_GPIO_Init+0x2a4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d046      	beq.n	8004a6a <HAL_GPIO_Init+0xfa>
 80049dc:	4a8d      	ldr	r2, [pc, #564]	; (8004c14 <HAL_GPIO_Init+0x2a4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d85d      	bhi.n	8004a9e <HAL_GPIO_Init+0x12e>
 80049e2:	2b12      	cmp	r3, #18
 80049e4:	d82a      	bhi.n	8004a3c <HAL_GPIO_Init+0xcc>
 80049e6:	2b12      	cmp	r3, #18
 80049e8:	d859      	bhi.n	8004a9e <HAL_GPIO_Init+0x12e>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <HAL_GPIO_Init+0x80>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a6b 	.word	0x08004a6b
 80049f4:	08004a45 	.word	0x08004a45
 80049f8:	08004a57 	.word	0x08004a57
 80049fc:	08004a99 	.word	0x08004a99
 8004a00:	08004a9f 	.word	0x08004a9f
 8004a04:	08004a9f 	.word	0x08004a9f
 8004a08:	08004a9f 	.word	0x08004a9f
 8004a0c:	08004a9f 	.word	0x08004a9f
 8004a10:	08004a9f 	.word	0x08004a9f
 8004a14:	08004a9f 	.word	0x08004a9f
 8004a18:	08004a9f 	.word	0x08004a9f
 8004a1c:	08004a9f 	.word	0x08004a9f
 8004a20:	08004a9f 	.word	0x08004a9f
 8004a24:	08004a9f 	.word	0x08004a9f
 8004a28:	08004a9f 	.word	0x08004a9f
 8004a2c:	08004a9f 	.word	0x08004a9f
 8004a30:	08004a9f 	.word	0x08004a9f
 8004a34:	08004a4d 	.word	0x08004a4d
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	4a76      	ldr	r2, [pc, #472]	; (8004c18 <HAL_GPIO_Init+0x2a8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a42:	e02c      	b.n	8004a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	623b      	str	r3, [r7, #32]
          break;
 8004a4a:	e029      	b.n	8004aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	3304      	adds	r3, #4
 8004a52:	623b      	str	r3, [r7, #32]
          break;
 8004a54:	e024      	b.n	8004aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	623b      	str	r3, [r7, #32]
          break;
 8004a5e:	e01f      	b.n	8004aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	330c      	adds	r3, #12
 8004a66:	623b      	str	r3, [r7, #32]
          break;
 8004a68:	e01a      	b.n	8004aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a72:	2304      	movs	r3, #4
 8004a74:	623b      	str	r3, [r7, #32]
          break;
 8004a76:	e013      	b.n	8004aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d105      	bne.n	8004a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a80:	2308      	movs	r3, #8
 8004a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	611a      	str	r2, [r3, #16]
          break;
 8004a8a:	e009      	b.n	8004aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	615a      	str	r2, [r3, #20]
          break;
 8004a96:	e003      	b.n	8004aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	623b      	str	r3, [r7, #32]
          break;
 8004a9c:	e000      	b.n	8004aa0 <HAL_GPIO_Init+0x130>
          break;
 8004a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2bff      	cmp	r3, #255	; 0xff
 8004aa4:	d801      	bhi.n	8004aaa <HAL_GPIO_Init+0x13a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	e001      	b.n	8004aae <HAL_GPIO_Init+0x13e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2bff      	cmp	r3, #255	; 0xff
 8004ab4:	d802      	bhi.n	8004abc <HAL_GPIO_Init+0x14c>
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	e002      	b.n	8004ac2 <HAL_GPIO_Init+0x152>
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	3b08      	subs	r3, #8
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	210f      	movs	r1, #15
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	6a39      	ldr	r1, [r7, #32]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	431a      	orrs	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 80a9 	beq.w	8004c42 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004af0:	4b4a      	ldr	r3, [pc, #296]	; (8004c1c <HAL_GPIO_Init+0x2ac>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	4a49      	ldr	r2, [pc, #292]	; (8004c1c <HAL_GPIO_Init+0x2ac>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6193      	str	r3, [r2, #24]
 8004afc:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <HAL_GPIO_Init+0x2ac>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b08:	4a45      	ldr	r2, [pc, #276]	; (8004c20 <HAL_GPIO_Init+0x2b0>)
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	089b      	lsrs	r3, r3, #2
 8004b0e:	3302      	adds	r3, #2
 8004b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	220f      	movs	r2, #15
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a3d      	ldr	r2, [pc, #244]	; (8004c24 <HAL_GPIO_Init+0x2b4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00d      	beq.n	8004b50 <HAL_GPIO_Init+0x1e0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <HAL_GPIO_Init+0x2b8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d007      	beq.n	8004b4c <HAL_GPIO_Init+0x1dc>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a3b      	ldr	r2, [pc, #236]	; (8004c2c <HAL_GPIO_Init+0x2bc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <HAL_GPIO_Init+0x1d8>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e004      	b.n	8004b52 <HAL_GPIO_Init+0x1e2>
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e002      	b.n	8004b52 <HAL_GPIO_Init+0x1e2>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <HAL_GPIO_Init+0x1e2>
 8004b50:	2300      	movs	r3, #0
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	f002 0203 	and.w	r2, r2, #3
 8004b58:	0092      	lsls	r2, r2, #2
 8004b5a:	4093      	lsls	r3, r2
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b62:	492f      	ldr	r1, [pc, #188]	; (8004c20 <HAL_GPIO_Init+0x2b0>)
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	3302      	adds	r3, #2
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b7c:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	492b      	ldr	r1, [pc, #172]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	608b      	str	r3, [r1, #8]
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b8a:	4b29      	ldr	r3, [pc, #164]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	4927      	ldr	r1, [pc, #156]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d006      	beq.n	8004bb2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ba4:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	4921      	ldr	r1, [pc, #132]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60cb      	str	r3, [r1, #12]
 8004bb0:	e006      	b.n	8004bc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	491d      	ldr	r1, [pc, #116]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d006      	beq.n	8004bda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bcc:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	4917      	ldr	r1, [pc, #92]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	604b      	str	r3, [r1, #4]
 8004bd8:	e006      	b.n	8004be8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	4913      	ldr	r1, [pc, #76]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01f      	beq.n	8004c34 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	490d      	ldr	r1, [pc, #52]	; (8004c30 <HAL_GPIO_Init+0x2c0>)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e01f      	b.n	8004c42 <HAL_GPIO_Init+0x2d2>
 8004c02:	bf00      	nop
 8004c04:	10320000 	.word	0x10320000
 8004c08:	10310000 	.word	0x10310000
 8004c0c:	10220000 	.word	0x10220000
 8004c10:	10210000 	.word	0x10210000
 8004c14:	10120000 	.word	0x10120000
 8004c18:	10110000 	.word	0x10110000
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40010800 	.word	0x40010800
 8004c28:	40010c00 	.word	0x40010c00
 8004c2c:	40011000 	.word	0x40011000
 8004c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_GPIO_Init+0x2f4>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	4909      	ldr	r1, [pc, #36]	; (8004c64 <HAL_GPIO_Init+0x2f4>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	3301      	adds	r3, #1
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f47f ae96 	bne.w	8004984 <HAL_GPIO_Init+0x14>
  }
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	372c      	adds	r7, #44	; 0x2c
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	40010400 	.word	0x40010400

08004c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	887b      	ldrh	r3, [r7, #2]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
 8004c84:	e001      	b.n	8004c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	807b      	strh	r3, [r7, #2]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ca6:	787b      	ldrb	r3, [r7, #1]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cac:	887a      	ldrh	r2, [r7, #2]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cb2:	e003      	b.n	8004cbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cb4:	887b      	ldrh	r3, [r7, #2]
 8004cb6:	041a      	lsls	r2, r3, #16
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	611a      	str	r2, [r3, #16]
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	041a      	lsls	r2, r3, #16
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	43d9      	mvns	r1, r3
 8004ce4:	887b      	ldrh	r3, [r7, #2]
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	611a      	str	r2, [r3, #16]
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d006      	beq.n	8004d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d0e:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe fe92 	bl	8003a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40010400 	.word	0x40010400

08004d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e272      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 8087 	beq.w	8004e56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d48:	4b92      	ldr	r3, [pc, #584]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 030c 	and.w	r3, r3, #12
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d00c      	beq.n	8004d6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d54:	4b8f      	ldr	r3, [pc, #572]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d112      	bne.n	8004d86 <HAL_RCC_OscConfig+0x5e>
 8004d60:	4b8c      	ldr	r3, [pc, #560]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d10b      	bne.n	8004d86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6e:	4b89      	ldr	r3, [pc, #548]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d06c      	beq.n	8004e54 <HAL_RCC_OscConfig+0x12c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d168      	bne.n	8004e54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e24c      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x76>
 8004d90:	4b80      	ldr	r3, [pc, #512]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7f      	ldr	r2, [pc, #508]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e02e      	b.n	8004dfc <HAL_RCC_OscConfig+0xd4>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x98>
 8004da6:	4b7b      	ldr	r3, [pc, #492]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7a      	ldr	r2, [pc, #488]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4b78      	ldr	r3, [pc, #480]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a77      	ldr	r2, [pc, #476]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e01d      	b.n	8004dfc <HAL_RCC_OscConfig+0xd4>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0xbc>
 8004dca:	4b72      	ldr	r3, [pc, #456]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a71      	ldr	r2, [pc, #452]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b6f      	ldr	r3, [pc, #444]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6e      	ldr	r2, [pc, #440]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCC_OscConfig+0xd4>
 8004de4:	4b6b      	ldr	r3, [pc, #428]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a6a      	ldr	r2, [pc, #424]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b68      	ldr	r3, [pc, #416]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a67      	ldr	r2, [pc, #412]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7ff fbc6 	bl	8004594 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7ff fbc2 	bl	8004594 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e200      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4b5d      	ldr	r3, [pc, #372]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0xe4>
 8004e2a:	e014      	b.n	8004e56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7ff fbb2 	bl	8004594 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e34:	f7ff fbae 	bl	8004594 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e1ec      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e46:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x10c>
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d063      	beq.n	8004f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e62:	4b4c      	ldr	r3, [pc, #304]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e6e:	4b49      	ldr	r3, [pc, #292]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d11c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x18c>
 8004e7a:	4b46      	ldr	r3, [pc, #280]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d116      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	4b43      	ldr	r3, [pc, #268]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_RCC_OscConfig+0x176>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1c0      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4939      	ldr	r1, [pc, #228]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb2:	e03a      	b.n	8004f2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ebc:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7ff fb67 	bl	8004594 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eca:	f7ff fb63 	bl	8004594 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e1a1      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee8:	4b2a      	ldr	r3, [pc, #168]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4927      	ldr	r1, [pc, #156]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
 8004efc:	e015      	b.n	8004f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efe:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <HAL_RCC_OscConfig+0x270>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7ff fb46 	bl	8004594 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0c:	f7ff fb42 	bl	8004594 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e180      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	4b1d      	ldr	r3, [pc, #116]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d03a      	beq.n	8004fac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d019      	beq.n	8004f72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3e:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <HAL_RCC_OscConfig+0x274>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f44:	f7ff fb26 	bl	8004594 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7ff fb22 	bl	8004594 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e160      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f000 fada 	bl	8005524 <RCC_Delay>
 8004f70:	e01c      	b.n	8004fac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_RCC_OscConfig+0x274>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f78:	f7ff fb0c 	bl	8004594 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f7e:	e00f      	b.n	8004fa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f80:	f7ff fb08 	bl	8004594 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d908      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e146      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000
 8004f98:	42420000 	.word	0x42420000
 8004f9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa0:	4b92      	ldr	r3, [pc, #584]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e9      	bne.n	8004f80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a6 	beq.w	8005106 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fbe:	4b8b      	ldr	r3, [pc, #556]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fca:	4b88      	ldr	r3, [pc, #544]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	4a87      	ldr	r2, [pc, #540]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	61d3      	str	r3, [r2, #28]
 8004fd6:	4b85      	ldr	r3, [pc, #532]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe6:	4b82      	ldr	r3, [pc, #520]	; (80051f0 <HAL_RCC_OscConfig+0x4c8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d118      	bne.n	8005024 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ff2:	4b7f      	ldr	r3, [pc, #508]	; (80051f0 <HAL_RCC_OscConfig+0x4c8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a7e      	ldr	r2, [pc, #504]	; (80051f0 <HAL_RCC_OscConfig+0x4c8>)
 8004ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffe:	f7ff fac9 	bl	8004594 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005006:	f7ff fac5 	bl	8004594 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b64      	cmp	r3, #100	; 0x64
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e103      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005018:	4b75      	ldr	r3, [pc, #468]	; (80051f0 <HAL_RCC_OscConfig+0x4c8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x312>
 800502c:	4b6f      	ldr	r3, [pc, #444]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	4a6e      	ldr	r2, [pc, #440]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6213      	str	r3, [r2, #32]
 8005038:	e02d      	b.n	8005096 <HAL_RCC_OscConfig+0x36e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x334>
 8005042:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4a69      	ldr	r2, [pc, #420]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6213      	str	r3, [r2, #32]
 800504e:	4b67      	ldr	r3, [pc, #412]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4a66      	ldr	r2, [pc, #408]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	6213      	str	r3, [r2, #32]
 800505a:	e01c      	b.n	8005096 <HAL_RCC_OscConfig+0x36e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b05      	cmp	r3, #5
 8005062:	d10c      	bne.n	800507e <HAL_RCC_OscConfig+0x356>
 8005064:	4b61      	ldr	r3, [pc, #388]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	4a60      	ldr	r2, [pc, #384]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	6213      	str	r3, [r2, #32]
 8005070:	4b5e      	ldr	r3, [pc, #376]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	4a5d      	ldr	r2, [pc, #372]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6213      	str	r3, [r2, #32]
 800507c:	e00b      	b.n	8005096 <HAL_RCC_OscConfig+0x36e>
 800507e:	4b5b      	ldr	r3, [pc, #364]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	4a5a      	ldr	r2, [pc, #360]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	6213      	str	r3, [r2, #32]
 800508a:	4b58      	ldr	r3, [pc, #352]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	4a57      	ldr	r2, [pc, #348]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509e:	f7ff fa79 	bl	8004594 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7ff fa75 	bl	8004594 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0b1      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050bc:	4b4b      	ldr	r3, [pc, #300]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ee      	beq.n	80050a6 <HAL_RCC_OscConfig+0x37e>
 80050c8:	e014      	b.n	80050f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ca:	f7ff fa63 	bl	8004594 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d0:	e00a      	b.n	80050e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f7ff fa5f 	bl	8004594 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e09b      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e8:	4b40      	ldr	r3, [pc, #256]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1ee      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d105      	bne.n	8005106 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050fa:	4b3c      	ldr	r3, [pc, #240]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	4a3b      	ldr	r2, [pc, #236]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005104:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8087 	beq.w	800521e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005110:	4b36      	ldr	r3, [pc, #216]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b08      	cmp	r3, #8
 800511a:	d061      	beq.n	80051e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d146      	bne.n	80051b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005124:	4b33      	ldr	r3, [pc, #204]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512a:	f7ff fa33 	bl	8004594 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005132:	f7ff fa2f 	bl	8004594 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e06d      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005144:	4b29      	ldr	r3, [pc, #164]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f0      	bne.n	8005132 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d108      	bne.n	800516c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	4921      	ldr	r1, [pc, #132]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800516c:	4b1f      	ldr	r3, [pc, #124]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a19      	ldr	r1, [r3, #32]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	430b      	orrs	r3, r1
 800517e:	491b      	ldr	r1, [pc, #108]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005184:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518a:	f7ff fa03 	bl	8004594 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7ff f9ff 	bl	8004594 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e03d      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x46a>
 80051b0:	e035      	b.n	800521e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b8:	f7ff f9ec 	bl	8004594 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c0:	f7ff f9e8 	bl	8004594 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e026      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x498>
 80051de:	e01e      	b.n	800521e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d107      	bne.n	80051f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e019      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000
 80051f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCC_OscConfig+0x500>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	429a      	cmp	r2, r3
 800520a:	d106      	bne.n	800521a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005216:	429a      	cmp	r2, r3
 8005218:	d001      	beq.n	800521e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40021000 	.word	0x40021000

0800522c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0d0      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005240:	4b6a      	ldr	r3, [pc, #424]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d910      	bls.n	8005270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b67      	ldr	r3, [pc, #412]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 0207 	bic.w	r2, r3, #7
 8005256:	4965      	ldr	r1, [pc, #404]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	4b63      	ldr	r3, [pc, #396]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0b8      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d020      	beq.n	80052be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005288:	4b59      	ldr	r3, [pc, #356]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a58      	ldr	r2, [pc, #352]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 800528e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005292:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a0:	4b53      	ldr	r3, [pc, #332]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a52      	ldr	r2, [pc, #328]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ac:	4b50      	ldr	r3, [pc, #320]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	494d      	ldr	r1, [pc, #308]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d040      	beq.n	800534c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d107      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	4b47      	ldr	r3, [pc, #284]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d115      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e07f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ea:	4b41      	ldr	r3, [pc, #260]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e073      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	4b3d      	ldr	r3, [pc, #244]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e06b      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b39      	ldr	r3, [pc, #228]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4936      	ldr	r1, [pc, #216]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800531c:	f7ff f93a 	bl	8004594 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7ff f936 	bl	8004594 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e053      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800534c:	4b27      	ldr	r3, [pc, #156]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d210      	bcs.n	800537c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 0207 	bic.w	r2, r3, #7
 8005362:	4922      	ldr	r1, [pc, #136]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e032      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4916      	ldr	r1, [pc, #88]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	490e      	ldr	r1, [pc, #56]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053ba:	f000 f82d 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053be:	4602      	mov	r2, r0
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	490a      	ldr	r1, [pc, #40]	; (80053f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053cc:	5ccb      	ldrb	r3, [r1, r3]
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1cc>)
 80053d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCC_ClockConfig+0x1d0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff f898 	bl	8004510 <HAL_InitTick>

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40022000 	.word	0x40022000
 80053f0:	40021000 	.word	0x40021000
 80053f4:	080079b0 	.word	0x080079b0
 80053f8:	20000014 	.word	0x20000014
 80053fc:	20000018 	.word	0x20000018

08005400 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_RCC_EnableCSS+0x14>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	4242004c 	.word	0x4242004c

08005418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	2300      	movs	r3, #0
 800542c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005432:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b04      	cmp	r3, #4
 8005440:	d002      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x30>
 8005442:	2b08      	cmp	r3, #8
 8005444:	d003      	beq.n	800544e <HAL_RCC_GetSysClockFreq+0x36>
 8005446:	e027      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800544a:	613b      	str	r3, [r7, #16]
      break;
 800544c:	e027      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	0c9b      	lsrs	r3, r3, #18
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005458:	5cd3      	ldrb	r3, [r2, r3]
 800545a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d010      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	0c5b      	lsrs	r3, r3, #17
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005472:	5cd3      	ldrb	r3, [r2, r3]
 8005474:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a0d      	ldr	r2, [pc, #52]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800547a:	fb03 f202 	mul.w	r2, r3, r2
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	e004      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a0c      	ldr	r2, [pc, #48]	; (80054bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800548c:	fb02 f303 	mul.w	r3, r2, r3
 8005490:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	613b      	str	r3, [r7, #16]
      break;
 8005496:	e002      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800549a:	613b      	str	r3, [r7, #16]
      break;
 800549c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549e:	693b      	ldr	r3, [r7, #16]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000
 80054b0:	007a1200 	.word	0x007a1200
 80054b4:	080079c8 	.word	0x080079c8
 80054b8:	080079d8 	.word	0x080079d8
 80054bc:	003d0900 	.word	0x003d0900

080054c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80054c6:	681b      	ldr	r3, [r3, #0]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	20000014 	.word	0x20000014

080054d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d8:	f7ff fff2 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 80054dc:	4602      	mov	r2, r0
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	0a1b      	lsrs	r3, r3, #8
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	4903      	ldr	r1, [pc, #12]	; (80054f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ea:	5ccb      	ldrb	r3, [r1, r3]
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40021000 	.word	0x40021000
 80054f8:	080079c0 	.word	0x080079c0

080054fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005500:	f7ff ffde 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	0adb      	lsrs	r3, r3, #11
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4903      	ldr	r1, [pc, #12]	; (8005520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021000 	.word	0x40021000
 8005520:	080079c0 	.word	0x080079c0

08005524 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <RCC_Delay+0x34>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <RCC_Delay+0x38>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	0a5b      	lsrs	r3, r3, #9
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005540:	bf00      	nop
  }
  while (Delay --);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1e5a      	subs	r2, r3, #1
 8005546:	60fa      	str	r2, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f9      	bne.n	8005540 <RCC_Delay+0x1c>
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr
 8005558:	20000014 	.word	0x20000014
 800555c:	10624dd3 	.word	0x10624dd3

08005560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e076      	b.n	8005660 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b00      	cmp	r3, #0
 8005578:	d108      	bne.n	800558c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005582:	d009      	beq.n	8005598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	61da      	str	r2, [r3, #28]
 800558a:	e005      	b.n	8005598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fe fd30 	bl	8004018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	ea42 0103 	orr.w	r1, r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	0c1a      	lsrs	r2, r3, #16
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f002 0204 	and.w	r2, r2, #4
 800563e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800564e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08c      	sub	sp, #48	; 0x30
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005676:	2301      	movs	r3, #1
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_SPI_TransmitReceive+0x26>
 800568a:	2302      	movs	r3, #2
 800568c:	e198      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x358>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005696:	f7fe ff7d 	bl	8004594 <HAL_GetTick>
 800569a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056ac:	887b      	ldrh	r3, [r7, #2]
 80056ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d00f      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x70>
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056be:	d107      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d103      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x68>
 80056c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d003      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056d6:	e16d      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_SPI_TransmitReceive+0x82>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_SPI_TransmitReceive+0x82>
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d103      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056f0:	e160      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d003      	beq.n	8005706 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2205      	movs	r2, #5
 8005702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	887a      	ldrh	r2, [r7, #2]
 8005716:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	887a      	ldrh	r2, [r7, #2]
 800571c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	887a      	ldrh	r2, [r7, #2]
 8005728:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	887a      	ldrh	r2, [r7, #2]
 800572e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d007      	beq.n	800575a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005762:	d17c      	bne.n	800585e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_SPI_TransmitReceive+0x10a>
 800576c:	8b7b      	ldrh	r3, [r7, #26]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d16a      	bne.n	8005848 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	881a      	ldrh	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005796:	e057      	b.n	8005848 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d11b      	bne.n	80057de <HAL_SPI_TransmitReceive+0x176>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d016      	beq.n	80057de <HAL_SPI_TransmitReceive+0x176>
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d113      	bne.n	80057de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	1c9a      	adds	r2, r3, #2
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d119      	bne.n	8005820 <HAL_SPI_TransmitReceive+0x1b8>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d014      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	b292      	uxth	r2, r2
 8005802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	1c9a      	adds	r2, r3, #2
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800581c:	2301      	movs	r3, #1
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005820:	f7fe feb8 	bl	8004594 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800582c:	429a      	cmp	r2, r3
 800582e:	d80b      	bhi.n	8005848 <HAL_SPI_TransmitReceive+0x1e0>
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005836:	d007      	beq.n	8005848 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005846:	e0b5      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1a2      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x130>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d19d      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x130>
 800585c:	e080      	b.n	8005960 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_SPI_TransmitReceive+0x204>
 8005866:	8b7b      	ldrh	r3, [r7, #26]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d16f      	bne.n	800594c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005892:	e05b      	b.n	800594c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d11c      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x274>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d017      	beq.n	80058dc <HAL_SPI_TransmitReceive+0x274>
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d114      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d119      	bne.n	800591e <HAL_SPI_TransmitReceive+0x2b6>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d014      	beq.n	800591e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800591a:	2301      	movs	r3, #1
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800591e:	f7fe fe39 	bl	8004594 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800592a:	429a      	cmp	r2, r3
 800592c:	d803      	bhi.n	8005936 <HAL_SPI_TransmitReceive+0x2ce>
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005934:	d102      	bne.n	800593c <HAL_SPI_TransmitReceive+0x2d4>
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	2b00      	cmp	r3, #0
 800593a:	d107      	bne.n	800594c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800594a:	e033      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d19e      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x22c>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d199      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f9b3 	bl	8005cd0 <SPI_EndRxTxTransaction>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d006      	beq.n	800597e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800597c:	e01a      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059aa:	e003      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3730      	adds	r7, #48	; 0x30
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10e      	bne.n	8005a08 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
    return;
 8005a06:	e0b7      	b.n	8005b78 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <HAL_SPI_IRQHandler+0x5e>
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
    return;
 8005a24:	e0a8      	b.n	8005b78 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_SPI_IRQHandler+0x74>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 809e 	beq.w	8005b78 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8098 	beq.w	8005b78 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d023      	beq.n	8005a9a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d011      	beq.n	8005a82 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	e00b      	b.n	8005a9a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	693b      	ldr	r3, [r7, #16]
        return;
 8005a98:	e06e      	b.n	8005b78 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d014      	beq.n	8005ace <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	f043 0201 	orr.w	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d04f      	beq.n	8005b76 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ae4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_SPI_IRQHandler+0x13a>
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d034      	beq.n	8005b6c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0203 	bic.w	r2, r2, #3
 8005b10:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1e:	4a18      	ldr	r2, [pc, #96]	; (8005b80 <HAL_SPI_IRQHandler+0x1b8>)
 8005b20:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe feaa 	bl	8004880 <HAL_DMA_Abort_IT>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4a:	4a0d      	ldr	r2, [pc, #52]	; (8005b80 <HAL_SPI_IRQHandler+0x1b8>)
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fe94 	bl	8004880 <HAL_DMA_Abort_IT>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005b6a:	e003      	b.n	8005b74 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f809 	bl	8005b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b72:	e000      	b.n	8005b76 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005b74:	bf00      	nop
    return;
 8005b76:	bf00      	nop
  }
}
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	08005b97 	.word	0x08005b97

08005b84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr

08005b96 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff ffe7 	bl	8005b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd0:	f7fe fce0 	bl	8004594 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be0:	f7fe fcd8 	bl	8004594 <HAL_GetTick>
 8005be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005be6:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	015b      	lsls	r3, r3, #5
 8005bec:	0d1b      	lsrs	r3, r3, #20
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf6:	e054      	b.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bfe:	d050      	beq.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c00:	f7fe fcc8 	bl	8004594 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d902      	bls.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d13d      	bne.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2e:	d111      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c38:	d004      	beq.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c42:	d107      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5c:	d10f      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e017      	b.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d19b      	bne.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000014 	.word	0x20000014

08005cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2180      	movs	r1, #128	; 0x80
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff ff6a 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	f043 0220 	orr.w	r2, r3, #32
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e000      	b.n	8005d04 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e041      	b.n	8005da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f839 	bl	8005daa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f000 fbee 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d001      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e035      	b.n	8005e40 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <HAL_TIM_Base_Start_IT+0x90>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x4e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x4e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a12      	ldr	r2, [pc, #72]	; (8005e50 <HAL_TIM_Base_Start_IT+0x94>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d111      	bne.n	8005e2e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b06      	cmp	r3, #6
 8005e1a:	d010      	beq.n	8005e3e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2c:	e007      	b.n	8005e3e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40012c00 	.word	0x40012c00
 8005e50:	40000400 	.word	0x40000400

08005e54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10f      	bne.n	8005e9c <HAL_TIM_Base_Stop_IT+0x48>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6a1a      	ldr	r2, [r3, #32]
 8005e82:	f240 4344 	movw	r3, #1092	; 0x444
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_Base_Stop_IT+0x48>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e041      	b.n	8005f46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fe f900 	bl	80040dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f000 fb1c 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <HAL_TIM_PWM_Start+0x24>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	e022      	b.n	8005fba <HAL_TIM_PWM_Start+0x6a>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d109      	bne.n	8005f8e <HAL_TIM_PWM_Start+0x3e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	bf14      	ite	ne
 8005f86:	2301      	movne	r3, #1
 8005f88:	2300      	moveq	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	e015      	b.n	8005fba <HAL_TIM_PWM_Start+0x6a>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d109      	bne.n	8005fa8 <HAL_TIM_PWM_Start+0x58>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	bf14      	ite	ne
 8005fa0:	2301      	movne	r3, #1
 8005fa2:	2300      	moveq	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	e008      	b.n	8005fba <HAL_TIM_PWM_Start+0x6a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	bf14      	ite	ne
 8005fb4:	2301      	movne	r3, #1
 8005fb6:	2300      	moveq	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e059      	b.n	8006076 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0x82>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd0:	e013      	b.n	8005ffa <HAL_TIM_PWM_Start+0xaa>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0x92>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe0:	e00b      	b.n	8005ffa <HAL_TIM_PWM_Start+0xaa>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0xa2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff0:	e003      	b.n	8005ffa <HAL_TIM_PWM_Start+0xaa>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2201      	movs	r2, #1
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fc72 	bl	80068ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_TIM_PWM_Start+0x130>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d107      	bne.n	8006022 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a16      	ldr	r2, [pc, #88]	; (8006080 <HAL_TIM_PWM_Start+0x130>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d009      	beq.n	8006040 <HAL_TIM_PWM_Start+0xf0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d004      	beq.n	8006040 <HAL_TIM_PWM_Start+0xf0>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a12      	ldr	r2, [pc, #72]	; (8006084 <HAL_TIM_PWM_Start+0x134>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d111      	bne.n	8006064 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b06      	cmp	r3, #6
 8006050:	d010      	beq.n	8006074 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006062:	e007      	b.n	8006074 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40000400 	.word	0x40000400

08006088 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2200      	movs	r2, #0
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fc26 	bl	80068ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a29      	ldr	r2, [pc, #164]	; (800614c <HAL_TIM_PWM_Stop+0xc4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d117      	bne.n	80060da <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10f      	bne.n	80060da <HAL_TIM_PWM_Stop+0x52>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	f240 4344 	movw	r3, #1092	; 0x444
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d107      	bne.n	80060da <HAL_TIM_PWM_Stop+0x52>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a1a      	ldr	r2, [r3, #32]
 80060e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10f      	bne.n	800610a <HAL_TIM_PWM_Stop+0x82>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	f240 4344 	movw	r3, #1092	; 0x444
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d107      	bne.n	800610a <HAL_TIM_PWM_Stop+0x82>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d104      	bne.n	800611a <HAL_TIM_PWM_Stop+0x92>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006118:	e013      	b.n	8006142 <HAL_TIM_PWM_Stop+0xba>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d104      	bne.n	800612a <HAL_TIM_PWM_Stop+0xa2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006128:	e00b      	b.n	8006142 <HAL_TIM_PWM_Stop+0xba>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b08      	cmp	r3, #8
 800612e:	d104      	bne.n	800613a <HAL_TIM_PWM_Stop+0xb2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006138:	e003      	b.n	8006142 <HAL_TIM_PWM_Stop+0xba>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40012c00 	.word	0x40012c00

08006150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b02      	cmp	r3, #2
 8006164:	d122      	bne.n	80061ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b02      	cmp	r3, #2
 8006172:	d11b      	bne.n	80061ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0202 	mvn.w	r2, #2
 800617c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f9af 	bl	80064f6 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9a2 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f9b1 	bl	8006508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d122      	bne.n	8006200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d11b      	bne.n	8006200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0204 	mvn.w	r2, #4
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f985 	bl	80064f6 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f978 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f987 	bl	8006508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b08      	cmp	r3, #8
 800620c:	d122      	bne.n	8006254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0208 	mvn.w	r2, #8
 8006224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2204      	movs	r2, #4
 800622a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f95b 	bl	80064f6 <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f94e 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f95d 	bl	8006508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b10      	cmp	r3, #16
 8006260:	d122      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d11b      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0210 	mvn.w	r2, #16
 8006278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2208      	movs	r2, #8
 800627e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f931 	bl	80064f6 <HAL_TIM_IC_CaptureCallback>
 8006294:	e005      	b.n	80062a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f924 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f933 	bl	8006508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d10e      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d107      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0201 	mvn.w	r2, #1
 80062cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fd fd02 	bl	8003cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d10e      	bne.n	8006300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ec:	2b80      	cmp	r3, #128	; 0x80
 80062ee:	d107      	bne.n	8006300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fbcc 	bl	8006a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d10e      	bne.n	800632c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d107      	bne.n	800632c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8f7 	bl	800651a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b20      	cmp	r3, #32
 8006338:	d10e      	bne.n	8006358 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b20      	cmp	r3, #32
 8006346:	d107      	bne.n	8006358 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0220 	mvn.w	r2, #32
 8006350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fb97 	bl	8006a86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800637a:	2302      	movs	r3, #2
 800637c:	e0ae      	b.n	80064dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b0c      	cmp	r3, #12
 800638a:	f200 809f 	bhi.w	80064cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063c9 	.word	0x080063c9
 8006398:	080064cd 	.word	0x080064cd
 800639c:	080064cd 	.word	0x080064cd
 80063a0:	080064cd 	.word	0x080064cd
 80063a4:	08006409 	.word	0x08006409
 80063a8:	080064cd 	.word	0x080064cd
 80063ac:	080064cd 	.word	0x080064cd
 80063b0:	080064cd 	.word	0x080064cd
 80063b4:	0800644b 	.word	0x0800644b
 80063b8:	080064cd 	.word	0x080064cd
 80063bc:	080064cd 	.word	0x080064cd
 80063c0:	080064cd 	.word	0x080064cd
 80063c4:	0800648b 	.word	0x0800648b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f904 	bl	80065dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0208 	orr.w	r2, r2, #8
 80063e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0204 	bic.w	r2, r2, #4
 80063f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6999      	ldr	r1, [r3, #24]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	619a      	str	r2, [r3, #24]
      break;
 8006406:	e064      	b.n	80064d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f94a 	bl	80066a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6999      	ldr	r1, [r3, #24]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	619a      	str	r2, [r3, #24]
      break;
 8006448:	e043      	b.n	80064d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f993 	bl	800677c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0208 	orr.w	r2, r2, #8
 8006464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0204 	bic.w	r2, r2, #4
 8006474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69d9      	ldr	r1, [r3, #28]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	61da      	str	r2, [r3, #28]
      break;
 8006488:	e023      	b.n	80064d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f9dd 	bl	8006850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69d9      	ldr	r1, [r3, #28]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	021a      	lsls	r2, r3, #8
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	61da      	str	r2, [r3, #28]
      break;
 80064ca:	e002      	b.n	80064d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75fb      	strb	r3, [r7, #23]
      break;
 80064d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr

080064f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	4770      	bx	lr

0800651a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a25      	ldr	r2, [pc, #148]	; (80065d4 <TIM_Base_SetConfig+0xa8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_Base_SetConfig+0x28>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0x28>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a22      	ldr	r2, [pc, #136]	; (80065d8 <TIM_Base_SetConfig+0xac>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d108      	bne.n	8006566 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <TIM_Base_SetConfig+0xa8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_Base_SetConfig+0x52>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006574:	d003      	beq.n	800657e <TIM_Base_SetConfig+0x52>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <TIM_Base_SetConfig+0xac>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a07      	ldr	r2, [pc, #28]	; (80065d4 <TIM_Base_SetConfig+0xa8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d103      	bne.n	80065c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	615a      	str	r2, [r3, #20]
}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr
 80065d4:	40012c00 	.word	0x40012c00
 80065d8:	40000400 	.word	0x40000400

080065dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f023 0201 	bic.w	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 0302 	bic.w	r3, r3, #2
 8006624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <TIM_OC1_SetConfig+0xc8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10c      	bne.n	8006652 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0308 	bic.w	r3, r3, #8
 800663e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 0304 	bic.w	r3, r3, #4
 8006650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a13      	ldr	r2, [pc, #76]	; (80066a4 <TIM_OC1_SetConfig+0xc8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d111      	bne.n	800667e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	621a      	str	r2, [r3, #32]
}
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40012c00 	.word	0x40012c00

080066a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	f023 0210 	bic.w	r2, r3, #16
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0320 	bic.w	r3, r3, #32
 80066f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <TIM_OC2_SetConfig+0xd0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d10d      	bne.n	8006724 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800670e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a14      	ldr	r2, [pc, #80]	; (8006778 <TIM_OC2_SetConfig+0xd0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d113      	bne.n	8006754 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	40012c00 	.word	0x40012c00

0800677c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1d      	ldr	r2, [pc, #116]	; (800684c <TIM_OC3_SetConfig+0xd0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d10d      	bne.n	80067f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a14      	ldr	r2, [pc, #80]	; (800684c <TIM_OC3_SetConfig+0xd0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d113      	bne.n	8006826 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40012c00 	.word	0x40012c00

08006850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800689a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	031b      	lsls	r3, r3, #12
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <TIM_OC4_SetConfig+0x98>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d109      	bne.n	80068c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	019b      	lsls	r3, r3, #6
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr
 80068e8:	40012c00 	.word	0x40012c00

080068ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2201      	movs	r2, #1
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	43db      	mvns	r3, r3
 800690e:	401a      	ands	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	431a      	orrs	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006944:	2b01      	cmp	r3, #1
 8006946:	d101      	bne.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006948:	2302      	movs	r3, #2
 800694a:	e041      	b.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a14      	ldr	r2, [pc, #80]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006998:	d004      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a10      	ldr	r2, [pc, #64]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d10c      	bne.n	80069be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40000400 	.word	0x40000400

080069e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e03d      	b.n	8006a7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e042      	b.n	8006b42 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d106      	bne.n	8006ad6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7fd fbd1 	bl	8004278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2224      	movs	r2, #36	; 0x24
 8006ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fe48 	bl	8007784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695a      	ldr	r2, [r3, #20]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e04a      	b.n	8006bf2 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fd fb81 	bl	8004278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2224      	movs	r2, #36	; 0x24
 8006b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fdf8 	bl	8007784 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ba2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695a      	ldr	r2, [r3, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006bb2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0208 	orr.w	r2, r2, #8
 8006bc2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b08a      	sub	sp, #40	; 0x28
 8006bfe:	af02      	add	r7, sp, #8
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d16d      	bne.n	8006cf6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_UART_Transmit+0x2c>
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e066      	b.n	8006cf8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2221      	movs	r2, #33	; 0x21
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c38:	f7fd fcac 	bl	8004594 <HAL_GetTick>
 8006c3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	88fa      	ldrh	r2, [r7, #6]
 8006c48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c52:	d108      	bne.n	8006c66 <HAL_UART_Transmit+0x6c>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d104      	bne.n	8006c66 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	e003      	b.n	8006c6e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c6e:	e02a      	b.n	8006cc6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2200      	movs	r2, #0
 8006c78:	2180      	movs	r1, #128	; 0x80
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fb3f 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e036      	b.n	8006cf8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10b      	bne.n	8006ca8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c9e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	3302      	adds	r3, #2
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	e007      	b.n	8006cb8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	781a      	ldrb	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1cf      	bne.n	8006c70 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2140      	movs	r1, #64	; 0x40
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fb0f 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e006      	b.n	8006cf8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e000      	b.n	8006cf8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006cf6:	2302      	movs	r3, #2
  }
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d112      	bne.n	8006d40 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <HAL_UART_Receive_IT+0x26>
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e00b      	b.n	8006d42 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	461a      	mov	r2, r3
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fb4f 	bl	80073da <UART_Start_Receive_IT>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	e000      	b.n	8006d42 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d40:	2302      	movs	r3, #2
  }
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b0ba      	sub	sp, #232	; 0xe8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10f      	bne.n	8006db2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d009      	beq.n	8006db2 <HAL_UART_IRQHandler+0x66>
 8006d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fc2b 	bl	8007606 <UART_Receive_IT>
      return;
 8006db0:	e25b      	b.n	800726a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80de 	beq.w	8006f78 <HAL_UART_IRQHandler+0x22c>
 8006dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dcc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80d1 	beq.w	8006f78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <HAL_UART_IRQHandler+0xae>
 8006de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f043 0201 	orr.w	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <HAL_UART_IRQHandler+0xd2>
 8006e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	f043 0202 	orr.w	r2, r3, #2
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_UART_IRQHandler+0xf6>
 8006e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	f043 0204 	orr.w	r2, r3, #4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d011      	beq.n	8006e72 <HAL_UART_IRQHandler+0x126>
 8006e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d105      	bne.n	8006e66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	f043 0208 	orr.w	r2, r3, #8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 81f2 	beq.w	8007260 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d008      	beq.n	8006e9a <HAL_UART_IRQHandler+0x14e>
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fbb6 	bl	8007606 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	bf14      	ite	ne
 8006ea8:	2301      	movne	r3, #1
 8006eaa:	2300      	moveq	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x17a>
 8006ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d04f      	beq.n	8006f66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fac0 	bl	800744c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d041      	beq.n	8006f5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3314      	adds	r3, #20
 8006ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3314      	adds	r3, #20
 8006f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1d9      	bne.n	8006eda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d013      	beq.n	8006f56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f32:	4a7e      	ldr	r2, [pc, #504]	; (800712c <HAL_UART_IRQHandler+0x3e0>)
 8006f34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fd fca0 	bl	8004880 <HAL_DMA_Abort_IT>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d016      	beq.n	8006f74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f54:	e00e      	b.n	8006f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fc fd7c 	bl	8003a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f5c:	e00a      	b.n	8006f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fc fd78 	bl	8003a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f64:	e006      	b.n	8006f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fc fd74 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006f72:	e175      	b.n	8007260 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	bf00      	nop
    return;
 8006f76:	e173      	b.n	8007260 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	f040 814f 	bne.w	8007220 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f86:	f003 0310 	and.w	r3, r3, #16
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8148 	beq.w	8007220 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8141 	beq.w	8007220 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80b6 	beq.w	8007130 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8145 	beq.w	8007264 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	f080 813e 	bcs.w	8007264 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	f000 8088 	beq.w	800710c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800701a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007028:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800702c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007034:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1d9      	bne.n	8006ffc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800706c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007070:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007074:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800707e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e1      	bne.n	8007048 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3314      	adds	r3, #20
 800708a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3314      	adds	r3, #20
 80070a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e3      	bne.n	8007084 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070dc:	f023 0310 	bic.w	r3, r3, #16
 80070e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80070f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e3      	bne.n	80070ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	4618      	mov	r0, r3
 8007108:	f7fd fb7f 	bl	800480a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800711a:	b29b      	uxth	r3, r3
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	b29b      	uxth	r3, r3
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f8ad 	bl	8007282 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007128:	e09c      	b.n	8007264 <HAL_UART_IRQHandler+0x518>
 800712a:	bf00      	nop
 800712c:	08007511 	.word	0x08007511
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007138:	b29b      	uxth	r3, r3
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 808e 	beq.w	8007268 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800714c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 8089 	beq.w	8007268 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800716c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	330c      	adds	r3, #12
 8007176:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800717a:	647a      	str	r2, [r7, #68]	; 0x44
 800717c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e3      	bne.n	8007156 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3314      	adds	r3, #20
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	623b      	str	r3, [r7, #32]
   return(result);
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3314      	adds	r3, #20
 80071ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071b2:	633a      	str	r2, [r7, #48]	; 0x30
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e3      	bne.n	800718e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	330c      	adds	r3, #12
 80071da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0310 	bic.w	r3, r3, #16
 80071ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	330c      	adds	r3, #12
 80071f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80071f8:	61fa      	str	r2, [r7, #28]
 80071fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	69b9      	ldr	r1, [r7, #24]
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	617b      	str	r3, [r7, #20]
   return(result);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e3      	bne.n	80071d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007212:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f832 	bl	8007282 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800721e:	e023      	b.n	8007268 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007228:	2b00      	cmp	r3, #0
 800722a:	d009      	beq.n	8007240 <HAL_UART_IRQHandler+0x4f4>
 800722c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f97d 	bl	8007538 <UART_Transmit_IT>
    return;
 800723e:	e014      	b.n	800726a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00e      	beq.n	800726a <HAL_UART_IRQHandler+0x51e>
 800724c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d008      	beq.n	800726a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f9bc 	bl	80075d6 <UART_EndTransmit_IT>
    return;
 800725e:	e004      	b.n	800726a <HAL_UART_IRQHandler+0x51e>
    return;
 8007260:	bf00      	nop
 8007262:	e002      	b.n	800726a <HAL_UART_IRQHandler+0x51e>
      return;
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <HAL_UART_IRQHandler+0x51e>
      return;
 8007268:	bf00      	nop
  }
}
 800726a:	37e8      	adds	r7, #232	; 0xe8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr

08007282 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr

08007298 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e020      	b.n	80072f4 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2224      	movs	r2, #36	; 0x24
 80072be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f023 030c 	bic.w	r3, r3, #12
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f043 0308 	orr.w	r3, r3, #8
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr

080072fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b090      	sub	sp, #64	; 0x40
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	e050      	b.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007316:	d04c      	beq.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <UART_WaitOnFlagUntilTimeout+0x30>
 800731e:	f7fd f939 	bl	8004594 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732a:	429a      	cmp	r2, r3
 800732c:	d241      	bcs.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800734e:	637a      	str	r2, [r7, #52]	; 0x34
 8007350:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e5      	bne.n	800732e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3314      	adds	r3, #20
 8007368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	613b      	str	r3, [r7, #16]
   return(result);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	63bb      	str	r3, [r7, #56]	; 0x38
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3314      	adds	r3, #20
 8007380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007382:	623a      	str	r2, [r7, #32]
 8007384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	69f9      	ldr	r1, [r7, #28]
 8007388:	6a3a      	ldr	r2, [r7, #32]
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e5      	bne.n	8007362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e00f      	b.n	80073d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	429a      	cmp	r2, r3
 80073c0:	bf0c      	ite	eq
 80073c2:	2301      	moveq	r3, #1
 80073c4:	2300      	movne	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d09f      	beq.n	8007310 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3740      	adds	r7, #64	; 0x40
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	88fa      	ldrh	r2, [r7, #6]
 80073f2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	88fa      	ldrh	r2, [r7, #6]
 80073f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2222      	movs	r2, #34	; 0x22
 8007404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800741e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0201 	orr.w	r2, r2, #1
 800742e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0220 	orr.w	r2, r2, #32
 800743e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	bc80      	pop	{r7}
 800744a:	4770      	bx	lr

0800744c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b095      	sub	sp, #84	; 0x54
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800746a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007474:	643a      	str	r2, [r7, #64]	; 0x40
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800747a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e5      	bne.n	8007454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3314      	adds	r3, #20
 800748e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	61fb      	str	r3, [r7, #28]
   return(result);
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3314      	adds	r3, #20
 80074a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e5      	bne.n	8007488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d119      	bne.n	80074f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	330c      	adds	r3, #12
 80074ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f023 0310 	bic.w	r3, r3, #16
 80074da:	647b      	str	r3, [r7, #68]	; 0x44
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	330c      	adds	r3, #12
 80074e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e4:	61ba      	str	r2, [r7, #24]
 80074e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6979      	ldr	r1, [r7, #20]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	613b      	str	r3, [r7, #16]
   return(result);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007506:	bf00      	nop
 8007508:	3754      	adds	r7, #84	; 0x54
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr

08007510 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7fc fa92 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b21      	cmp	r3, #33	; 0x21
 800754a:	d13e      	bne.n	80075ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007554:	d114      	bne.n	8007580 <UART_Transmit_IT+0x48>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d110      	bne.n	8007580 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007572:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	1c9a      	adds	r2, r3, #2
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	621a      	str	r2, [r3, #32]
 800757e:	e008      	b.n	8007592 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	1c59      	adds	r1, r3, #1
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6211      	str	r1, [r2, #32]
 800758a:	781a      	ldrb	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29b      	uxth	r3, r3
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	4619      	mov	r1, r3
 80075a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10f      	bne.n	80075c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e000      	b.n	80075cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075ca:	2302      	movs	r3, #2
  }
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr

080075d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff fe3a 	bl	8007270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b08c      	sub	sp, #48	; 0x30
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b22      	cmp	r3, #34	; 0x22
 8007618:	f040 80ae 	bne.w	8007778 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007624:	d117      	bne.n	8007656 <UART_Receive_IT+0x50>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d113      	bne.n	8007656 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007644:	b29a      	uxth	r2, r3
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	1c9a      	adds	r2, r3, #2
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	629a      	str	r2, [r3, #40]	; 0x28
 8007654:	e026      	b.n	80076a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007668:	d007      	beq.n	800767a <UART_Receive_IT+0x74>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <UART_Receive_IT+0x82>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	e008      	b.n	800769a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007694:	b2da      	uxtb	r2, r3
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	4619      	mov	r1, r3
 80076b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d15d      	bne.n	8007774 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0220 	bic.w	r2, r2, #32
 80076c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695a      	ldr	r2, [r3, #20]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0201 	bic.w	r2, r2, #1
 80076e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d135      	bne.n	800776a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	613b      	str	r3, [r7, #16]
   return(result);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f023 0310 	bic.w	r3, r3, #16
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007724:	623a      	str	r2, [r7, #32]
 8007726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	69f9      	ldr	r1, [r7, #28]
 800772a:	6a3a      	ldr	r2, [r7, #32]
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	61bb      	str	r3, [r7, #24]
   return(result);
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e5      	bne.n	8007704 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b10      	cmp	r3, #16
 8007744:	d10a      	bne.n	800775c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fd8d 	bl	8007282 <HAL_UARTEx_RxEventCallback>
 8007768:	e002      	b.n	8007770 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fc f84c 	bl	8003808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e002      	b.n	800777a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	e000      	b.n	800777a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007778:	2302      	movs	r3, #2
  }
}
 800777a:	4618      	mov	r0, r3
 800777c:	3730      	adds	r7, #48	; 0x30
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80077be:	f023 030c 	bic.w	r3, r3, #12
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6812      	ldr	r2, [r2, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	430b      	orrs	r3, r1
 80077ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a2c      	ldr	r2, [pc, #176]	; (8007898 <UART_SetConfig+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d103      	bne.n	80077f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80077ec:	f7fd fe86 	bl	80054fc <HAL_RCC_GetPCLK2Freq>
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	e002      	b.n	80077fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80077f4:	f7fd fe6e 	bl	80054d4 <HAL_RCC_GetPCLK1Freq>
 80077f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009a      	lsls	r2, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	4a22      	ldr	r2, [pc, #136]	; (800789c <UART_SetConfig+0x118>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	0119      	lsls	r1, r3, #4
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009a      	lsls	r2, r3, #2
 8007824:	441a      	add	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007830:	4b1a      	ldr	r3, [pc, #104]	; (800789c <UART_SetConfig+0x118>)
 8007832:	fba3 0302 	umull	r0, r3, r3, r2
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	2064      	movs	r0, #100	; 0x64
 800783a:	fb00 f303 	mul.w	r3, r0, r3
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	3332      	adds	r3, #50	; 0x32
 8007844:	4a15      	ldr	r2, [pc, #84]	; (800789c <UART_SetConfig+0x118>)
 8007846:	fba2 2303 	umull	r2, r3, r2, r3
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007850:	4419      	add	r1, r3
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009a      	lsls	r2, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	fbb2 f2f3 	udiv	r2, r2, r3
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <UART_SetConfig+0x118>)
 800786a:	fba3 0302 	umull	r0, r3, r3, r2
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	2064      	movs	r0, #100	; 0x64
 8007872:	fb00 f303 	mul.w	r3, r0, r3
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	3332      	adds	r3, #50	; 0x32
 800787c:	4a07      	ldr	r2, [pc, #28]	; (800789c <UART_SetConfig+0x118>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	f003 020f 	and.w	r2, r3, #15
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	440a      	add	r2, r1
 800788e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40013800 	.word	0x40013800
 800789c:	51eb851f 	.word	0x51eb851f

080078a0 <__cxa_guard_acquire>:
 80078a0:	6802      	ldr	r2, [r0, #0]
 80078a2:	4603      	mov	r3, r0
 80078a4:	07d2      	lsls	r2, r2, #31
 80078a6:	d405      	bmi.n	80078b4 <__cxa_guard_acquire+0x14>
 80078a8:	7842      	ldrb	r2, [r0, #1]
 80078aa:	b102      	cbz	r2, 80078ae <__cxa_guard_acquire+0xe>
 80078ac:	deff      	udf	#255	; 0xff
 80078ae:	2001      	movs	r0, #1
 80078b0:	7058      	strb	r0, [r3, #1]
 80078b2:	4770      	bx	lr
 80078b4:	2000      	movs	r0, #0
 80078b6:	4770      	bx	lr

080078b8 <__cxa_guard_release>:
 80078b8:	2301      	movs	r3, #1
 80078ba:	6003      	str	r3, [r0, #0]
 80078bc:	4770      	bx	lr
	...

080078c0 <ceilf>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80078c6:	3d7f      	subs	r5, #127	; 0x7f
 80078c8:	2d16      	cmp	r5, #22
 80078ca:	4601      	mov	r1, r0
 80078cc:	4604      	mov	r4, r0
 80078ce:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80078d2:	dc25      	bgt.n	8007920 <ceilf+0x60>
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	da0e      	bge.n	80078f6 <ceilf+0x36>
 80078d8:	4917      	ldr	r1, [pc, #92]	; (8007938 <ceilf+0x78>)
 80078da:	f7f9 f8e3 	bl	8000aa4 <__addsf3>
 80078de:	2100      	movs	r1, #0
 80078e0:	f7f9 fba4 	bl	800102c <__aeabi_fcmpgt>
 80078e4:	b128      	cbz	r0, 80078f2 <ceilf+0x32>
 80078e6:	2c00      	cmp	r4, #0
 80078e8:	db22      	blt.n	8007930 <ceilf+0x70>
 80078ea:	2e00      	cmp	r6, #0
 80078ec:	bf18      	it	ne
 80078ee:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 80078f2:	4621      	mov	r1, r4
 80078f4:	e01a      	b.n	800792c <ceilf+0x6c>
 80078f6:	4e11      	ldr	r6, [pc, #68]	; (800793c <ceilf+0x7c>)
 80078f8:	412e      	asrs	r6, r5
 80078fa:	4230      	tst	r0, r6
 80078fc:	d016      	beq.n	800792c <ceilf+0x6c>
 80078fe:	490e      	ldr	r1, [pc, #56]	; (8007938 <ceilf+0x78>)
 8007900:	f7f9 f8d0 	bl	8000aa4 <__addsf3>
 8007904:	2100      	movs	r1, #0
 8007906:	f7f9 fb91 	bl	800102c <__aeabi_fcmpgt>
 800790a:	2800      	cmp	r0, #0
 800790c:	d0f1      	beq.n	80078f2 <ceilf+0x32>
 800790e:	2c00      	cmp	r4, #0
 8007910:	bfc2      	ittt	gt
 8007912:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8007916:	412b      	asrgt	r3, r5
 8007918:	18e4      	addgt	r4, r4, r3
 800791a:	ea24 0406 	bic.w	r4, r4, r6
 800791e:	e7e8      	b.n	80078f2 <ceilf+0x32>
 8007920:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007924:	d302      	bcc.n	800792c <ceilf+0x6c>
 8007926:	f7f9 f8bd 	bl	8000aa4 <__addsf3>
 800792a:	4601      	mov	r1, r0
 800792c:	4608      	mov	r0, r1
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007934:	e7dd      	b.n	80078f2 <ceilf+0x32>
 8007936:	bf00      	nop
 8007938:	7149f2ca 	.word	0x7149f2ca
 800793c:	007fffff 	.word	0x007fffff

08007940 <memset>:
 8007940:	4603      	mov	r3, r0
 8007942:	4402      	add	r2, r0
 8007944:	4293      	cmp	r3, r2
 8007946:	d100      	bne.n	800794a <memset+0xa>
 8007948:	4770      	bx	lr
 800794a:	f803 1b01 	strb.w	r1, [r3], #1
 800794e:	e7f9      	b.n	8007944 <memset+0x4>

08007950 <__libc_init_array>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	2600      	movs	r6, #0
 8007954:	4d0c      	ldr	r5, [pc, #48]	; (8007988 <__libc_init_array+0x38>)
 8007956:	4c0d      	ldr	r4, [pc, #52]	; (800798c <__libc_init_array+0x3c>)
 8007958:	1b64      	subs	r4, r4, r5
 800795a:	10a4      	asrs	r4, r4, #2
 800795c:	42a6      	cmp	r6, r4
 800795e:	d109      	bne.n	8007974 <__libc_init_array+0x24>
 8007960:	f000 f81a 	bl	8007998 <_init>
 8007964:	2600      	movs	r6, #0
 8007966:	4d0a      	ldr	r5, [pc, #40]	; (8007990 <__libc_init_array+0x40>)
 8007968:	4c0a      	ldr	r4, [pc, #40]	; (8007994 <__libc_init_array+0x44>)
 800796a:	1b64      	subs	r4, r4, r5
 800796c:	10a4      	asrs	r4, r4, #2
 800796e:	42a6      	cmp	r6, r4
 8007970:	d105      	bne.n	800797e <__libc_init_array+0x2e>
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	f855 3b04 	ldr.w	r3, [r5], #4
 8007978:	4798      	blx	r3
 800797a:	3601      	adds	r6, #1
 800797c:	e7ee      	b.n	800795c <__libc_init_array+0xc>
 800797e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007982:	4798      	blx	r3
 8007984:	3601      	adds	r6, #1
 8007986:	e7f2      	b.n	800796e <__libc_init_array+0x1e>
 8007988:	080079dc 	.word	0x080079dc
 800798c:	080079dc 	.word	0x080079dc
 8007990:	080079dc 	.word	0x080079dc
 8007994:	080079e4 	.word	0x080079e4

08007998 <_init>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	bf00      	nop
 800799c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799e:	bc08      	pop	{r3}
 80079a0:	469e      	mov	lr, r3
 80079a2:	4770      	bx	lr

080079a4 <_fini>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	bf00      	nop
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr
