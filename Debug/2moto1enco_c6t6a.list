
2moto1enco_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075dc  080075dc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080075dc  080075dc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075dc  080075dc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080075e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000018  08007600  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08007600  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a1d  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000314f  00000000  00000000  00038aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  0003bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0f  00000000  00000000  0003cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b398  00000000  00000000  0003d9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129d0  00000000  00000000  00058d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fe1a  00000000  00000000  0006b71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000491c  00000000  00000000  000fb53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ffe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08007598 	.word	0x08007598

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08007598 	.word	0x08007598

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8000f80:	787a      	ldrb	r2, [r7, #1]
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f003 fc85 	bl	8004896 <HAL_GPIO_WritePin>

}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	72fb      	strb	r3, [r7, #11]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8000fa8:	893b      	ldrh	r3, [r7, #8]
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffde 	bl	8000f70 <setCSLine>
	delay(docDelay);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 f923 	bl	8001200 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8000fba:	f107 0217 	add.w	r2, r7, #23
 8000fbe:	f107 010b 	add.w	r1, r7, #11
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f004 f94d 	bl	8005268 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 8000fce:	2004      	movs	r0, #4
 8000fd0:	f000 f916 	bl	8001200 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8000fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd8:	893b      	ldrh	r3, [r7, #8]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffc7 	bl	8000f70 <setCSLine>
	return data;
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4613      	mov	r3, r2
 8001000:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001002:	f000 f90f 	bl	8001224 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	2200      	movs	r2, #0
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	2100      	movs	r1, #0
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff ffbd 	bl	8000f94 <spiWriteRead>
 800101a:	4603      	mov	r3, r0
 800101c:	b29b      	uxth	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001022:	2004      	movs	r0, #4
 8001024:	f000 f8ec 	bl	8001200 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	2100      	movs	r1, #0
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ffae 	bl	8000f94 <spiWriteRead>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800103e:	4313      	orrs	r3, r2
 8001040:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	e010      	b.n	800106a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8001048:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	fa42 f303 	asr.w	r3, r2, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	b2d9      	uxtb	r1, r3
 8001058:	f107 0210 	add.w	r2, r7, #16
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	4413      	add	r3, r2
 8001060:	460a      	mov	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	3301      	adds	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	ddeb      	ble.n	8001048 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001070:	7ffb      	ldrb	r3, [r7, #31]
 8001072:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001074:	7f7a      	ldrb	r2, [r7, #29]
 8001076:	7efb      	ldrb	r3, [r7, #27]
 8001078:	4053      	eors	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	7e7b      	ldrb	r3, [r7, #25]
 800107e:	4053      	eors	r3, r2
 8001080:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001082:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001084:	4053      	eors	r3, r2
 8001086:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001088:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800108a:	4053      	eors	r3, r2
 800108c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800108e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001090:	4053      	eors	r3, r2
 8001092:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001094:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001096:	429a      	cmp	r2, r3
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d11e      	bne.n	80010e2 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80010a4:	7fbb      	ldrb	r3, [r7, #30]
 80010a6:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010a8:	7f3a      	ldrb	r2, [r7, #28]
 80010aa:	7ebb      	ldrb	r3, [r7, #26]
 80010ac:	4053      	eors	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	4053      	eors	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010b8:	4053      	eors	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010bc:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010be:	4053      	eors	r3, r2
 80010c0:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010c2:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010c4:	4053      	eors	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80010c8:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	bf0c      	ite	eq
 80010ce:	2301      	moveq	r3, #1
 80010d0:	2300      	movne	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d104      	bne.n	80010e2 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 80010d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010e0:	e002      	b.n	80010e8 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 80010e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d107      	bne.n	80010fe <getPositionSPI+0x112>
 80010ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d002      	beq.n	80010fe <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 80010f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001100:	4618      	mov	r0, r3
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	4613      	mov	r3, r2
 8001114:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2200      	movs	r2, #0
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	2100      	movs	r1, #0
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff37 	bl	8000f94 <spiWriteRead>
	delay( docDelay);
 8001126:	2004      	movs	r0, #4
 8001128:	f000 f86a 	bl	8001200 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	2201      	movs	r2, #1
 8001130:	9200      	str	r2, [sp, #0]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	2170      	movs	r1, #112	; 0x70
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ff2c 	bl	8000f94 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 800113c:	2078      	movs	r0, #120	; 0x78
 800113e:	f000 f85f 	bl	8001200 <delay>

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	80fb      	strh	r3, [r7, #6]
 8001158:	4613      	mov	r3, r2
 800115a:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d11e      	bne.n	80011a6 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fcc2 	bl	8000af4 <__aeabi_ui2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f94e 	bl	8000414 <__aeabi_f2d>
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <calculateAngle+0xa8>)
 800117e:	f7ff f9a1 	bl	80004c4 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <calculateAngle+0xac>)
 8001190:	f7ff fac2 	bl	8000718 <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fba4 	bl	80008e8 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e020      	b.n	80011e8 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	2b0e      	cmp	r3, #14
 80011aa:	d11d      	bne.n	80011e8 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fca0 	bl	8000af4 <__aeabi_ui2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f92c 	bl	8000414 <__aeabi_f2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <calculateAngle+0xa8>)
 80011c2:	f7ff f97f 	bl	80004c4 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <calculateAngle+0xb0>)
 80011d4:	f7ff faa0 	bl	8000718 <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fb82 	bl	80008e8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40768000 	.word	0x40768000
 80011f8:	40b00000 	.word	0x40b00000
 80011fc:	40d00000 	.word	0x40d00000

08001200 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f83b 	bl	8001284 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <startDWT>:

int startDWT(){
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 800121a:	f000 f803 	bl	8001224 <DWT_Delay_Init>

}
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}

08001224 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <DWT_Delay_Init+0x58>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <DWT_Delay_Init+0x58>)
 800122e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001232:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <DWT_Delay_Init+0x58>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <DWT_Delay_Init+0x58>)
 800123a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <DWT_Delay_Init+0x5c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <DWT_Delay_Init+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800125e:	bf00      	nop
    __ASM volatile ("NOP");
 8001260:	bf00      	nop
    __ASM volatile ("NOP");
 8001262:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800126c:	2300      	movs	r3, #0
 800126e:	e000      	b.n	8001272 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001270:	2301      	movs	r3, #1
    }
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000edf0 	.word	0xe000edf0
 8001280:	e0001000 	.word	0xe0001000

08001284 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <DWT_Delay_us+0x48>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001292:	f003 ff15 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8001296:	4603      	mov	r3, r0
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <DWT_Delay_us+0x4c>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9b      	lsrs	r3, r3, #18
 80012a0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80012ac:	bf00      	nop
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <DWT_Delay_us+0x48>)
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1acb      	subs	r3, r1, r3
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3f6      	bcc.n	80012ae <DWT_Delay_us+0x2a>
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e0001000 	.word	0xe0001000
 80012d0:	431bde83 	.word	0x431bde83

080012d4 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	e9c7 0100 	strd	r0, r1, [r7]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f006 f8d4 	bl	80074c0 <ceilf>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <_ZN7RoboArmC1Eff>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(float defaultAngleT, float defaultDistanseT) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2210      	movs	r2, #16
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fbdb 	bl	8000afc <__aeabi_i2f>
 8001346:	4602      	mov	r2, r0
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	441a      	add	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	675a      	str	r2, [r3, #116]	; 0x74
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	679a      	str	r2, [r3, #120]	; 0x78
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4a30      	ldr	r2, [pc, #192]	; (800142c <_ZN7RoboArmC1Eff+0x108>)
 800136a:	67da      	str	r2, [r3, #124]	; 0x7c
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <_ZN7RoboArmC1Eff+0x10c>)
 8001378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <_ZN7RoboArmC1Eff+0x110>)
 8001380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	220e      	movs	r2, #14
 8001388:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	33ac      	adds	r3, #172	; 0xac
 8001390:	4618      	mov	r0, r3
 8001392:	f000 feb3 	bl	80020fc <_ZN7TMC2209C1Ev>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	33d4      	adds	r3, #212	; 0xd4
 800139a:	4618      	mov	r0, r3
 800139c:	f000 feae 	bl	80020fc <_ZN7TMC2209C1Ev>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	33fc      	adds	r3, #252	; 0xfc
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fea9 	bl	80020fc <_ZN7TMC2209C1Ev>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	defaultAngle = defaultAngleT;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	defaultDistanse = defaultDistanseT;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

	startDWT();
 800141e:	f7ff fefa 	bl	8001216 <startDWT>
}
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	000105b8 	.word	0x000105b8
 8001430:	43520000 	.word	0x43520000
 8001434:	42400000 	.word	0x42400000

08001438 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	f003 fa23 	bl	8004896 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800145a:	2201      	movs	r2, #1
 800145c:	4619      	mov	r1, r3
 800145e:	f003 fa1a 	bl	8004896 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800146c:	2201      	movs	r2, #1
 800146e:	4619      	mov	r1, r3
 8001470:	f003 fa11 	bl	8004896 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f004 fc04 	bl	8005c88 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2104      	movs	r1, #4
 8001486:	4618      	mov	r0, r3
 8001488:	f004 fbfe 	bl	8005c88 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	2108      	movs	r1, #8
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fbf8 	bl	8005c88 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	4618      	mov	r0, r3
 800149e:	f004 fad9 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fad4 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 facf 	bl	8005a54 <HAL_TIM_Base_Stop_IT>

	return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZN7RoboArm11Move2MotorsEff>:
////    std::cout<<"== Поточна дистанція по енкодеру: "<<distPsteps/steps4OneMM<<" mm"<<std::endl; //поточна дистанція по енкодеру
//
//     return distPsteps/steps4OneMM;
// }

int RoboArm::Move2Motors(float angle, float distance) {
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b08f      	sub	sp, #60	; 0x3c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fbd8 	bl	8005c88 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2104      	movs	r1, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fbd2 	bl	8005c88 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);			// остановили прерывание таймеров
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 fab3 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 faae 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
	// COMMENT 4
//	SetEnable(1, false);
//	SetEnable(2, false);

//	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
	lastPosAngle_Enc = GetAng();
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 fcb3 	bl	8001e64 <_ZN7RoboArm6GetAngEv>
 80014fe:	4602      	mov	r2, r0
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	lastPosLinear_Enc = GetLin();
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fc30 	bl	8001d6c <_ZN7RoboArm6GetLinEv>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	float lastPosAngle = lastPosAngle_Enc;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lastPosLinear = lastPosLinear_Enc;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28

	float pos_ang = abs(lastPosAngle - angle);
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001528:	f7ff fa32 	bl	8000990 <__aeabi_fsub>
 800152c:	4603      	mov	r3, r0
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fedf 	bl	80012f2 <_ZSt3absf>
 8001534:	6278      	str	r0, [r7, #36]	; 0x24
	float inverse_pos_ang = abs(360.0 - pos_ang);
 8001536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001538:	f7fe ff6c 	bl	8000414 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	f04f 0000 	mov.w	r0, #0
 8001544:	4975      	ldr	r1, [pc, #468]	; (800171c <_ZN7RoboArm11Move2MotorsEff+0x25c>)
 8001546:	f7fe fe05 	bl	8000154 <__aeabi_dsub>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff febf 	bl	80012d4 <_ZSt3absd>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff f9c3 	bl	80008e8 <__aeabi_d2f>
 8001562:	4603      	mov	r3, r0
 8001564:	623b      	str	r3, [r7, #32]
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 8001566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001568:	6a38      	ldr	r0, [r7, #32]
 800156a:	f7ff fcb9 	bl	8000ee0 <__aeabi_fcmplt>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d014      	beq.n	800159e <_ZN7RoboArm11Move2MotorsEff+0xde>
		actualPosAngle = inverse_pos_ang;
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800157c:	f7ff fcb0 	bl	8000ee0 <__aeabi_fcmplt>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <_ZN7RoboArm11Move2MotorsEff+0xd2>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.enableInverseMotorDirection();
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	33d4      	adds	r3, #212	; 0xd4
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fed2 	bl	8002334 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001590:	e019      	b.n	80015c6 <_ZN7RoboArm11Move2MotorsEff+0x106>
		} else {//if (lastPosAngle > angle) {
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);

			tmcd_angle.disableInverseMotorDirection();
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	33d4      	adds	r3, #212	; 0xd4
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fedc 	bl	8002354 <_ZN7TMC220928disableInverseMotorDirectionEv>
 800159c:	e013      	b.n	80015c6 <_ZN7RoboArm11Move2MotorsEff+0x106>
		}
	} else {
		actualPosAngle = pos_ang;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015a6:	f7ff fc9b 	bl	8000ee0 <__aeabi_fcmplt>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <_ZN7RoboArm11Move2MotorsEff+0xfc>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.disableInverseMotorDirection();
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	33d4      	adds	r3, #212	; 0xd4
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fecd 	bl	8002354 <_ZN7TMC220928disableInverseMotorDirectionEv>
 80015ba:	e004      	b.n	80015c6 <_ZN7RoboArm11Move2MotorsEff+0x106>
		} else {//if (lastPosAngle > angle) {
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.enableInverseMotorDirection();
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	33d4      	adds	r3, #212	; 0xd4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 feb7 	bl	8002334 <_ZN7TMC220927enableInverseMotorDirectionEv>
		}
	}

	if (lastPosLinear < distance) {
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015ca:	f7ff fc89 	bl	8000ee0 <__aeabi_fcmplt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <_ZN7RoboArm11Move2MotorsEff+0x120>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
		tmcd_linear.enableInverseMotorDirection();
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	33ac      	adds	r3, #172	; 0xac
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 feab 	bl	8002334 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80015de:	e004      	b.n	80015ea <_ZN7RoboArm11Move2MotorsEff+0x12a>
	} else {//if (lastPosLinear > distance) {
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
		tmcd_linear.disableInverseMotorDirection();
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	33ac      	adds	r3, #172	; 0xac
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 feb5 	bl	8002354 <_ZN7TMC220928disableInverseMotorDirectionEv>
	}

	float actualPosDistance = abs(lastPosLinear - distance);
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015ee:	f7ff f9cf 	bl	8000990 <__aeabi_fsub>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe7c 	bl	80012f2 <_ZSt3absf>
 80015fa:	61f8      	str	r0, [r7, #28]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa77 	bl	8000afc <__aeabi_i2f>
 800160e:	4603      	mov	r3, r0
 8001610:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fac6 	bl	8000ba4 <__aeabi_fmul>
 8001618:	4603      	mov	r3, r0
 800161a:	4941      	ldr	r1, [pc, #260]	; (8001720 <_ZN7RoboArm11Move2MotorsEff+0x260>)
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb75 	bl	8000d0c <__aeabi_fdiv>
 8001622:	4603      	mov	r3, r0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fc83 	bl	8000f30 <__aeabi_f2uiz>
 800162a:	4602      	mov	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	679a      	str	r2, [r3, #120]	; 0x78

	distPsteps = actualPosDistance * steps4OneMM; //кількість кроків для такої дистанції
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fa61 	bl	8000afc <__aeabi_i2f>
 800163a:	4603      	mov	r3, r0
 800163c:	69f9      	ldr	r1, [r7, #28]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fab0 	bl	8000ba4 <__aeabi_fmul>
 8001644:	4603      	mov	r3, r0
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fc72 	bl	8000f30 <__aeabi_f2uiz>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	675a      	str	r2, [r3, #116]	; 0x74

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 30;
 8001652:	231e      	movs	r3, #30
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
	if (State == ArmCorrectPosition){
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800165c:	2b16      	cmp	r3, #22
 800165e:	d102      	bne.n	8001666 <_ZN7RoboArm11Move2MotorsEff+0x1a6>
		periodM1 = 600;
 8001660:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
	}
	uint32_t psc = 72 - 1;
 8001666:	2347      	movs	r3, #71	; 0x47
 8001668:	61bb      	str	r3, [r7, #24]

	float delimiter = 1;
 800166a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800166e:	617b      	str	r3, [r7, #20]
	float mnoj = 1;
 8001670:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001674:	613b      	str	r3, [r7, #16]

	if (anglePsteps >= distPsteps) {
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167e:	429a      	cmp	r2, r3
 8001680:	d350      	bcc.n	8001724 <_ZN7RoboArm11Move2MotorsEff+0x264>

		htim1M1->Instance->PSC = psc;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1 / 2;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800169e:	0852      	lsrs	r2, r2, #1
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fa24 	bl	8000af4 <__aeabi_ui2f>
 80016ac:	4604      	mov	r4, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fa1e 	bl	8000af4 <__aeabi_ui2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff fb25 	bl	8000d0c <__aeabi_fdiv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 80016c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016c8:	f7ff fa14 	bl	8000af4 <__aeabi_ui2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	6979      	ldr	r1, [r7, #20]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa67 	bl	8000ba4 <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe16 	bl	800130a <_ZSt4ceilf>
 80016de:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	681c      	ldr	r4, [r3, #0]
 80016f0:	6938      	ldr	r0, [r7, #16]
 80016f2:	f7ff fc1d 	bl	8000f30 <__aeabi_f2uiz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 80016fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016fe:	6938      	ldr	r0, [r7, #16]
 8001700:	f7ff fb04 	bl	8000d0c <__aeabi_fdiv>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	681c      	ldr	r4, [r3, #0]
 800170e:	4610      	mov	r0, r2
 8001710:	f7ff fc0e 	bl	8000f30 <__aeabi_f2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	63a3      	str	r3, [r4, #56]	; 0x38
 8001718:	e055      	b.n	80017c6 <_ZN7RoboArm11Move2MotorsEff+0x306>
 800171a:	bf00      	nop
 800171c:	40768000 	.word	0x40768000
 8001720:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172c:	429a      	cmp	r2, r3
 800172e:	d24a      	bcs.n	80017c6 <_ZN7RoboArm11Move2MotorsEff+0x306>

		htim2M2->Instance->PSC = psc;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800174c:	0852      	lsrs	r2, r2, #1
 800174e:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f9cd 	bl	8000af4 <__aeabi_ui2f>
 800175a:	4604      	mov	r4, r0
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f9c7 	bl	8000af4 <__aeabi_ui2f>
 8001766:	4603      	mov	r3, r0
 8001768:	4619      	mov	r1, r3
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff face 	bl	8000d0c <__aeabi_fdiv>
 8001770:	4603      	mov	r3, r0
 8001772:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001776:	f7ff f9bd 	bl	8000af4 <__aeabi_ui2f>
 800177a:	4603      	mov	r3, r0
 800177c:	6979      	ldr	r1, [r7, #20]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fa10 	bl	8000ba4 <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fdbf 	bl	800130a <_ZSt4ceilf>
 800178c:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	681c      	ldr	r4, [r3, #0]
 800179e:	6938      	ldr	r0, [r7, #16]
 80017a0:	f7ff fbc6 	bl	8000f30 <__aeabi_f2uiz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017ac:	6938      	ldr	r0, [r7, #16]
 80017ae:	f7ff faad 	bl	8000d0c <__aeabi_fdiv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	681c      	ldr	r4, [r3, #0]
 80017bc:	4610      	mov	r0, r2
 80017be:	f7ff fbb7 	bl	8000f30 <__aeabi_f2uiz>
 80017c2:	4603      	mov	r3, r0
 80017c4:	6363      	str	r3, [r4, #52]	; 0x34
	}

	stateMoveM1 = true;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	stateMoveM2 = true;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// COMMENT 5
//	SetEnable(1, true);
//	SetEnable(2, true);

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 f9b7 	bl	8005b50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	2104      	movs	r1, #4
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 f9b1 	bl	8005b50 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 f8e2 	bl	80059bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 f8dd 	bl	80059bc <HAL_TIM_Base_Start_IT>

	return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	373c      	adds	r7, #60	; 0x3c
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <_ZN7RoboArm14Set2StepMotorsEfifi>:

int RoboArm::Set2StepMotors(float stepLinT, int periodLinT, float stepAngleT,
		int periodAngleT) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
//	if (stepAngleT < 0) {
//		temp_val = -1.0*stepAngleT;
//	}


	anglePsteps=abs(stepAngleT);
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	f7ff fd69 	bl	80012f2 <_ZSt3absf>
 8001820:	4603      	mov	r3, r0
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb84 	bl	8000f30 <__aeabi_f2uiz>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	679a      	str	r2, [r3, #120]	; 0x78
	distPsteps=abs(stepLinT);
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f7ff fd5f 	bl	80012f2 <_ZSt3absf>
 8001834:	4603      	mov	r3, r0
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fb7a 	bl	8000f30 <__aeabi_f2uiz>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	675a      	str	r2, [r3, #116]	; 0x74

	uint32_t psc = 72 - 1;
 8001842:	2347      	movs	r3, #71	; 0x47
 8001844:	61fb      	str	r3, [r7, #28]

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f004 fa1b 	bl	8005c88 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2104      	movs	r1, #4
 8001858:	4618      	mov	r0, r3
 800185a:	f004 fa15 	bl	8005c88 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT (htim1M1);			// остановили прерывание таймеров
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	f004 f8f6 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (htim2M2);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	4618      	mov	r0, r3
 800186e:	f004 f8f1 	bl	8005a54 <HAL_TIM_Base_Stop_IT>

	//COMMENT 6
//	SetEnable(1, false);
//	SetEnable(2, false);

	float tempAngDir = 0, tempLinDir = 0;
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
	if (stepAngleT < 0) {
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	f7ff fb2c 	bl	8000ee0 <__aeabi_fcmplt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <_ZN7RoboArm14Set2StepMotorsEfifi+0x8e>
		tmcd_angle.enableInverseMotorDirection();
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	33d4      	adds	r3, #212	; 0xd4
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fd4e 	bl	8002334 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001898:	e004      	b.n	80018a4 <_ZN7RoboArm14Set2StepMotorsEfifi+0x98>
//		tempAngDir = -1;
	} else {//if (stepAngleT > 0) {
		tmcd_angle.disableInverseMotorDirection();
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	33d4      	adds	r3, #212	; 0xd4
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fd58 	bl	8002354 <_ZN7TMC220928disableInverseMotorDirectionEv>
//		tempAngDir = 1;
	}

	if (stepLinT < 0) {
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	68b8      	ldr	r0, [r7, #8]
 80018aa:	f7ff fb19 	bl	8000ee0 <__aeabi_fcmplt>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <_ZN7RoboArm14Set2StepMotorsEfifi+0xb4>
		tmcd_linear.enableInverseMotorDirection();
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	33ac      	adds	r3, #172	; 0xac
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fd3b 	bl	8002334 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80018be:	e004      	b.n	80018ca <_ZN7RoboArm14Set2StepMotorsEfifi+0xbe>
//		tempLinDir = -1;
	} else {//if (stepLinT > 0) {
		tmcd_linear.disableInverseMotorDirection();
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	33ac      	adds	r3, #172	; 0xac
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fd45 	bl	8002354 <_ZN7TMC220928disableInverseMotorDirectionEv>
//		tempLinDir = 1;
	}

	if (periodAngleT % 2 != 0) { periodAngleT += 1;}
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <_ZN7RoboArm14Set2StepMotorsEfifi+0xce>
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	3301      	adds	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (periodLinT % 2 != 0) { periodLinT += 1;}
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <_ZN7RoboArm14Set2StepMotorsEfifi+0xde>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]

	htim1M1->Instance->PSC = psc;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
	htim1M1->Instance->ARR = periodAngleT;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1M1->Instance->CCR1 = periodAngleT / 2;
 80018fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001900:	0fda      	lsrs	r2, r3, #31
 8001902:	4413      	add	r3, r2
 8001904:	105b      	asrs	r3, r3, #1
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	635a      	str	r2, [r3, #52]	; 0x34

	htim2M2->Instance->PSC = psc;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
	htim2M2->Instance->ARR = periodLinT;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
	htim2M2->Instance->CCR2 = periodLinT / 2;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0fda      	lsrs	r2, r3, #31
 8001928:	4413      	add	r3, r2
 800192a:	105b      	asrs	r3, r3, #1
 800192c:	461a      	mov	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	639a      	str	r2, [r3, #56]	; 0x38


	return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_ZN7RoboArm15Move2StepMotorsEv>:

int RoboArm::Move2StepMotors(){
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

	stateMoveM1 = true;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	stateMoveM2 = true;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// COMMENT 7
//	SetEnable(1, true);
//	SetEnable(2, true);

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f004 f8f6 	bl	8005b50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2104      	movs	r1, #4
 800196a:	4618      	mov	r0, r3
 800196c:	f004 f8f0 	bl	8005b50 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f004 f821 	bl	80059bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	4618      	mov	r0, r3
 8001980:	f004 f81c 	bl	80059bc <HAL_TIM_Base_Start_IT>

	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_ZN7RoboArm13SetBuserStateEi>:
return 0;
}



int RoboArm::SetBuserState(int State) {
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
	//State 1......9
	if (State > 0 && State < 10) {
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dd24      	ble.n	80019e8 <_ZN7RoboArm13SetBuserStateEi+0x5a>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	dc21      	bgt.n	80019e8 <_ZN7RoboArm13SetBuserStateEi+0x5a>
		for (int t = 0; t <= State; t++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e01a      	b.n	80019e0 <_ZN7RoboArm13SetBuserStateEi+0x52>
			for (int i = 0; i <= 200; i++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	e00e      	b.n	80019ce <_ZN7RoboArm13SetBuserStateEi+0x40>
				HAL_GPIO_TogglePin(Buser_GPIO_Port_Ind, Buser_Pin_Ind);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f002 ff82 	bl	80048c6 <HAL_GPIO_TogglePin>
				HAL_Delay(1);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f002 fbf0 	bl	80041a8 <HAL_Delay>
			for (int i = 0; i <= 200; i++) {
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2bc8      	cmp	r3, #200	; 0xc8
 80019d2:	dded      	ble.n	80019b0 <_ZN7RoboArm13SetBuserStateEi+0x22>
			}
			HAL_Delay(100);
 80019d4:	2064      	movs	r0, #100	; 0x64
 80019d6:	f002 fbe7 	bl	80041a8 <HAL_Delay>
		for (int t = 0; t <= State; t++) {
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3301      	adds	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dde0      	ble.n	80019aa <_ZN7RoboArm13SetBuserStateEi+0x1c>
		}
	}
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_ZN7RoboArm15GetGripperStateEv>:
	posNowDistance = defaultDistanse;

	return 0;
}

int RoboArm::GetGripperState() {
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	//EndCap1_Pin - зацеп зацеплен - ВЕРХНИЙ НАЖАт
	//EndCap2_Pin - зацеп расцеплен, можно двигать рукой - НИЖНИЙ

	GPIO_PinState pin_UP, pin_DOWN;

	pin_UP = HAL_GPIO_ReadPin(EndCap1_GPIO_PortG, EndCap1_PinG);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f002 ff2e 	bl	8004868 <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73fb      	strb	r3, [r7, #15]
	pin_DOWN = HAL_GPIO_ReadPin(EndCap2_GPIO_PortG, EndCap2_PinG);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f002 ff23 	bl	8004868 <HAL_GPIO_ReadPin>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73bb      	strb	r3, [r7, #14]

	if (pin_UP == GPIO_PIN_SET && pin_DOWN == GPIO_PIN_RESET) {
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d104      	bne.n	8001a36 <_ZN7RoboArm15GetGripperStateEv+0x44>
 8001a2c:	7bbb      	ldrb	r3, [r7, #14]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <_ZN7RoboArm15GetGripperStateEv+0x44>
		return 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e008      	b.n	8001a48 <_ZN7RoboArm15GetGripperStateEv+0x56>
	} else if (pin_DOWN == GPIO_PIN_SET && pin_UP == GPIO_PIN_RESET) {
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d104      	bne.n	8001a46 <_ZN7RoboArm15GetGripperStateEv+0x54>
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <_ZN7RoboArm15GetGripperStateEv+0x54>
		return 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <_ZN7RoboArm15GetGripperStateEv+0x56>
	} else {
		return 3; //error
 8001a46:	2303      	movs	r3, #3
	}
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>:

int RoboArm::SetSettGripper(GPIO_TypeDef *EndCap1_GPIO_PortT,
		uint16_t EndCap1_PinT, GPIO_TypeDef *EndCap2_GPIO_PortT,
		uint16_t EndCap2_PinT, GPIO_TypeDef *EndCap3_GPIO_PortT,
		uint16_t EndCap3_PinT, GPIO_TypeDef *EndCap4_GPIO_PortT,
		uint16_t EndCap4_PinT) {
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	80fb      	strh	r3, [r7, #6]

	EndCap1_GPIO_PortG = EndCap1_GPIO_PortT;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	64da      	str	r2, [r3, #76]	; 0x4c
	EndCap1_PinG = EndCap1_PinT;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	88fa      	ldrh	r2, [r7, #6]
 8001a6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	EndCap2_GPIO_PortG = EndCap2_GPIO_PortT;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54
	EndCap2_PinG = EndCap2_PinT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8b3a      	ldrh	r2, [r7, #24]
 8001a78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	EndCap3_GPIO_PortG = EndCap3_GPIO_PortT;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c
	EndCap3_PinG = EndCap3_PinT;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8c3a      	ldrh	r2, [r7, #32]
 8001a86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	EndCap4_GPIO_PortG = EndCap4_GPIO_PortT;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	665a      	str	r2, [r3, #100]	; 0x64
	EndCap4_PinG = EndCap4_PinT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <_ZN7RoboArm10SetGripperEi>:

int RoboArm::SetGripper(int opcl) {
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]

	//Встановити захват
	//TODO додати перевірку чи точно зупинились мотори
	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 f8e7 	bl	8005c88 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 f8e1 	bl	8005c88 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 ffc2 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 ffbd 	bl	8005a54 <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_2);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	2104      	movs	r1, #4
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 f8d1 	bl	8005c88 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim3M3);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 ffb2 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
	// COMMENT 8
//	SetEnable(3, false);

	//Зупинили все, 1 та 2й на утриманні
	//Обираэмо напрям
	if (opcl == 1) {
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <_ZN7RoboArm10SetGripperEi+0x64>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_SET);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001afe:	2201      	movs	r2, #1
 8001b00:	4619      	mov	r1, r3
 8001b02:	f002 fec8 	bl	8004896 <HAL_GPIO_WritePin>
 8001b06:	e00a      	b.n	8001b1e <_ZN7RoboArm10SetGripperEi+0x7a>
	} else if (opcl == 0) {
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d107      	bne.n	8001b1e <_ZN7RoboArm10SetGripperEi+0x7a>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_RESET);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f002 febc 	bl	8004896 <HAL_GPIO_WritePin>
	}

	//Підібрати кроки та швидкість
	float periodM3 = 30.00;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <_ZN7RoboArm10SetGripperEi+0xdc>)
 8001b20:	60fb      	str	r3, [r7, #12]
	uint32_t psc3 = 72 - 1;
 8001b22:	2347      	movs	r3, #71	; 0x47
 8001b24:	60bb      	str	r3, [r7, #8]
	htim3M3->Instance->PSC = psc3;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
	htim3M3->Instance->ARR = periodM3;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	681c      	ldr	r4, [r3, #0]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff f9fa 	bl	8000f30 <__aeabi_f2uiz>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3M3->Instance->CCR2 = periodM3 / 2;
 8001b40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff f8e1 	bl	8000d0c <__aeabi_fdiv>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	681c      	ldr	r4, [r3, #0]
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7ff f9eb 	bl	8000f30 <__aeabi_f2uiz>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	63a3      	str	r3, [r4, #56]	; 0x38

	// COMMENT 9
//	SetEnable(3, true);
	HAL_TIM_PWM_Start(htim3M3, TIM_CHANNEL_2);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	2104      	movs	r1, #4
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fff3 	bl	8005b50 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim3M3);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 ff24 	bl	80059bc <HAL_TIM_Base_Start_IT>
	return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	41f00000 	.word	0x41f00000

08001b84 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::setPrintState(bool state) {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8001b9e:	e003      	b.n	8001ba8 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	}
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 8001bca:	2300      	movs	r3, #0
	}
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <_ZN7RoboArm17SetMicrosteps4AllEh>:

int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step) {
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	33d4      	adds	r3, #212	; 0xd4
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fb06 	bl	80021fc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	33fc      	adds	r3, #252	; 0xfc
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 faff 	bl	80021fc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	33ac      	adds	r3, #172	; 0xac
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 faf8 	bl	80021fc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>:

int RoboArm::SetLinAngMicrostepsAndParams(uint8_t microsteps_per_step) {
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	33d4      	adds	r3, #212	; 0xd4
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fae6 	bl	80021fc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
//	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	33ac      	adds	r3, #172	; 0xac
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fadf 	bl	80021fc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	int steps = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<microsteps_per_step; i++){
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	e005      	b.n	8001c54 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh+0x3e>
		steps *= 2;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<microsteps_per_step; i++){
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3301      	adds	r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf5      	blt.n	8001c48 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh+0x32>
	}

	drvMicroSteps = steps;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	601a      	str	r2, [r3, #0]
//	gripperPsteps = 523*arm.drvMicroSteps;
	steps4OneMM = motorStep * drvMicroSteps / (beltRatio * spoolStep);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	441a      	add	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]

	return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001c7a:	b480      	push	{r7}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8bba      	ldrh	r2, [r7, #28]
 8001ca4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ResolutionEncoders = ResolutionEncodersT;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cb6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f7ff fa35 	bl	800114c <calculateAngle>
 8001ce2:	4603      	mov	r3, r0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZN7RoboArm14GetPosEncodersEh>:
	}
	pos = ang * distMax / 360.0;
	return pos;
}

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d002      	beq.n	8001d04 <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d017      	beq.n	8001d32 <_ZN7RoboArm14GetPosEncodersEh+0x46>
 8001d02:	e02d      	b.n	8001d60 <_ZN7RoboArm14GetPosEncodersEh+0x74>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001d1c:	f7ff f966 	bl	8000fec <getPositionSPI>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				ResolutionEncoders);
		return posNowEnc1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d30:	e017      	b.n	8001d62 <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001d4a:	f7ff f94f 	bl	8000fec <getPositionSPI>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				ResolutionEncoders);
		return posNowEnc2;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d5e:	e000      	b.n	8001d62 <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	default:
		return 1;
 8001d60:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <_ZN7RoboArm6GetLinEv>:

float RoboArm::GetLin() {
 8001d6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffb5 	bl	8001cec <_ZN7RoboArm14GetPosEncodersEh>
 8001d82:	6138      	str	r0, [r7, #16]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001d84:	e004      	b.n	8001d90 <_ZN7RoboArm6GetLinEv+0x24>
		posnowT_2 = GetPosEncoders(2); //try again
 8001d86:	2102      	movs	r1, #2
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffaf 	bl	8001cec <_ZN7RoboArm14GetPosEncodersEh>
 8001d8e:	6138      	str	r0, [r7, #16]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d107      	bne.n	8001daa <_ZN7RoboArm6GetLinEv+0x3e>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	dc01      	bgt.n	8001daa <_ZN7RoboArm6GetLinEv+0x3e>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <_ZN7RoboArm6GetLinEv+0x40>
 8001daa:	2300      	movs	r3, #0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ea      	bne.n	8001d86 <_ZN7RoboArm6GetLinEv+0x1a>

	float pos = -1.0;
 8001db0:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <_ZN7RoboArm6GetLinEv+0xec>)
 8001db2:	60fb      	str	r3, [r7, #12]
	float enc2mm = 16384.0 / (2.0 * 20.0 * 33.0 * 33.0 / (13.0 * 13.0)); //число одиниць енкодера на 1 мм лінійного руху
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <_ZN7RoboArm6GetLinEv+0xf0>)
 8001db6:	60bb      	str	r3, [r7, #8]

	// 0-5000 on encoder = 124mm-48mm;
	if (posnowT_2 <= 5000) {
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d812      	bhi.n	8001de8 <_ZN7RoboArm6GetLinEv+0x7c>
		//the motor is somewhere between 48mm and 124mm
		pos = defaultDistanse - float(posnowT_2) / enc2mm;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
 8001dc8:	6938      	ldr	r0, [r7, #16]
 8001dca:	f7fe fe93 	bl	8000af4 <__aeabi_ui2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff9a 	bl	8000d0c <__aeabi_fdiv>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7fe fdd7 	bl	8000990 <__aeabi_fsub>
 8001de2:	4603      	mov	r3, r0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e030      	b.n	8001e4a <_ZN7RoboArm6GetLinEv+0xde>

	} else { //if (posnowT_2 <= 9000){ //приблизно по факту десь +- 8963
		pos = defaultDistanse + (16384.0 - float(posnowT_2)) / enc2mm;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb10 	bl	8000414 <__aeabi_f2d>
 8001df4:	4604      	mov	r4, r0
 8001df6:	460d      	mov	r5, r1
 8001df8:	6938      	ldr	r0, [r7, #16]
 8001dfa:	f7fe fe7b 	bl	8000af4 <__aeabi_ui2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb07 	bl	8000414 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	f04f 0000 	mov.w	r0, #0
 8001e0e:	4914      	ldr	r1, [pc, #80]	; (8001e60 <_ZN7RoboArm6GetLinEv+0xf4>)
 8001e10:	f7fe f9a0 	bl	8000154 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4690      	mov	r8, r2
 8001e1a:	4699      	mov	r9, r3
 8001e1c:	68b8      	ldr	r0, [r7, #8]
 8001e1e:	f7fe faf9 	bl	8000414 <__aeabi_f2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4640      	mov	r0, r8
 8001e28:	4649      	mov	r1, r9
 8001e2a:	f7fe fc75 	bl	8000718 <__aeabi_ddiv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4620      	mov	r0, r4
 8001e34:	4629      	mov	r1, r5
 8001e36:	f7fe f98f 	bl	8000158 <__adddf3>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fd51 	bl	80008e8 <__aeabi_d2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	60fb      	str	r3, [r7, #12]
		// the motor is somewhere 124...end of the hand

	}


	return pos;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e56:	bf00      	nop
 8001e58:	bf800000 	.word	0xbf800000
 8001e5c:	427e42ab 	.word	0x427e42ab
 8001e60:	40d00000 	.word	0x40d00000

08001e64 <_ZN7RoboArm6GetAngEv>:

float RoboArm::GetAng() {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001e70:	2101      	movs	r1, #1
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff3a 	bl	8001cec <_ZN7RoboArm14GetPosEncodersEh>
 8001e78:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 8001e7a:	e004      	b.n	8001e86 <_ZN7RoboArm6GetAngEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff34 	bl	8001cec <_ZN7RoboArm14GetPosEncodersEh>
 8001e84:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d107      	bne.n	8001ea0 <_ZN7RoboArm6GetAngEv+0x3c>
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	dc01      	bgt.n	8001ea0 <_ZN7RoboArm6GetAngEv+0x3c>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <_ZN7RoboArm6GetAngEv+0x3e>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ea      	bne.n	8001e7c <_ZN7RoboArm6GetAngEv+0x18>

//	if (posnowT_1 == 0xFFFF) {
//			return -1;
//	}

	float ang_actual = GetAngleEncoders(posnowT_1);
 8001ea6:	6939      	ldr	r1, [r7, #16]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff0c 	bl	8001cc6 <_ZN7RoboArm16GetAngleEncodersEm>
 8001eae:	60b8      	str	r0, [r7, #8]
	float ang = ang_actual + defaultAngle; //arm.ShiftZeroAng(ang_actual);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	68b8      	ldr	r0, [r7, #8]
 8001eba:	f7fe fd6b 	bl	8000994 <__addsf3>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	60fb      	str	r3, [r7, #12]
	if (ang > 360.0)
 8001ec2:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <_ZN7RoboArm6GetAngEv+0x84>)
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff f829 	bl	8000f1c <__aeabi_fcmpgt>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <_ZN7RoboArm6GetAngEv+0x78>
		ang -= 360.0;
 8001ed0:	4905      	ldr	r1, [pc, #20]	; (8001ee8 <_ZN7RoboArm6GetAngEv+0x84>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7fe fd5c 	bl	8000990 <__aeabi_fsub>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60fb      	str	r3, [r7, #12]
	return ang;
 8001edc:	68fb      	ldr	r3, [r7, #12]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	43b40000 	.word	0x43b40000

08001eec <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	HAL_Delay(300);
 8001ef4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ef8:	f002 f956 	bl	80041a8 <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001f14:	f7ff f86a 	bl	8000fec <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001f30:	f7ff f85c 	bl	8000fec <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001f46:	461a      	mov	r2, r3
 8001f48:	f7ff f8de 	bl	8001108 <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f7ff f8d2 	bl	8001108 <setZeroSPI>
	HAL_Delay(250);
 8001f64:	20fa      	movs	r0, #250	; 0xfa
 8001f66:	f002 f91f 	bl	80041a8 <HAL_Delay>
	return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>:
		uint16_t Dir2_Pin_M2T, GPIO_TypeDef *Dir3_GPIO_Port_M3T,
		uint16_t Dir3_Pin_M3T, GPIO_TypeDef *En1_GPIO_Port_M1T,
		uint16_t En1_Pin_M1T, GPIO_TypeDef *En2_GPIO_Port_M2T,
		uint16_t En2_Pin_M2T, GPIO_TypeDef *En3_GPIO_Port_M3T,
		uint16_t En3_Pin_M3T, GPIO_TypeDef *Buser_GPIO_Port_IndT,
		uint16_t Buser_Pin_IndT) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	60da      	str	r2, [r3, #12]
	htim2M2 = &htim2;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	611a      	str	r2, [r3, #16]
	htim3M3 = &htim3;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	615a      	str	r2, [r3, #20]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	61da      	str	r2, [r3, #28]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8c3a      	ldrh	r2, [r7, #32]
 8001f9e:	841a      	strh	r2, [r3, #32]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001fb6:	861a      	strh	r2, [r3, #48]	; 0x30

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
	En1_Pin_M1 = En1_Pin_M1T;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001fc2:	871a      	strh	r2, [r3, #56]	; 0x38
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fc8:	63da      	str	r2, [r3, #60]	; 0x3c
	En2_Pin_M2 = En2_Pin_M2T;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
	En3_Pin_M3 = En3_Pin_M3T;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001fe0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
	En3_Pin_M3 = En3_Pin_M3T;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ff0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	Buser_GPIO_Port_Ind = Buser_GPIO_Port_IndT;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ff8:	66da      	str	r2, [r3, #108]	; 0x6c
	Buser_Pin_Ind = Buser_Pin_IndT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002000:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	SetEnable(1, true);
 8002004:	2201      	movs	r2, #1
 8002006:	2101      	movs	r1, #1
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f83d 	bl	8002088 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 800200e:	2201      	movs	r2, #1
 8002010:	2102      	movs	r1, #2
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f838 	bl	8002088 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 8002018:	2201      	movs	r2, #1
 800201a:	2103      	movs	r1, #3
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f833 	bl	8002088 <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 8002028:	2300      	movs	r3, #0
 800202a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	f000 f880 	bl	8002134 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_2);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 800203a:	2302      	movs	r3, #2
 800203c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	f000 f877 	bl	8002134 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_1);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f103 00ac 	add.w	r0, r3, #172	; 0xac
 800204c:	2301      	movs	r3, #1
 800204e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	f000 f86e 	bl	8002134 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	33d4      	adds	r3, #212	; 0xd4
 800205c:	4618      	mov	r0, r3
 800205e:	f000 f87d 	bl	800215c <_ZN7TMC22096enableEv>
	tmcd_gripper.enable();
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	33fc      	adds	r3, #252	; 0xfc
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f878 	bl	800215c <_ZN7TMC22096enableEv>
	tmcd_linear.enable();
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	33ac      	adds	r3, #172	; 0xac
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f873 	bl	800215c <_ZN7TMC22096enableEv>

	SetMicrosteps4All(7);
 8002076:	2107      	movs	r1, #7
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff fdac 	bl	8001bd6 <_ZN7RoboArm17SetMicrosteps4AllEh>
	// COMMENT 1
//	SetEnable(1, false);
//	SetEnable(2, false);
//	SetEnable(3, false);

	return 0;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
 8002094:	4613      	mov	r3, r2
 8002096:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 8002098:	787b      	ldrb	r3, [r7, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e001      	b.n	80020a8 <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f002 fbec 	bl	8004896 <HAL_GPIO_WritePin>
 80020be:	e018      	b.n	80020f2 <_ZN7RoboArm9SetEnableEtb+0x6a>
	} else if (numMotor == 2) {
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d109      	bne.n	80020da <_ZN7RoboArm9SetEnableEtb+0x52>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	4619      	mov	r1, r3
 80020d4:	f002 fbdf 	bl	8004896 <HAL_GPIO_WritePin>
 80020d8:	e00b      	b.n	80020f2 <_ZN7RoboArm9SetEnableEtb+0x6a>
	} else if (numMotor == 3) {
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d108      	bne.n	80020f2 <_ZN7RoboArm9SetEnableEtb+0x6a>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f002 fbd2 	bl	8004896 <HAL_GPIO_WritePin>
	}

	return 0;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2203      	movs	r2, #3
 8002108:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002112:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2203      	movs	r2, #3
 8002118:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002120:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	461a      	mov	r2, r3
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f910 	bl	8002374 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <_ZN7TMC22096enableEv>:
//
////  pinMode(hardware_enable_pin_, OUTPUT);
////  digitalWrite(hardware_enable_pin_, HIGH);
//}
//
void TMC2209::enable() {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0f      	blt.n	800218e <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2120      	movs	r1, #32
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <_ZN7TMC22096enableEv+0x58>)
 8002174:	f002 fb8f 	bl	8004896 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	2101      	movs	r1, #1
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <_ZN7TMC22096enableEv+0x58>)
 800217e:	f002 fb8a 	bl	8004896 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002188:	480b      	ldr	r0, [pc, #44]	; (80021b8 <_ZN7TMC22096enableEv+0x5c>)
 800218a:	f002 fb84 	bl	8004896 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	b2d9      	uxtb	r1, r3
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	7f13      	ldrb	r3, [r2, #28]
 800219e:	f361 0303 	bfi	r3, r1, #0, #4
 80021a2:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fa89 	bl	80026bc <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40010c00 	.word	0x40010c00

080021bc <_ZN7TMC22099constrainEttt>:
	}
	chopper_config_.toff = TOFF_DISABLE;
	writeStoredChopperConfig();
}
//
uint16_t TMC2209::constrain(uint16_t x, uint16_t y, uint16_t z) {
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	817b      	strh	r3, [r7, #10]
 80021ce:	460b      	mov	r3, r1
 80021d0:	813b      	strh	r3, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80fb      	strh	r3, [r7, #6]
	if (x < y) {
 80021d6:	897a      	ldrh	r2, [r7, #10]
 80021d8:	893b      	ldrh	r3, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d201      	bcs.n	80021e2 <_ZN7TMC22099constrainEttt+0x26>
		return y;
 80021de:	893b      	ldrh	r3, [r7, #8]
 80021e0:	e006      	b.n	80021f0 <_ZN7TMC22099constrainEttt+0x34>
	} else if (x > z) {
 80021e2:	897a      	ldrh	r2, [r7, #10]
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d901      	bls.n	80021ee <_ZN7TMC22099constrainEttt+0x32>
		return z;
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	e000      	b.n	80021f0 <_ZN7TMC22099constrainEttt+0x34>
	} else {
		return x;
 80021ee:	897b      	ldrh	r3, [r7, #10]
	}
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
//		++exponent;
//	}
//	setMicrostepsPerStepPowerOfTwo(exponent);
//}
//
void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b07      	cmp	r3, #7
 800220c:	d84a      	bhi.n	80022a4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002235 	.word	0x08002235
 8002218:	08002243 	.word	0x08002243
 800221c:	08002251 	.word	0x08002251
 8002220:	0800225f 	.word	0x0800225f
 8002224:	0800226d 	.word	0x0800226d
 8002228:	0800227b 	.word	0x0800227b
 800222c:	08002289 	.word	0x08002289
 8002230:	08002297 	.word	0x08002297
	case 0: {
		chopper_config_.mres = MRES_001;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	7fd3      	ldrb	r3, [r2, #31]
 8002238:	2108      	movs	r1, #8
 800223a:	f361 0303 	bfi	r3, r1, #0, #4
 800223e:	77d3      	strb	r3, [r2, #31]
		break;
 8002240:	e036      	b.n	80022b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	7fd3      	ldrb	r3, [r2, #31]
 8002246:	2107      	movs	r1, #7
 8002248:	f361 0303 	bfi	r3, r1, #0, #4
 800224c:	77d3      	strb	r3, [r2, #31]
		break;
 800224e:	e02f      	b.n	80022b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	7fd3      	ldrb	r3, [r2, #31]
 8002254:	2106      	movs	r1, #6
 8002256:	f361 0303 	bfi	r3, r1, #0, #4
 800225a:	77d3      	strb	r3, [r2, #31]
		break;
 800225c:	e028      	b.n	80022b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	7fd3      	ldrb	r3, [r2, #31]
 8002262:	2105      	movs	r1, #5
 8002264:	f361 0303 	bfi	r3, r1, #0, #4
 8002268:	77d3      	strb	r3, [r2, #31]
		break;
 800226a:	e021      	b.n	80022b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	7fd3      	ldrb	r3, [r2, #31]
 8002270:	2104      	movs	r1, #4
 8002272:	f361 0303 	bfi	r3, r1, #0, #4
 8002276:	77d3      	strb	r3, [r2, #31]
		break;
 8002278:	e01a      	b.n	80022b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	7fd3      	ldrb	r3, [r2, #31]
 800227e:	2103      	movs	r1, #3
 8002280:	f361 0303 	bfi	r3, r1, #0, #4
 8002284:	77d3      	strb	r3, [r2, #31]
		break;
 8002286:	e013      	b.n	80022b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	7fd3      	ldrb	r3, [r2, #31]
 800228c:	2102      	movs	r1, #2
 800228e:	f361 0303 	bfi	r3, r1, #0, #4
 8002292:	77d3      	strb	r3, [r2, #31]
		break;
 8002294:	e00c      	b.n	80022b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	7fd3      	ldrb	r3, [r2, #31]
 800229a:	2101      	movs	r1, #1
 800229c:	f361 0303 	bfi	r3, r1, #0, #4
 80022a0:	77d3      	strb	r3, [r2, #31]
		break;
 80022a2:	e005      	b.n	80022b0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	7fd3      	ldrb	r3, [r2, #31]
 80022a8:	f36f 0303 	bfc	r3, #0, #4
 80022ac:	77d3      	strb	r3, [r2, #31]
		break;
 80022ae:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fa03 	bl	80026bc <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop

080022c0 <_ZN7TMC220913setRunCurrentEh>:

void TMC2209::setRunCurrent(uint8_t percent) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
	uint8_t run_current = percentToCurrentSetting(percent);
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f975 	bl	80025c0 <_ZN7TMC220923percentToCurrentSettingEh>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
	driver_current_.irun = run_current;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	b2d9      	uxtb	r1, r3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	7c53      	ldrb	r3, [r2, #17]
 80022e6:	f361 0304 	bfi	r3, r1, #0, #5
 80022ea:	7453      	strb	r3, [r2, #17]
	writeStoredDriverCurrent();
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f9b9 	bl	8002664 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_ZN7TMC220914setHoldCurrentEh>:
//
void TMC2209::setHoldCurrent(uint8_t percent) {
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	70fb      	strb	r3, [r7, #3]
	uint8_t hold_current = percentToCurrentSetting(percent);
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f958 	bl	80025c0 <_ZN7TMC220923percentToCurrentSettingEh>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]

	driver_current_.ihold = hold_current;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	b2d9      	uxtb	r1, r3
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	7c13      	ldrb	r3, [r2, #16]
 8002320:	f361 0304 	bfi	r3, r1, #0, #5
 8002324:	7413      	strb	r3, [r2, #16]
	writeStoredDriverCurrent();
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f99c 	bl	8002664 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZN7TMC220927enableInverseMotorDirectionEv>:
//	driver_current_.ihold = hold_current;
//	driver_current_.iholddelay = hold_delay;
//	writeStoredDriverCurrent();
//}
//
void TMC2209::enableInverseMotorDirection() {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	7b13      	ldrb	r3, [r2, #12]
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f97d 	bl	8002646 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	7b13      	ldrb	r3, [r2, #12]
 8002360:	f36f 03c3 	bfc	r3, #3, #1
 8002364:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f96d 	bl	8002646 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
//	return read(ADDRESS_MSCNT);
//}
//
//// private
///* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	4619      	mov	r1, r3
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f80f 	bl	80023b0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f834 	bl	8002400 <_ZN7TMC220922setRegistersToDefaultsEv>

	//minimizeMotorCurrent();
	setRunCurrent(70);
 8002398:	2146      	movs	r1, #70	; 0x46
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff ff90 	bl	80022c0 <_ZN7TMC220913setRunCurrentEh>
	setHoldCurrent(20);
 80023a0:	2114      	movs	r1, #20
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff ffa9 	bl	80022fa <_ZN7TMC220914setHoldCurrentEh>
//	disable();
//	disableAutomaticCurrentScaling();
//	disableAutomaticGradientAdaptation();
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:
//
////	  tmcuart->RxXferCount = 0;
//
//}
//
void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	7b13      	ldrb	r3, [r2, #12]
 80023cc:	f36f 0300 	bfc	r3, #0, #1
 80023d0:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	7b13      	ldrb	r3, [r2, #12]
 80023d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023da:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	7b13      	ldrb	r3, [r2, #12]
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	7b53      	ldrb	r3, [r2, #13]
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f928 	bl	8002646 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	7c13      	ldrb	r3, [r2, #16]
 8002412:	2110      	movs	r1, #16
 8002414:	f361 0304 	bfi	r3, r1, #0, #5
 8002418:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	7c53      	ldrb	r3, [r2, #17]
 800241e:	f043 031f 	orr.w	r3, r3, #31
 8002422:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	7c93      	ldrb	r3, [r2, #18]
 8002428:	2101      	movs	r1, #1
 800242a:	f361 0303 	bfi	r3, r1, #0, #4
 800242e:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	461a      	mov	r2, r3
 8002436:	2110      	movs	r1, #16
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f885 	bl	8002548 <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 8002442:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	69d3      	ldr	r3, [r2, #28]
 8002448:	2102      	movs	r1, #2
 800244a:	f361 33d0 	bfi	r3, r1, #15, #2
 800244e:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	8b93      	ldrh	r3, [r2, #28]
 8002454:	f36f 13ca 	bfc	r3, #7, #4
 8002458:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	7f13      	ldrb	r3, [r2, #28]
 800245e:	2105      	movs	r1, #5
 8002460:	f361 1306 	bfi	r3, r1, #4, #3
 8002464:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	7f13      	ldrb	r3, [r2, #28]
 800246a:	2103      	movs	r1, #3
 800246c:	f361 0303 	bfi	r3, r1, #0, #4
 8002470:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	461a      	mov	r2, r3
 8002478:	216c      	movs	r1, #108	; 0x6c
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f864 	bl	8002548 <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	461a      	mov	r2, r3
 800248c:	2170      	movs	r1, #112	; 0x70
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f85a 	bl	8002548 <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	461a      	mov	r2, r3
 80024a0:	2142      	movs	r1, #66	; 0x42
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f850 	bl	8002548 <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 80024a8:	2214      	movs	r2, #20
 80024aa:	2111      	movs	r1, #17
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f84b 	bl	8002548 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2113      	movs	r1, #19
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f846 	bl	8002548 <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 80024bc:	2200      	movs	r2, #0
 80024be:	2122      	movs	r1, #34	; 0x22
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f841 	bl	8002548 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2114      	movs	r1, #20
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f83c 	bl	8002548 <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f837 	bl	8002548 <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80024da:	2200      	movs	r2, #0
 80024dc:	2142      	movs	r1, #66	; 0x42
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f832 	bl	8002548 <_ZN7TMC22095writeEhm>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	10000053 	.word	0x10000053
 80024f0:	c10d0024 	.word	0xc10d0024

080024f4 <_ZN7TMC220911reverseDataEm>:
//	driver_current_.irun = CURRENT_SETTING_MIN;
//	driver_current_.ihold = CURRENT_SETTING_MIN;
//	writeStoredDriverCurrent();
//}
//
uint32_t TMC2209::reverseData(uint32_t data) {
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002502:	2300      	movs	r3, #0
 8002504:	72fb      	strb	r3, [r7, #11]
 8002506:	e016      	b.n	8002536 <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002508:	7afb      	ldrb	r3, [r7, #11]
 800250a:	f1c3 0303 	rsb	r3, r3, #3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800251a:	7abb      	ldrb	r3, [r7, #10]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	b2da      	uxtb	r2, r3
 8002524:	7a7b      	ldrb	r3, [r7, #9]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002530:	7afb      	ldrb	r3, [r7, #11]
 8002532:	3301      	adds	r3, #1
 8002534:	72fb      	strb	r3, [r7, #11]
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d9e5      	bls.n	8002508 <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 800253c:	68fb      	ldr	r3, [r7, #12]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <_ZN7TMC22095writeEhm>:
//	for (uint8_t i = 0; i < datagram_size; ++i) {
//		byte = serialRead();
//	}*/
//}
//
void TMC2209::write(uint8_t register_address, uint32_t data) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	460b      	mov	r3, r1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8002562:	7c3b      	ldrb	r3, [r7, #16]
 8002564:	2205      	movs	r2, #5
 8002566:	f362 0303 	bfi	r3, r2, #0, #4
 800256a:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002578:	b2da      	uxtb	r2, r3
 800257a:	7cbb      	ldrb	r3, [r7, #18]
 800257c:	f362 0306 	bfi	r3, r2, #0, #7
 8002580:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002582:	7cbb      	ldrb	r3, [r7, #18]
 8002584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002588:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff ffb1 	bl	80024f4 <_ZN7TMC220911reverseDataEm>
 8002592:	4603      	mov	r3, r0
 8002594:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	2208      	movs	r2, #8
 800259e:	4619      	mov	r1, r3
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f89a 	bl	80026da <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 80025a6:	4603      	mov	r3, r0
 80025a8:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	2208      	movs	r2, #8
 80025b0:	4619      	mov	r1, r3
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f8e0 	bl	8002778 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZN7TMC220923percentToCurrentSettingEh>:
//	}
//
//	return reverseData(read_reply_datagram.data);
//}
//
uint8_t TMC2209::percentToCurrentSetting(uint8_t percent) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
	uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	b299      	uxth	r1, r3
 80025d0:	2364      	movs	r3, #100	; 0x64
 80025d2:	2200      	movs	r2, #0
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fdf1 	bl	80021bc <_ZN7TMC22099constrainEttt>
 80025da:	4603      	mov	r3, r0
 80025dc:	73fb      	strb	r3, [r7, #15]
	uint8_t current_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX,
 80025de:	7bf9      	ldrb	r1, [r7, #15]
 80025e0:	231f      	movs	r3, #31
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	2300      	movs	r3, #0
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2364      	movs	r3, #100	; 0x64
 80025ea:	2200      	movs	r2, #0
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f807 	bl	8002600 <_ZN7TMC22093mapEhhhhh>
 80025f2:	4603      	mov	r3, r0
 80025f4:	73bb      	strb	r3, [r7, #14]
			CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
	return current_setting;
 80025f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_ZN7TMC22093mapEhhhhh>:
//	uint8_t percent = map(current_setting, CURRENT_SETTING_MIN,
//			CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
uint8_t TMC2209::map(uint8_t x, uint8_t in_min,  uint8_t in_max, uint8_t out_min, uint8_t out_max){
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	4608      	mov	r0, r1
 800260a:	4611      	mov	r1, r2
 800260c:	461a      	mov	r2, r3
 800260e:	4603      	mov	r3, r0
 8002610:	70fb      	strb	r3, [r7, #3]
 8002612:	460b      	mov	r3, r1
 8002614:	70bb      	strb	r3, [r7, #2]
 8002616:	4613      	mov	r3, r2
 8002618:	707b      	strb	r3, [r7, #1]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	78bb      	ldrb	r3, [r7, #2]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	7d39      	ldrb	r1, [r7, #20]
 8002622:	7c3a      	ldrb	r2, [r7, #16]
 8002624:	1a8a      	subs	r2, r1, r2
 8002626:	fb03 f202 	mul.w	r2, r3, r2
 800262a:	7879      	ldrb	r1, [r7, #1]
 800262c:	78bb      	ldrb	r3, [r7, #2]
 800262e:	1acb      	subs	r3, r1, r3
 8002630:	fb92 f3f3 	sdiv	r3, r2, r3
 8002634:	b2da      	uxtb	r2, r3
 8002636:	7c3b      	ldrb	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	b2db      	uxtb	r3, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <_ZN7TMC220923writeStoredGlobalConfigEv>:
//uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
//	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
void TMC2209::writeStoredGlobalConfig() {
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	2100      	movs	r1, #0
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff76 	bl	8002548 <_ZN7TMC22095writeEhm>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <_ZN7TMC220924writeStoredDriverCurrentEv>:
//
//uint32_t TMC2209::readGlobalConfigBytes() {
//	return read(ADDRESS_GCONF);
//}
//
void TMC2209::writeStoredDriverCurrent() {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	461a      	mov	r2, r3
 8002672:	2110      	movs	r1, #16
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff67 	bl	8002548 <_ZN7TMC22095writeEhm>

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7c5b      	ldrb	r3, [r3, #17]
 800267e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b13      	cmp	r3, #19
 8002686:	d905      	bls.n	8002694 <_ZN7TMC220924writeStoredDriverCurrentEv+0x30>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	7d53      	ldrb	r3, [r2, #21]
 800268c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002690:	7553      	strb	r3, [r2, #21]
 8002692:	e004      	b.n	800269e <_ZN7TMC220924writeStoredDriverCurrentEv+0x3a>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	7d53      	ldrb	r3, [r2, #21]
 8002698:	f36f 13c7 	bfc	r3, #7, #1
 800269c:	7553      	strb	r3, [r2, #21]
	}
	if (cool_step_enabled_) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7e1b      	ldrb	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <_ZN7TMC220924writeStoredDriverCurrentEv+0x50>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	461a      	mov	r2, r3
 80026ac:	2142      	movs	r1, #66	; 0x42
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff4a 	bl	8002548 <_ZN7TMC22095writeEhm>
	}
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_ZN7TMC220924writeStoredChopperConfigEv>:
//
void TMC2209::writeStoredChopperConfig() {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	461a      	mov	r2, r3
 80026ca:	216c      	movs	r1, #108	; 0x6c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff3b 	bl	8002548 <_ZN7TMC22095writeEhm>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 80026da:	b4f0      	push	{r4, r5, r6, r7}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80026ec:	2300      	movs	r3, #0
 80026ee:	757b      	strb	r3, [r7, #21]
 80026f0:	e037      	b.n	8002762 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	7d79      	ldrb	r1, [r7, #21]
 80026fa:	00c9      	lsls	r1, r1, #3
 80026fc:	f1c1 0620 	rsb	r6, r1, #32
 8002700:	f1a1 0020 	sub.w	r0, r1, #32
 8002704:	fa22 f401 	lsr.w	r4, r2, r1
 8002708:	fa03 f606 	lsl.w	r6, r3, r6
 800270c:	4334      	orrs	r4, r6
 800270e:	fa23 f000 	lsr.w	r0, r3, r0
 8002712:	4304      	orrs	r4, r0
 8002714:	fa23 f501 	lsr.w	r5, r3, r1
 8002718:	4623      	mov	r3, r4
 800271a:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 800271c:	2300      	movs	r3, #0
 800271e:	753b      	strb	r3, [r7, #20]
 8002720:	e019      	b.n	8002756 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	09db      	lsrs	r3, r3, #7
 8002726:	b2da      	uxtb	r2, r3
 8002728:	7dbb      	ldrb	r3, [r7, #22]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	429a      	cmp	r2, r3
 8002732:	d007      	beq.n	8002744 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	b25b      	sxtb	r3, r3
 800273a:	f083 0307 	eor.w	r3, r3, #7
 800273e:	b25b      	sxtb	r3, r3
 8002740:	75fb      	strb	r3, [r7, #23]
 8002742:	e002      	b.n	800274a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 800274a:	7dbb      	ldrb	r3, [r7, #22]
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002750:	7d3b      	ldrb	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	753b      	strb	r3, [r7, #20]
 8002756:	7d3b      	ldrb	r3, [r7, #20]
 8002758:	2b07      	cmp	r3, #7
 800275a:	d9e2      	bls.n	8002722 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 800275c:	7d7b      	ldrb	r3, [r7, #21]
 800275e:	3301      	adds	r3, #1
 8002760:	757b      	strb	r3, [r7, #21]
 8002762:	7d7a      	ldrb	r2, [r7, #21]
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	3b01      	subs	r3, #1
 8002768:	429a      	cmp	r2, r3
 800276a:	dbc2      	blt.n	80026f2 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 800276c:	7dfb      	ldrb	r3, [r7, #23]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bcf0      	pop	{r4, r5, r6, r7}
 8002776:	4770      	bx	lr

08002778 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4618      	mov	r0, r3
 800278c:	f004 fb84 	bl	8006e98 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6898      	ldr	r0, [r3, #8]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	b29a      	uxth	r2, r3
 8002798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	f004 f82c 	bl	80067fa <HAL_UART_Transmit>
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b098      	sub	sp, #96	; 0x60
 80027b0:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027b2:	f001 fc97 	bl	80040e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027b6:	f000 fb7f 	bl	8002eb8 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80027ba:	f000 fdcf 	bl	800335c <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80027be:	f000 fd71 	bl	80032a4 <_ZL19MX_USART1_UART_Initv>
	MX_TIM1_Init();
 80027c2:	f000 fc07 	bl	8002fd4 <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 80027c6:	f000 fc9d 	bl	8003104 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 80027ca:	f000 fd03 	bl	80031d4 <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 80027ce:	f000 fd97 	bl	8003300 <_ZL19MX_USART2_UART_Initv>
	MX_SPI1_Init();
 80027d2:	f000 fbc3 	bl	8002f5c <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim1);
 80027d6:	4857      	ldr	r0, [pc, #348]	; (8002934 <main+0x188>)
 80027d8:	f003 f898 	bl	800590c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 80027dc:	4856      	ldr	r0, [pc, #344]	; (8002938 <main+0x18c>)
 80027de:	f003 f895 	bl	800590c <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2, htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 80027e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e6:	930e      	str	r3, [sp, #56]	; 0x38
 80027e8:	4b54      	ldr	r3, [pc, #336]	; (800293c <main+0x190>)
 80027ea:	930d      	str	r3, [sp, #52]	; 0x34
 80027ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f0:	930c      	str	r3, [sp, #48]	; 0x30
 80027f2:	4b53      	ldr	r3, [pc, #332]	; (8002940 <main+0x194>)
 80027f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80027f6:	2301      	movs	r3, #1
 80027f8:	930a      	str	r3, [sp, #40]	; 0x28
 80027fa:	4b50      	ldr	r3, [pc, #320]	; (800293c <main+0x190>)
 80027fc:	9309      	str	r3, [sp, #36]	; 0x24
 80027fe:	2320      	movs	r3, #32
 8002800:	9308      	str	r3, [sp, #32]
 8002802:	4b4e      	ldr	r3, [pc, #312]	; (800293c <main+0x190>)
 8002804:	9307      	str	r3, [sp, #28]
 8002806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280a:	9306      	str	r3, [sp, #24]
 800280c:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <main+0x194>)
 800280e:	9305      	str	r3, [sp, #20]
 8002810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002814:	9304      	str	r3, [sp, #16]
 8002816:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <main+0x194>)
 8002818:	9303      	str	r3, [sp, #12]
 800281a:	2340      	movs	r3, #64	; 0x40
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <main+0x190>)
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <main+0x198>)
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4b44      	ldr	r3, [pc, #272]	; (8002938 <main+0x18c>)
 8002828:	4a42      	ldr	r2, [pc, #264]	; (8002934 <main+0x188>)
 800282a:	4947      	ldr	r1, [pc, #284]	; (8002948 <main+0x19c>)
 800282c:	4847      	ldr	r0, [pc, #284]	; (800294c <main+0x1a0>)
 800282e:	f7ff fba1 	bl	8001f74 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>
	Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
	En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin,
	Buser_GPIO_Port, Buser_Pin);
	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 8002832:	230e      	movs	r3, #14
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	2302      	movs	r3, #2
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <main+0x194>)
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2301      	movs	r3, #1
 8002840:	4a3f      	ldr	r2, [pc, #252]	; (8002940 <main+0x194>)
 8002842:	4943      	ldr	r1, [pc, #268]	; (8002950 <main+0x1a4>)
 8002844:	4841      	ldr	r0, [pc, #260]	; (800294c <main+0x1a0>)
 8002846:	f7ff fa18 	bl	8001c7a <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
			14);

	//Додано функція
	arm.SetSettGripper(EndCap1_GPIO_Port, EndCap1_Pin, EndCap2_GPIO_Port,
 800284a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800284e:	9304      	str	r3, [sp, #16]
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <main+0x190>)
 8002852:	9303      	str	r3, [sp, #12]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	9302      	str	r3, [sp, #8]
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <main+0x194>)
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <main+0x194>)
 8002864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002868:	4935      	ldr	r1, [pc, #212]	; (8002940 <main+0x194>)
 800286a:	4838      	ldr	r0, [pc, #224]	; (800294c <main+0x1a0>)
 800286c:	f7ff f8f0 	bl	8001a50 <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT (&huart1, str, 1);
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002870:	221c      	movs	r2, #28
 8002872:	4938      	ldr	r1, [pc, #224]	; (8002954 <main+0x1a8>)
 8002874:	4838      	ldr	r0, [pc, #224]	; (8002958 <main+0x1ac>)
 8002876:	f004 f843 	bl	8006900 <HAL_UART_Receive_IT>
	arm.setPrintState(true);
 800287a:	2101      	movs	r1, #1
 800287c:	4833      	ldr	r0, [pc, #204]	; (800294c <main+0x1a0>)
 800287e:	f7ff f981 	bl	8001b84 <_ZN7RoboArm13setPrintStateEb>

	arm.SetBuserState(8);
 8002882:	2108      	movs	r1, #8
 8002884:	4831      	ldr	r0, [pc, #196]	; (800294c <main+0x1a0>)
 8002886:	f7ff f882 	bl	800198e <_ZN7RoboArm13SetBuserStateEi>
//	arm.SetBuserState(4);

//В останне запишемо поточне положення зачепа
	arm.lastGripState = arm.GetGripperState();
 800288a:	4830      	ldr	r0, [pc, #192]	; (800294c <main+0x1a0>)
 800288c:	f7ff f8b1 	bl	80019f2 <_ZN7RoboArm15GetGripperStateEv>
 8002890:	4603      	mov	r3, r0
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <main+0x1a0>)
 8002896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	arm.State = arm.ArmSTAND;
 800289a:	4b2c      	ldr	r3, [pc, #176]	; (800294c <main+0x1a0>)
 800289c:	2206      	movs	r2, #6
 800289e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

	for (int i=0; i<3; i++){
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e00b      	b.n	80028c0 <main+0x114>
		arm.GetLin();
 80028a8:	4828      	ldr	r0, [pc, #160]	; (800294c <main+0x1a0>)
 80028aa:	f7ff fa5f 	bl	8001d6c <_ZN7RoboArm6GetLinEv>
		HAL_Delay(10);
 80028ae:	200a      	movs	r0, #10
 80028b0:	f001 fc7a 	bl	80041a8 <HAL_Delay>
		arm.GetAng();
 80028b4:	4825      	ldr	r0, [pc, #148]	; (800294c <main+0x1a0>)
 80028b6:	f7ff fad5 	bl	8001e64 <_ZN7RoboArm6GetAngEv>
	for (int i=0; i<3; i++){
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	ddf0      	ble.n	80028a8 <main+0xfc>
	}

	arm.SetLinAngMicrostepsAndParams(4);
 80028c6:	2104      	movs	r1, #4
 80028c8:	4820      	ldr	r0, [pc, #128]	; (800294c <main+0x1a0>)
 80028ca:	f7ff f9a4 	bl	8001c16 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>
				HAL_Delay(1);
			}
		}

		//!!!!!!!!!ЯКЩО зараз йде рух зацепа то ми постійно в цій умові перевіряємо стан зацепа і виставляємо флаг
		if (arm.State == arm.ArmGripPreMOVE || arm.State == arm.ArmGripMOVE || arm.State == arm.ArmGripMOVERetry) {
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <main+0x1a0>)
 80028d0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80028d4:	2b0a      	cmp	r3, #10
 80028d6:	d009      	beq.n	80028ec <main+0x140>
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <main+0x1a0>)
 80028da:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d004      	beq.n	80028ec <main+0x140>
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <main+0x1a0>)
 80028e4:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80028e8:	2b14      	cmp	r3, #20
 80028ea:	d101      	bne.n	80028f0 <main+0x144>

			debounce_check_pins_and_set_flag();
 80028ec:	f000 ff54 	bl	8003798 <_Z32debounce_check_pins_and_set_flagv>

		}

		// +2 початок руху якщо прийшли нові дані
		if (arm.State == arm.ArmSTART) {
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <main+0x1a0>)
 80028f2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d136      	bne.n	8002968 <main+0x1bc>
			arm.State = arm.ArmSTAND;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <main+0x1a0>)
 80028fc:	2206      	movs	r2, #6
 80028fe:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			//перевіряємо статус зацепа якщо він зачеплений то ОПУСКАЄМО (це не вірна логіка)
			//+1
			int tempGripState = arm.GetGripperState();
 8002902:	4812      	ldr	r0, [pc, #72]	; (800294c <main+0x1a0>)
 8002904:	f7ff f875 	bl	80019f2 <_ZN7RoboArm15GetGripperStateEv>
 8002908:	61b8      	str	r0, [r7, #24]
			//Зберігли попередній стан

			if (tempGripState == 1 && un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d127      	bne.n	8002960 <main+0x1b4>
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <main+0x1b0>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d123      	bne.n	8002960 <main+0x1b4>
//			if (un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
				arm.State = arm.ArmGripPreMOVE;
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <main+0x1a0>)
 800291a:	220a      	movs	r2, #10
 800291c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				arm.lastGripState = tempGripState; //записали поточне положеня
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <main+0x1a0>)
 8002926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
				arm.SetGripper(0);
 800292a:	2100      	movs	r1, #0
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <main+0x1a0>)
 800292e:	f7ff f8b9 	bl	8001aa4 <_ZN7RoboArm10SetGripperEi>
 8002932:	e019      	b.n	8002968 <main+0x1bc>
 8002934:	2000008c 	.word	0x2000008c
 8002938:	200000d4 	.word	0x200000d4
 800293c:	40010800 	.word	0x40010800
 8002940:	40010c00 	.word	0x40010c00
 8002944:	2000011c 	.word	0x2000011c
 8002948:	200001ac 	.word	0x200001ac
 800294c:	20000280 	.word	0x20000280
 8002950:	20000034 	.word	0x20000034
 8002954:	200001f4 	.word	0x200001f4
 8002958:	20000164 	.word	0x20000164
 800295c:	20000250 	.word	0x20000250
			} else { //if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
				//+3
				arm.State = arm.ArmGripPreENDMOVE;
 8002960:	4ba2      	ldr	r3, [pc, #648]	; (8002bec <main+0x440>)
 8002962:	220c      	movs	r2, #12
 8002964:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			}
		}

		//обробка кількість кроків та періоди.
		if (arm.State == arm.ArmStepSTART) {
 8002968:	4ba0      	ldr	r3, [pc, #640]	; (8002bec <main+0x440>)
 800296a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800296e:	2b01      	cmp	r3, #1
 8002970:	d114      	bne.n	800299c <main+0x1f0>
			arm.State = arm.ArmSTAND;
 8002972:	4b9e      	ldr	r3, [pc, #632]	; (8002bec <main+0x440>)
 8002974:	2206      	movs	r2, #6
 8002976:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			arm.Set2StepMotors(un_to.params.lin, un_to.params.PoT_lin,
 800297a:	4b9d      	ldr	r3, [pc, #628]	; (8002bf0 <main+0x444>)
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	4b9c      	ldr	r3, [pc, #624]	; (8002bf0 <main+0x444>)
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b9b      	ldr	r3, [pc, #620]	; (8002bf0 <main+0x444>)
 8002984:	6858      	ldr	r0, [r3, #4]
 8002986:	4b9a      	ldr	r3, [pc, #616]	; (8002bf0 <main+0x444>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4603      	mov	r3, r0
 800298e:	4897      	ldr	r0, [pc, #604]	; (8002bec <main+0x440>)
 8002990:	f7fe ff3c 	bl	800180c <_ZN7RoboArm14Set2StepMotorsEfifi>
					un_to.params.ang, un_to.params.PoT_ang);
			arm.State = arm.ArmStepWaitMOVE;
 8002994:	4b95      	ldr	r3, [pc, #596]	; (8002bec <main+0x440>)
 8002996:	2202      	movs	r2, #2
 8002998:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
		}

		if (arm.State == arm.ArmStepWaitMOVE) {
 800299c:	4b93      	ldr	r3, [pc, #588]	; (8002bec <main+0x440>)
 800299e:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d122      	bne.n	80029ec <main+0x240>
//			stepsSetFlagSent = true;
			arm.State = arm.ArmSTAND;
 80029a6:	4b91      	ldr	r3, [pc, #580]	; (8002bec <main+0x440>)
 80029a8:	2206      	movs	r2, #6
 80029aa:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			un_send.params.lin = 0.0;
 80029ae:	4b91      	ldr	r3, [pc, #580]	; (8002bf4 <main+0x448>)
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0.0;
 80029b6:	4b8f      	ldr	r3, [pc, #572]	; (8002bf4 <main+0x448>)
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	605a      	str	r2, [r3, #4]
			un_send.params.PoT_lin = 0;
 80029be:	4b8d      	ldr	r3, [pc, #564]	; (8002bf4 <main+0x448>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 80029c4:	4b8b      	ldr	r3, [pc, #556]	; (8002bf4 <main+0x448>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
			un_send.params.lin_2 = 0;
 80029ca:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <main+0x448>)
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <main+0x448>)
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
			un_send.params.hold = 10;
 80029da:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <main+0x448>)
 80029dc:	220a      	movs	r2, #10
 80029de:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80029e0:	230c      	movs	r3, #12
 80029e2:	221c      	movs	r2, #28
 80029e4:	4983      	ldr	r1, [pc, #524]	; (8002bf4 <main+0x448>)
 80029e6:	4884      	ldr	r0, [pc, #528]	; (8002bf8 <main+0x44c>)
 80029e8:	f003 ff07 	bl	80067fa <HAL_UART_Transmit>
					12);
		}

		if (arm.State == arm.ArmStepStartMOVE) {
 80029ec:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <main+0x440>)
 80029ee:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d10e      	bne.n	8002a14 <main+0x268>
			arm.State = arm.ArmStepMOVE;
 80029f6:	4b7d      	ldr	r3, [pc, #500]	; (8002bec <main+0x440>)
 80029f8:	2204      	movs	r2, #4
 80029fa:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			//В останне запишемо поточне положення зачепа
			arm.lastGripState = arm.GetGripperState();
 80029fe:	487b      	ldr	r0, [pc, #492]	; (8002bec <main+0x440>)
 8002a00:	f7fe fff7 	bl	80019f2 <_ZN7RoboArm15GetGripperStateEv>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b78      	ldr	r3, [pc, #480]	; (8002bec <main+0x440>)
 8002a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
//			} else { //if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
//				//+3
//				arm.State = arm.ArmGripPreENDMOVEStep;
//			}

			arm.Move2StepMotors();
 8002a0e:	4877      	ldr	r0, [pc, #476]	; (8002bec <main+0x440>)
 8002a10:	f7fe ff96 	bl	8001940 <_ZN7RoboArm15Move2StepMotorsEv>
//			stepsSetFlagSent = false;
		}

		//+4 опустили якщо треба було або починаємо одночасний рух моторів.
		if (arm.State == arm.ArmGripPreENDMOVE) {
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <main+0x440>)
 8002a16:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d10b      	bne.n	8002a36 <main+0x28a>
			arm.State = arm.ArmMOVE;
 8002a1e:	4b73      	ldr	r3, [pc, #460]	; (8002bec <main+0x440>)
 8002a20:	2205      	movs	r2, #5
 8002a22:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002a26:	4b72      	ldr	r3, [pc, #456]	; (8002bf0 <main+0x444>)
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4a71      	ldr	r2, [pc, #452]	; (8002bf0 <main+0x444>)
 8002a2c:	6912      	ldr	r2, [r2, #16]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	486e      	ldr	r0, [pc, #440]	; (8002bec <main+0x440>)
 8002a32:	f7fe fd45 	bl	80014c0 <_ZN7RoboArm11Move2MotorsEff>
		}

		if (arm.State == arm.ArmGripPreENDMOVEStep) {
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <main+0x440>)
 8002a38:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a3c:	2b0d      	cmp	r3, #13
 8002a3e:	d106      	bne.n	8002a4e <main+0x2a2>
			arm.State = arm.ArmMOVE;
 8002a40:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <main+0x440>)
 8002a42:	2205      	movs	r2, #5
 8002a44:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			arm.Move2StepMotors();
 8002a48:	4868      	ldr	r0, [pc, #416]	; (8002bec <main+0x440>)
 8002a4a:	f7fe ff79 	bl	8001940 <_ZN7RoboArm15Move2StepMotorsEv>
		}

		if (arm.anglePsteps == 0 && (arm.State == arm.ArmMOVE || arm.State == arm.ArmStepMOVE || arm.State == arm.ArmCorrectPosition)){
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <main+0x440>)
 8002a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11b      	bne.n	8002a8e <main+0x2e2>
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <main+0x440>)
 8002a58:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d009      	beq.n	8002a74 <main+0x2c8>
 8002a60:	4b62      	ldr	r3, [pc, #392]	; (8002bec <main+0x440>)
 8002a62:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d004      	beq.n	8002a74 <main+0x2c8>
 8002a6a:	4b60      	ldr	r3, [pc, #384]	; (8002bec <main+0x440>)
 8002a6c:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a70:	2b16      	cmp	r3, #22
 8002a72:	d10c      	bne.n	8002a8e <main+0x2e2>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002a74:	2100      	movs	r1, #0
 8002a76:	4861      	ldr	r0, [pc, #388]	; (8002bfc <main+0x450>)
 8002a78:	f003 f906 	bl	8005c88 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002a7c:	485f      	ldr	r0, [pc, #380]	; (8002bfc <main+0x450>)
 8002a7e:	f002 ffe9 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
			cntImpulse1 = 0;
 8002a82:	4b5f      	ldr	r3, [pc, #380]	; (8002c00 <main+0x454>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
			timerFT1 = true;
 8002a88:	4b5e      	ldr	r3, [pc, #376]	; (8002c04 <main+0x458>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
		}

		if (arm.distPsteps == 0 && (arm.State == arm.ArmMOVE || arm.State == arm.ArmStepMOVE || arm.State == arm.ArmCorrectPosition)){
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <main+0x440>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11b      	bne.n	8002ace <main+0x322>
 8002a96:	4b55      	ldr	r3, [pc, #340]	; (8002bec <main+0x440>)
 8002a98:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d009      	beq.n	8002ab4 <main+0x308>
 8002aa0:	4b52      	ldr	r3, [pc, #328]	; (8002bec <main+0x440>)
 8002aa2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d004      	beq.n	8002ab4 <main+0x308>
 8002aaa:	4b50      	ldr	r3, [pc, #320]	; (8002bec <main+0x440>)
 8002aac:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002ab0:	2b16      	cmp	r3, #22
 8002ab2:	d10c      	bne.n	8002ace <main+0x322>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	4854      	ldr	r0, [pc, #336]	; (8002c08 <main+0x45c>)
 8002ab8:	f003 f8e6 	bl	8005c88 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002abc:	4852      	ldr	r0, [pc, #328]	; (8002c08 <main+0x45c>)
 8002abe:	f002 ffc9 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
			cntImpulse2 = 0;
 8002ac2:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <main+0x460>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
			timerFT2 = true;
 8002ac8:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <main+0x464>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
		}

		if (timerFT1 && timerFT2 && arm.State == arm.ArmMOVE) {
 8002ace:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <main+0x458>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d02d      	beq.n	8002b32 <main+0x386>
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <main+0x464>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d029      	beq.n	8002b32 <main+0x386>
 8002ade:	4b43      	ldr	r3, [pc, #268]	; (8002bec <main+0x440>)
 8002ae0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d124      	bne.n	8002b32 <main+0x386>
			timerFT1 = false;
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <main+0x458>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002aee:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <main+0x464>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			arm.State = arm.ArmCorrectPosition;
 8002af4:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <main+0x440>)
 8002af6:	2216      	movs	r2, #22
 8002af8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

			lin_beforeCorrect = arm.GetLin();
 8002afc:	483b      	ldr	r0, [pc, #236]	; (8002bec <main+0x440>)
 8002afe:	f7ff f935 	bl	8001d6c <_ZN7RoboArm6GetLinEv>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <main+0x468>)
 8002b06:	6013      	str	r3, [r2, #0]
//			un_send.params.lin = 0;
//			un_send.params.lin_2 = lin;
			HAL_Delay(10);
 8002b08:	200a      	movs	r0, #10
 8002b0a:	f001 fb4d 	bl	80041a8 <HAL_Delay>
			ang_beforeCorrect = arm.GetAng();
 8002b0e:	4837      	ldr	r0, [pc, #220]	; (8002bec <main+0x440>)
 8002b10:	f7ff f9a8 	bl	8001e64 <_ZN7RoboArm6GetAngEv>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <main+0x46c>)
 8002b18:	6013      	str	r3, [r2, #0]

//			arm.drvMicroSteps = 128;
//			arm.gripperPsteps = 523*arm.drvMicroSteps;
//			arm.steps4OneMM = motorStep * arm.drvMicroSteps / (beltRatio * spoolStep);

			arm.SetLinAngMicrostepsAndParams(7);
 8002b1a:	2107      	movs	r1, #7
 8002b1c:	4833      	ldr	r0, [pc, #204]	; (8002bec <main+0x440>)
 8002b1e:	f7ff f87a 	bl	8001c16 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>

			// TODO change microsteps to 128
			// UPDATE VALUES FOR ARM, LIKE STEPS FOR 1 MM
//			arm.SetBuserState(2);
			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <main+0x444>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4a32      	ldr	r2, [pc, #200]	; (8002bf0 <main+0x444>)
 8002b28:	6912      	ldr	r2, [r2, #16]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	482f      	ldr	r0, [pc, #188]	; (8002bec <main+0x440>)
 8002b2e:	f7fe fcc7 	bl	80014c0 <_ZN7RoboArm11Move2MotorsEff>
		}



		//+5 обидва мотори доїхали по статусам в таймерах
		if (timerFT1 && timerFT2 && arm.State == arm.ArmStepMOVE) {
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <main+0x458>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d02d      	beq.n	8002b96 <main+0x3ea>
 8002b3a:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <main+0x464>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d029      	beq.n	8002b96 <main+0x3ea>
 8002b42:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <main+0x440>)
 8002b44:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d124      	bne.n	8002b96 <main+0x3ea>
			timerFT1 = false;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <main+0x458>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <main+0x464>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
			arm.State = arm.ArmCorrectPosition;
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <main+0x440>)
 8002b5a:	2216      	movs	r2, #22
 8002b5c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

			lin_beforeCorrect = arm.GetLin();
 8002b60:	4822      	ldr	r0, [pc, #136]	; (8002bec <main+0x440>)
 8002b62:	f7ff f903 	bl	8001d6c <_ZN7RoboArm6GetLinEv>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <main+0x468>)
 8002b6a:	6013      	str	r3, [r2, #0]
			HAL_Delay(10);
 8002b6c:	200a      	movs	r0, #10
 8002b6e:	f001 fb1b 	bl	80041a8 <HAL_Delay>
			ang_beforeCorrect = arm.GetAng();
 8002b72:	481e      	ldr	r0, [pc, #120]	; (8002bec <main+0x440>)
 8002b74:	f7ff f976 	bl	8001e64 <_ZN7RoboArm6GetAngEv>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <main+0x46c>)
 8002b7c:	6013      	str	r3, [r2, #0]

			arm.SetLinAngMicrostepsAndParams(7);
 8002b7e:	2107      	movs	r1, #7
 8002b80:	481a      	ldr	r0, [pc, #104]	; (8002bec <main+0x440>)
 8002b82:	f7ff f848 	bl	8001c16 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>

			arm.Move2Motors(un_to.params.ang_2, un_to.params.lin_2);
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <main+0x444>)
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <main+0x444>)
 8002b8c:	6912      	ldr	r2, [r2, #16]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4816      	ldr	r0, [pc, #88]	; (8002bec <main+0x440>)
 8002b92:	f7fe fc95 	bl	80014c0 <_ZN7RoboArm11Move2MotorsEff>
		}
		if (timerFT1 && timerFT2	&& arm.State == arm.ArmCorrectPosition) {
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <main+0x458>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <main+0x420>
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <main+0x464>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d012      	beq.n	8002bcc <main+0x420>
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <main+0x440>)
 8002ba8:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002bac:	2b16      	cmp	r3, #22
 8002bae:	d10d      	bne.n	8002bcc <main+0x420>
//			arm.SetBuserState(3);
			// TODO change microsteps to 32/16
			// UPDATE VALUES FOR ARM, LIKE STEPS FOR 1 MM
			timerFT1 = false;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <main+0x458>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <main+0x464>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
//			arm.SetLinAngMicrostepsAndParams(4);
			arm.State = arm.ArmGripPermit;
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <main+0x440>)
 8002bbe:	2215      	movs	r2, #21
 8002bc0:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
//			arm.drvMicroSteps = 16;
//			arm.gripperPsteps = 523*arm.drvMicroSteps;
//			arm.steps4OneMM = motorStep * arm.drvMicroSteps / (beltRatio * spoolStep);
			arm.SetLinAngMicrostepsAndParams(4);
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	4809      	ldr	r0, [pc, #36]	; (8002bec <main+0x440>)
 8002bc8:	f7ff f825 	bl	8001c16 <_ZN7RoboArm28SetLinAngMicrostepsAndParamsEh>
		}

		if (arm.State == arm.ArmGripPermit) {
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <main+0x440>)
 8002bce:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002bd2:	2b15      	cmp	r3, #21
 8002bd4:	d148      	bne.n	8002c68 <main+0x4bc>
			//+6 Перевірка статуса зацепа чи він не посередині і встановлюємо потрібний опускаємо
//			arm.SetBuserState(1);
			int tempGripState = arm.GetGripperState();
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <main+0x440>)
 8002bd8:	f7fe ff0b 	bl	80019f2 <_ZN7RoboArm15GetGripperStateEv>
 8002bdc:	6178      	str	r0, [r7, #20]
			if ((tempGripState == 1 || tempGripState == 0)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d01b      	beq.n	8002c1c <main+0x470>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d12d      	bne.n	8002c46 <main+0x49a>
 8002bea:	e017      	b.n	8002c1c <main+0x470>
 8002bec:	20000280 	.word	0x20000280
 8002bf0:	20000250 	.word	0x20000250
 8002bf4:	20000234 	.word	0x20000234
 8002bf8:	20000164 	.word	0x20000164
 8002bfc:	2000008c 	.word	0x2000008c
 8002c00:	20000274 	.word	0x20000274
 8002c04:	20000211 	.word	0x20000211
 8002c08:	200000d4 	.word	0x200000d4
 8002c0c:	20000278 	.word	0x20000278
 8002c10:	20000212 	.word	0x20000212
 8002c14:	2000026c 	.word	0x2000026c
 8002c18:	20000270 	.word	0x20000270
					&& (tempGripState != un_to.params.hold)) {
 8002c1c:	4b9c      	ldr	r3, [pc, #624]	; (8002e90 <main+0x6e4>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00f      	beq.n	8002c46 <main+0x49a>

				arm.lastGripState = tempGripState; //записали поточне положеня
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4b9a      	ldr	r3, [pc, #616]	; (8002e94 <main+0x6e8>)
 8002c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

				arm.State = arm.ArmGripMOVE;
 8002c30:	4b98      	ldr	r3, [pc, #608]	; (8002e94 <main+0x6e8>)
 8002c32:	2208      	movs	r2, #8
 8002c34:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				arm.SetGripper(un_to.params.hold);
 8002c38:	4b95      	ldr	r3, [pc, #596]	; (8002e90 <main+0x6e4>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4895      	ldr	r0, [pc, #596]	; (8002e94 <main+0x6e8>)
 8002c40:	f7fe ff30 	bl	8001aa4 <_ZN7RoboArm10SetGripperEi>
 8002c44:	e010      	b.n	8002c68 <main+0x4bc>
			} else if (tempGripState == un_to.params.hold) {
 8002c46:	4b92      	ldr	r3, [pc, #584]	; (8002e90 <main+0x6e4>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d104      	bne.n	8002c5a <main+0x4ae>
				arm.State = arm.ArmGripENDMOVE;
 8002c50:	4b90      	ldr	r3, [pc, #576]	; (8002e94 <main+0x6e8>)
 8002c52:	2209      	movs	r2, #9
 8002c54:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8002c58:	e006      	b.n	8002c68 <main+0x4bc>
			} else if (tempGripState == 3) {
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d103      	bne.n	8002c68 <main+0x4bc>
				arm.State = arm.ArmGripMOVEError;  //!!!!!!!!!!!!!!!! УВАГА ТУТ
 8002c60:	4b8c      	ldr	r3, [pc, #560]	; (8002e94 <main+0x6e8>)
 8002c62:	2213      	movs	r2, #19
 8002c64:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			}
		}

		//якщо кроки закінчились а кінцевік не спрацював
		if (arm.State == arm.ArmGripMOVEError) {
 8002c68:	4b8a      	ldr	r3, [pc, #552]	; (8002e94 <main+0x6e8>)
 8002c6a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002c6e:	2b13      	cmp	r3, #19
 8002c70:	d107      	bne.n	8002c82 <main+0x4d6>
			arm.State = arm.ArmGripMOVERetry;
 8002c72:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <main+0x6e8>)
 8002c74:	2214      	movs	r2, #20
 8002c76:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			//їдемо в протилежну сторону
			arm.SetGripper(0); // TODO to last stable position
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4885      	ldr	r0, [pc, #532]	; (8002e94 <main+0x6e8>)
 8002c7e:	f7fe ff11 	bl	8001aa4 <_ZN7RoboArm10SetGripperEi>
//		if (arm.GetGripperState()==un_to.params.hold && arm.State = arm.ArmGripENDMOVE){
//			arm.State = arm.ArmGripENDMOVE;
//		}

		// +7 закінчили рух зацепа
		if (arm.State == arm.ArmGripENDMOVE) {
 8002c82:	4b84      	ldr	r3, [pc, #528]	; (8002e94 <main+0x6e8>)
 8002c84:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d135      	bne.n	8002cf8 <main+0x54c>
			arm.State = arm.ArmSTAND;
 8002c8c:	4b81      	ldr	r3, [pc, #516]	; (8002e94 <main+0x6e8>)
 8002c8e:	2206      	movs	r2, #6
 8002c90:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			float lin = arm.GetLin();
 8002c94:	487f      	ldr	r0, [pc, #508]	; (8002e94 <main+0x6e8>)
 8002c96:	f7ff f869 	bl	8001d6c <_ZN7RoboArm6GetLinEv>
 8002c9a:	6138      	str	r0, [r7, #16]
//			un_send.params.lin = 0;
			un_send.params.lin = lin_beforeCorrect;
 8002c9c:	4b7e      	ldr	r3, [pc, #504]	; (8002e98 <main+0x6ec>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a7e      	ldr	r2, [pc, #504]	; (8002e9c <main+0x6f0>)
 8002ca2:	6013      	str	r3, [r2, #0]
			un_send.params.lin_2 = lin;
 8002ca4:	4a7d      	ldr	r2, [pc, #500]	; (8002e9c <main+0x6f0>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6113      	str	r3, [r2, #16]
			HAL_Delay(10);
 8002caa:	200a      	movs	r0, #10
 8002cac:	f001 fa7c 	bl	80041a8 <HAL_Delay>
			float ang = arm.GetAng();
 8002cb0:	4878      	ldr	r0, [pc, #480]	; (8002e94 <main+0x6e8>)
 8002cb2:	f7ff f8d7 	bl	8001e64 <_ZN7RoboArm6GetAngEv>
 8002cb6:	60f8      	str	r0, [r7, #12]
//			un_send.params.ang = 0;
			un_send.params.ang = ang_beforeCorrect;
 8002cb8:	4b79      	ldr	r3, [pc, #484]	; (8002ea0 <main+0x6f4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a77      	ldr	r2, [pc, #476]	; (8002e9c <main+0x6f0>)
 8002cbe:	6053      	str	r3, [r2, #4]
			un_send.params.ang_2 = ang;
 8002cc0:	4a76      	ldr	r2, [pc, #472]	; (8002e9c <main+0x6f0>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6153      	str	r3, [r2, #20]
			un_send.params.hold = arm.GetGripperState()+10;
 8002cc6:	4873      	ldr	r0, [pc, #460]	; (8002e94 <main+0x6e8>)
 8002cc8:	f7fe fe93 	bl	80019f2 <_ZN7RoboArm15GetGripperStateEv>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	330a      	adds	r3, #10
 8002cd0:	4a72      	ldr	r2, [pc, #456]	; (8002e9c <main+0x6f0>)
 8002cd2:	6193      	str	r3, [r2, #24]
			un_send.params.PoT_lin = 0;
 8002cd4:	4b71      	ldr	r3, [pc, #452]	; (8002e9c <main+0x6f0>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002cda:	4b70      	ldr	r3, [pc, #448]	; (8002e9c <main+0x6f0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]

			gripperMoveFinished = false;
 8002ce0:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <main+0x6f8>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
			moveFinished = false;
 8002ce6:	4b70      	ldr	r3, [pc, #448]	; (8002ea8 <main+0x6fc>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),12);
 8002cec:	230c      	movs	r3, #12
 8002cee:	221c      	movs	r2, #28
 8002cf0:	496a      	ldr	r1, [pc, #424]	; (8002e9c <main+0x6f0>)
 8002cf2:	486e      	ldr	r0, [pc, #440]	; (8002eac <main+0x700>)
 8002cf4:	f003 fd81 	bl	80067fa <HAL_UART_Transmit>

		}

		//запит на читання координат
		if (arm.getPrintState() && arm.State == arm.ArmGetData) {
 8002cf8:	4866      	ldr	r0, [pc, #408]	; (8002e94 <main+0x6e8>)
 8002cfa:	f7fe ff5b 	bl	8001bb4 <_ZN7RoboArm13getPrintStateEv>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <main+0x566>
 8002d04:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <main+0x6e8>)
 8002d06:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d101      	bne.n	8002d12 <main+0x566>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <main+0x568>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02e      	beq.n	8002d76 <main+0x5ca>
			arm.State = arm.ArmSTAND;
 8002d18:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <main+0x6e8>)
 8002d1a:	2206      	movs	r2, #6
 8002d1c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			float lin = arm.GetLin();
 8002d20:	485c      	ldr	r0, [pc, #368]	; (8002e94 <main+0x6e8>)
 8002d22:	f7ff f823 	bl	8001d6c <_ZN7RoboArm6GetLinEv>
 8002d26:	60b8      	str	r0, [r7, #8]
			un_send.params.lin = 0;
 8002d28:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <main+0x6f0>)
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
			un_send.params.lin_2 = lin;
 8002d30:	4a5a      	ldr	r2, [pc, #360]	; (8002e9c <main+0x6f0>)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6113      	str	r3, [r2, #16]
//		  un_send.params.lin = arm.ShiftZeroLin(lin); //це для АМТ223С-V
			HAL_Delay(10);
 8002d36:	200a      	movs	r0, #10
 8002d38:	f001 fa36 	bl	80041a8 <HAL_Delay>
			float ang = arm.GetAng();
 8002d3c:	4855      	ldr	r0, [pc, #340]	; (8002e94 <main+0x6e8>)
 8002d3e:	f7ff f891 	bl	8001e64 <_ZN7RoboArm6GetAngEv>
 8002d42:	6078      	str	r0, [r7, #4]
			un_send.params.ang = 0;
 8002d44:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <main+0x6f0>)
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]
			un_send.params.ang_2 = ang;
 8002d4c:	4a53      	ldr	r2, [pc, #332]	; (8002e9c <main+0x6f0>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6153      	str	r3, [r2, #20]
//		  un_send.params.ang = arm.ShiftZeroAng(ang); //це для АМТ223С-V
			un_send.params.hold = arm.GetGripperState();
 8002d52:	4850      	ldr	r0, [pc, #320]	; (8002e94 <main+0x6e8>)
 8002d54:	f7fe fe4d 	bl	80019f2 <_ZN7RoboArm15GetGripperStateEv>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <main+0x6f0>)
 8002d5c:	6193      	str	r3, [r2, #24]
			un_send.params.PoT_lin = 0;
 8002d5e:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <main+0x6f0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002d64:	4b4d      	ldr	r3, [pc, #308]	; (8002e9c <main+0x6f0>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	221c      	movs	r2, #28
 8002d6e:	494b      	ldr	r1, [pc, #300]	; (8002e9c <main+0x6f0>)
 8002d70:	484e      	ldr	r0, [pc, #312]	; (8002eac <main+0x700>)
 8002d72:	f003 fd42 	bl	80067fa <HAL_UART_Transmit>
					12);
		}

		//екстренна зупинка
		if (arm.State == arm.ArmSTOP) {
 8002d76:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <main+0x6e8>)
 8002d78:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	d128      	bne.n	8002dd2 <main+0x626>
			stopHand = false;
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <main+0x704>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 8002d86:	4843      	ldr	r0, [pc, #268]	; (8002e94 <main+0x6e8>)
 8002d88:	f7fe fb56 	bl	8001438 <_ZN7RoboArm13EmergencyStopEv>

			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 8002d8c:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <main+0x6f0>)
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002d94:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <main+0x6f0>)
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 8002d9c:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <main+0x6f0>)
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8002da4:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <main+0x6f0>)
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 8002dac:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <main+0x6f0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <main+0x6f0>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	60da      	str	r2, [r3, #12]
			un_send.params.hold = 10;
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <main+0x6f0>)
 8002dba:	220a      	movs	r2, #10
 8002dbc:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	221c      	movs	r2, #28
 8002dc2:	4936      	ldr	r1, [pc, #216]	; (8002e9c <main+0x6f0>)
 8002dc4:	4839      	ldr	r0, [pc, #228]	; (8002eac <main+0x700>)
 8002dc6:	f003 fd18 	bl	80067fa <HAL_UART_Transmit>
					12);
			arm.State = arm.ArmSTAND;
 8002dca:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <main+0x6e8>)
 8002dcc:	2206      	movs	r2, #6
 8002dce:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
		}

		//встановлення нуля
		if (arm.State == arm.ArmSetZero) {
 8002dd2:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <main+0x6e8>)
 8002dd4:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002dd8:	2b11      	cmp	r3, #17
 8002dda:	d12d      	bne.n	8002e38 <main+0x68c>
			arm.State = arm.ArmSTAND;
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <main+0x6e8>)
 8002dde:	2206      	movs	r2, #6
 8002de0:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			arm.SetZeroEncoders();
 8002de4:	482b      	ldr	r0, [pc, #172]	; (8002e94 <main+0x6e8>)
 8002de6:	f7ff f881 	bl	8001eec <_ZN7RoboArm15SetZeroEncodersEv>
//		  arm.SetSoftwareZero();
			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <main+0x6f0>)
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <main+0x6f0>)
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 8002dfa:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <main+0x6f0>)
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <main+0x6f0>)
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <main+0x6f0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002e10:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <main+0x6f0>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
			un_send.params.lin_2 = 0;
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <main+0x6f0>)
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <main+0x6f0>)
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
			un_send.params.hold = 10;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <main+0x6f0>)
 8002e28:	220a      	movs	r2, #10
 8002e2a:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	221c      	movs	r2, #28
 8002e30:	491a      	ldr	r1, [pc, #104]	; (8002e9c <main+0x6f0>)
 8002e32:	481e      	ldr	r0, [pc, #120]	; (8002eac <main+0x700>)
 8002e34:	f003 fce1 	bl	80067fa <HAL_UART_Transmit>
					12);

//			arm.State = arm.ArmSTAND;
		}

		if (arm.State == arm.ArmGetVers) {
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <main+0x6e8>)
 8002e3a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002e3e:	2b12      	cmp	r3, #18
 8002e40:	f47f ad45 	bne.w	80028ce <main+0x122>
			arm.State = arm.ArmSTAND;
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <main+0x6e8>)
 8002e46:	2206      	movs	r2, #6
 8002e48:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			un_send.params.lin = 0;
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <main+0x6f0>)
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <main+0x6f0>)
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	605a      	str	r2, [r3, #4]
			un_send.params.lin_2 = 0;
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <main+0x6f0>)
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
			un_send.params.ang_2 = 0;
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <main+0x6f0>)
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	615a      	str	r2, [r3, #20]
			un_send.params.PoT_lin = 0;
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <main+0x6f0>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <main+0x6f0>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
			un_send.params.hold = version;
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <main+0x708>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <main+0x6f0>)
 8002e7e:	6193      	str	r3, [r2, #24]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002e80:	230c      	movs	r3, #12
 8002e82:	221c      	movs	r2, #28
 8002e84:	4905      	ldr	r1, [pc, #20]	; (8002e9c <main+0x6f0>)
 8002e86:	4809      	ldr	r0, [pc, #36]	; (8002eac <main+0x700>)
 8002e88:	f003 fcb7 	bl	80067fa <HAL_UART_Transmit>
					12);
		}
	}
 8002e8c:	e51f      	b.n	80028ce <main+0x122>
 8002e8e:	bf00      	nop
 8002e90:	20000250 	.word	0x20000250
 8002e94:	20000280 	.word	0x20000280
 8002e98:	2000026c 	.word	0x2000026c
 8002e9c:	20000234 	.word	0x20000234
 8002ea0:	20000270 	.word	0x20000270
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000215 	.word	0x20000215
 8002eac:	20000164 	.word	0x20000164
 8002eb0:	20000210 	.word	0x20000210
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b090      	sub	sp, #64	; 0x40
 8002ebc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002ebe:	f107 0318 	add.w	r3, r7, #24
 8002ec2:	2228      	movs	r2, #40	; 0x28
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 fb3a 	bl	8007540 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ee2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eec:	2302      	movs	r3, #2
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ef6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002efc:	f107 0318 	add.w	r3, r7, #24
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 fd11 	bl	8004928 <HAL_RCC_OscConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 8002f16:	f000 fdfb 	bl	8003b10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002f1a:	230f      	movs	r3, #15
 8002f1c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f2a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	2102      	movs	r1, #2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 ff79 	bl	8004e2c <HAL_RCC_ClockConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8002f4a:	f000 fde1 	bl	8003b10 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8002f4e:	f002 f857 	bl	8005000 <HAL_RCC_EnableCSS>
}
 8002f52:	bf00      	nop
 8002f54:	3740      	adds	r7, #64	; 0x40
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None HAL_Delay(1);
 }
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f62:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <_ZL12MX_SPI1_Initv+0x74>)
 8002f64:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f66:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f6c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f74:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f8e:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f90:	2218      	movs	r2, #24
 8002f92:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002fa8:	220a      	movs	r2, #10
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002fac:	4807      	ldr	r0, [pc, #28]	; (8002fcc <_ZL12MX_SPI1_Initv+0x70>)
 8002fae:	f002 f8d7 	bl	8005160 <HAL_SPI_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf14      	ite	ne
 8002fb8:	2301      	movne	r3, #1
 8002fba:	2300      	moveq	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 8002fc2:	f000 fda5 	bl	8003b10 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000034 	.word	0x20000034
 8002fd0:	40013000 	.word	0x40013000

08002fd4 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b092      	sub	sp, #72	; 0x48
 8002fd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002fda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
 8002ff4:	615a      	str	r2, [r3, #20]
 8002ff6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 fa9e 	bl	8007540 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003004:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 8003006:	4a3e      	ldr	r2, [pc, #248]	; (8003100 <_ZL12MX_TIM1_Initv+0x12c>)
 8003008:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 800300a:	4b3c      	ldr	r3, [pc, #240]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 800300c:	2248      	movs	r2, #72	; 0x48
 800300e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003010:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 8003018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800301c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003024:	4b35      	ldr	r3, [pc, #212]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 8003026:	2200      	movs	r2, #0
 8003028:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800302a:	4b34      	ldr	r3, [pc, #208]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003030:	4832      	ldr	r0, [pc, #200]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 8003032:	f002 fd3d 	bl	8005ab0 <HAL_TIM_PWM_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 8003046:	f000 fd63 	bl	8003b10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003056:	4619      	mov	r1, r3
 8003058:	4828      	ldr	r0, [pc, #160]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 800305a:	f003 fa6b 	bl	8006534 <HAL_TIMEx_MasterConfigSynchronization>
 800305e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 800306e:	f000 fd4f 	bl	8003b10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003072:	2360      	movs	r3, #96	; 0x60
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800307e:	2300      	movs	r3, #0
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800308e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003092:	2200      	movs	r2, #0
 8003094:	4619      	mov	r1, r3
 8003096:	4819      	ldr	r0, [pc, #100]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 8003098:	f002 ff62 	bl	8005f60 <HAL_TIM_PWM_ConfigChannel>
 800309c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 80030ac:	f000 fd30 	bl	8003b10 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030c8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	480a      	ldr	r0, [pc, #40]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 80030d4:	f003 fa86 	bl	80065e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80030d8:	4603      	mov	r3, r0
			!= HAL_OK) {
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <_ZL12MX_TIM1_Initv+0x118>
		Error_Handler();
 80030e8:	f000 fd12 	bl	8003b10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80030ec:	4803      	ldr	r0, [pc, #12]	; (80030fc <_ZL12MX_TIM1_Initv+0x128>)
 80030ee:	f000 fe51 	bl	8003d94 <HAL_TIM_MspPostInit>

}
 80030f2:	bf00      	nop
 80030f4:	3748      	adds	r7, #72	; 0x48
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000008c 	.word	0x2000008c
 8003100:	40012c00 	.word	0x40012c00

08003104 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800310a:	f107 0320 	add.w	r3, r7, #32
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	615a      	str	r2, [r3, #20]
 8003124:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003126:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8003128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800312c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 800312e:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8003130:	2248      	movs	r2, #72	; 0x48
 8003132:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 800313a:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 800313c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003140:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 800314a:	2200      	movs	r2, #0
 800314c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800314e:	4820      	ldr	r0, [pc, #128]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8003150:	f002 fcae 	bl	8005ab0 <HAL_TIM_PWM_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf14      	ite	ne
 800315a:	2301      	movne	r3, #1
 800315c:	2300      	moveq	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 8003164:	f000 fcd4 	bl	8003b10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003168:	2300      	movs	r3, #0
 800316a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316c:	2300      	movs	r3, #0
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003170:	f107 0320 	add.w	r3, r7, #32
 8003174:	4619      	mov	r1, r3
 8003176:	4816      	ldr	r0, [pc, #88]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8003178:	f003 f9dc 	bl	8006534 <HAL_TIMEx_MasterConfigSynchronization>
 800317c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 800318c:	f000 fcc0 	bl	8003b10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003190:	2360      	movs	r3, #96	; 0x60
 8003192:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	2204      	movs	r2, #4
 80031a4:	4619      	mov	r1, r3
 80031a6:	480a      	ldr	r0, [pc, #40]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 80031a8:	f002 feda 	bl	8005f60 <HAL_TIM_PWM_ConfigChannel>
 80031ac:	4603      	mov	r3, r0
			!= HAL_OK) {
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <_ZL12MX_TIM2_Initv+0xbc>
		Error_Handler();
 80031bc:	f000 fca8 	bl	8003b10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80031c0:	4803      	ldr	r0, [pc, #12]	; (80031d0 <_ZL12MX_TIM2_Initv+0xcc>)
 80031c2:	f000 fde7 	bl	8003d94 <HAL_TIM_MspPostInit>

}
 80031c6:	bf00      	nop
 80031c8:	3728      	adds	r7, #40	; 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200000d4 	.word	0x200000d4

080031d4 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031da:	f107 0320 	add.w	r3, r7, #32
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	615a      	str	r2, [r3, #20]
 80031f4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80031f6:	4b29      	ldr	r3, [pc, #164]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 80031f8:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <_ZL12MX_TIM3_Initv+0xcc>)
 80031fa:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72;
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 80031fe:	2248      	movs	r2, #72	; 0x48
 8003200:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 800320a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800320e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003216:	4b21      	ldr	r3, [pc, #132]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800321c:	481f      	ldr	r0, [pc, #124]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 800321e:	f002 fc47 	bl	8005ab0 <HAL_TIM_PWM_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <_ZL12MX_TIM3_Initv+0x62>
		Error_Handler();
 8003232:	f000 fc6d 	bl	8003b10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800323e:	f107 0320 	add.w	r3, r7, #32
 8003242:	4619      	mov	r1, r3
 8003244:	4815      	ldr	r0, [pc, #84]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 8003246:	f003 f975 	bl	8006534 <HAL_TIMEx_MasterConfigSynchronization>
 800324a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <_ZL12MX_TIM3_Initv+0x8a>
		Error_Handler();
 800325a:	f000 fc59 	bl	8003b10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800325e:	2360      	movs	r3, #96	; 0x60
 8003260:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2204      	movs	r2, #4
 8003272:	4619      	mov	r1, r3
 8003274:	4809      	ldr	r0, [pc, #36]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 8003276:	f002 fe73 	bl	8005f60 <HAL_TIM_PWM_ConfigChannel>
 800327a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <_ZL12MX_TIM3_Initv+0xba>
		Error_Handler();
 800328a:	f000 fc41 	bl	8003b10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800328e:	4803      	ldr	r0, [pc, #12]	; (800329c <_ZL12MX_TIM3_Initv+0xc8>)
 8003290:	f000 fd80 	bl	8003d94 <HAL_TIM_MspPostInit>

}
 8003294:	bf00      	nop
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	2000011c 	.word	0x2000011c
 80032a0:	40000400 	.word	0x40000400

080032a4 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032aa:	4a14      	ldr	r2, [pc, #80]	; (80032fc <_ZL19MX_USART1_UART_Initv+0x58>)
 80032ac:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032b4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032ca:	220c      	movs	r2, #12
 80032cc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80032da:	4807      	ldr	r0, [pc, #28]	; (80032f8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032dc:	f003 f9e5 	bl	80066aa <HAL_UART_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf14      	ite	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2300      	moveq	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 80032f0:	f000 fc0e 	bl	8003b10 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000164 	.word	0x20000164
 80032fc:	40013800 	.word	0x40013800

08003300 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
//
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003306:	4a14      	ldr	r2, [pc, #80]	; (8003358 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003308:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 800330c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003310:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003320:	2200      	movs	r2, #0
 8003322:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003326:	220c      	movs	r2, #12
 8003328:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003332:	2200      	movs	r2, #0
 8003334:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8003336:	4807      	ldr	r0, [pc, #28]	; (8003354 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003338:	f003 fa07 	bl	800674a <HAL_HalfDuplex_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800334c:	f000 fbe0 	bl	8003b10 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
//
	/* USER CODE END USART2_Init 2 */

}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200001ac 	.word	0x200001ac
 8003358:	40004400 	.word	0x40004400

0800335c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003362:	f107 0310 	add.w	r3, r7, #16
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003370:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4a4d      	ldr	r2, [pc, #308]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 8003376:	f043 0310 	orr.w	r3, r3, #16
 800337a:	6193      	str	r3, [r2, #24]
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003388:	4b48      	ldr	r3, [pc, #288]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4a47      	ldr	r2, [pc, #284]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 800338e:	f043 0320 	orr.w	r3, r3, #32
 8003392:	6193      	str	r3, [r2, #24]
 8003394:	4b45      	ldr	r3, [pc, #276]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80033a0:	4b42      	ldr	r3, [pc, #264]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	4a41      	ldr	r2, [pc, #260]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6193      	str	r3, [r2, #24]
 80033ac:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80033b8:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	4a3b      	ldr	r2, [pc, #236]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 80033be:	f043 0308 	orr.w	r3, r3, #8
 80033c2:	6193      	str	r3, [r2, #24]
 80033c4:	4b39      	ldr	r3, [pc, #228]	; (80034ac <_ZL12MX_GPIO_Initv+0x150>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80033d0:	2200      	movs	r2, #0
 80033d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033d6:	4836      	ldr	r0, [pc, #216]	; (80034b0 <_ZL12MX_GPIO_Initv+0x154>)
 80033d8:	f001 fa5d 	bl	8004896 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80033dc:	2200      	movs	r2, #0
 80033de:	f241 0171 	movw	r1, #4209	; 0x1071
 80033e2:	4834      	ldr	r0, [pc, #208]	; (80034b4 <_ZL12MX_GPIO_Initv+0x158>)
 80033e4:	f001 fa57 	bl	8004896 <HAL_GPIO_WritePin>
	En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80033e8:	2200      	movs	r2, #0
 80033ea:	f648 7143 	movw	r1, #36675	; 0x8f43
 80033ee:	4832      	ldr	r0, [pc, #200]	; (80034b8 <_ZL12MX_GPIO_Initv+0x15c>)
 80033f0:	f001 fa51 	bl	8004896 <HAL_GPIO_WritePin>
			CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin | S2_Pin | En3_Pin
					| Dir3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 80033f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2302      	movs	r3, #2
 8003404:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8003406:	f107 0310 	add.w	r3, r7, #16
 800340a:	4619      	mov	r1, r3
 800340c:	4828      	ldr	r0, [pc, #160]	; (80034b0 <_ZL12MX_GPIO_Initv+0x154>)
 800340e:	f001 f8af 	bl	8004570 <HAL_GPIO_Init>

	/*Configure GPIO pins : En2_Pin Button_Pin En1_Pin Dir1_Pin
	 Buser_Pin */
	GPIO_InitStruct.Pin = En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin;
 8003412:	f241 0371 	movw	r3, #4209	; 0x1071
 8003416:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2302      	movs	r3, #2
 8003422:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003424:	f107 0310 	add.w	r3, r7, #16
 8003428:	4619      	mov	r1, r3
 800342a:	4822      	ldr	r0, [pc, #136]	; (80034b4 <_ZL12MX_GPIO_Initv+0x158>)
 800342c:	f001 f8a0 	bl	8004570 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
	 S1_Pin S2_Pin En3_Pin Dir3_Pin */
	GPIO_InitStruct.Pin = CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin
 8003430:	f648 7343 	movw	r3, #36675	; 0x8f43
 8003434:	613b      	str	r3, [r7, #16]
			| S2_Pin | En3_Pin | Dir3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003436:	2301      	movs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343e:	2302      	movs	r3, #2
 8003440:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003442:	f107 0310 	add.w	r3, r7, #16
 8003446:	4619      	mov	r1, r3
 8003448:	481b      	ldr	r0, [pc, #108]	; (80034b8 <_ZL12MX_GPIO_Initv+0x15c>)
 800344a:	f001 f891 	bl	8004570 <HAL_GPIO_Init>

	/*Configure GPIO pins : EndCap1_Pin EndCap2_Pin EndCap3_Pin */
	GPIO_InitStruct.Pin = EndCap1_Pin | EndCap2_Pin | EndCap3_Pin;
 800344e:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8003452:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <_ZL12MX_GPIO_Initv+0x160>)
 8003456:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4619      	mov	r1, r3
 8003462:	4815      	ldr	r0, [pc, #84]	; (80034b8 <_ZL12MX_GPIO_Initv+0x15c>)
 8003464:	f001 f884 	bl	8004570 <HAL_GPIO_Init>

	/*Configure GPIO pin : EndCap4_Pin */
	GPIO_InitStruct.Pin = EndCap4_Pin;
 8003468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800346c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <_ZL12MX_GPIO_Initv+0x160>)
 8003470:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(EndCap4_GPIO_Port, &GPIO_InitStruct);
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	4619      	mov	r1, r3
 800347c:	480d      	ldr	r0, [pc, #52]	; (80034b4 <_ZL12MX_GPIO_Initv+0x158>)
 800347e:	f001 f877 	bl	8004570 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003482:	2200      	movs	r2, #0
 8003484:	2105      	movs	r1, #5
 8003486:	2017      	movs	r0, #23
 8003488:	f000 ff89 	bl	800439e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800348c:	2017      	movs	r0, #23
 800348e:	f000 ffa2 	bl	80043d6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2105      	movs	r1, #5
 8003496:	2028      	movs	r0, #40	; 0x28
 8003498:	f000 ff81 	bl	800439e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800349c:	2028      	movs	r0, #40	; 0x28
 800349e:	f000 ff9a 	bl	80043d6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80034a2:	bf00      	nop
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40011000 	.word	0x40011000
 80034b4:	40010800 	.word	0x40010800
 80034b8:	40010c00 	.word	0x40010c00
 80034bc:	10110000 	.word	0x10110000

080034c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a84      	ldr	r2, [pc, #528]	; (80036dc <HAL_UART_RxCpltCallback+0x21c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f040 80fc 	bne.w	80036ca <HAL_UART_RxCpltCallback+0x20a>
		// копіюємо отримані дані у rx_buffer
		memcpy(un_get.bytes, rx_buffer, sizeof(rx_buffer));
 80034d2:	4a83      	ldr	r2, [pc, #524]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 80034d4:	4b83      	ldr	r3, [pc, #524]	; (80036e4 <HAL_UART_RxCpltCallback+0x224>)
 80034d6:	4614      	mov	r4, r2
 80034d8:	461d      	mov	r5, r3
 80034da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		switch (un_get.params.hold) {
 80034e6:	4b7e      	ldr	r3, [pc, #504]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	dc7a      	bgt.n	80035e4 <HAL_UART_RxCpltCallback+0x124>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da7d      	bge.n	80035ee <HAL_UART_RxCpltCallback+0x12e>
 80034f2:	e0e0      	b.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>
 80034f4:	3b19      	subs	r3, #25
 80034f6:	2b37      	cmp	r3, #55	; 0x37
 80034f8:	f200 80dd 	bhi.w	80036b6 <HAL_UART_RxCpltCallback+0x1f6>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <HAL_UART_RxCpltCallback+0x44>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	0800362d 	.word	0x0800362d
 8003508:	080036b7 	.word	0x080036b7
 800350c:	080036b7 	.word	0x080036b7
 8003510:	080036b7 	.word	0x080036b7
 8003514:	080036b7 	.word	0x080036b7
 8003518:	08003655 	.word	0x08003655
 800351c:	08003655 	.word	0x08003655
 8003520:	080036b7 	.word	0x080036b7
 8003524:	080036b7 	.word	0x080036b7
 8003528:	080036b7 	.word	0x080036b7
 800352c:	080036b7 	.word	0x080036b7
 8003530:	080036b7 	.word	0x080036b7
 8003534:	080036b7 	.word	0x080036b7
 8003538:	080036b7 	.word	0x080036b7
 800353c:	080036b7 	.word	0x080036b7
 8003540:	080036ad 	.word	0x080036ad
 8003544:	080036b7 	.word	0x080036b7
 8003548:	080036b7 	.word	0x080036b7
 800354c:	080036b7 	.word	0x080036b7
 8003550:	080036b7 	.word	0x080036b7
 8003554:	080036b7 	.word	0x080036b7
 8003558:	080036b7 	.word	0x080036b7
 800355c:	080036b7 	.word	0x080036b7
 8003560:	080036b7 	.word	0x080036b7
 8003564:	080036b7 	.word	0x080036b7
 8003568:	08003637 	.word	0x08003637
 800356c:	080036b7 	.word	0x080036b7
 8003570:	080036b7 	.word	0x080036b7
 8003574:	080036b7 	.word	0x080036b7
 8003578:	080036b7 	.word	0x080036b7
 800357c:	080036b7 	.word	0x080036b7
 8003580:	080036b7 	.word	0x080036b7
 8003584:	080036b7 	.word	0x080036b7
 8003588:	080036b7 	.word	0x080036b7
 800358c:	080036b7 	.word	0x080036b7
 8003590:	080036b7 	.word	0x080036b7
 8003594:	080036b7 	.word	0x080036b7
 8003598:	080036b7 	.word	0x080036b7
 800359c:	080036b7 	.word	0x080036b7
 80035a0:	080036b7 	.word	0x080036b7
 80035a4:	080036b7 	.word	0x080036b7
 80035a8:	080036b7 	.word	0x080036b7
 80035ac:	080036b7 	.word	0x080036b7
 80035b0:	080036b7 	.word	0x080036b7
 80035b4:	080036b7 	.word	0x080036b7
 80035b8:	080036b7 	.word	0x080036b7
 80035bc:	080036b7 	.word	0x080036b7
 80035c0:	080036b7 	.word	0x080036b7
 80035c4:	080036b7 	.word	0x080036b7
 80035c8:	080036b7 	.word	0x080036b7
 80035cc:	08003641 	.word	0x08003641
 80035d0:	080036b7 	.word	0x080036b7
 80035d4:	080036b7 	.word	0x080036b7
 80035d8:	080036b7 	.word	0x080036b7
 80035dc:	080036b7 	.word	0x080036b7
 80035e0:	0800364b 	.word	0x0800364b
 80035e4:	2b50      	cmp	r3, #80	; 0x50
 80035e6:	dc66      	bgt.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>
 80035e8:	2b19      	cmp	r3, #25
 80035ea:	da83      	bge.n	80034f4 <HAL_UART_RxCpltCallback+0x34>
 80035ec:	e063      	b.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>
		case 1:
			// 0 або 1 у un_get.params.hold = прийшли нові координати
			//startFirstMove = true;

			//статус початку руху  +1
			arm.State = arm.ArmSTART;
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_UART_RxCpltCallback+0x228>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

			un_to.params.lin = un_get.params.lin;
 80035f6:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a3c      	ldr	r2, [pc, #240]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 80035fc:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang;
 80035fe:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 8003604:	6053      	str	r3, [r2, #4]
			un_to.params.PoT_ang = 0;
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
			un_to.params.PoT_lin = 0;
 800360c:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
			un_to.params.lin_2 = un_get.params.lin_2;
 8003612:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4a35      	ldr	r2, [pc, #212]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 8003618:	6113      	str	r3, [r2, #16]
			un_to.params.ang_2 = un_get.params.ang_2;
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	4a33      	ldr	r2, [pc, #204]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 8003620:	6153      	str	r3, [r2, #20]
			un_to.params.hold = un_get.params.hold;
 8003622:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	4a31      	ldr	r2, [pc, #196]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 8003628:	6193      	str	r3, [r2, #24]
//			arm.moveGripper = un_get.params.hold;
			break;
 800362a:	e044      	b.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>

		case 25:
			//25 = екстренна зупинка

			arm.State = arm.ArmSTOP;
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_UART_RxCpltCallback+0x228>)
 800362e:	220f      	movs	r2, #15
 8003630:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			//оце би на переривання якесь повісити, щоб якщо натиснули в дашборді - то остаточно вирубати.
			break;
 8003634:	e03f      	b.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>
		case 50:
			//50 = get-запит
			//sendDataFlag = true;
			arm.State = arm.ArmGetData;
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_UART_RxCpltCallback+0x228>)
 8003638:	2210      	movs	r2, #16
 800363a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			break;
 800363e:	e03a      	b.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>
		case 75:
			//75 = встановлення нуля
			//	setZeroFlag = true;
			arm.State = arm.ArmSetZero;
 8003640:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_UART_RxCpltCallback+0x228>)
 8003642:	2211      	movs	r2, #17
 8003644:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			break;
 8003648:	e035      	b.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>
		case 80:
			arm.State = arm.ArmGetVers;
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_UART_RxCpltCallback+0x228>)
 800364c:	2212      	movs	r2, #18
 800364e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			break;
 8003652:	e030      	b.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>

		case 31: //так робити погано але ладна)
		case 30:
			arm.State = arm.ArmStepSTART;
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_UART_RxCpltCallback+0x228>)
 8003656:	2201      	movs	r2, #1
 8003658:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			un_to.params.lin = un_get.params.lin; //це кроки 1
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a22      	ldr	r2, [pc, #136]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 8003662:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang; //це кроки 2
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a20      	ldr	r2, [pc, #128]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 800366a:	6053      	str	r3, [r2, #4]
			un_to.params.PoT_ang = un_get.params.PoT_ang; //це період 2
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 8003672:	60d3      	str	r3, [r2, #12]
			un_to.params.PoT_lin = un_get.params.PoT_lin; //це період 1
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 800367a:	6093      	str	r3, [r2, #8]
			un_to.params.lin_2 = un_get.params.lin_2;
 800367c:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 8003682:	6113      	str	r3, [r2, #16]
			un_to.params.ang_2 = un_get.params.ang_2;
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 800368a:	6153      	str	r3, [r2, #20]
			un_to.params.hold = un_get.params.hold % 10; //парсимо hold 0 або 1
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_UART_RxCpltCallback+0x220>)
 800368e:	6999      	ldr	r1, [r3, #24]
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_UART_RxCpltCallback+0x230>)
 8003692:	fb83 2301 	smull	r2, r3, r3, r1
 8003696:	109a      	asrs	r2, r3, #2
 8003698:	17cb      	asrs	r3, r1, #31
 800369a:	1ad2      	subs	r2, r2, r3
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	1aca      	subs	r2, r1, r3
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_UART_RxCpltCallback+0x22c>)
 80036a8:	619a      	str	r2, [r3, #24]

			break;
 80036aa:	e004      	b.n	80036b6 <HAL_UART_RxCpltCallback+0x1f6>

		case 40:
			//перевірка чи були налаштовані таймери до цього для руху по крокам
			arm.State = arm.ArmStepStartMOVE;
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_UART_RxCpltCallback+0x228>)
 80036ae:	2203      	movs	r2, #3
 80036b0:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

			break;
 80036b4:	bf00      	nop

		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80036b6:	221c      	movs	r2, #28
 80036b8:	2100      	movs	r1, #0
 80036ba:	480a      	ldr	r0, [pc, #40]	; (80036e4 <HAL_UART_RxCpltCallback+0x224>)
 80036bc:	f003 ff40 	bl	8007540 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80036c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <HAL_UART_RxCpltCallback+0x234>)
 80036c6:	f001 f8fe 	bl	80048c6 <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80036ca:	221c      	movs	r2, #28
 80036cc:	4905      	ldr	r1, [pc, #20]	; (80036e4 <HAL_UART_RxCpltCallback+0x224>)
 80036ce:	4803      	ldr	r0, [pc, #12]	; (80036dc <HAL_UART_RxCpltCallback+0x21c>)
 80036d0:	f003 f916 	bl	8006900 <HAL_UART_Receive_IT>
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdb0      	pop	{r4, r5, r7, pc}
 80036dc:	20000164 	.word	0x20000164
 80036e0:	20000218 	.word	0x20000218
 80036e4:	200001f4 	.word	0x200001f4
 80036e8:	20000280 	.word	0x20000280
 80036ec:	20000250 	.word	0x20000250
 80036f0:	66666667 	.word	0x66666667
 80036f4:	40011000 	.word	0x40011000

080036f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	80fb      	strh	r3, [r7, #6]
		//	timerFT2 = true;
	}
//	else {
//		__NOP();
//	}
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <HAL_UART_ErrorCallback+0x84>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d133      	bne.n	8003786 <HAL_UART_ErrorCallback+0x7a>
		if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	2b08      	cmp	r3, #8
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_UART_ErrorCallback+0x2c>
			// переполнение
			arm.SetBuserState(2);
 8003730:	2102      	movs	r1, #2
 8003732:	4818      	ldr	r0, [pc, #96]	; (8003794 <HAL_UART_ErrorCallback+0x88>)
 8003734:	f7fe f92b 	bl	800198e <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_PE) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_UART_ErrorCallback+0x46>
			// Ошибка четности
			arm.SetBuserState(3);
 800374a:	2103      	movs	r1, #3
 800374c:	4811      	ldr	r0, [pc, #68]	; (8003794 <HAL_UART_ErrorCallback+0x88>)
 800374e:	f7fe f91e 	bl	800198e <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_NE) {
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	2b02      	cmp	r3, #2
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_UART_ErrorCallback+0x60>
			// Ошибка зашумление
			arm.SetBuserState(4);
 8003764:	2104      	movs	r1, #4
 8003766:	480b      	ldr	r0, [pc, #44]	; (8003794 <HAL_UART_ErrorCallback+0x88>)
 8003768:	f7fe f911 	bl	800198e <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_FE) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	2b04      	cmp	r3, #4
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_UART_ErrorCallback+0x7a>
			// Ошибка кадрирования
			arm.SetBuserState(5);
 800377e:	2105      	movs	r1, #5
 8003780:	4804      	ldr	r0, [pc, #16]	; (8003794 <HAL_UART_ErrorCallback+0x88>)
 8003782:	f7fe f904 	bl	800198e <_ZN7RoboArm13SetBuserStateEi>
		}
	}
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40013800 	.word	0x40013800
 8003794:	20000280 	.word	0x20000280

08003798 <_Z32debounce_check_pins_and_set_flagv>:

void debounce_check_pins_and_set_flag() {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
	static bool checkFlag1 = false;
	static bool checkFlag2 = false;
//	static uint8_t last_EndCap1_state = GPIO_PIN_RESET;
//	static uint8_t last_EndCap2_state = GPIO_PIN_RESET;
	static uint8_t last_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
			arm.EndCap1_PinG);
 800379e:	4b71      	ldr	r3, [pc, #452]	; (8003964 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f3bf 8f5b 	dmb	ish
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01a      	beq.n	80037ee <_Z32debounce_check_pins_and_set_flagv+0x56>
 80037b8:	486a      	ldr	r0, [pc, #424]	; (8003964 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 80037ba:	f003 fe71 	bl	80074a0 <__cxa_guard_acquire>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00f      	beq.n	80037ee <_Z32debounce_check_pins_and_set_flagv+0x56>
	static uint8_t last_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 80037ce:	4b66      	ldr	r3, [pc, #408]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	4a65      	ldr	r2, [pc, #404]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80037d4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 f844 	bl	8004868 <HAL_GPIO_ReadPin>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
			arm.EndCap1_PinG);
 80037e4:	4b61      	ldr	r3, [pc, #388]	; (800396c <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	485e      	ldr	r0, [pc, #376]	; (8003964 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 80037ea:	f003 fe65 	bl	80074b8 <__cxa_guard_release>
	static uint8_t last_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
			arm.EndCap2_PinG);
 80037ee:	4b60      	ldr	r3, [pc, #384]	; (8003970 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f3bf 8f5b 	dmb	ish
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01a      	beq.n	800383e <_Z32debounce_check_pins_and_set_flagv+0xa6>
 8003808:	4859      	ldr	r0, [pc, #356]	; (8003970 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 800380a:	f003 fe49 	bl	80074a0 <__cxa_guard_acquire>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00f      	beq.n	800383e <_Z32debounce_check_pins_and_set_flagv+0xa6>
	static uint8_t last_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 800381e:	4b52      	ldr	r3, [pc, #328]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	4a51      	ldr	r2, [pc, #324]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003824:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f81c 	bl	8004868 <HAL_GPIO_ReadPin>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
			arm.EndCap2_PinG);
 8003834:	4b4f      	ldr	r3, [pc, #316]	; (8003974 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	484d      	ldr	r0, [pc, #308]	; (8003970 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 800383a:	f003 fe3d 	bl	80074b8 <__cxa_guard_release>
	uint32_t current_time = HAL_GetTick();
 800383e:	f000 fca9 	bl	8004194 <HAL_GetTick>
 8003842:	6078      	str	r0, [r7, #4]

	// Перевірка чи пройшла достатня затримка для уникнення дребезгу
	if (current_time - last_check_time >= debounce_delay) {
 8003844:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <_Z32debounce_check_pins_and_set_flagv+0x1e0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	1ad2      	subs	r2, r2, r3
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <_Z32debounce_check_pins_and_set_flagv+0x1e4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	f0c0 8083 	bcc.w	800395c <_Z32debounce_check_pins_and_set_flagv+0x1c4>
		// Оновлення часу останньої перевірки
		last_check_time = current_time;
 8003856:	4a48      	ldr	r2, [pc, #288]	; (8003978 <_Z32debounce_check_pins_and_set_flagv+0x1e0>)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6013      	str	r3, [r2, #0]

		// Перевірка стану піну EndCap1
		uint8_t current_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 800385c:	4b42      	ldr	r3, [pc, #264]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 800385e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003860:	4a41      	ldr	r2, [pc, #260]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003862:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fffd 	bl	8004868 <HAL_GPIO_ReadPin>
 800386e:	4603      	mov	r3, r0
 8003870:	70fb      	strb	r3, [r7, #3]
				arm.EndCap1_PinG);

		if (current_EndCap1_state == GPIO_PIN_SET
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d120      	bne.n	80038ba <_Z32debounce_check_pins_and_set_flagv+0x122>
				&& last_EndCap1_state == GPIO_PIN_RESET) {
 8003878:	4b3c      	ldr	r3, [pc, #240]	; (800396c <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11c      	bne.n	80038ba <_Z32debounce_check_pins_and_set_flagv+0x122>
			if (checkFlag1) {
 8003880:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00f      	beq.n	80038a8 <_Z32debounce_check_pins_and_set_flagv+0x110>
				checkFlag1 = false;
 8003888:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
				gripIntFlag = true;
 800388e:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <_Z32debounce_check_pins_and_set_flagv+0x1ec>)
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
				HAL_GPIO_TogglePin(arm.Buser_GPIO_Port_Ind, arm.Buser_Pin_Ind);
 8003894:	4b34      	ldr	r3, [pc, #208]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003898:	4a33      	ldr	r2, [pc, #204]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 800389a:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 f810 	bl	80048c6 <HAL_GPIO_TogglePin>
			if (checkFlag1) {
 80038a6:	e00f      	b.n	80038c8 <_Z32debounce_check_pins_and_set_flagv+0x130>
			} else {
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80038a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ac:	4836      	ldr	r0, [pc, #216]	; (8003988 <_Z32debounce_check_pins_and_set_flagv+0x1f0>)
 80038ae:	f001 f80a 	bl	80048c6 <HAL_GPIO_TogglePin>
				checkFlag1 = true;
 80038b2:	4b33      	ldr	r3, [pc, #204]	; (8003980 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
			if (checkFlag1) {
 80038b8:	e006      	b.n	80038c8 <_Z32debounce_check_pins_and_set_flagv+0x130>
			}
		} else {
			if (checkFlag1) {
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <_Z32debounce_check_pins_and_set_flagv+0x130>
				checkFlag1 = false;
 80038c2:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
			}
		}
		if (!checkFlag1) {
 80038c8:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f083 0301 	eor.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <_Z32debounce_check_pins_and_set_flagv+0x144>
			last_EndCap1_state = current_EndCap1_state;
 80038d6:	4a25      	ldr	r2, [pc, #148]	; (800396c <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	7013      	strb	r3, [r2, #0]
		}

		// Перевірка стану піну EndCap2
		uint8_t current_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 80038dc:	4b22      	ldr	r3, [pc, #136]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	4a21      	ldr	r2, [pc, #132]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80038e2:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 ffbd 	bl	8004868 <HAL_GPIO_ReadPin>
 80038ee:	4603      	mov	r3, r0
 80038f0:	70bb      	strb	r3, [r7, #2]
//		if (current_EndCap2_state == GPIO_PIN_SET
//				&& last_EndCap2_state == GPIO_PIN_RESET) {
//			gripIntFlag = true;
//		}
//		last_EndCap2_state = current_EndCap2_state;
		if (current_EndCap2_state == GPIO_PIN_SET
 80038f2:	78bb      	ldrb	r3, [r7, #2]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d120      	bne.n	800393a <_Z32debounce_check_pins_and_set_flagv+0x1a2>
				&& last_EndCap2_state == GPIO_PIN_RESET) {
 80038f8:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11c      	bne.n	800393a <_Z32debounce_check_pins_and_set_flagv+0x1a2>
			if (checkFlag2) {
 8003900:	4b22      	ldr	r3, [pc, #136]	; (800398c <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <_Z32debounce_check_pins_and_set_flagv+0x190>
				checkFlag2 = false;
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
				gripIntFlag = true;
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <_Z32debounce_check_pins_and_set_flagv+0x1ec>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
				HAL_GPIO_TogglePin(arm.Buser_GPIO_Port_Ind, arm.Buser_Pin_Ind);
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 800391a:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f000 ffd0 	bl	80048c6 <HAL_GPIO_TogglePin>
			if (checkFlag2) {
 8003926:	e00f      	b.n	8003948 <_Z32debounce_check_pins_and_set_flagv+0x1b0>
			} else {
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8003928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800392c:	4816      	ldr	r0, [pc, #88]	; (8003988 <_Z32debounce_check_pins_and_set_flagv+0x1f0>)
 800392e:	f000 ffca 	bl	80048c6 <HAL_GPIO_TogglePin>
				checkFlag2 = true;
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
			if (checkFlag2) {
 8003938:	e006      	b.n	8003948 <_Z32debounce_check_pins_and_set_flagv+0x1b0>
			}
		} else {
			if (checkFlag2) {
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <_Z32debounce_check_pins_and_set_flagv+0x1b0>
				checkFlag2 = false;
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
			}
		}
		if (!checkFlag2) {
 8003948:	4b10      	ldr	r3, [pc, #64]	; (800398c <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f083 0301 	eor.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <_Z32debounce_check_pins_and_set_flagv+0x1c4>
			last_EndCap2_state = current_EndCap2_state;
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 8003958:	78bb      	ldrb	r3, [r7, #2]
 800395a:	7013      	strb	r3, [r2, #0]
		}
	}
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200003e8 	.word	0x200003e8
 8003968:	20000280 	.word	0x20000280
 800396c:	200003e6 	.word	0x200003e6
 8003970:	200003f0 	.word	0x200003f0
 8003974:	200003ec 	.word	0x200003ec
 8003978:	200003e0 	.word	0x200003e0
 800397c:	20000008 	.word	0x20000008
 8003980:	200003e4 	.word	0x200003e4
 8003984:	20000214 	.word	0x20000214
 8003988:	40011000 	.word	0x40011000
 800398c:	200003e5 	.word	0x200003e5

08003990 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a4f      	ldr	r2, [pc, #316]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d119      	bne.n	80039d6 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		cntImpulse1++;
 80039a2:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3301      	adds	r3, #1
 80039a8:	4a4d      	ldr	r2, [pc, #308]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80039aa:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 80039ac:	4b4d      	ldr	r3, [pc, #308]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039ae:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80039b0:	4b4b      	ldr	r3, [pc, #300]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f200 808d 	bhi.w	8003ad4 <HAL_TIM_PeriodElapsedCallback+0x144>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80039ba:	2100      	movs	r1, #0
 80039bc:	484a      	ldr	r0, [pc, #296]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80039be:	f002 f963 	bl	8005c88 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 80039c2:	4849      	ldr	r0, [pc, #292]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80039c4:	f002 f846 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
//			arm.SetEnable(1, false);
			// COMMENT 10
//			arm.SetEnable(1, true);
			cntImpulse1 = 0;
 80039c8:	4b45      	ldr	r3, [pc, #276]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
			timerFT1 = true;
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
//    HAL_IncTick();
//  }
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80039d4:	e07e      	b.n	8003ad4 <HAL_TIM_PeriodElapsedCallback+0x144>
	} else if (htim->Instance == TIM2) {
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d118      	bne.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x82>
		cntImpulse2++;
 80039e0:	4b43      	ldr	r3, [pc, #268]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	4a42      	ldr	r2, [pc, #264]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80039e8:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 80039ea:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80039ee:	4b40      	ldr	r3, [pc, #256]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d86e      	bhi.n	8003ad4 <HAL_TIM_PeriodElapsedCallback+0x144>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80039f6:	2104      	movs	r1, #4
 80039f8:	483e      	ldr	r0, [pc, #248]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80039fa:	f002 f945 	bl	8005c88 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 80039fe:	483d      	ldr	r0, [pc, #244]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003a00:	f002 f828 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
			cntImpulse2 = 0;
 8003a04:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
			timerFT2 = true;
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
}
 8003a10:	e060      	b.n	8003ad4 <HAL_TIM_PeriodElapsedCallback+0x144>
	} else if (htim->Instance == TIM3) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a39      	ldr	r2, [pc, #228]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d15b      	bne.n	8003ad4 <HAL_TIM_PeriodElapsedCallback+0x144>
		cntImpulse3++;
 8003a1c:	4b38      	ldr	r3, [pc, #224]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	4a37      	ldr	r2, [pc, #220]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003a24:	6013      	str	r3, [r2, #0]
		if (cntImpulse3 >= arm.gripperPsteps && gripIntFlag == false) {
 8003a26:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003a28:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a2a:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d80f      	bhi.n	8003a52 <HAL_TIM_PeriodElapsedCallback+0xc2>
 8003a32:	4b34      	ldr	r3, [pc, #208]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003a3a:	2104      	movs	r1, #4
 8003a3c:	4832      	ldr	r0, [pc, #200]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003a3e:	f002 f923 	bl	8005c88 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8003a42:	4831      	ldr	r0, [pc, #196]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003a44:	f002 f806 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
			arm.State = arm.ArmGripMOVEError;
 8003a48:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003a4a:	2213      	movs	r2, #19
 8003a4c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
}
 8003a50:	e040      	b.n	8003ad4 <HAL_TIM_PeriodElapsedCallback+0x144>
		} else if (cntImpulse3 >= arm.gripperPsteps || gripIntFlag == true) {
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003a54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d903      	bls.n	8003a66 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8003a5e:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d136      	bne.n	8003ad4 <HAL_TIM_PeriodElapsedCallback+0x144>
			gripIntFlag = false;
 8003a66:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	4826      	ldr	r0, [pc, #152]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003a70:	f002 f90a 	bl	8005c88 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8003a74:	4824      	ldr	r0, [pc, #144]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003a76:	f001 ffed 	bl	8005a54 <HAL_TIM_Base_Stop_IT>
			if (arm.State == arm.ArmGripPreMOVE) {
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003a7c:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003a80:	2b0a      	cmp	r3, #10
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PeriodElapsedCallback+0xfe>
				arm.State = arm.ArmGripPreENDMOVE;
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003a86:	220c      	movs	r2, #12
 8003a88:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8003a8c:	e01c      	b.n	8003ac8 <HAL_TIM_PeriodElapsedCallback+0x138>
			} else if (arm.State == arm.ArmGripPreMOVEStep) {
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003a90:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003a94:	2b0b      	cmp	r3, #11
 8003a96:	d104      	bne.n	8003aa2 <HAL_TIM_PeriodElapsedCallback+0x112>
				arm.State = arm.ArmGripPreENDMOVEStep;
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003a9a:	220d      	movs	r2, #13
 8003a9c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8003aa0:	e012      	b.n	8003ac8 <HAL_TIM_PeriodElapsedCallback+0x138>
			} else if (arm.State == arm.ArmGripMOVE) {
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003aa4:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PeriodElapsedCallback+0x126>
				arm.State = arm.ArmGripENDMOVE;
 8003aac:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003aae:	2209      	movs	r2, #9
 8003ab0:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8003ab4:	e008      	b.n	8003ac8 <HAL_TIM_PeriodElapsedCallback+0x138>
			} else if (arm.State == arm.ArmGripMOVERetry) {
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003ab8:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8003abc:	2b14      	cmp	r3, #20
 8003abe:	d103      	bne.n	8003ac8 <HAL_TIM_PeriodElapsedCallback+0x138>
				arm.State = arm.ArmGripPermit;
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003ac2:	2215      	movs	r2, #21
 8003ac4:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			cntImpulse3 = 0;
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
			timerFT3 = true;
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	20000274 	.word	0x20000274
 8003ae4:	20000280 	.word	0x20000280
 8003ae8:	2000008c 	.word	0x2000008c
 8003aec:	20000211 	.word	0x20000211
 8003af0:	20000278 	.word	0x20000278
 8003af4:	200000d4 	.word	0x200000d4
 8003af8:	20000212 	.word	0x20000212
 8003afc:	40000400 	.word	0x40000400
 8003b00:	2000027c 	.word	0x2000027c
 8003b04:	20000214 	.word	0x20000214
 8003b08:	2000011c 	.word	0x2000011c
 8003b0c:	20000213 	.word	0x20000213

08003b10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//повинен пропищати при помилці; треба перевірити
	for (int t = 0; t <= 4; t++) {
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	e016      	b.n	8003b4a <Error_Handler+0x3a>
		for (int i = 0; i <= 200; i++) {
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	e00a      	b.n	8003b38 <Error_Handler+0x28>
			HAL_GPIO_TogglePin(Buser_GPIO_Port, Buser_Pin);
 8003b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b26:	480c      	ldr	r0, [pc, #48]	; (8003b58 <Error_Handler+0x48>)
 8003b28:	f000 fecd 	bl	80048c6 <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f000 fb3b 	bl	80041a8 <HAL_Delay>
		for (int i = 0; i <= 200; i++) {
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2bc8      	cmp	r3, #200	; 0xc8
 8003b3c:	ddf1      	ble.n	8003b22 <Error_Handler+0x12>
		}
		HAL_Delay(100);
 8003b3e:	2064      	movs	r0, #100	; 0x64
 8003b40:	f000 fb32 	bl	80041a8 <HAL_Delay>
	for (int t = 0; t <= 4; t++) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3301      	adds	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	dde5      	ble.n	8003b1c <Error_Handler+0xc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b50:	b672      	cpsid	i
}
 8003b52:	bf00      	nop
	}
	__disable_irq();
	while (1) {
 8003b54:	e7fe      	b.n	8003b54 <Error_Handler+0x44>
 8003b56:	bf00      	nop
 8003b58:	40010800 	.word	0x40010800

08003b5c <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d109      	bne.n	8003b80 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d104      	bne.n	8003b80 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(240.0, 124.0);
 8003b76:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003b78:	4904      	ldr	r1, [pc, #16]	; (8003b8c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8003b7a:	4805      	ldr	r0, [pc, #20]	; (8003b90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003b7c:	f7fd fbd2 	bl	8001324 <_ZN7RoboArmC1Eff>
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	42f80000 	.word	0x42f80000
 8003b8c:	43700000 	.word	0x43700000
 8003b90:	20000280 	.word	0x20000280

08003b94 <_GLOBAL__sub_I_hspi1>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f7ff ffdd 	bl	8003b5c <_Z41__static_initialization_and_destruction_0ii>
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_MspInit+0x6c>)
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_MspInit+0x6c>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6193      	str	r3, [r2, #24]
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <HAL_MspInit+0x6c>)
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <HAL_MspInit+0x6c>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <HAL_MspInit+0x6c>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	61d3      	str	r3, [r2, #28]
 8003bce:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <HAL_MspInit+0x6c>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2105      	movs	r1, #5
 8003bde:	2005      	movs	r0, #5
 8003be0:	f000 fbdd 	bl	800439e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003be4:	2005      	movs	r0, #5
 8003be6:	f000 fbf6 	bl	80043d6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <HAL_MspInit+0x70>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <HAL_MspInit+0x70>)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40010000 	.word	0x40010000

08003c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <HAL_SPI_MspInit+0xb4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d145      	bne.n	8003cc4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_SPI_MspInit+0xb8>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <HAL_SPI_MspInit+0xb8>)
 8003c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c42:	6193      	str	r3, [r2, #24]
 8003c44:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <HAL_SPI_MspInit+0xb8>)
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c50:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <HAL_SPI_MspInit+0xb8>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_SPI_MspInit+0xb8>)
 8003c56:	f043 0308 	orr.w	r3, r3, #8
 8003c5a:	6193      	str	r3, [r2, #24]
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <HAL_SPI_MspInit+0xb8>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003c68:	2328      	movs	r3, #40	; 0x28
 8003c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c70:	2303      	movs	r3, #3
 8003c72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4816      	ldr	r0, [pc, #88]	; (8003cd4 <HAL_SPI_MspInit+0xbc>)
 8003c7c:	f000 fc78 	bl	8004570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c80:	2310      	movs	r3, #16
 8003c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4619      	mov	r1, r3
 8003c92:	4810      	ldr	r0, [pc, #64]	; (8003cd4 <HAL_SPI_MspInit+0xbc>)
 8003c94:	f000 fc6c 	bl	8004570 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_SPI_MspInit+0xc0>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_SPI_MspInit+0xc0>)
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2105      	movs	r1, #5
 8003cb8:	2023      	movs	r0, #35	; 0x23
 8003cba:	f000 fb70 	bl	800439e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003cbe:	2023      	movs	r0, #35	; 0x23
 8003cc0:	f000 fb89 	bl	80043d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003cc4:	bf00      	nop
 8003cc6:	3728      	adds	r7, #40	; 0x28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40013000 	.word	0x40013000
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40010c00 	.word	0x40010c00
 8003cd8:	40010000 	.word	0x40010000

08003cdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a27      	ldr	r2, [pc, #156]	; (8003d88 <HAL_TIM_PWM_MspInit+0xac>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d114      	bne.n	8003d18 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cf8:	6193      	str	r3, [r2, #24]
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2105      	movs	r1, #5
 8003d0a:	2019      	movs	r0, #25
 8003d0c:	f000 fb47 	bl	800439e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003d10:	2019      	movs	r0, #25
 8003d12:	f000 fb60 	bl	80043d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d16:	e032      	b.n	8003d7e <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d114      	bne.n	8003d4c <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	61d3      	str	r3, [r2, #28]
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2105      	movs	r1, #5
 8003d3e:	201c      	movs	r0, #28
 8003d40:	f000 fb2d 	bl	800439e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d44:	201c      	movs	r0, #28
 8003d46:	f000 fb46 	bl	80043d6 <HAL_NVIC_EnableIRQ>
}
 8003d4a:	e018      	b.n	8003d7e <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a0f      	ldr	r2, [pc, #60]	; (8003d90 <HAL_TIM_PWM_MspInit+0xb4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d113      	bne.n	8003d7e <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	61d3      	str	r3, [r2, #28]
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_TIM_PWM_MspInit+0xb0>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2105      	movs	r1, #5
 8003d72:	201d      	movs	r0, #29
 8003d74:	f000 fb13 	bl	800439e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d78:	201d      	movs	r0, #29
 8003d7a:	f000 fb2c 	bl	80043d6 <HAL_NVIC_EnableIRQ>
}
 8003d7e:	bf00      	nop
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40000400 	.word	0x40000400

08003d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 0318 	add.w	r3, r7, #24
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2e      	ldr	r2, [pc, #184]	; (8003e68 <HAL_TIM_MspPostInit+0xd4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d119      	bne.n	8003de8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db4:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003dba:	f043 0304 	orr.w	r3, r3, #4
 8003dbe:	6193      	str	r3, [r2, #24]
 8003dc0:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dda:	f107 0318 	add.w	r3, r7, #24
 8003dde:	4619      	mov	r1, r3
 8003de0:	4823      	ldr	r0, [pc, #140]	; (8003e70 <HAL_TIM_MspPostInit+0xdc>)
 8003de2:	f000 fbc5 	bl	8004570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003de6:	e03a      	b.n	8003e5e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d118      	bne.n	8003e24 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df2:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	6193      	str	r3, [r2, #24]
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e12:	2302      	movs	r3, #2
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e16:	f107 0318 	add.w	r3, r7, #24
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4814      	ldr	r0, [pc, #80]	; (8003e70 <HAL_TIM_MspPostInit+0xdc>)
 8003e1e:	f000 fba7 	bl	8004570 <HAL_GPIO_Init>
}
 8003e22:	e01c      	b.n	8003e5e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <HAL_TIM_MspPostInit+0xe0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d117      	bne.n	8003e5e <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6193      	str	r3, [r2, #24]
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <HAL_TIM_MspPostInit+0xd8>)
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e52:	f107 0318 	add.w	r3, r7, #24
 8003e56:	4619      	mov	r1, r3
 8003e58:	4805      	ldr	r0, [pc, #20]	; (8003e70 <HAL_TIM_MspPostInit+0xdc>)
 8003e5a:	f000 fb89 	bl	8004570 <HAL_GPIO_Init>
}
 8003e5e:	bf00      	nop
 8003e60:	3728      	adds	r7, #40	; 0x28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40010800 	.word	0x40010800
 8003e74:	40000400 	.word	0x40000400

08003e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	f107 0318 	add.w	r3, r7, #24
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a3a      	ldr	r2, [pc, #232]	; (8003f7c <HAL_UART_MspInit+0x104>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d13a      	bne.n	8003f0e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e98:	4b39      	ldr	r3, [pc, #228]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea2:	6193      	str	r3, [r2, #24]
 8003ea4:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb0:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	4a32      	ldr	r2, [pc, #200]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003eb6:	f043 0304 	orr.w	r3, r3, #4
 8003eba:	6193      	str	r3, [r2, #24]
 8003ebc:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed6:	f107 0318 	add.w	r3, r7, #24
 8003eda:	4619      	mov	r1, r3
 8003edc:	4829      	ldr	r0, [pc, #164]	; (8003f84 <HAL_UART_MspInit+0x10c>)
 8003ede:	f000 fb47 	bl	8004570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eec:	2301      	movs	r3, #1
 8003eee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef0:	f107 0318 	add.w	r3, r7, #24
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4823      	ldr	r0, [pc, #140]	; (8003f84 <HAL_UART_MspInit+0x10c>)
 8003ef8:	f000 fb3a 	bl	8004570 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003efc:	2200      	movs	r2, #0
 8003efe:	2105      	movs	r1, #5
 8003f00:	2025      	movs	r0, #37	; 0x25
 8003f02:	f000 fa4c 	bl	800439e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f06:	2025      	movs	r0, #37	; 0x25
 8003f08:	f000 fa65 	bl	80043d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f0c:	e032      	b.n	8003f74 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_UART_MspInit+0x110>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d12d      	bne.n	8003f74 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f22:	61d3      	str	r3, [r2, #28]
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	6193      	str	r3, [r2, #24]
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_UART_MspInit+0x108>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f48:	2304      	movs	r3, #4
 8003f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f4c:	2312      	movs	r3, #18
 8003f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f50:	2301      	movs	r3, #1
 8003f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f54:	2303      	movs	r3, #3
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f58:	f107 0318 	add.w	r3, r7, #24
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4809      	ldr	r0, [pc, #36]	; (8003f84 <HAL_UART_MspInit+0x10c>)
 8003f60:	f000 fb06 	bl	8004570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2105      	movs	r1, #5
 8003f68:	2026      	movs	r0, #38	; 0x26
 8003f6a:	f000 fa18 	bl	800439e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f6e:	2026      	movs	r0, #38	; 0x26
 8003f70:	f000 fa31 	bl	80043d6 <HAL_NVIC_EnableIRQ>
}
 8003f74:	bf00      	nop
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40010800 	.word	0x40010800
 8003f88:	40004400 	.word	0x40004400

08003f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f90:	e7fe      	b.n	8003f90 <NMI_Handler+0x4>

08003f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f96:	e7fe      	b.n	8003f96 <HardFault_Handler+0x4>

08003f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f9c:	e7fe      	b.n	8003f9c <MemManage_Handler+0x4>

08003f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa2:	e7fe      	b.n	8003fa2 <BusFault_Handler+0x4>

08003fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fa8:	e7fe      	b.n	8003fa8 <UsageFault_Handler+0x4>

08003faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fd2:	f000 f8cd 	bl	8004170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap3_Pin);
 8003fea:	2080      	movs	r0, #128	; 0x80
 8003fec:	f000 fc84 	bl	80048f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ff8:	4802      	ldr	r0, [pc, #8]	; (8004004 <TIM1_UP_IRQHandler+0x10>)
 8003ffa:	f001 fea9 	bl	8005d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	2000008c 	.word	0x2000008c

08004008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800400c:	4802      	ldr	r0, [pc, #8]	; (8004018 <TIM2_IRQHandler+0x10>)
 800400e:	f001 fe9f 	bl	8005d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200000d4 	.word	0x200000d4

0800401c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004020:	4802      	ldr	r0, [pc, #8]	; (800402c <TIM3_IRQHandler+0x10>)
 8004022:	f001 fe95 	bl	8005d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2000011c 	.word	0x2000011c

08004030 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004034:	4802      	ldr	r0, [pc, #8]	; (8004040 <SPI1_IRQHandler+0x10>)
 8004036:	f001 fac7 	bl	80055c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000034 	.word	0x20000034

08004044 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004048:	4802      	ldr	r0, [pc, #8]	; (8004054 <USART1_IRQHandler+0x10>)
 800404a:	f002 fc7f 	bl	800694c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000164 	.word	0x20000164

08004058 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800405c:	4802      	ldr	r0, [pc, #8]	; (8004068 <USART2_IRQHandler+0x10>)
 800405e:	f002 fc75 	bl	800694c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200001ac 	.word	0x200001ac

0800406c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap4_Pin);
 8004070:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004074:	f000 fc40 	bl	80048f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap1_Pin);
 8004078:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800407c:	f000 fc3c 	bl	80048f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap2_Pin);
 8004080:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004084:	f000 fc38 	bl	80048f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004088:	bf00      	nop
 800408a:	bd80      	pop	{r7, pc}

0800408c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004098:	f7ff fff8 	bl	800408c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800409c:	480b      	ldr	r0, [pc, #44]	; (80040cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800409e:	490c      	ldr	r1, [pc, #48]	; (80040d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80040a0:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80040a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a4:	e002      	b.n	80040ac <LoopCopyDataInit>

080040a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040aa:	3304      	adds	r3, #4

080040ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b0:	d3f9      	bcc.n	80040a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80040b4:	4c09      	ldr	r4, [pc, #36]	; (80040dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040b8:	e001      	b.n	80040be <LoopFillZerobss>

080040ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040bc:	3204      	adds	r2, #4

080040be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c0:	d3fb      	bcc.n	80040ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040c2:	f003 fa45 	bl	8007550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040c6:	f7fe fb71 	bl	80027ac <main>
  bx lr
 80040ca:	4770      	bx	lr
  ldr r0, =_sdata
 80040cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80040d4:	080075e8 	.word	0x080075e8
  ldr r2, =_sbss
 80040d8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80040dc:	200003f8 	.word	0x200003f8

080040e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040e0:	e7fe      	b.n	80040e0 <ADC1_2_IRQHandler>
	...

080040e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_Init+0x28>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_Init+0x28>)
 80040ee:	f043 0310 	orr.w	r3, r3, #16
 80040f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f4:	2003      	movs	r0, #3
 80040f6:	f000 f947 	bl	8004388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040fa:	200f      	movs	r0, #15
 80040fc:	f000 f808 	bl	8004110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004100:	f7ff fd50 	bl	8003ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40022000 	.word	0x40022000

08004110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004118:	4b12      	ldr	r3, [pc, #72]	; (8004164 <HAL_InitTick+0x54>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_InitTick+0x58>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004126:	fbb3 f3f1 	udiv	r3, r3, r1
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f95f 	bl	80043f2 <HAL_SYSTICK_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e00e      	b.n	800415c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d80a      	bhi.n	800415a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004144:	2200      	movs	r2, #0
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414c:	f000 f927 	bl	800439e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004150:	4a06      	ldr	r2, [pc, #24]	; (800416c <HAL_InitTick+0x5c>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000000c 	.word	0x2000000c
 8004168:	20000014 	.word	0x20000014
 800416c:	20000010 	.word	0x20000010

08004170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_IncTick+0x1c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_IncTick+0x20>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4413      	add	r3, r2
 8004180:	4a03      	ldr	r2, [pc, #12]	; (8004190 <HAL_IncTick+0x20>)
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr
 800418c:	20000014 	.word	0x20000014
 8004190:	200003f4 	.word	0x200003f4

08004194 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return uwTick;
 8004198:	4b02      	ldr	r3, [pc, #8]	; (80041a4 <HAL_GetTick+0x10>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	200003f4 	.word	0x200003f4

080041a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7ff fff0 	bl	8004194 <HAL_GetTick>
 80041b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c0:	d005      	beq.n	80041ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_Delay+0x44>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ce:	bf00      	nop
 80041d0:	f7ff ffe0 	bl	8004194 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d8f7      	bhi.n	80041d0 <HAL_Delay+0x28>
  {
  }
}
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000014 	.word	0x20000014

080041f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <__NVIC_SetPriorityGrouping+0x44>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800420c:	4013      	ands	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800421c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004222:	4a04      	ldr	r2, [pc, #16]	; (8004234 <__NVIC_SetPriorityGrouping+0x44>)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	60d3      	str	r3, [r2, #12]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800423c:	4b04      	ldr	r3, [pc, #16]	; (8004250 <__NVIC_GetPriorityGrouping+0x18>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	f003 0307 	and.w	r3, r3, #7
}
 8004246:	4618      	mov	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	2b00      	cmp	r3, #0
 8004264:	db0b      	blt.n	800427e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	f003 021f 	and.w	r2, r3, #31
 800426c:	4906      	ldr	r1, [pc, #24]	; (8004288 <__NVIC_EnableIRQ+0x34>)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2001      	movs	r0, #1
 8004276:	fa00 f202 	lsl.w	r2, r0, r2
 800427a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db0a      	blt.n	80042b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	490c      	ldr	r1, [pc, #48]	; (80042d8 <__NVIC_SetPriority+0x4c>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042b4:	e00a      	b.n	80042cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4908      	ldr	r1, [pc, #32]	; (80042dc <__NVIC_SetPriority+0x50>)
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3b04      	subs	r3, #4
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	440b      	add	r3, r1
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000e100 	.word	0xe000e100
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	bf28      	it	cs
 80042fe:	2304      	movcs	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3304      	adds	r3, #4
 8004306:	2b06      	cmp	r3, #6
 8004308:	d902      	bls.n	8004310 <NVIC_EncodePriority+0x30>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3b03      	subs	r3, #3
 800430e:	e000      	b.n	8004312 <NVIC_EncodePriority+0x32>
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43d9      	mvns	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	4313      	orrs	r3, r2
         );
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	; 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3b01      	subs	r3, #1
 8004350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004354:	d301      	bcc.n	800435a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004356:	2301      	movs	r3, #1
 8004358:	e00f      	b.n	800437a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <SysTick_Config+0x40>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3b01      	subs	r3, #1
 8004360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004362:	210f      	movs	r1, #15
 8004364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004368:	f7ff ff90 	bl	800428c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <SysTick_Config+0x40>)
 800436e:	2200      	movs	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004372:	4b04      	ldr	r3, [pc, #16]	; (8004384 <SysTick_Config+0x40>)
 8004374:	2207      	movs	r2, #7
 8004376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	e000e010 	.word	0xe000e010

08004388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff2d 	bl	80041f0 <__NVIC_SetPriorityGrouping>
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800439e:	b580      	push	{r7, lr}
 80043a0:	b086      	sub	sp, #24
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043b0:	f7ff ff42 	bl	8004238 <__NVIC_GetPriorityGrouping>
 80043b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	6978      	ldr	r0, [r7, #20]
 80043bc:	f7ff ff90 	bl	80042e0 <NVIC_EncodePriority>
 80043c0:	4602      	mov	r2, r0
 80043c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff ff5f 	bl	800428c <__NVIC_SetPriority>
}
 80043ce:	bf00      	nop
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	4603      	mov	r3, r0
 80043de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff35 	bl	8004254 <__NVIC_EnableIRQ>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff ffa2 	bl	8004344 <SysTick_Config>
 8004400:	4603      	mov	r3, r0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d008      	beq.n	8004434 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e020      	b.n	8004476 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 020e 	bic.w	r2, r2, #14
 8004442:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445c:	2101      	movs	r1, #1
 800445e:	fa01 f202 	lsl.w	r2, r1, r2
 8004462:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d005      	beq.n	80044a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2204      	movs	r2, #4
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	e051      	b.n	8004548 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020e 	bic.w	r2, r2, #14
 80044b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_DMA_Abort_IT+0xd4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d029      	beq.n	8004522 <HAL_DMA_Abort_IT+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a21      	ldr	r2, [pc, #132]	; (8004558 <HAL_DMA_Abort_IT+0xd8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_DMA_Abort_IT+0x9e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_DMA_Abort_IT+0xdc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01a      	beq.n	8004518 <HAL_DMA_Abort_IT+0x98>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <HAL_DMA_Abort_IT+0xe0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d012      	beq.n	8004512 <HAL_DMA_Abort_IT+0x92>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_DMA_Abort_IT+0xe4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00a      	beq.n	800450c <HAL_DMA_Abort_IT+0x8c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <HAL_DMA_Abort_IT+0xe8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d102      	bne.n	8004506 <HAL_DMA_Abort_IT+0x86>
 8004500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004504:	e00e      	b.n	8004524 <HAL_DMA_Abort_IT+0xa4>
 8004506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800450a:	e00b      	b.n	8004524 <HAL_DMA_Abort_IT+0xa4>
 800450c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004510:	e008      	b.n	8004524 <HAL_DMA_Abort_IT+0xa4>
 8004512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004516:	e005      	b.n	8004524 <HAL_DMA_Abort_IT+0xa4>
 8004518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800451c:	e002      	b.n	8004524 <HAL_DMA_Abort_IT+0xa4>
 800451e:	2310      	movs	r3, #16
 8004520:	e000      	b.n	8004524 <HAL_DMA_Abort_IT+0xa4>
 8004522:	2301      	movs	r3, #1
 8004524:	4a11      	ldr	r2, [pc, #68]	; (800456c <HAL_DMA_Abort_IT+0xec>)
 8004526:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
    } 
  }
  return status;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40020008 	.word	0x40020008
 8004558:	4002001c 	.word	0x4002001c
 800455c:	40020030 	.word	0x40020030
 8004560:	40020044 	.word	0x40020044
 8004564:	40020058 	.word	0x40020058
 8004568:	4002006c 	.word	0x4002006c
 800456c:	40020000 	.word	0x40020000

08004570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004570:	b480      	push	{r7}
 8004572:	b08b      	sub	sp, #44	; 0x2c
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004582:	e161      	b.n	8004848 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004584:	2201      	movs	r2, #1
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	429a      	cmp	r2, r3
 800459e:	f040 8150 	bne.w	8004842 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4a97      	ldr	r2, [pc, #604]	; (8004804 <HAL_GPIO_Init+0x294>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d05e      	beq.n	800466a <HAL_GPIO_Init+0xfa>
 80045ac:	4a95      	ldr	r2, [pc, #596]	; (8004804 <HAL_GPIO_Init+0x294>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d875      	bhi.n	800469e <HAL_GPIO_Init+0x12e>
 80045b2:	4a95      	ldr	r2, [pc, #596]	; (8004808 <HAL_GPIO_Init+0x298>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d058      	beq.n	800466a <HAL_GPIO_Init+0xfa>
 80045b8:	4a93      	ldr	r2, [pc, #588]	; (8004808 <HAL_GPIO_Init+0x298>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d86f      	bhi.n	800469e <HAL_GPIO_Init+0x12e>
 80045be:	4a93      	ldr	r2, [pc, #588]	; (800480c <HAL_GPIO_Init+0x29c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d052      	beq.n	800466a <HAL_GPIO_Init+0xfa>
 80045c4:	4a91      	ldr	r2, [pc, #580]	; (800480c <HAL_GPIO_Init+0x29c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d869      	bhi.n	800469e <HAL_GPIO_Init+0x12e>
 80045ca:	4a91      	ldr	r2, [pc, #580]	; (8004810 <HAL_GPIO_Init+0x2a0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d04c      	beq.n	800466a <HAL_GPIO_Init+0xfa>
 80045d0:	4a8f      	ldr	r2, [pc, #572]	; (8004810 <HAL_GPIO_Init+0x2a0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d863      	bhi.n	800469e <HAL_GPIO_Init+0x12e>
 80045d6:	4a8f      	ldr	r2, [pc, #572]	; (8004814 <HAL_GPIO_Init+0x2a4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d046      	beq.n	800466a <HAL_GPIO_Init+0xfa>
 80045dc:	4a8d      	ldr	r2, [pc, #564]	; (8004814 <HAL_GPIO_Init+0x2a4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d85d      	bhi.n	800469e <HAL_GPIO_Init+0x12e>
 80045e2:	2b12      	cmp	r3, #18
 80045e4:	d82a      	bhi.n	800463c <HAL_GPIO_Init+0xcc>
 80045e6:	2b12      	cmp	r3, #18
 80045e8:	d859      	bhi.n	800469e <HAL_GPIO_Init+0x12e>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_GPIO_Init+0x80>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	0800466b 	.word	0x0800466b
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004657 	.word	0x08004657
 80045fc:	08004699 	.word	0x08004699
 8004600:	0800469f 	.word	0x0800469f
 8004604:	0800469f 	.word	0x0800469f
 8004608:	0800469f 	.word	0x0800469f
 800460c:	0800469f 	.word	0x0800469f
 8004610:	0800469f 	.word	0x0800469f
 8004614:	0800469f 	.word	0x0800469f
 8004618:	0800469f 	.word	0x0800469f
 800461c:	0800469f 	.word	0x0800469f
 8004620:	0800469f 	.word	0x0800469f
 8004624:	0800469f 	.word	0x0800469f
 8004628:	0800469f 	.word	0x0800469f
 800462c:	0800469f 	.word	0x0800469f
 8004630:	0800469f 	.word	0x0800469f
 8004634:	0800464d 	.word	0x0800464d
 8004638:	08004661 	.word	0x08004661
 800463c:	4a76      	ldr	r2, [pc, #472]	; (8004818 <HAL_GPIO_Init+0x2a8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004642:	e02c      	b.n	800469e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	623b      	str	r3, [r7, #32]
          break;
 800464a:	e029      	b.n	80046a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	3304      	adds	r3, #4
 8004652:	623b      	str	r3, [r7, #32]
          break;
 8004654:	e024      	b.n	80046a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	3308      	adds	r3, #8
 800465c:	623b      	str	r3, [r7, #32]
          break;
 800465e:	e01f      	b.n	80046a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	330c      	adds	r3, #12
 8004666:	623b      	str	r3, [r7, #32]
          break;
 8004668:	e01a      	b.n	80046a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004672:	2304      	movs	r3, #4
 8004674:	623b      	str	r3, [r7, #32]
          break;
 8004676:	e013      	b.n	80046a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004680:	2308      	movs	r3, #8
 8004682:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	611a      	str	r2, [r3, #16]
          break;
 800468a:	e009      	b.n	80046a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800468c:	2308      	movs	r3, #8
 800468e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	615a      	str	r2, [r3, #20]
          break;
 8004696:	e003      	b.n	80046a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004698:	2300      	movs	r3, #0
 800469a:	623b      	str	r3, [r7, #32]
          break;
 800469c:	e000      	b.n	80046a0 <HAL_GPIO_Init+0x130>
          break;
 800469e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2bff      	cmp	r3, #255	; 0xff
 80046a4:	d801      	bhi.n	80046aa <HAL_GPIO_Init+0x13a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	e001      	b.n	80046ae <HAL_GPIO_Init+0x13e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2bff      	cmp	r3, #255	; 0xff
 80046b4:	d802      	bhi.n	80046bc <HAL_GPIO_Init+0x14c>
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	e002      	b.n	80046c2 <HAL_GPIO_Init+0x152>
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	3b08      	subs	r3, #8
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	210f      	movs	r1, #15
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	401a      	ands	r2, r3
 80046d4:	6a39      	ldr	r1, [r7, #32]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	431a      	orrs	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80a9 	beq.w	8004842 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046f0:	4b4a      	ldr	r3, [pc, #296]	; (800481c <HAL_GPIO_Init+0x2ac>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	4a49      	ldr	r2, [pc, #292]	; (800481c <HAL_GPIO_Init+0x2ac>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6193      	str	r3, [r2, #24]
 80046fc:	4b47      	ldr	r3, [pc, #284]	; (800481c <HAL_GPIO_Init+0x2ac>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004708:	4a45      	ldr	r2, [pc, #276]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	3302      	adds	r3, #2
 8004710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004714:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	220f      	movs	r2, #15
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4013      	ands	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a3d      	ldr	r2, [pc, #244]	; (8004824 <HAL_GPIO_Init+0x2b4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00d      	beq.n	8004750 <HAL_GPIO_Init+0x1e0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a3c      	ldr	r2, [pc, #240]	; (8004828 <HAL_GPIO_Init+0x2b8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d007      	beq.n	800474c <HAL_GPIO_Init+0x1dc>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a3b      	ldr	r2, [pc, #236]	; (800482c <HAL_GPIO_Init+0x2bc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d101      	bne.n	8004748 <HAL_GPIO_Init+0x1d8>
 8004744:	2302      	movs	r3, #2
 8004746:	e004      	b.n	8004752 <HAL_GPIO_Init+0x1e2>
 8004748:	2303      	movs	r3, #3
 800474a:	e002      	b.n	8004752 <HAL_GPIO_Init+0x1e2>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_GPIO_Init+0x1e2>
 8004750:	2300      	movs	r3, #0
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	f002 0203 	and.w	r2, r2, #3
 8004758:	0092      	lsls	r2, r2, #2
 800475a:	4093      	lsls	r3, r2
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004762:	492f      	ldr	r1, [pc, #188]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	3302      	adds	r3, #2
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800477c:	4b2c      	ldr	r3, [pc, #176]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	492b      	ldr	r1, [pc, #172]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]
 8004788:	e006      	b.n	8004798 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800478a:	4b29      	ldr	r3, [pc, #164]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	43db      	mvns	r3, r3
 8004792:	4927      	ldr	r1, [pc, #156]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 8004794:	4013      	ands	r3, r2
 8004796:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	4921      	ldr	r1, [pc, #132]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60cb      	str	r3, [r1, #12]
 80047b0:	e006      	b.n	80047c0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047b2:	4b1f      	ldr	r3, [pc, #124]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	491d      	ldr	r1, [pc, #116]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047bc:	4013      	ands	r3, r2
 80047be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d006      	beq.n	80047da <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4917      	ldr	r1, [pc, #92]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	e006      	b.n	80047e8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047da:	4b15      	ldr	r3, [pc, #84]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	4913      	ldr	r1, [pc, #76]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01f      	beq.n	8004834 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	490d      	ldr	r1, [pc, #52]	; (8004830 <HAL_GPIO_Init+0x2c0>)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
 8004800:	e01f      	b.n	8004842 <HAL_GPIO_Init+0x2d2>
 8004802:	bf00      	nop
 8004804:	10320000 	.word	0x10320000
 8004808:	10310000 	.word	0x10310000
 800480c:	10220000 	.word	0x10220000
 8004810:	10210000 	.word	0x10210000
 8004814:	10120000 	.word	0x10120000
 8004818:	10110000 	.word	0x10110000
 800481c:	40021000 	.word	0x40021000
 8004820:	40010000 	.word	0x40010000
 8004824:	40010800 	.word	0x40010800
 8004828:	40010c00 	.word	0x40010c00
 800482c:	40011000 	.word	0x40011000
 8004830:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_GPIO_Init+0x2f4>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	43db      	mvns	r3, r3
 800483c:	4909      	ldr	r1, [pc, #36]	; (8004864 <HAL_GPIO_Init+0x2f4>)
 800483e:	4013      	ands	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	3301      	adds	r3, #1
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	f47f ae96 	bne.w	8004584 <HAL_GPIO_Init+0x14>
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	372c      	adds	r7, #44	; 0x2c
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	40010400 	.word	0x40010400

08004868 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	887b      	ldrh	r3, [r7, #2]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e001      	b.n	800488a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800488a:	7bfb      	ldrb	r3, [r7, #15]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	807b      	strh	r3, [r7, #2]
 80048a2:	4613      	mov	r3, r2
 80048a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048a6:	787b      	ldrb	r3, [r7, #1]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ac:	887a      	ldrh	r2, [r7, #2]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80048b2:	e003      	b.n	80048bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048b4:	887b      	ldrh	r3, [r7, #2]
 80048b6:	041a      	lsls	r2, r3, #16
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	611a      	str	r2, [r3, #16]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048d8:	887a      	ldrh	r2, [r7, #2]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4013      	ands	r3, r2
 80048de:	041a      	lsls	r2, r3, #16
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	43d9      	mvns	r1, r3
 80048e4:	887b      	ldrh	r3, [r7, #2]
 80048e6:	400b      	ands	r3, r1
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800490e:	4a05      	ldr	r2, [pc, #20]	; (8004924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe feee 	bl	80036f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40010400 	.word	0x40010400

08004928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e272      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8087 	beq.w	8004a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004948:	4b92      	ldr	r3, [pc, #584]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b04      	cmp	r3, #4
 8004952:	d00c      	beq.n	800496e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004954:	4b8f      	ldr	r3, [pc, #572]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b08      	cmp	r3, #8
 800495e:	d112      	bne.n	8004986 <HAL_RCC_OscConfig+0x5e>
 8004960:	4b8c      	ldr	r3, [pc, #560]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d10b      	bne.n	8004986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496e:	4b89      	ldr	r3, [pc, #548]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d06c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x12c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d168      	bne.n	8004a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e24c      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498e:	d106      	bne.n	800499e <HAL_RCC_OscConfig+0x76>
 8004990:	4b80      	ldr	r3, [pc, #512]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7f      	ldr	r2, [pc, #508]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e02e      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x98>
 80049a6:	4b7b      	ldr	r3, [pc, #492]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a7a      	ldr	r2, [pc, #488]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4b78      	ldr	r3, [pc, #480]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a77      	ldr	r2, [pc, #476]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e01d      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0xbc>
 80049ca:	4b72      	ldr	r3, [pc, #456]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a71      	ldr	r2, [pc, #452]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6e      	ldr	r2, [pc, #440]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 80049e4:	4b6b      	ldr	r3, [pc, #428]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a6a      	ldr	r2, [pc, #424]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b68      	ldr	r3, [pc, #416]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a67      	ldr	r2, [pc, #412]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d013      	beq.n	8004a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7ff fbc6 	bl	8004194 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7ff fbc2 	bl	8004194 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e200      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0xe4>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7ff fbb2 	bl	8004194 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7ff fbae 	bl	8004194 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e1ec      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a46:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x10c>
 8004a52:	e000      	b.n	8004a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d063      	beq.n	8004b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a62:	4b4c      	ldr	r3, [pc, #304]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a6e:	4b49      	ldr	r3, [pc, #292]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d11c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x18c>
 8004a7a:	4b46      	ldr	r3, [pc, #280]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d116      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a86:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_RCC_OscConfig+0x176>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e1c0      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4939      	ldr	r1, [pc, #228]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab2:	e03a      	b.n	8004b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <HAL_RCC_OscConfig+0x270>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7ff fb67 	bl	8004194 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aca:	f7ff fb63 	bl	8004194 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e1a1      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4927      	ldr	r1, [pc, #156]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	e015      	b.n	8004b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afe:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <HAL_RCC_OscConfig+0x270>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7ff fb46 	bl	8004194 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7ff fb42 	bl	8004194 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e180      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d03a      	beq.n	8004bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d019      	beq.n	8004b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3e:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <HAL_RCC_OscConfig+0x274>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b44:	f7ff fb26 	bl	8004194 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b4c:	f7ff fb22 	bl	8004194 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e160      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f000 fada 	bl	8005124 <RCC_Delay>
 8004b70:	e01c      	b.n	8004bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <HAL_RCC_OscConfig+0x274>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b78:	f7ff fb0c 	bl	8004194 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7e:	e00f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b80:	f7ff fb08 	bl	8004194 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d908      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e146      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	42420000 	.word	0x42420000
 8004b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	4b92      	ldr	r3, [pc, #584]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e9      	bne.n	8004b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a6 	beq.w	8004d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbe:	4b8b      	ldr	r3, [pc, #556]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10d      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b88      	ldr	r3, [pc, #544]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4a87      	ldr	r2, [pc, #540]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	61d3      	str	r3, [r2, #28]
 8004bd6:	4b85      	ldr	r3, [pc, #532]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b82      	ldr	r3, [pc, #520]	; (8004df0 <HAL_RCC_OscConfig+0x4c8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d118      	bne.n	8004c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf2:	4b7f      	ldr	r3, [pc, #508]	; (8004df0 <HAL_RCC_OscConfig+0x4c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a7e      	ldr	r2, [pc, #504]	; (8004df0 <HAL_RCC_OscConfig+0x4c8>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7ff fac9 	bl	8004194 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7ff fac5 	bl	8004194 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b64      	cmp	r3, #100	; 0x64
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e103      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b75      	ldr	r3, [pc, #468]	; (8004df0 <HAL_RCC_OscConfig+0x4c8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x312>
 8004c2c:	4b6f      	ldr	r3, [pc, #444]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4a6e      	ldr	r2, [pc, #440]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6213      	str	r3, [r2, #32]
 8004c38:	e02d      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x334>
 8004c42:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4a69      	ldr	r2, [pc, #420]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6213      	str	r3, [r2, #32]
 8004c4e:	4b67      	ldr	r3, [pc, #412]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	4a66      	ldr	r2, [pc, #408]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6213      	str	r3, [r2, #32]
 8004c5a:	e01c      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d10c      	bne.n	8004c7e <HAL_RCC_OscConfig+0x356>
 8004c64:	4b61      	ldr	r3, [pc, #388]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	4a60      	ldr	r2, [pc, #384]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	f043 0304 	orr.w	r3, r3, #4
 8004c6e:	6213      	str	r3, [r2, #32]
 8004c70:	4b5e      	ldr	r3, [pc, #376]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	4a5d      	ldr	r2, [pc, #372]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6213      	str	r3, [r2, #32]
 8004c7c:	e00b      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4a5a      	ldr	r2, [pc, #360]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6213      	str	r3, [r2, #32]
 8004c8a:	4b58      	ldr	r3, [pc, #352]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4a57      	ldr	r2, [pc, #348]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d015      	beq.n	8004cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7ff fa79 	bl	8004194 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7ff fa75 	bl	8004194 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0b1      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ee      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x37e>
 8004cc8:	e014      	b.n	8004cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cca:	f7ff fa63 	bl	8004194 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7ff fa5f 	bl	8004194 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e09b      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce8:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ee      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfa:	4b3c      	ldr	r3, [pc, #240]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4a3b      	ldr	r2, [pc, #236]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8087 	beq.w	8004e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d10:	4b36      	ldr	r3, [pc, #216]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d061      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d146      	bne.n	8004db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d24:	4b33      	ldr	r3, [pc, #204]	; (8004df4 <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7ff fa33 	bl	8004194 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d32:	f7ff fa2f 	bl	8004194 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e06d      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d108      	bne.n	8004d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4921      	ldr	r1, [pc, #132]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a19      	ldr	r1, [r3, #32]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	491b      	ldr	r1, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <HAL_RCC_OscConfig+0x4cc>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8a:	f7ff fa03 	bl	8004194 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d92:	f7ff f9ff 	bl	8004194 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e03d      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x46a>
 8004db0:	e035      	b.n	8004e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <HAL_RCC_OscConfig+0x4cc>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db8:	f7ff f9ec 	bl	8004194 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7ff f9e8 	bl	8004194 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e026      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x498>
 8004dde:	e01e      	b.n	8004e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d107      	bne.n	8004df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e019      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40007000 	.word	0x40007000
 8004df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_OscConfig+0x500>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d001      	beq.n	8004e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40021000 	.word	0x40021000

08004e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0d0      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e40:	4b6a      	ldr	r3, [pc, #424]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d910      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b67      	ldr	r3, [pc, #412]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 0207 	bic.w	r2, r3, #7
 8004e56:	4965      	ldr	r1, [pc, #404]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	4b63      	ldr	r3, [pc, #396]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b8      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e88:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4a58      	ldr	r2, [pc, #352]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea0:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eac:	4b50      	ldr	r3, [pc, #320]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	494d      	ldr	r1, [pc, #308]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d040      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	4b47      	ldr	r3, [pc, #284]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d115      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e07f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d107      	bne.n	8004efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b41      	ldr	r3, [pc, #260]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e073      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	4b3d      	ldr	r3, [pc, #244]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06b      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0a:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f023 0203 	bic.w	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4936      	ldr	r1, [pc, #216]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f1c:	f7ff f93a 	bl	8004194 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f24:	f7ff f936 	bl	8004194 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e053      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 020c 	and.w	r2, r3, #12
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d1eb      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d210      	bcs.n	8004f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 0207 	bic.w	r2, r3, #7
 8004f62:	4922      	ldr	r1, [pc, #136]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b20      	ldr	r3, [pc, #128]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e032      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fa6:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	490e      	ldr	r1, [pc, #56]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fba:	f000 f82d 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	490a      	ldr	r1, [pc, #40]	; (8004ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
 8004fce:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8004fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCC_ClockConfig+0x1d0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff f898 	bl	8004110 <HAL_InitTick>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40022000 	.word	0x40022000
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	080075b0 	.word	0x080075b0
 8004ff8:	2000000c 	.word	0x2000000c
 8004ffc:	20000010 	.word	0x20000010

08005000 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <HAL_RCC_EnableCSS+0x14>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	4242004c 	.word	0x4242004c

08005018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005032:	4b1e      	ldr	r3, [pc, #120]	; (80050ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b04      	cmp	r3, #4
 8005040:	d002      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0x30>
 8005042:	2b08      	cmp	r3, #8
 8005044:	d003      	beq.n	800504e <HAL_RCC_GetSysClockFreq+0x36>
 8005046:	e027      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800504a:	613b      	str	r3, [r7, #16]
      break;
 800504c:	e027      	b.n	800509e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	0c9b      	lsrs	r3, r3, #18
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005058:	5cd3      	ldrb	r3, [r2, r3]
 800505a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d010      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	0c5b      	lsrs	r3, r3, #17
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	4a11      	ldr	r2, [pc, #68]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a0d      	ldr	r2, [pc, #52]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800507a:	fb03 f202 	mul.w	r2, r3, r2
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	e004      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a0c      	ldr	r2, [pc, #48]	; (80050bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800508c:	fb02 f303 	mul.w	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	613b      	str	r3, [r7, #16]
      break;
 8005096:	e002      	b.n	800509e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800509a:	613b      	str	r3, [r7, #16]
      break;
 800509c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800509e:	693b      	ldr	r3, [r7, #16]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	007a1200 	.word	0x007a1200
 80050b4:	080075c8 	.word	0x080075c8
 80050b8:	080075d8 	.word	0x080075d8
 80050bc:	003d0900 	.word	0x003d0900

080050c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c4:	4b02      	ldr	r3, [pc, #8]	; (80050d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80050c6:	681b      	ldr	r3, [r3, #0]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr
 80050d0:	2000000c 	.word	0x2000000c

080050d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050d8:	f7ff fff2 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4903      	ldr	r1, [pc, #12]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000
 80050f8:	080075c0 	.word	0x080075c0

080050fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005100:	f7ff ffde 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	0adb      	lsrs	r3, r3, #11
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4903      	ldr	r1, [pc, #12]	; (8005120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40021000 	.word	0x40021000
 8005120:	080075c0 	.word	0x080075c0

08005124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <RCC_Delay+0x34>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a0a      	ldr	r2, [pc, #40]	; (800515c <RCC_Delay+0x38>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	0a5b      	lsrs	r3, r3, #9
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	fb02 f303 	mul.w	r3, r2, r3
 800513e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005140:	bf00      	nop
  }
  while (Delay --);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1e5a      	subs	r2, r3, #1
 8005146:	60fa      	str	r2, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f9      	bne.n	8005140 <RCC_Delay+0x1c>
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr
 8005158:	2000000c 	.word	0x2000000c
 800515c:	10624dd3 	.word	0x10624dd3

08005160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e076      	b.n	8005260 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005182:	d009      	beq.n	8005198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	61da      	str	r2, [r3, #28]
 800518a:	e005      	b.n	8005198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fe fd30 	bl	8003c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	ea42 0103 	orr.w	r1, r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	0c1a      	lsrs	r2, r3, #16
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f002 0204 	and.w	r2, r2, #4
 800523e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800524e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005276:	2301      	movs	r3, #1
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_SPI_TransmitReceive+0x26>
 800528a:	2302      	movs	r3, #2
 800528c:	e198      	b.n	80055c0 <HAL_SPI_TransmitReceive+0x358>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005296:	f7fe ff7d 	bl	8004194 <HAL_GetTick>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052ac:	887b      	ldrh	r3, [r7, #2]
 80052ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d00f      	beq.n	80052d8 <HAL_SPI_TransmitReceive+0x70>
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052be:	d107      	bne.n	80052d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d103      	bne.n	80052d0 <HAL_SPI_TransmitReceive+0x68>
 80052c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d003      	beq.n	80052d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052d6:	e16d      	b.n	80055b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x82>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x82>
 80052e4:	887b      	ldrh	r3, [r7, #2]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052f0:	e160      	b.n	80055b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d003      	beq.n	8005306 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2205      	movs	r2, #5
 8005302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	887a      	ldrh	r2, [r7, #2]
 8005316:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	887a      	ldrh	r2, [r7, #2]
 800531c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	887a      	ldrh	r2, [r7, #2]
 800532e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d007      	beq.n	800535a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005362:	d17c      	bne.n	800545e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x10a>
 800536c:	8b7b      	ldrh	r3, [r7, #26]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d16a      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	881a      	ldrh	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	1c9a      	adds	r2, r3, #2
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005396:	e057      	b.n	8005448 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d11b      	bne.n	80053de <HAL_SPI_TransmitReceive+0x176>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d016      	beq.n	80053de <HAL_SPI_TransmitReceive+0x176>
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d113      	bne.n	80053de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	881a      	ldrh	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	1c9a      	adds	r2, r3, #2
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d119      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x1b8>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d014      	beq.n	8005420 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	b292      	uxth	r2, r2
 8005402:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800541c:	2301      	movs	r3, #1
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005420:	f7fe feb8 	bl	8004194 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800542c:	429a      	cmp	r2, r3
 800542e:	d80b      	bhi.n	8005448 <HAL_SPI_TransmitReceive+0x1e0>
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005436:	d007      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005446:	e0b5      	b.n	80055b4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1a2      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x130>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d19d      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x130>
 800545c:	e080      	b.n	8005560 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_SPI_TransmitReceive+0x204>
 8005466:	8b7b      	ldrh	r3, [r7, #26]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d16f      	bne.n	800554c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	7812      	ldrb	r2, [r2, #0]
 8005478:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005492:	e05b      	b.n	800554c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d11c      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x274>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x274>
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d114      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	330c      	adds	r3, #12
 80054bc:	7812      	ldrb	r2, [r2, #0]
 80054be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d119      	bne.n	800551e <HAL_SPI_TransmitReceive+0x2b6>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d014      	beq.n	800551e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800551a:	2301      	movs	r3, #1
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800551e:	f7fe fe39 	bl	8004194 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800552a:	429a      	cmp	r2, r3
 800552c:	d803      	bhi.n	8005536 <HAL_SPI_TransmitReceive+0x2ce>
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005534:	d102      	bne.n	800553c <HAL_SPI_TransmitReceive+0x2d4>
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d107      	bne.n	800554c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800554a:	e033      	b.n	80055b4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d19e      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x22c>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d199      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f9b3 	bl	80058d0 <SPI_EndRxTxTransaction>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d006      	beq.n	800557e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800557c:	e01a      	b.n	80055b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055aa:	e003      	b.n	80055b4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3730      	adds	r7, #48	; 0x30
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10e      	bne.n	8005608 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d009      	beq.n	8005608 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
    return;
 8005606:	e0b7      	b.n	8005778 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_SPI_IRQHandler+0x5e>
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
    return;
 8005624:	e0a8      	b.n	8005778 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d105      	bne.n	800563c <HAL_SPI_IRQHandler+0x74>
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 809e 	beq.w	8005778 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8098 	beq.w	8005778 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d023      	beq.n	800569a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b03      	cmp	r3, #3
 800565c:	d011      	beq.n	8005682 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	f043 0204 	orr.w	r2, r3, #4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	e00b      	b.n	800569a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	693b      	ldr	r3, [r7, #16]
        return;
 8005698:	e06e      	b.n	8005778 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d014      	beq.n	80056ce <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d04f      	beq.n	8005776 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <HAL_SPI_IRQHandler+0x13a>
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d034      	beq.n	800576c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0203 	bic.w	r2, r2, #3
 8005710:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d011      	beq.n	800573e <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	4a18      	ldr	r2, [pc, #96]	; (8005780 <HAL_SPI_IRQHandler+0x1b8>)
 8005720:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe feaa 	bl	8004480 <HAL_DMA_Abort_IT>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005742:	2b00      	cmp	r3, #0
 8005744:	d016      	beq.n	8005774 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574a:	4a0d      	ldr	r2, [pc, #52]	; (8005780 <HAL_SPI_IRQHandler+0x1b8>)
 800574c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fe94 	bl	8004480 <HAL_DMA_Abort_IT>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800576a:	e003      	b.n	8005774 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f809 	bl	8005784 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005772:	e000      	b.n	8005776 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005774:	bf00      	nop
    return;
 8005776:	bf00      	nop
  }
}
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	08005797 	.word	0x08005797

08005784 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff ffe7 	bl	8005784 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057d0:	f7fe fce0 	bl	8004194 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	4413      	add	r3, r2
 80057de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057e0:	f7fe fcd8 	bl	8004194 <HAL_GetTick>
 80057e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057e6:	4b39      	ldr	r3, [pc, #228]	; (80058cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	015b      	lsls	r3, r3, #5
 80057ec:	0d1b      	lsrs	r3, r3, #20
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
 80057f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057f6:	e054      	b.n	80058a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fe:	d050      	beq.n	80058a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005800:	f7fe fcc8 	bl	8004194 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	429a      	cmp	r2, r3
 800580e:	d902      	bls.n	8005816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d13d      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582e:	d111      	bne.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005838:	d004      	beq.n	8005844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	d107      	bne.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585c:	d10f      	bne.n	800587e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800587c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e017      	b.n	80058c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	3b01      	subs	r3, #1
 80058a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4013      	ands	r3, r2
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	bf0c      	ite	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	2300      	movne	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d19b      	bne.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	2000000c 	.word	0x2000000c

080058d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	2180      	movs	r1, #128	; 0x80
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff ff6a 	bl	80057c0 <SPI_WaitFlagStateUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e000      	b.n	8005904 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e041      	b.n	80059a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f839 	bl	80059aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 fbee 	bl	800612c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d001      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e035      	b.n	8005a40 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <HAL_TIM_Base_Start_IT+0x90>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x4e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x4e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a12      	ldr	r2, [pc, #72]	; (8005a50 <HAL_TIM_Base_Start_IT+0x94>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d111      	bne.n	8005a2e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d010      	beq.n	8005a3e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	e007      	b.n	8005a3e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40000400 	.word	0x40000400

08005a54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10f      	bne.n	8005a9c <HAL_TIM_Base_Stop_IT+0x48>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a1a      	ldr	r2, [r3, #32]
 8005a82:	f240 4344 	movw	r3, #1092	; 0x444
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d107      	bne.n	8005a9c <HAL_TIM_Base_Stop_IT+0x48>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e041      	b.n	8005b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fe f900 	bl	8003cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 fb1c 	bl	800612c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <HAL_TIM_PWM_Start+0x24>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e022      	b.n	8005bba <HAL_TIM_PWM_Start+0x6a>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d109      	bne.n	8005b8e <HAL_TIM_PWM_Start+0x3e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	bf14      	ite	ne
 8005b86:	2301      	movne	r3, #1
 8005b88:	2300      	moveq	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	e015      	b.n	8005bba <HAL_TIM_PWM_Start+0x6a>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d109      	bne.n	8005ba8 <HAL_TIM_PWM_Start+0x58>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	bf14      	ite	ne
 8005ba0:	2301      	movne	r3, #1
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e008      	b.n	8005bba <HAL_TIM_PWM_Start+0x6a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	bf14      	ite	ne
 8005bb4:	2301      	movne	r3, #1
 8005bb6:	2300      	moveq	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e059      	b.n	8005c76 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <HAL_TIM_PWM_Start+0x82>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd0:	e013      	b.n	8005bfa <HAL_TIM_PWM_Start+0xaa>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d104      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x92>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be0:	e00b      	b.n	8005bfa <HAL_TIM_PWM_Start+0xaa>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0xa2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf0:	e003      	b.n	8005bfa <HAL_TIM_PWM_Start+0xaa>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fc72 	bl	80064ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <HAL_TIM_PWM_Start+0x130>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d107      	bne.n	8005c22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <HAL_TIM_PWM_Start+0x130>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_TIM_PWM_Start+0xf0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_PWM_Start+0xf0>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a12      	ldr	r2, [pc, #72]	; (8005c84 <HAL_TIM_PWM_Start+0x134>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d111      	bne.n	8005c64 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d010      	beq.n	8005c74 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c62:	e007      	b.n	8005c74 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40000400 	.word	0x40000400

08005c88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fc26 	bl	80064ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a29      	ldr	r2, [pc, #164]	; (8005d4c <HAL_TIM_PWM_Stop+0xc4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d117      	bne.n	8005cda <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6a1a      	ldr	r2, [r3, #32]
 8005cb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10f      	bne.n	8005cda <HAL_TIM_PWM_Stop+0x52>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	f240 4344 	movw	r3, #1092	; 0x444
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_PWM_Stop+0x52>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10f      	bne.n	8005d0a <HAL_TIM_PWM_Stop+0x82>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	f240 4344 	movw	r3, #1092	; 0x444
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_PWM_Stop+0x82>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_PWM_Stop+0x92>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d18:	e013      	b.n	8005d42 <HAL_TIM_PWM_Stop+0xba>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d104      	bne.n	8005d2a <HAL_TIM_PWM_Stop+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	e00b      	b.n	8005d42 <HAL_TIM_PWM_Stop+0xba>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d104      	bne.n	8005d3a <HAL_TIM_PWM_Stop+0xb2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d38:	e003      	b.n	8005d42 <HAL_TIM_PWM_Stop+0xba>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40012c00 	.word	0x40012c00

08005d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d122      	bne.n	8005dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d11b      	bne.n	8005dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0202 	mvn.w	r2, #2
 8005d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9af 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9a2 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f9b1 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d122      	bne.n	8005e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d11b      	bne.n	8005e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0204 	mvn.w	r2, #4
 8005dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f985 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005dec:	e005      	b.n	8005dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f978 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f987 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d122      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d11b      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0208 	mvn.w	r2, #8
 8005e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f95b 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005e40:	e005      	b.n	8005e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f94e 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f95d 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d122      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d11b      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0210 	mvn.w	r2, #16
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f931 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f924 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f933 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0201 	mvn.w	r2, #1
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fd fd5e 	bl	8003990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ede:	2b80      	cmp	r3, #128	; 0x80
 8005ee0:	d10e      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eec:	2b80      	cmp	r3, #128	; 0x80
 8005eee:	d107      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fbcc 	bl	8006698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d10e      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8f7 	bl	800611a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d10e      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d107      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0220 	mvn.w	r2, #32
 8005f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fb97 	bl	8006686 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e0ae      	b.n	80060dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b0c      	cmp	r3, #12
 8005f8a:	f200 809f 	bhi.w	80060cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fc9 	.word	0x08005fc9
 8005f98:	080060cd 	.word	0x080060cd
 8005f9c:	080060cd 	.word	0x080060cd
 8005fa0:	080060cd 	.word	0x080060cd
 8005fa4:	08006009 	.word	0x08006009
 8005fa8:	080060cd 	.word	0x080060cd
 8005fac:	080060cd 	.word	0x080060cd
 8005fb0:	080060cd 	.word	0x080060cd
 8005fb4:	0800604b 	.word	0x0800604b
 8005fb8:	080060cd 	.word	0x080060cd
 8005fbc:	080060cd 	.word	0x080060cd
 8005fc0:	080060cd 	.word	0x080060cd
 8005fc4:	0800608b 	.word	0x0800608b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 f904 	bl	80061dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0208 	orr.w	r2, r2, #8
 8005fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0204 	bic.w	r2, r2, #4
 8005ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6999      	ldr	r1, [r3, #24]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	619a      	str	r2, [r3, #24]
      break;
 8006006:	e064      	b.n	80060d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f94a 	bl	80062a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6999      	ldr	r1, [r3, #24]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	021a      	lsls	r2, r3, #8
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	619a      	str	r2, [r3, #24]
      break;
 8006048:	e043      	b.n	80060d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f993 	bl	800637c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0208 	orr.w	r2, r2, #8
 8006064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0204 	bic.w	r2, r2, #4
 8006074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69d9      	ldr	r1, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	61da      	str	r2, [r3, #28]
      break;
 8006088:	e023      	b.n	80060d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 f9dd 	bl	8006450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69d9      	ldr	r1, [r3, #28]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	021a      	lsls	r2, r3, #8
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	61da      	str	r2, [r3, #28]
      break;
 80060ca:	e002      	b.n	80060d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
      break;
 80060d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr

080060f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr

08006108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr

0800611a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr

0800612c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a25      	ldr	r2, [pc, #148]	; (80061d4 <TIM_Base_SetConfig+0xa8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_Base_SetConfig+0x28>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0x28>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a22      	ldr	r2, [pc, #136]	; (80061d8 <TIM_Base_SetConfig+0xac>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d108      	bne.n	8006166 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <TIM_Base_SetConfig+0xa8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d007      	beq.n	800617e <TIM_Base_SetConfig+0x52>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006174:	d003      	beq.n	800617e <TIM_Base_SetConfig+0x52>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <TIM_Base_SetConfig+0xac>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d108      	bne.n	8006190 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a07      	ldr	r2, [pc, #28]	; (80061d4 <TIM_Base_SetConfig+0xa8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d103      	bne.n	80061c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	615a      	str	r2, [r3, #20]
}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr
 80061d4:	40012c00 	.word	0x40012c00
 80061d8:	40000400 	.word	0x40000400

080061dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f023 0201 	bic.w	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0302 	bic.w	r3, r3, #2
 8006224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <TIM_OC1_SetConfig+0xc8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d10c      	bne.n	8006252 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f023 0308 	bic.w	r3, r3, #8
 800623e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f023 0304 	bic.w	r3, r3, #4
 8006250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <TIM_OC1_SetConfig+0xc8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d111      	bne.n	800627e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	621a      	str	r2, [r3, #32]
}
 8006298:	bf00      	nop
 800629a:	371c      	adds	r7, #28
 800629c:	46bd      	mov	sp, r7
 800629e:	bc80      	pop	{r7}
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00

080062a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f023 0210 	bic.w	r2, r3, #16
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0320 	bic.w	r3, r3, #32
 80062f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <TIM_OC2_SetConfig+0xd0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d10d      	bne.n	8006324 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a14      	ldr	r2, [pc, #80]	; (8006378 <TIM_OC2_SetConfig+0xd0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d113      	bne.n	8006354 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800633a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	40012c00 	.word	0x40012c00

0800637c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1d      	ldr	r2, [pc, #116]	; (800644c <TIM_OC3_SetConfig+0xd0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d10d      	bne.n	80063f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a14      	ldr	r2, [pc, #80]	; (800644c <TIM_OC3_SetConfig+0xd0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d113      	bne.n	8006426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40012c00 	.word	0x40012c00

08006450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800649a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	031b      	lsls	r3, r3, #12
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a0f      	ldr	r2, [pc, #60]	; (80064e8 <TIM_OC4_SetConfig+0x98>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d109      	bne.n	80064c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	019b      	lsls	r3, r3, #6
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	40012c00 	.word	0x40012c00

080064ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2201      	movs	r2, #1
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	43db      	mvns	r3, r3
 800650e:	401a      	ands	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	fa01 f303 	lsl.w	r3, r1, r3
 8006524:	431a      	orrs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006548:	2302      	movs	r3, #2
 800654a:	e041      	b.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a14      	ldr	r2, [pc, #80]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d009      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006598:	d004      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d10c      	bne.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40000400 	.word	0x40000400

080065e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e03d      	b.n	800667c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr

08006686 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e042      	b.n	8006742 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7fd fbd1 	bl	8003e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2224      	movs	r2, #36	; 0x24
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fe48 	bl	8007384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006702:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006712:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006722:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e04a      	b.n	80067f2 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fd fb81 	bl	8003e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	; 0x24
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800678c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fdf8 	bl	8007384 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80067b2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0208 	orr.w	r2, r2, #8
 80067c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b08a      	sub	sp, #40	; 0x28
 80067fe:	af02      	add	r7, sp, #8
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	4613      	mov	r3, r2
 8006808:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b20      	cmp	r3, #32
 8006818:	d16d      	bne.n	80068f6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_UART_Transmit+0x2c>
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e066      	b.n	80068f8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2221      	movs	r2, #33	; 0x21
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006838:	f7fd fcac 	bl	8004194 <HAL_GetTick>
 800683c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	88fa      	ldrh	r2, [r7, #6]
 8006842:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	88fa      	ldrh	r2, [r7, #6]
 8006848:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006852:	d108      	bne.n	8006866 <HAL_UART_Transmit+0x6c>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800685c:	2300      	movs	r3, #0
 800685e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	e003      	b.n	800686e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800686e:	e02a      	b.n	80068c6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2200      	movs	r2, #0
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 fb3f 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e036      	b.n	80068f8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800689e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	3302      	adds	r3, #2
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e007      	b.n	80068b8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	3301      	adds	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1cf      	bne.n	8006870 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 fb0f 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e006      	b.n	80068f8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e000      	b.n	80068f8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80068f6:	2302      	movs	r3, #2
  }
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3720      	adds	r7, #32
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b20      	cmp	r3, #32
 8006918:	d112      	bne.n	8006940 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_UART_Receive_IT+0x26>
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e00b      	b.n	8006942 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	461a      	mov	r2, r3
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fb4f 	bl	8006fda <UART_Start_Receive_IT>
 800693c:	4603      	mov	r3, r0
 800693e:	e000      	b.n	8006942 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b0ba      	sub	sp, #232	; 0xe8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006978:	2300      	movs	r3, #0
 800697a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800698a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10f      	bne.n	80069b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_UART_IRQHandler+0x66>
 800699e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fc2b 	bl	8007206 <UART_Receive_IT>
      return;
 80069b0:	e25b      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80de 	beq.w	8006b78 <HAL_UART_IRQHandler+0x22c>
 80069bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d106      	bne.n	80069d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80d1 	beq.w	8006b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <HAL_UART_IRQHandler+0xae>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <HAL_UART_IRQHandler+0xd2>
 8006a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a16:	f043 0202 	orr.w	r2, r3, #2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00b      	beq.n	8006a42 <HAL_UART_IRQHandler+0xf6>
 8006a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3a:	f043 0204 	orr.w	r2, r3, #4
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d011      	beq.n	8006a72 <HAL_UART_IRQHandler+0x126>
 8006a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d105      	bne.n	8006a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6a:	f043 0208 	orr.w	r2, r3, #8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 81f2 	beq.w	8006e60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_UART_IRQHandler+0x14e>
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fbb6 	bl	8007206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x17a>
 8006abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d04f      	beq.n	8006b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fac0 	bl	800704c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d041      	beq.n	8006b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3314      	adds	r3, #20
 8006ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3314      	adds	r3, #20
 8006b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1d9      	bne.n	8006ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d013      	beq.n	8006b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	4a7e      	ldr	r2, [pc, #504]	; (8006d2c <HAL_UART_IRQHandler+0x3e0>)
 8006b34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd fca0 	bl	8004480 <HAL_DMA_Abort_IT>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	e00e      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fc fdd8 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	e00a      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fc fdd4 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	e006      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fc fdd0 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006b72:	e175      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	bf00      	nop
    return;
 8006b76:	e173      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	f040 814f 	bne.w	8006e20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8148 	beq.w	8006e20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8141 	beq.w	8006e20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60bb      	str	r3, [r7, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80b6 	beq.w	8006d30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8145 	beq.w	8006e64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006be2:	429a      	cmp	r2, r3
 8006be4:	f080 813e 	bcs.w	8006e64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	f000 8088 	beq.w	8006d0c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c28:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1d9      	bne.n	8006bfc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e1      	bne.n	8006c48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ca8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006caa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e3      	bne.n	8006c84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cee:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cf0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e3      	bne.n	8006cca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fd fb7f 	bl	800440a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f8ad 	bl	8006e82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d28:	e09c      	b.n	8006e64 <HAL_UART_IRQHandler+0x518>
 8006d2a:	bf00      	nop
 8006d2c:	08007111 	.word	0x08007111
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 808e 	beq.w	8006e68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8089 	beq.w	8006e68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8006d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e3      	bne.n	8006d56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3314      	adds	r3, #20
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3314      	adds	r3, #20
 8006dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006db2:	633a      	str	r2, [r7, #48]	; 0x30
 8006db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0310 	bic.w	r3, r3, #16
 8006dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006df8:	61fa      	str	r2, [r7, #28]
 8006dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	69b9      	ldr	r1, [r7, #24]
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	617b      	str	r3, [r7, #20]
   return(result);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e3      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f832 	bl	8006e82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e1e:	e023      	b.n	8006e68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d009      	beq.n	8006e40 <HAL_UART_IRQHandler+0x4f4>
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f97d 	bl	8007138 <UART_Transmit_IT>
    return;
 8006e3e:	e014      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00e      	beq.n	8006e6a <HAL_UART_IRQHandler+0x51e>
 8006e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f9bc 	bl	80071d6 <UART_EndTransmit_IT>
    return;
 8006e5e:	e004      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
    return;
 8006e60:	bf00      	nop
 8006e62:	e002      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8006e64:	bf00      	nop
 8006e66:	e000      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8006e68:	bf00      	nop
  }
}
 8006e6a:	37e8      	adds	r7, #232	; 0xe8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	e020      	b.n	8006ef4 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2224      	movs	r2, #36	; 0x24
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f023 030c 	bic.w	r3, r3, #12
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f043 0308 	orr.w	r3, r3, #8
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b090      	sub	sp, #64	; 0x40
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0e:	e050      	b.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f16:	d04c      	beq.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x30>
 8006f1e:	f7fd f939 	bl	8004194 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d241      	bcs.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	330c      	adds	r3, #12
 8006f34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f4e:	637a      	str	r2, [r7, #52]	; 0x34
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3314      	adds	r3, #20
 8006f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	613b      	str	r3, [r7, #16]
   return(result);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3314      	adds	r3, #20
 8006f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f82:	623a      	str	r2, [r7, #32]
 8006f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	69f9      	ldr	r1, [r7, #28]
 8006f88:	6a3a      	ldr	r2, [r7, #32]
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e5      	bne.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e00f      	b.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	bf0c      	ite	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	2300      	movne	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d09f      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3740      	adds	r7, #64	; 0x40
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2222      	movs	r2, #34	; 0x22
 8007004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800701e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0220 	orr.w	r2, r2, #32
 800703e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	bc80      	pop	{r7}
 800704a:	4770      	bx	lr

0800704c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b095      	sub	sp, #84	; 0x54
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800706a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007074:	643a      	str	r2, [r7, #64]	; 0x40
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800707a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	61fb      	str	r3, [r7, #28]
   return(result);
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3314      	adds	r3, #20
 80070a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e5      	bne.n	8007088 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d119      	bne.n	80070f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f023 0310 	bic.w	r3, r3, #16
 80070da:	647b      	str	r3, [r7, #68]	; 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	330c      	adds	r3, #12
 80070e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070e4:	61ba      	str	r2, [r7, #24]
 80070e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6979      	ldr	r1, [r7, #20]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	613b      	str	r3, [r7, #16]
   return(result);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e5      	bne.n	80070c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007106:	bf00      	nop
 8007108:	3754      	adds	r7, #84	; 0x54
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7fc faee 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b21      	cmp	r3, #33	; 0x21
 800714a:	d13e      	bne.n	80071ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007154:	d114      	bne.n	8007180 <UART_Transmit_IT+0x48>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d110      	bne.n	8007180 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007172:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	1c9a      	adds	r2, r3, #2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	621a      	str	r2, [r3, #32]
 800717e:	e008      	b.n	8007192 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	1c59      	adds	r1, r3, #1
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6211      	str	r1, [r2, #32]
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29b      	uxth	r3, r3
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4619      	mov	r1, r3
 80071a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10f      	bne.n	80071c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e000      	b.n	80071cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071ca:	2302      	movs	r3, #2
  }
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc80      	pop	{r7}
 80071d4:	4770      	bx	lr

080071d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fe3a 	bl	8006e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b08c      	sub	sp, #48	; 0x30
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b22      	cmp	r3, #34	; 0x22
 8007218:	f040 80ae 	bne.w	8007378 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007224:	d117      	bne.n	8007256 <UART_Receive_IT+0x50>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d113      	bne.n	8007256 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007244:	b29a      	uxth	r2, r3
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	1c9a      	adds	r2, r3, #2
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
 8007254:	e026      	b.n	80072a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007268:	d007      	beq.n	800727a <UART_Receive_IT+0x74>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <UART_Receive_IT+0x82>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	b2da      	uxtb	r2, r3
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	e008      	b.n	800729a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007294:	b2da      	uxtb	r2, r3
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	4619      	mov	r1, r3
 80072b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d15d      	bne.n	8007374 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0220 	bic.w	r2, r2, #32
 80072c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695a      	ldr	r2, [r3, #20]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d135      	bne.n	800736a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	330c      	adds	r3, #12
 800730a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	613b      	str	r3, [r7, #16]
   return(result);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f023 0310 	bic.w	r3, r3, #16
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007324:	623a      	str	r2, [r7, #32]
 8007326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69f9      	ldr	r1, [r7, #28]
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	61bb      	str	r3, [r7, #24]
   return(result);
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e5      	bne.n	8007304 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b10      	cmp	r3, #16
 8007344:	d10a      	bne.n	800735c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff fd8d 	bl	8006e82 <HAL_UARTEx_RxEventCallback>
 8007368:	e002      	b.n	8007370 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fc f8a8 	bl	80034c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	e002      	b.n	800737a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	e000      	b.n	800737a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007378:	2302      	movs	r3, #2
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3730      	adds	r7, #48	; 0x30
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80073be:	f023 030c 	bic.w	r3, r3, #12
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	430b      	orrs	r3, r1
 80073ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a2c      	ldr	r2, [pc, #176]	; (8007498 <UART_SetConfig+0x114>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d103      	bne.n	80073f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80073ec:	f7fd fe86 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	e002      	b.n	80073fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80073f4:	f7fd fe6e 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 80073f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009a      	lsls	r2, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007410:	4a22      	ldr	r2, [pc, #136]	; (800749c <UART_SetConfig+0x118>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	0119      	lsls	r1, r3, #4
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009a      	lsls	r2, r3, #2
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007430:	4b1a      	ldr	r3, [pc, #104]	; (800749c <UART_SetConfig+0x118>)
 8007432:	fba3 0302 	umull	r0, r3, r3, r2
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	2064      	movs	r0, #100	; 0x64
 800743a:	fb00 f303 	mul.w	r3, r0, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	3332      	adds	r3, #50	; 0x32
 8007444:	4a15      	ldr	r2, [pc, #84]	; (800749c <UART_SetConfig+0x118>)
 8007446:	fba2 2303 	umull	r2, r3, r2, r3
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007450:	4419      	add	r1, r3
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009a      	lsls	r2, r3, #2
 800745c:	441a      	add	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	fbb2 f2f3 	udiv	r2, r2, r3
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <UART_SetConfig+0x118>)
 800746a:	fba3 0302 	umull	r0, r3, r3, r2
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	2064      	movs	r0, #100	; 0x64
 8007472:	fb00 f303 	mul.w	r3, r0, r3
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	3332      	adds	r3, #50	; 0x32
 800747c:	4a07      	ldr	r2, [pc, #28]	; (800749c <UART_SetConfig+0x118>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	440a      	add	r2, r1
 800748e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40013800 	.word	0x40013800
 800749c:	51eb851f 	.word	0x51eb851f

080074a0 <__cxa_guard_acquire>:
 80074a0:	6802      	ldr	r2, [r0, #0]
 80074a2:	4603      	mov	r3, r0
 80074a4:	07d2      	lsls	r2, r2, #31
 80074a6:	d405      	bmi.n	80074b4 <__cxa_guard_acquire+0x14>
 80074a8:	7842      	ldrb	r2, [r0, #1]
 80074aa:	b102      	cbz	r2, 80074ae <__cxa_guard_acquire+0xe>
 80074ac:	deff      	udf	#255	; 0xff
 80074ae:	2001      	movs	r0, #1
 80074b0:	7058      	strb	r0, [r3, #1]
 80074b2:	4770      	bx	lr
 80074b4:	2000      	movs	r0, #0
 80074b6:	4770      	bx	lr

080074b8 <__cxa_guard_release>:
 80074b8:	2301      	movs	r3, #1
 80074ba:	6003      	str	r3, [r0, #0]
 80074bc:	4770      	bx	lr
	...

080074c0 <ceilf>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80074c6:	3d7f      	subs	r5, #127	; 0x7f
 80074c8:	2d16      	cmp	r5, #22
 80074ca:	4601      	mov	r1, r0
 80074cc:	4604      	mov	r4, r0
 80074ce:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80074d2:	dc25      	bgt.n	8007520 <ceilf+0x60>
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	da0e      	bge.n	80074f6 <ceilf+0x36>
 80074d8:	4917      	ldr	r1, [pc, #92]	; (8007538 <ceilf+0x78>)
 80074da:	f7f9 fa5b 	bl	8000994 <__addsf3>
 80074de:	2100      	movs	r1, #0
 80074e0:	f7f9 fd1c 	bl	8000f1c <__aeabi_fcmpgt>
 80074e4:	b128      	cbz	r0, 80074f2 <ceilf+0x32>
 80074e6:	2c00      	cmp	r4, #0
 80074e8:	db22      	blt.n	8007530 <ceilf+0x70>
 80074ea:	2e00      	cmp	r6, #0
 80074ec:	bf18      	it	ne
 80074ee:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 80074f2:	4621      	mov	r1, r4
 80074f4:	e01a      	b.n	800752c <ceilf+0x6c>
 80074f6:	4e11      	ldr	r6, [pc, #68]	; (800753c <ceilf+0x7c>)
 80074f8:	412e      	asrs	r6, r5
 80074fa:	4230      	tst	r0, r6
 80074fc:	d016      	beq.n	800752c <ceilf+0x6c>
 80074fe:	490e      	ldr	r1, [pc, #56]	; (8007538 <ceilf+0x78>)
 8007500:	f7f9 fa48 	bl	8000994 <__addsf3>
 8007504:	2100      	movs	r1, #0
 8007506:	f7f9 fd09 	bl	8000f1c <__aeabi_fcmpgt>
 800750a:	2800      	cmp	r0, #0
 800750c:	d0f1      	beq.n	80074f2 <ceilf+0x32>
 800750e:	2c00      	cmp	r4, #0
 8007510:	bfc2      	ittt	gt
 8007512:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8007516:	412b      	asrgt	r3, r5
 8007518:	18e4      	addgt	r4, r4, r3
 800751a:	ea24 0406 	bic.w	r4, r4, r6
 800751e:	e7e8      	b.n	80074f2 <ceilf+0x32>
 8007520:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007524:	d302      	bcc.n	800752c <ceilf+0x6c>
 8007526:	f7f9 fa35 	bl	8000994 <__addsf3>
 800752a:	4601      	mov	r1, r0
 800752c:	4608      	mov	r0, r1
 800752e:	bd70      	pop	{r4, r5, r6, pc}
 8007530:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007534:	e7dd      	b.n	80074f2 <ceilf+0x32>
 8007536:	bf00      	nop
 8007538:	7149f2ca 	.word	0x7149f2ca
 800753c:	007fffff 	.word	0x007fffff

08007540 <memset>:
 8007540:	4603      	mov	r3, r0
 8007542:	4402      	add	r2, r0
 8007544:	4293      	cmp	r3, r2
 8007546:	d100      	bne.n	800754a <memset+0xa>
 8007548:	4770      	bx	lr
 800754a:	f803 1b01 	strb.w	r1, [r3], #1
 800754e:	e7f9      	b.n	8007544 <memset+0x4>

08007550 <__libc_init_array>:
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	2600      	movs	r6, #0
 8007554:	4d0c      	ldr	r5, [pc, #48]	; (8007588 <__libc_init_array+0x38>)
 8007556:	4c0d      	ldr	r4, [pc, #52]	; (800758c <__libc_init_array+0x3c>)
 8007558:	1b64      	subs	r4, r4, r5
 800755a:	10a4      	asrs	r4, r4, #2
 800755c:	42a6      	cmp	r6, r4
 800755e:	d109      	bne.n	8007574 <__libc_init_array+0x24>
 8007560:	f000 f81a 	bl	8007598 <_init>
 8007564:	2600      	movs	r6, #0
 8007566:	4d0a      	ldr	r5, [pc, #40]	; (8007590 <__libc_init_array+0x40>)
 8007568:	4c0a      	ldr	r4, [pc, #40]	; (8007594 <__libc_init_array+0x44>)
 800756a:	1b64      	subs	r4, r4, r5
 800756c:	10a4      	asrs	r4, r4, #2
 800756e:	42a6      	cmp	r6, r4
 8007570:	d105      	bne.n	800757e <__libc_init_array+0x2e>
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	f855 3b04 	ldr.w	r3, [r5], #4
 8007578:	4798      	blx	r3
 800757a:	3601      	adds	r6, #1
 800757c:	e7ee      	b.n	800755c <__libc_init_array+0xc>
 800757e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007582:	4798      	blx	r3
 8007584:	3601      	adds	r6, #1
 8007586:	e7f2      	b.n	800756e <__libc_init_array+0x1e>
 8007588:	080075dc 	.word	0x080075dc
 800758c:	080075dc 	.word	0x080075dc
 8007590:	080075dc 	.word	0x080075dc
 8007594:	080075e4 	.word	0x080075e4

08007598 <_init>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr

080075a4 <_fini>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr
