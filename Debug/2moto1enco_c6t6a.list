
2moto1enco_c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a0  080072a0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080072a0  080072a0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072a0  080072a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072a8  080072a8  000172a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080072ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000018  080072c4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  080072c4  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   000187a2  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000313c  00000000  00000000  00038826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  0003b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfd  00000000  00000000  0003ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b39e  00000000  00000000  0003d705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012785  00000000  00000000  00058aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fccc  00000000  00000000  0006b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048a8  00000000  00000000  000faef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ff79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800725c 	.word	0x0800725c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800725c 	.word	0x0800725c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8000f80:	787a      	ldrb	r2, [r7, #1]
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f003 fae7 	bl	800455a <HAL_GPIO_WritePin>

}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	72fb      	strb	r3, [r7, #11]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8000fa8:	893b      	ldrh	r3, [r7, #8]
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffde 	bl	8000f70 <setCSLine>
	delay(docDelay);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 f923 	bl	8001200 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8000fba:	f107 0217 	add.w	r2, r7, #23
 8000fbe:	f107 010b 	add.w	r1, r7, #11
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f003 ffaf 	bl	8004f2c <HAL_SPI_TransmitReceive>
	delay(docDelay);
 8000fce:	2004      	movs	r0, #4
 8000fd0:	f000 f916 	bl	8001200 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8000fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd8:	893b      	ldrh	r3, [r7, #8]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffc7 	bl	8000f70 <setCSLine>
	return data;
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4613      	mov	r3, r2
 8001000:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 8001002:	f000 f90f 	bl	8001224 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	2200      	movs	r2, #0
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	2100      	movs	r1, #0
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff ffbd 	bl	8000f94 <spiWriteRead>
 800101a:	4603      	mov	r3, r0
 800101c:	b29b      	uxth	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 8001022:	2004      	movs	r0, #4
 8001024:	f000 f8ec 	bl	8001200 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	2100      	movs	r1, #0
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ffae 	bl	8000f94 <spiWriteRead>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800103e:	4313      	orrs	r3, r2
 8001040:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	e010      	b.n	800106a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8001048:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	fa42 f303 	asr.w	r3, r2, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	b2d9      	uxtb	r1, r3
 8001058:	f107 0210 	add.w	r2, r7, #16
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	4413      	add	r3, r2
 8001060:	460a      	mov	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	3301      	adds	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	ddeb      	ble.n	8001048 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001070:	7ffb      	ldrb	r3, [r7, #31]
 8001072:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001074:	7f7a      	ldrb	r2, [r7, #29]
 8001076:	7efb      	ldrb	r3, [r7, #27]
 8001078:	4053      	eors	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	7e7b      	ldrb	r3, [r7, #25]
 800107e:	4053      	eors	r3, r2
 8001080:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001082:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001084:	4053      	eors	r3, r2
 8001086:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001088:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800108a:	4053      	eors	r3, r2
 800108c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800108e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001090:	4053      	eors	r3, r2
 8001092:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001094:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001096:	429a      	cmp	r2, r3
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d11e      	bne.n	80010e2 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 80010a4:	7fbb      	ldrb	r3, [r7, #30]
 80010a6:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010a8:	7f3a      	ldrb	r2, [r7, #28]
 80010aa:	7ebb      	ldrb	r3, [r7, #26]
 80010ac:	4053      	eors	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	4053      	eors	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010b8:	4053      	eors	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010bc:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010be:	4053      	eors	r3, r2
 80010c0:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80010c2:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010c4:	4053      	eors	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80010c8:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	bf0c      	ite	eq
 80010ce:	2301      	moveq	r3, #1
 80010d0:	2300      	movne	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d104      	bne.n	80010e2 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 80010d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010e0:	e002      	b.n	80010e8 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 80010e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d107      	bne.n	80010fe <getPositionSPI+0x112>
 80010ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d002      	beq.n	80010fe <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 80010f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001100:	4618      	mov	r0, r3
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	4613      	mov	r3, r2
 8001114:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2200      	movs	r2, #0
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	2100      	movs	r1, #0
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff37 	bl	8000f94 <spiWriteRead>
	delay( docDelay);
 8001126:	2004      	movs	r0, #4
 8001128:	f000 f86a 	bl	8001200 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	2201      	movs	r2, #1
 8001130:	9200      	str	r2, [sp, #0]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	2170      	movs	r1, #112	; 0x70
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ff2c 	bl	8000f94 <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 800113c:	2078      	movs	r0, #120	; 0x78
 800113e:	f000 f85f 	bl	8001200 <delay>

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <calculateAngle>:

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	80fb      	strh	r3, [r7, #6]
 8001158:	4613      	mov	r3, r2
 800115a:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d11e      	bne.n	80011a6 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fcc2 	bl	8000af4 <__aeabi_ui2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f94e 	bl	8000414 <__aeabi_f2d>
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <calculateAngle+0xa8>)
 800117e:	f7ff f9a1 	bl	80004c4 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <calculateAngle+0xac>)
 8001190:	f7ff fac2 	bl	8000718 <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fba4 	bl	80008e8 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e020      	b.n	80011e8 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	2b0e      	cmp	r3, #14
 80011aa:	d11d      	bne.n	80011e8 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fca0 	bl	8000af4 <__aeabi_ui2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f92c 	bl	8000414 <__aeabi_f2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <calculateAngle+0xa8>)
 80011c2:	f7ff f97f 	bl	80004c4 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <calculateAngle+0xb0>)
 80011d4:	f7ff faa0 	bl	8000718 <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fb82 	bl	80008e8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40768000 	.word	0x40768000
 80011f8:	40b00000 	.word	0x40b00000
 80011fc:	40d00000 	.word	0x40d00000

08001200 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f83b 	bl	8001284 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <startDWT>:

int startDWT(){
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 800121a:	f000 f803 	bl	8001224 <DWT_Delay_Init>

}
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}

08001224 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <DWT_Delay_Init+0x58>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <DWT_Delay_Init+0x58>)
 800122e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001232:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <DWT_Delay_Init+0x58>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <DWT_Delay_Init+0x58>)
 800123a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <DWT_Delay_Init+0x5c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <DWT_Delay_Init+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800125e:	bf00      	nop
    __ASM volatile ("NOP");
 8001260:	bf00      	nop
    __ASM volatile ("NOP");
 8001262:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <DWT_Delay_Init+0x5c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800126c:	2300      	movs	r3, #0
 800126e:	e000      	b.n	8001272 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001270:	2301      	movs	r3, #1
    }
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000edf0 	.word	0xe000edf0
 8001280:	e0001000 	.word	0xe0001000

08001284 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <DWT_Delay_us+0x48>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001292:	f003 fd77 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8001296:	4603      	mov	r3, r0
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <DWT_Delay_us+0x4c>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9b      	lsrs	r3, r3, #18
 80012a0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80012ac:	bf00      	nop
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <DWT_Delay_us+0x48>)
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1acb      	subs	r3, r1, r3
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3f6      	bcc.n	80012ae <DWT_Delay_us+0x2a>
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e0001000 	.word	0xe0001000
 80012d0:	431bde83 	.word	0x431bde83

080012d4 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	e9c7 0100 	strd	r0, r1, [r7]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f005 ff36 	bl	8007184 <ceilf>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <_ZN7RoboArmC1Eff>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(float defaultAngleT, float defaultDistanseT) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a37      	ldr	r2, [pc, #220]	; (8001410 <_ZN7RoboArmC1Eff+0xec>)
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f44f 7220 	mov.w	r2, #640	; 0x280
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	671a      	str	r2, [r3, #112]	; 0x70
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	675a      	str	r2, [r3, #116]	; 0x74
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a31      	ldr	r2, [pc, #196]	; (8001414 <_ZN7RoboArmC1Eff+0xf0>)
 800134e:	679a      	str	r2, [r3, #120]	; 0x78
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a31      	ldr	r2, [pc, #196]	; (8001418 <_ZN7RoboArmC1Eff+0xf4>)
 8001354:	67da      	str	r2, [r3, #124]	; 0x7c
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4a30      	ldr	r2, [pc, #192]	; (800141c <_ZN7RoboArmC1Eff+0xf8>)
 800135a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	220e      	movs	r2, #14
 8001362:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	33a4      	adds	r3, #164	; 0xa4
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fedf 	bl	800212e <_ZN7TMC2209C1Ev>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	33cc      	adds	r3, #204	; 0xcc
 8001374:	4618      	mov	r0, r3
 8001376:	f000 feda 	bl	800212e <_ZN7TMC2209C1Ev>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	33f4      	adds	r3, #244	; 0xf4
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fed5 	bl	800212e <_ZN7TMC2209C1Ev>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	defaultAngle = defaultAngleT;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	defaultDistanse = defaultDistanseT;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

	startDWT();
 8001400:	f7ff ff09 	bl	8001216 <startDWT>
}
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	44200000 	.word	0x44200000
 8001414:	000105b8 	.word	0x000105b8
 8001418:	43520000 	.word	0x43520000
 800141c:	42400000 	.word	0x42400000

08001420 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001430:	2201      	movs	r2, #1
 8001432:	4619      	mov	r1, r3
 8001434:	f003 f891 	bl	800455a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	f003 f889 	bl	800455a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001452:	2201      	movs	r2, #1
 8001454:	4619      	mov	r1, r3
 8001456:	f003 f880 	bl	800455a <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f004 fa73 	bl	800594c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2104      	movs	r1, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f004 fa6d 	bl	800594c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2108      	movs	r1, #8
 8001478:	4618      	mov	r0, r3
 800147a:	f004 fa67 	bl	800594c <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4618      	mov	r0, r3
 8001484:	f004 f948 	bl	8005718 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4618      	mov	r0, r3
 800148e:	f004 f943 	bl	8005718 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	4618      	mov	r0, r3
 8001498:	f004 f93e 	bl	8005718 <HAL_TIM_Base_Stop_IT>

	return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <_ZN7RoboArm11Move2MotorsEff>:
////    std::cout<<"== Поточна дистанція по енкодеру: "<<distPsteps/steps4OneMM<<" mm"<<std::endl; //поточна дистанція по енкодеру
//
//     return distPsteps/steps4OneMM;
// }

int RoboArm::Move2Motors(float angle, float distance) {
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b08f      	sub	sp, #60	; 0x3c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f004 fa46 	bl	800594c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2104      	movs	r1, #4
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 fa40 	bl	800594c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);			// остановили прерывание таймеров
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 f921 	bl	8005718 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 f91c 	bl	8005718 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2101      	movs	r1, #1
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 fde9 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2102      	movs	r1, #2
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 fde4 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>

//	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
	lastPosAngle_Enc = GetAng();
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 fcc1 	bl	8001e7c <_ZN7RoboArm6GetAngEv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	lastPosLinear_Enc = GetLin();
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 fc3e 	bl	8001d84 <_ZN7RoboArm6GetLinEv>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	float lastPosAngle = lastPosAngle_Enc;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
	float lastPosLinear = lastPosLinear_Enc;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c

	float pos_ang = abs(lastPosAngle - angle);
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001524:	f7ff fa34 	bl	8000990 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fee1 	bl	80012f2 <_ZSt3absf>
 8001530:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 8001532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001534:	f7fe ff6e 	bl	8000414 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	4976      	ldr	r1, [pc, #472]	; (800171c <_ZN7RoboArm11Move2MotorsEff+0x274>)
 8001542:	f7fe fe07 	bl	8000154 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fec1 	bl	80012d4 <_ZSt3absd>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff f9c5 	bl	80008e8 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 8001562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001566:	f7ff fcbb 	bl	8000ee0 <__aeabi_fcmplt>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <_ZN7RoboArm11Move2MotorsEff+0x100>
		actualPosAngle = inverse_pos_ang;
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001578:	f7ff fcb2 	bl	8000ee0 <__aeabi_fcmplt>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <_ZN7RoboArm11Move2MotorsEff+0xe6>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.enableInverseMotorDirection();
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	33cc      	adds	r3, #204	; 0xcc
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fed1 	bl	800232e <_ZN7TMC220927enableInverseMotorDirectionEv>
 800158c:	e027      	b.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
		} else if (lastPosAngle > angle) {
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001592:	f7ff fcc3 	bl	8000f1c <__aeabi_fcmpgt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);

			tmcd_angle.disableInverseMotorDirection();
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	33cc      	adds	r3, #204	; 0xcc
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fed4 	bl	800234e <_ZN7TMC220928disableInverseMotorDirectionEv>
 80015a6:	e01a      	b.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
		}
	} else {
		actualPosAngle = pos_ang;
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015b0:	f7ff fc96 	bl	8000ee0 <__aeabi_fcmplt>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <_ZN7RoboArm11Move2MotorsEff+0x11e>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
			tmcd_angle.disableInverseMotorDirection();
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	33cc      	adds	r3, #204	; 0xcc
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fec5 	bl	800234e <_ZN7TMC220928disableInverseMotorDirectionEv>
 80015c4:	e00b      	b.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
		} else if (lastPosAngle > angle) {
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ca:	f7ff fca7 	bl	8000f1c <__aeabi_fcmpgt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <_ZN7RoboArm11Move2MotorsEff+0x136>
			//	HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
			tmcd_angle.enableInverseMotorDirection();
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	33cc      	adds	r3, #204	; 0xcc
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fea8 	bl	800232e <_ZN7TMC220927enableInverseMotorDirectionEv>
		}
	}

	if (lastPosLinear < distance) {
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015e2:	f7ff fc7d 	bl	8000ee0 <__aeabi_fcmplt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <_ZN7RoboArm11Move2MotorsEff+0x150>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
		tmcd_linear.enableInverseMotorDirection();
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	33a4      	adds	r3, #164	; 0xa4
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fe9c 	bl	800232e <_ZN7TMC220927enableInverseMotorDirectionEv>
 80015f6:	e00b      	b.n	8001610 <_ZN7RoboArm11Move2MotorsEff+0x168>
	} else if (lastPosLinear > distance) {
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015fc:	f7ff fc8e 	bl	8000f1c <__aeabi_fcmpgt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <_ZN7RoboArm11Move2MotorsEff+0x168>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
		tmcd_linear.disableInverseMotorDirection();
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	33a4      	adds	r3, #164	; 0xa4
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fe9f 	bl	800234e <_ZN7TMC220928disableInverseMotorDirectionEv>
	}

	float actualPosDistance = abs(lastPosLinear - distance);
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001614:	f7ff f9bc 	bl	8000990 <__aeabi_fsub>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe69 	bl	80012f2 <_ZSt3absf>
 8001620:	6238      	str	r0, [r7, #32]

	//set microstepping
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 8001622:	493f      	ldr	r1, [pc, #252]	; (8001720 <_ZN7RoboArm11Move2MotorsEff+0x278>)
 8001624:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001626:	f7ff fabd 	bl	8000ba4 <__aeabi_fmul>
 800162a:	4603      	mov	r3, r0
 800162c:	493d      	ldr	r1, [pc, #244]	; (8001724 <_ZN7RoboArm11Move2MotorsEff+0x27c>)
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb6c 	bl	8000d0c <__aeabi_fdiv>
 8001634:	4603      	mov	r3, r0
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc7a 	bl	8000f30 <__aeabi_f2uiz>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	675a      	str	r2, [r3, #116]	; 0x74

	distPsteps = actualPosDistance * steps4OneMM; //кількість кроків для такої дистанції
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fa58 	bl	8000afc <__aeabi_i2f>
 800164c:	4603      	mov	r3, r0
 800164e:	6a39      	ldr	r1, [r7, #32]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff faa7 	bl	8000ba4 <__aeabi_fmul>
 8001656:	4603      	mov	r3, r0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fc69 	bl	8000f30 <__aeabi_f2uiz>
 800165e:	4602      	mov	r2, r0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	671a      	str	r2, [r3, #112]	; 0x70

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduce to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 30;
 8001664:	231e      	movs	r3, #30
 8001666:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72 - 1;
 8001668:	2347      	movs	r3, #71	; 0x47
 800166a:	61bb      	str	r3, [r7, #24]

	float delimiter = 1;
 800166c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001670:	617b      	str	r3, [r7, #20]
	float mnoj = 1;
 8001672:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001676:	613b      	str	r3, [r7, #16]

	if (anglePsteps >= distPsteps) {
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	429a      	cmp	r2, r3
 8001682:	d351      	bcc.n	8001728 <_ZN7RoboArm11Move2MotorsEff+0x280>

		htim1M1->Instance->PSC = psc;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1 / 2;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	0852      	lsrs	r2, r2, #1
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fa23 	bl	8000af4 <__aeabi_ui2f>
 80016ae:	4604      	mov	r4, r0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fa1d 	bl	8000af4 <__aeabi_ui2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4619      	mov	r1, r3
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff fb24 	bl	8000d0c <__aeabi_fdiv>
 80016c4:	4603      	mov	r3, r0
 80016c6:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 80016c8:	69f8      	ldr	r0, [r7, #28]
 80016ca:	f7ff fa13 	bl	8000af4 <__aeabi_ui2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	6979      	ldr	r1, [r7, #20]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fa66 	bl	8000ba4 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fe15 	bl	800130a <_ZSt4ceilf>
 80016e0:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	681c      	ldr	r4, [r3, #0]
 80016f2:	6938      	ldr	r0, [r7, #16]
 80016f4:	f7ff fc1c 	bl	8000f30 <__aeabi_f2uiz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 80016fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001700:	6938      	ldr	r0, [r7, #16]
 8001702:	f7ff fb03 	bl	8000d0c <__aeabi_fdiv>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	681c      	ldr	r4, [r3, #0]
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fc0d 	bl	8000f30 <__aeabi_f2uiz>
 8001716:	4603      	mov	r3, r0
 8001718:	63a3      	str	r3, [r4, #56]	; 0x38
 800171a:	e056      	b.n	80017ca <_ZN7RoboArm11Move2MotorsEff+0x322>
 800171c:	40768000 	.word	0x40768000
 8001720:	48480000 	.word	0x48480000
 8001724:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001730:	429a      	cmp	r2, r3
 8001732:	d24a      	bcs.n	80017ca <_ZN7RoboArm11Move2MotorsEff+0x322>

		htim2M2->Instance->PSC = psc;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	0852      	lsrs	r2, r2, #1
 8001752:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f9cb 	bl	8000af4 <__aeabi_ui2f>
 800175e:	4604      	mov	r4, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff f9c5 	bl	8000af4 <__aeabi_ui2f>
 800176a:	4603      	mov	r3, r0
 800176c:	4619      	mov	r1, r3
 800176e:	4620      	mov	r0, r4
 8001770:	f7ff facc 	bl	8000d0c <__aeabi_fdiv>
 8001774:	4603      	mov	r3, r0
 8001776:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 8001778:	69f8      	ldr	r0, [r7, #28]
 800177a:	f7ff f9bb 	bl	8000af4 <__aeabi_ui2f>
 800177e:	4603      	mov	r3, r0
 8001780:	6979      	ldr	r1, [r7, #20]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa0e 	bl	8000ba4 <__aeabi_fmul>
 8001788:	4603      	mov	r3, r0
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fdbd 	bl	800130a <_ZSt4ceilf>
 8001790:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	681c      	ldr	r4, [r3, #0]
 80017a2:	6938      	ldr	r0, [r7, #16]
 80017a4:	f7ff fbc4 	bl	8000f30 <__aeabi_f2uiz>
 80017a8:	4603      	mov	r3, r0
 80017aa:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 80017ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017b0:	6938      	ldr	r0, [r7, #16]
 80017b2:	f7ff faab 	bl	8000d0c <__aeabi_fdiv>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	681c      	ldr	r4, [r3, #0]
 80017c0:	4610      	mov	r0, r2
 80017c2:	f7ff fbb5 	bl	8000f30 <__aeabi_f2uiz>
 80017c6:	4603      	mov	r3, r0
 80017c8:	6363      	str	r3, [r4, #52]	; 0x34
	}

	stateMoveM1 = true;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	stateMoveM2 = true;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129

	SetEnable(1, true);
 80017da:	2201      	movs	r2, #1
 80017dc:	2101      	movs	r1, #1
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 fc6c 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2102      	movs	r1, #2
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 fc67 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 f80d 	bl	8005814 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2104      	movs	r1, #4
 8001800:	4618      	mov	r0, r3
 8001802:	f004 f807 	bl	8005814 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 ff38 	bl	8005680 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 ff33 	bl	8005680 <HAL_TIM_Base_Start_IT>

	return 0;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	373c      	adds	r7, #60	; 0x3c
 8001820:	46bd      	mov	sp, r7
 8001822:	bd90      	pop	{r4, r7, pc}

08001824 <_ZN7RoboArm14Set2StepMotorsEfifi>:

int RoboArm::Set2StepMotors(float stepLinT, int periodLinT, float stepAngleT,
		int periodAngleT) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
//	if (stepAngleT < 0) {
//		temp_val = -1.0*stepAngleT;
//	}


	anglePsteps=abs(stepAngleT);
 8001832:	6838      	ldr	r0, [r7, #0]
 8001834:	f7ff fd5d 	bl	80012f2 <_ZSt3absf>
 8001838:	4603      	mov	r3, r0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fb78 	bl	8000f30 <__aeabi_f2uiz>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	675a      	str	r2, [r3, #116]	; 0x74
	distPsteps=abs(stepLinT);
 8001846:	68b8      	ldr	r0, [r7, #8]
 8001848:	f7ff fd53 	bl	80012f2 <_ZSt3absf>
 800184c:	4603      	mov	r3, r0
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fb6e 	bl	8000f30 <__aeabi_f2uiz>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	671a      	str	r2, [r3, #112]	; 0x70

	uint32_t psc = 72 - 1;
 800185a:	2347      	movs	r3, #71	; 0x47
 800185c:	61fb      	str	r3, [r7, #28]

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f004 f871 	bl	800594c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2104      	movs	r1, #4
 8001870:	4618      	mov	r0, r3
 8001872:	f004 f86b 	bl	800594c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT (htim1M1);			// остановили прерывание таймеров
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 ff4c 	bl	8005718 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (htim2M2);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4618      	mov	r0, r3
 8001886:	f003 ff47 	bl	8005718 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 800188a:	2200      	movs	r2, #0
 800188c:	2101      	movs	r1, #1
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fc14 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 8001894:	2200      	movs	r2, #0
 8001896:	2102      	movs	r1, #2
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fc0f 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>

	float tempAngDir = 0, tempLinDir = 0;
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
	if (stepAngleT < 0) {
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	6838      	ldr	r0, [r7, #0]
 80018b0:	f7ff fb16 	bl	8000ee0 <__aeabi_fcmplt>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <_ZN7RoboArm14Set2StepMotorsEfifi+0xa2>
		tmcd_angle.enableInverseMotorDirection();
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	33cc      	adds	r3, #204	; 0xcc
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fd35 	bl	800232e <_ZN7TMC220927enableInverseMotorDirectionEv>
 80018c4:	e00c      	b.n	80018e0 <_ZN7RoboArm14Set2StepMotorsEfifi+0xbc>
//		tempAngDir = -1;
	} else if (stepAngleT > 0) {
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	6838      	ldr	r0, [r7, #0]
 80018cc:	f7ff fb26 	bl	8000f1c <__aeabi_fcmpgt>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <_ZN7RoboArm14Set2StepMotorsEfifi+0xbc>
		tmcd_angle.disableInverseMotorDirection();
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	33cc      	adds	r3, #204	; 0xcc
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fd37 	bl	800234e <_ZN7TMC220928disableInverseMotorDirectionEv>
//		tempAngDir = 1;
	}

	if (stepLinT < 0) {
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f7ff fafb 	bl	8000ee0 <__aeabi_fcmplt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <_ZN7RoboArm14Set2StepMotorsEfifi+0xd8>
		tmcd_linear.enableInverseMotorDirection();
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	33a4      	adds	r3, #164	; 0xa4
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fd1a 	bl	800232e <_ZN7TMC220927enableInverseMotorDirectionEv>
 80018fa:	e00c      	b.n	8001916 <_ZN7RoboArm14Set2StepMotorsEfifi+0xf2>
//		tempLinDir = -1;
	} else if (stepLinT > 0) {
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	68b8      	ldr	r0, [r7, #8]
 8001902:	f7ff fb0b 	bl	8000f1c <__aeabi_fcmpgt>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <_ZN7RoboArm14Set2StepMotorsEfifi+0xf2>
		tmcd_linear.disableInverseMotorDirection();
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	33a4      	adds	r3, #164	; 0xa4
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fd1c 	bl	800234e <_ZN7TMC220928disableInverseMotorDirectionEv>
//		tempLinDir = 1;
	}

	if (periodAngleT % 2 != 0) { periodAngleT += 1;}
 8001916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <_ZN7RoboArm14Set2StepMotorsEfifi+0x102>
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	3301      	adds	r3, #1
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
	if (periodLinT % 2 != 0) { periodLinT += 1;}
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <_ZN7RoboArm14Set2StepMotorsEfifi+0x112>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3301      	adds	r3, #1
 8001934:	607b      	str	r3, [r7, #4]

	htim1M1->Instance->PSC = psc;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
	htim1M1->Instance->ARR = periodAngleT;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1M1->Instance->CCR1 = periodAngleT / 2;
 800194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194c:	0fda      	lsrs	r2, r3, #31
 800194e:	4413      	add	r3, r2
 8001950:	105b      	asrs	r3, r3, #1
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	635a      	str	r2, [r3, #52]	; 0x34

	htim2M2->Instance->PSC = psc;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
	htim2M2->Instance->ARR = periodLinT;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
	htim2M2->Instance->CCR2 = periodLinT / 2;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	0fda      	lsrs	r2, r3, #31
 8001974:	4413      	add	r3, r2
 8001976:	105b      	asrs	r3, r3, #1
 8001978:	461a      	mov	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	639a      	str	r2, [r3, #56]	; 0x38

	State=ArmStepWaitMOVE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2202      	movs	r2, #2
 8001986:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137

	return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZN7RoboArm15Move2StepMotorsEv>:

int RoboArm::Move2StepMotors(){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	stateMoveM1 = true;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	stateMoveM2 = true;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129

	SetEnable(1, true);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2101      	movs	r1, #1
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fb83 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2102      	movs	r1, #2
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fb7e 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 ff24 	bl	8005814 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2104      	movs	r1, #4
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 ff1e 	bl	8005814 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fe4f 	bl	8005680 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fe4a 	bl	8005680 <HAL_TIM_Base_Start_IT>

	return 0;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_ZN7RoboArm13SetBuserStateEi>:

int RoboArm::SetBuserState(int State) {
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
	//State 1......9
	if (State > 0 && State < 10) {
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd24      	ble.n	8001a50 <_ZN7RoboArm13SetBuserStateEi+0x5a>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	dc21      	bgt.n	8001a50 <_ZN7RoboArm13SetBuserStateEi+0x5a>
		for (int t = 0; t <= State; t++) {
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e01a      	b.n	8001a48 <_ZN7RoboArm13SetBuserStateEi+0x52>
			for (int i = 0; i <= 200; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	e00e      	b.n	8001a36 <_ZN7RoboArm13SetBuserStateEi+0x40>
				HAL_GPIO_TogglePin(Buser_GPIO_Port_Ind, Buser_Pin_Ind);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001a22:	4619      	mov	r1, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	f002 fdb0 	bl	800458a <HAL_GPIO_TogglePin>
				HAL_Delay(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f002 fa1e 	bl	8003e6c <HAL_Delay>
			for (int i = 0; i <= 200; i++) {
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2bc8      	cmp	r3, #200	; 0xc8
 8001a3a:	dded      	ble.n	8001a18 <_ZN7RoboArm13SetBuserStateEi+0x22>
			}
			HAL_Delay(100);
 8001a3c:	2064      	movs	r0, #100	; 0x64
 8001a3e:	f002 fa15 	bl	8003e6c <HAL_Delay>
		for (int t = 0; t <= State; t++) {
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dde0      	ble.n	8001a12 <_ZN7RoboArm13SetBuserStateEi+0x1c>
		}
	}
	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_ZN7RoboArm15GetGripperStateEv>:
	posNowDistance = defaultDistanse;

	return 0;
}

int RoboArm::GetGripperState() {
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
	//EndCap1_Pin - зацеп зацеплен - ВЕРХНИЙ НАЖАт
	//EndCap2_Pin - зацеп расцеплен, можно двигать рукой - НИЖНИЙ

	GPIO_PinState pin_UP, pin_DOWN;

	pin_UP = HAL_GPIO_ReadPin(EndCap1_GPIO_PortG, EndCap1_PinG);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f002 fd5c 	bl	800452c <HAL_GPIO_ReadPin>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
	pin_DOWN = HAL_GPIO_ReadPin(EndCap2_GPIO_PortG, EndCap2_PinG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f002 fd51 	bl	800452c <HAL_GPIO_ReadPin>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	73bb      	strb	r3, [r7, #14]

	if (pin_UP == GPIO_PIN_SET && pin_DOWN == GPIO_PIN_RESET) {
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d104      	bne.n	8001a9e <_ZN7RoboArm15GetGripperStateEv+0x44>
 8001a94:	7bbb      	ldrb	r3, [r7, #14]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <_ZN7RoboArm15GetGripperStateEv+0x44>
		return 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e008      	b.n	8001ab0 <_ZN7RoboArm15GetGripperStateEv+0x56>
	} else if (pin_DOWN == GPIO_PIN_SET && pin_UP == GPIO_PIN_RESET) {
 8001a9e:	7bbb      	ldrb	r3, [r7, #14]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d104      	bne.n	8001aae <_ZN7RoboArm15GetGripperStateEv+0x54>
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <_ZN7RoboArm15GetGripperStateEv+0x54>
		return 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <_ZN7RoboArm15GetGripperStateEv+0x56>
	} else {
		return 3; //error
 8001aae:	2303      	movs	r3, #3
	}

}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>:

int RoboArm::SetSettGripper(GPIO_TypeDef *EndCap1_GPIO_PortT,
		uint16_t EndCap1_PinT, GPIO_TypeDef *EndCap2_GPIO_PortT,
		uint16_t EndCap2_PinT, GPIO_TypeDef *EndCap3_GPIO_PortT,
		uint16_t EndCap3_PinT, GPIO_TypeDef *EndCap4_GPIO_PortT,
		uint16_t EndCap4_PinT) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	80fb      	strh	r3, [r7, #6]

	EndCap1_GPIO_PortG = EndCap1_GPIO_PortT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	649a      	str	r2, [r3, #72]	; 0x48
	EndCap1_PinG = EndCap1_PinT;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	EndCap2_GPIO_PortG = EndCap2_GPIO_PortT;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	651a      	str	r2, [r3, #80]	; 0x50
	EndCap2_PinG = EndCap2_PinT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8b3a      	ldrh	r2, [r7, #24]
 8001ae0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	EndCap3_GPIO_PortG = EndCap3_GPIO_PortT;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	659a      	str	r2, [r3, #88]	; 0x58
	EndCap3_PinG = EndCap3_PinT;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8c3a      	ldrh	r2, [r7, #32]
 8001aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	EndCap4_GPIO_PortG = EndCap4_GPIO_PortT;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	661a      	str	r2, [r3, #96]	; 0x60
	EndCap4_PinG = EndCap4_PinT;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001afc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <_ZN7RoboArm10SetGripperEi>:

int RoboArm::SetGripper(int opcl) {
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]

	//Встановити захват
	//TODO додати перевірку чи точно зупинились мотори
	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 ff15 	bl	800594c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2104      	movs	r1, #4
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 ff0f 	bl	800594c <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fdf0 	bl	8005718 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fdeb 	bl	8005718 <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_2);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2104      	movs	r1, #4
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 feff 	bl	800594c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim3M3);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 fde0 	bl	8005718 <HAL_TIM_Base_Stop_IT>

	SetEnable(3, false);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2103      	movs	r1, #3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 faad 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>

	//Зупинили все, 1 та 2й на утриманні
	//Обираэмо напрям
	if (opcl == 1) {
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d108      	bne.n	8001b7a <_ZN7RoboArm10SetGripperEi+0x6e>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_SET);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b70:	2201      	movs	r2, #1
 8001b72:	4619      	mov	r1, r3
 8001b74:	f002 fcf1 	bl	800455a <HAL_GPIO_WritePin>
 8001b78:	e00a      	b.n	8001b90 <_ZN7RoboArm10SetGripperEi+0x84>
	} else if (opcl == 0) {
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <_ZN7RoboArm10SetGripperEi+0x84>
		HAL_GPIO_WritePin(Dir3_GPIO_Port_M3, Dir3_Pin_M3, GPIO_PIN_RESET);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f002 fce5 	bl	800455a <HAL_GPIO_WritePin>
	}

	//Підібрати кроки та швидкість
	float periodM3 = 30.00;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <_ZN7RoboArm10SetGripperEi+0xf0>)
 8001b92:	60fb      	str	r3, [r7, #12]
	uint32_t psc3 = 72 - 1;
 8001b94:	2347      	movs	r3, #71	; 0x47
 8001b96:	60bb      	str	r3, [r7, #8]
	htim3M3->Instance->PSC = psc3;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
	htim3M3->Instance->ARR = periodM3;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	681c      	ldr	r4, [r3, #0]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff f9c1 	bl	8000f30 <__aeabi_f2uiz>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3M3->Instance->CCR2 = periodM3 / 2;
 8001bb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff f8a8 	bl	8000d0c <__aeabi_fdiv>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	681c      	ldr	r4, [r3, #0]
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7ff f9b2 	bl	8000f30 <__aeabi_f2uiz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	63a3      	str	r3, [r4, #56]	; 0x38

	SetEnable(3, true);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fa71 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	HAL_TIM_PWM_Start(htim3M3, TIM_CHANNEL_2);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2104      	movs	r1, #4
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fe17 	bl	8005814 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim3M3);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fd48 	bl	8005680 <HAL_TIM_Base_Start_IT>
	return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd90      	pop	{r4, r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	41f00000 	.word	0x41f00000

08001c00 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::setPrintState(bool state) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8001c1a:	e003      	b.n	8001c24 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	}
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 8001c46:	2300      	movs	r3, #0
	}
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <_ZN7RoboArm17SetMicrosteps4AllEh>:

int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step) {
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	33cc      	adds	r3, #204	; 0xcc
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fae2 	bl	8002230 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	33f4      	adds	r3, #244	; 0xf4
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fadb 	bl	8002230 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	33a4      	adds	r3, #164	; 0xa4
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fad4 	bl	8002230 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8bba      	ldrh	r2, [r7, #28]
 8001cbc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ResolutionEncoders = ResolutionEncodersT;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return 0;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f7ff fa29 	bl	800114c <calculateAngle>
 8001cfa:	4603      	mov	r3, r0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZN7RoboArm14GetPosEncodersEh>:
	}
	pos = ang * distMax / 360.0;
	return pos;
}

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d002      	beq.n	8001d1c <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d017      	beq.n	8001d4a <_ZN7RoboArm14GetPosEncodersEh+0x46>
 8001d1a:	e02d      	b.n	8001d78 <_ZN7RoboArm14GetPosEncodersEh+0x74>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001d34:	f7ff f95a 	bl	8000fec <getPositionSPI>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				ResolutionEncoders);
		return posNowEnc1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d48:	e017      	b.n	8001d7a <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001d62:	f7ff f943 	bl	8000fec <getPositionSPI>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				ResolutionEncoders);
		return posNowEnc2;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d76:	e000      	b.n	8001d7a <_ZN7RoboArm14GetPosEncodersEh+0x76>
		break;
	default:
		return 1;
 8001d78:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <_ZN7RoboArm6GetLinEv>:

float RoboArm::GetLin() {
 8001d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001d92:	2102      	movs	r1, #2
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffb5 	bl	8001d04 <_ZN7RoboArm14GetPosEncodersEh>
 8001d9a:	6138      	str	r0, [r7, #16]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001d9c:	e004      	b.n	8001da8 <_ZN7RoboArm6GetLinEv+0x24>
		posnowT_2 = GetPosEncoders(2); //try again
 8001d9e:	2102      	movs	r1, #2
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ffaf 	bl	8001d04 <_ZN7RoboArm14GetPosEncodersEh>
 8001da6:	6138      	str	r0, [r7, #16]
	while (posnowT_2 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів, можливо йому не вистачає. Обмежено, щоб не завис, якщо енкодери впали зовсім
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d107      	bne.n	8001dc2 <_ZN7RoboArm6GetLinEv+0x3e>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	dc01      	bgt.n	8001dc2 <_ZN7RoboArm6GetLinEv+0x3e>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <_ZN7RoboArm6GetLinEv+0x40>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ea      	bne.n	8001d9e <_ZN7RoboArm6GetLinEv+0x1a>

//	float ang_pos = GetAngleEncoders(posnowT_2);
//	float pos_actual = GetLinEncoders(ang_pos);
//	float pos = pos_actual + defaultDistanse;

	float pos = -1.0;
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <_ZN7RoboArm6GetLinEv+0xec>)
 8001dca:	60fb      	str	r3, [r7, #12]
	float enc2mm = 16384.0 / (2.0 * 20.0 * 33.0 * 33.0 / (13.0 * 13.0)); //число одиниць енкодера на 1 мм лінійного руху
 8001dcc:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <_ZN7RoboArm6GetLinEv+0xf0>)
 8001dce:	60bb      	str	r3, [r7, #8]

	if (posnowT_2 <= 5000) {
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d812      	bhi.n	8001e00 <_ZN7RoboArm6GetLinEv+0x7c>
		//the motor is somewhere between 48mm and 124mm
//		posnowT_2 = posnowT_2 - 16384;
//		float temp = float(posnowT_2) - 16384.0;
		pos = defaultDistanse - float(posnowT_2) / enc2mm;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 8001de0:	6938      	ldr	r0, [r7, #16]
 8001de2:	f7fe fe87 	bl	8000af4 <__aeabi_ui2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff8e 	bl	8000d0c <__aeabi_fdiv>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7fe fdcb 	bl	8000990 <__aeabi_fsub>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e030      	b.n	8001e62 <_ZN7RoboArm6GetLinEv+0xde>
//		float distPsteps = (angleEncoder * 6.4516129 * 200 * 128) / 360;  //Кроки із кута
//
////		pos = defaultDistanse - distPsteps/steps4OneMM;
//		pos = distPsteps/steps4OneMM;
	} else { //if (posnowT_2 <= 9000){ //приблизноб по факту десь +- 8963
		pos = defaultDistanse + (16384.0 - float(posnowT_2)) / enc2mm;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb04 	bl	8000414 <__aeabi_f2d>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
 8001e10:	6938      	ldr	r0, [r7, #16]
 8001e12:	f7fe fe6f 	bl	8000af4 <__aeabi_ui2f>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fafb 	bl	8000414 <__aeabi_f2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	4914      	ldr	r1, [pc, #80]	; (8001e78 <_ZN7RoboArm6GetLinEv+0xf4>)
 8001e28:	f7fe f994 	bl	8000154 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4690      	mov	r8, r2
 8001e32:	4699      	mov	r9, r3
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f7fe faed 	bl	8000414 <__aeabi_f2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4640      	mov	r0, r8
 8001e40:	4649      	mov	r1, r9
 8001e42:	f7fe fc69 	bl	8000718 <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe f983 	bl	8000158 <__adddf3>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fd45 	bl	80008e8 <__aeabi_d2f>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60fb      	str	r3, [r7, #12]
//	float pos = distPsteps/steps4OneMM + defaultDistanse;
//
//	if (pos > distMax)
//		pos -= distMax;

	return pos;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e6e:	bf00      	nop
 8001e70:	bf800000 	.word	0xbf800000
 8001e74:	427e42ab 	.word	0x427e42ab
 8001e78:	40d00000 	.word	0x40d00000

08001e7c <_ZN7RoboArm6GetAngEv>:

float RoboArm::GetAng() {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ff3a 	bl	8001d04 <_ZN7RoboArm14GetPosEncodersEh>
 8001e90:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 8001e92:	e004      	b.n	8001e9e <_ZN7RoboArm6GetAngEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001e94:	2101      	movs	r1, #1
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ff34 	bl	8001d04 <_ZN7RoboArm14GetPosEncodersEh>
 8001e9c:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 6) // +1.2 вдвічі збільшено кількість разів
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d107      	bne.n	8001eb8 <_ZN7RoboArm6GetAngEv+0x3c>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	dc01      	bgt.n	8001eb8 <_ZN7RoboArm6GetAngEv+0x3c>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <_ZN7RoboArm6GetAngEv+0x3e>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ea      	bne.n	8001e94 <_ZN7RoboArm6GetAngEv+0x18>

//	if (posnowT_1 == 0xFFFF) {
//			return -1;
//	}

	float ang_actual = GetAngleEncoders(posnowT_1);
 8001ebe:	6939      	ldr	r1, [r7, #16]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff0c 	bl	8001cde <_ZN7RoboArm16GetAngleEncodersEm>
 8001ec6:	60b8      	str	r0, [r7, #8]
	float ang = ang_actual + defaultAngle; //arm.ShiftZeroAng(ang_actual);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001ece:	4619      	mov	r1, r3
 8001ed0:	68b8      	ldr	r0, [r7, #8]
 8001ed2:	f7fe fd5f 	bl	8000994 <__addsf3>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	60fb      	str	r3, [r7, #12]
	if (ang > 360.0)
 8001eda:	4909      	ldr	r1, [pc, #36]	; (8001f00 <_ZN7RoboArm6GetAngEv+0x84>)
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff f81d 	bl	8000f1c <__aeabi_fcmpgt>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <_ZN7RoboArm6GetAngEv+0x78>
		ang -= 360.0;
 8001ee8:	4905      	ldr	r1, [pc, #20]	; (8001f00 <_ZN7RoboArm6GetAngEv+0x84>)
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7fe fd50 	bl	8000990 <__aeabi_fsub>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60fb      	str	r3, [r7, #12]
	return ang;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	43b40000 	.word	0x43b40000

08001f04 <_ZN7RoboArm15SetZeroEncodersEv>:

int RoboArm::SetZeroEncoders() {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	HAL_Delay(300);
 8001f0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f10:	f001 ffac 	bl	8003e6c <HAL_Delay>
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f2c:	f7ff f85e 	bl	8000fec <getPositionSPI>
			ResolutionEncoders);
	getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f48:	f7ff f850 	bl	8000fec <getPositionSPI>
			ResolutionEncoders);
	//	resetAMT22();
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f7ff f8d2 	bl	8001108 <setZeroSPI>
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff f8c6 	bl	8001108 <setZeroSPI>
	HAL_Delay(250);
 8001f7c:	20fa      	movs	r0, #250	; 0xfa
 8001f7e:	f001 ff75 	bl	8003e6c <HAL_Delay>
	return 0;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>:
		uint16_t Dir2_Pin_M2T, GPIO_TypeDef *Dir3_GPIO_Port_M3T,
		uint16_t Dir3_Pin_M3T, GPIO_TypeDef *En1_GPIO_Port_M1T,
		uint16_t En1_Pin_M1T, GPIO_TypeDef *En2_GPIO_Port_M2T,
		uint16_t En2_Pin_M2T, GPIO_TypeDef *En3_GPIO_Port_M3T,
		uint16_t En3_Pin_M3T, GPIO_TypeDef *Buser_GPIO_Port_IndT,
		uint16_t Buser_Pin_IndT) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
	htim2M2 = &htim2;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	60da      	str	r2, [r3, #12]
	htim3M3 = &htim3;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	611a      	str	r2, [r3, #16]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	619a      	str	r2, [r3, #24]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8c3a      	ldrh	r2, [r7, #32]
 8001fb6:	839a      	strh	r2, [r3, #28]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	621a      	str	r2, [r3, #32]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fc2:	849a      	strh	r2, [r3, #36]	; 0x24
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001fce:	859a      	strh	r2, [r3, #44]	; 0x2c

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
	En1_Pin_M1 = En1_Pin_M1T;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001fda:	869a      	strh	r2, [r3, #52]	; 0x34
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
	En2_Pin_M2 = En2_Pin_M2T;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
	En3_Pin_M3 = En3_Pin_M3T;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
	En3_Pin_M3 = En3_Pin_M3T;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buser_GPIO_Port_Ind = Buser_GPIO_Port_IndT;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800200e:	669a      	str	r2, [r3, #104]	; 0x68
	Buser_Pin_Ind = Buser_Pin_IndT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002016:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	SetEnable(1, true);
 800201a:	2201      	movs	r2, #1
 800201c:	2101      	movs	r1, #1
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f84c 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8002024:	2201      	movs	r2, #1
 8002026:	2102      	movs	r1, #2
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f847 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 800202e:	2201      	movs	r2, #1
 8002030:	2103      	movs	r1, #3
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f842 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800203e:	2300      	movs	r3, #0
 8002040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	f000 f88e 	bl	8002166 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_2);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8002050:	2302      	movs	r3, #2
 8002052:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	f000 f885 	bl	8002166 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_1);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8002062:	2301      	movs	r3, #1
 8002064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	f000 f87c 	bl	8002166 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	33cc      	adds	r3, #204	; 0xcc
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f88c 	bl	8002190 <_ZN7TMC22096enableEv>

//	tmcd_angle.disableAutomaticCurrentScaling();
//	tmcd_angle.disableAutomaticGradientAdaptation();

	tmcd_gripper.enable();
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	33f4      	adds	r3, #244	; 0xf4
 800207c:	4618      	mov	r0, r3
 800207e:	f000 f887 	bl	8002190 <_ZN7TMC22096enableEv>

//	tmcd_gripper.disableAutomaticCurrentScaling();
//	tmcd_gripper.disableAutomaticGradientAdaptation();

	tmcd_linear.enable();
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	33a4      	adds	r3, #164	; 0xa4
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f882 	bl	8002190 <_ZN7TMC22096enableEv>

//	tmcd_linear.disableAutomaticCurrentScaling();
//	tmcd_linear.disableAutomaticGradientAdaptation();

	SetMicrosteps4All(7);
 800208c:	2107      	movs	r1, #7
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff fddf 	bl	8001c52 <_ZN7RoboArm17SetMicrosteps4AllEh>
//	SetMicrosteps4All(4);

	SetEnable(1, false);
 8002094:	2200      	movs	r2, #0
 8002096:	2101      	movs	r1, #1
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f80f 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 800209e:	2200      	movs	r2, #0
 80020a0:	2102      	movs	r1, #2
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f80a 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, false);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2103      	movs	r1, #3
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f805 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>

	return 0;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e001      	b.n	80020dc <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d108      	bne.n	80020f4 <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f002 fa34 	bl	800455a <HAL_GPIO_WritePin>
 80020f2:	e017      	b.n	8002124 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 2) {
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d108      	bne.n	800210c <_ZN7RoboArm9SetEnableEtb+0x50>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	4619      	mov	r1, r3
 8002106:	f002 fa28 	bl	800455a <HAL_GPIO_WritePin>
 800210a:	e00b      	b.n	8002124 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 3) {
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d108      	bne.n	8002124 <_ZN7RoboArm9SetEnableEtb+0x68>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	4619      	mov	r1, r3
 8002120:	f002 fa1b 	bl	800455a <HAL_GPIO_WritePin>
	}

	return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002144:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2203      	movs	r2, #3
 800214a:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002152:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	761a      	strb	r2, [r3, #24]
}
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	461a      	mov	r2, r3
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f8f4 	bl	800236e <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <_ZN7TMC22096enableEv>:
//
////  pinMode(hardware_enable_pin_, OUTPUT);
////  digitalWrite(hardware_enable_pin_, HIGH);
//}
//
void TMC2209::enable() {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0f      	blt.n	80021c2 <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2120      	movs	r1, #32
 80021a6:	4810      	ldr	r0, [pc, #64]	; (80021e8 <_ZN7TMC22096enableEv+0x58>)
 80021a8:	f002 f9d7 	bl	800455a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2101      	movs	r1, #1
 80021b0:	480d      	ldr	r0, [pc, #52]	; (80021e8 <_ZN7TMC22096enableEv+0x58>)
 80021b2:	f002 f9d2 	bl	800455a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021bc:	480b      	ldr	r0, [pc, #44]	; (80021ec <_ZN7TMC22096enableEv+0x5c>)
 80021be:	f002 f9cc 	bl	800455a <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	b2d9      	uxtb	r1, r3
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	7f13      	ldrb	r3, [r2, #28]
 80021d2:	f361 0303 	bfi	r3, r1, #0, #4
 80021d6:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fa67 	bl	80026ac <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40010800 	.word	0x40010800
 80021ec:	40010c00 	.word	0x40010c00

080021f0 <_ZN7TMC22099constrainEttt>:
	}
	chopper_config_.toff = TOFF_DISABLE;
	writeStoredChopperConfig();
}
//
uint16_t TMC2209::constrain(uint16_t x, uint16_t y, uint16_t z) {
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
	if (x < y) {
 800220a:	897a      	ldrh	r2, [r7, #10]
 800220c:	893b      	ldrh	r3, [r7, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	d201      	bcs.n	8002216 <_ZN7TMC22099constrainEttt+0x26>
		return y;
 8002212:	893b      	ldrh	r3, [r7, #8]
 8002214:	e006      	b.n	8002224 <_ZN7TMC22099constrainEttt+0x34>
	} else if (x > z) {
 8002216:	897a      	ldrh	r2, [r7, #10]
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	429a      	cmp	r2, r3
 800221c:	d901      	bls.n	8002222 <_ZN7TMC22099constrainEttt+0x32>
		return z;
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	e000      	b.n	8002224 <_ZN7TMC22099constrainEttt+0x34>
	} else {
		return x;
 8002222:	897b      	ldrh	r3, [r7, #10]
	}
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
	...

08002230 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
//		++exponent;
//	}
//	setMicrostepsPerStepPowerOfTwo(exponent);
//}
//
void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b07      	cmp	r3, #7
 8002240:	d84a      	bhi.n	80022d8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 8002242:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	08002269 	.word	0x08002269
 800224c:	08002277 	.word	0x08002277
 8002250:	08002285 	.word	0x08002285
 8002254:	08002293 	.word	0x08002293
 8002258:	080022a1 	.word	0x080022a1
 800225c:	080022af 	.word	0x080022af
 8002260:	080022bd 	.word	0x080022bd
 8002264:	080022cb 	.word	0x080022cb
	case 0: {
		chopper_config_.mres = MRES_001;
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	7fd3      	ldrb	r3, [r2, #31]
 800226c:	2108      	movs	r1, #8
 800226e:	f361 0303 	bfi	r3, r1, #0, #4
 8002272:	77d3      	strb	r3, [r2, #31]
		break;
 8002274:	e036      	b.n	80022e4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	7fd3      	ldrb	r3, [r2, #31]
 800227a:	2107      	movs	r1, #7
 800227c:	f361 0303 	bfi	r3, r1, #0, #4
 8002280:	77d3      	strb	r3, [r2, #31]
		break;
 8002282:	e02f      	b.n	80022e4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	7fd3      	ldrb	r3, [r2, #31]
 8002288:	2106      	movs	r1, #6
 800228a:	f361 0303 	bfi	r3, r1, #0, #4
 800228e:	77d3      	strb	r3, [r2, #31]
		break;
 8002290:	e028      	b.n	80022e4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	7fd3      	ldrb	r3, [r2, #31]
 8002296:	2105      	movs	r1, #5
 8002298:	f361 0303 	bfi	r3, r1, #0, #4
 800229c:	77d3      	strb	r3, [r2, #31]
		break;
 800229e:	e021      	b.n	80022e4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	7fd3      	ldrb	r3, [r2, #31]
 80022a4:	2104      	movs	r1, #4
 80022a6:	f361 0303 	bfi	r3, r1, #0, #4
 80022aa:	77d3      	strb	r3, [r2, #31]
		break;
 80022ac:	e01a      	b.n	80022e4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	7fd3      	ldrb	r3, [r2, #31]
 80022b2:	2103      	movs	r1, #3
 80022b4:	f361 0303 	bfi	r3, r1, #0, #4
 80022b8:	77d3      	strb	r3, [r2, #31]
		break;
 80022ba:	e013      	b.n	80022e4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	7fd3      	ldrb	r3, [r2, #31]
 80022c0:	2102      	movs	r1, #2
 80022c2:	f361 0303 	bfi	r3, r1, #0, #4
 80022c6:	77d3      	strb	r3, [r2, #31]
		break;
 80022c8:	e00c      	b.n	80022e4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	7fd3      	ldrb	r3, [r2, #31]
 80022ce:	2101      	movs	r1, #1
 80022d0:	f361 0303 	bfi	r3, r1, #0, #4
 80022d4:	77d3      	strb	r3, [r2, #31]
		break;
 80022d6:	e005      	b.n	80022e4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	7fd3      	ldrb	r3, [r2, #31]
 80022dc:	f36f 0303 	bfc	r3, #0, #4
 80022e0:	77d3      	strb	r3, [r2, #31]
		break;
 80022e2:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f9e1 	bl	80026ac <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop

080022f4 <_ZN7TMC220913setRunCurrentEh>:

void TMC2209::setRunCurrent(uint8_t percent) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
	uint8_t run_current = percentToCurrentSetting(percent);
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f953 	bl	80025b0 <_ZN7TMC220923percentToCurrentSettingEh>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]
	driver_current_.irun = run_current;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	b2d9      	uxtb	r1, r3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	7c53      	ldrb	r3, [r2, #17]
 800231a:	f361 0304 	bfi	r3, r1, #0, #5
 800231e:	7453      	strb	r3, [r2, #17]
	writeStoredDriverCurrent();
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f997 	bl	8002654 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_ZN7TMC220927enableInverseMotorDirectionEv>:
//	driver_current_.ihold = hold_current;
//	driver_current_.iholddelay = hold_delay;
//	writeStoredDriverCurrent();
//}
//
void TMC2209::enableInverseMotorDirection() {
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	7b13      	ldrb	r3, [r2, #12]
 800233a:	f043 0308 	orr.w	r3, r3, #8
 800233e:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f978 	bl	8002636 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	7b13      	ldrb	r3, [r2, #12]
 800235a:	f36f 03c3 	bfc	r3, #3, #1
 800235e:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f968 	bl	8002636 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZN7TMC220910initializeElNS_13SerialAddressE>:
//	return read(ADDRESS_MSCNT);
//}
//
//// private
///* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	4613      	mov	r3, r2
 800237a:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	4619      	mov	r1, r3
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f80b 	bl	80023a2 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f82f 	bl	80023f0 <_ZN7TMC220922setRegistersToDefaultsEv>

	//minimizeMotorCurrent();
	setRunCurrent(70);
 8002392:	2146      	movs	r1, #70	; 0x46
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff ffad 	bl	80022f4 <_ZN7TMC220913setRunCurrentEh>
//	disable();
//	disableAutomaticCurrentScaling();
//	disableAutomaticGradientAdaptation();
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:
//
////	  tmcuart->RxXferCount = 0;
//
//}
//
void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	7b13      	ldrb	r3, [r2, #12]
 80023be:	f36f 0300 	bfc	r3, #0, #1
 80023c2:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	7b13      	ldrb	r3, [r2, #12]
 80023c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023cc:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	7b13      	ldrb	r3, [r2, #12]
 80023d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d6:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	7b53      	ldrb	r3, [r2, #13]
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f927 	bl	8002636 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	7c13      	ldrb	r3, [r2, #16]
 8002402:	2110      	movs	r1, #16
 8002404:	f361 0304 	bfi	r3, r1, #0, #5
 8002408:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	7c53      	ldrb	r3, [r2, #17]
 800240e:	f043 031f 	orr.w	r3, r3, #31
 8002412:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	7c93      	ldrb	r3, [r2, #18]
 8002418:	2101      	movs	r1, #1
 800241a:	f361 0303 	bfi	r3, r1, #0, #4
 800241e:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	461a      	mov	r2, r3
 8002426:	2110      	movs	r1, #16
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f885 	bl	8002538 <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 8002432:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	69d3      	ldr	r3, [r2, #28]
 8002438:	2102      	movs	r1, #2
 800243a:	f361 33d0 	bfi	r3, r1, #15, #2
 800243e:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	8b93      	ldrh	r3, [r2, #28]
 8002444:	f36f 13ca 	bfc	r3, #7, #4
 8002448:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	7f13      	ldrb	r3, [r2, #28]
 800244e:	2105      	movs	r1, #5
 8002450:	f361 1306 	bfi	r3, r1, #4, #3
 8002454:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	7f13      	ldrb	r3, [r2, #28]
 800245a:	2103      	movs	r1, #3
 800245c:	f361 0303 	bfi	r3, r1, #0, #4
 8002460:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	461a      	mov	r2, r3
 8002468:	216c      	movs	r1, #108	; 0x6c
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f864 	bl	8002538 <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	461a      	mov	r2, r3
 800247c:	2170      	movs	r1, #112	; 0x70
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f85a 	bl	8002538 <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	461a      	mov	r2, r3
 8002490:	2142      	movs	r1, #66	; 0x42
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f850 	bl	8002538 <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002498:	2214      	movs	r2, #20
 800249a:	2111      	movs	r1, #17
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f84b 	bl	8002538 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2113      	movs	r1, #19
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f846 	bl	8002538 <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2122      	movs	r1, #34	; 0x22
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f841 	bl	8002538 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2114      	movs	r1, #20
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f83c 	bl	8002538 <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2140      	movs	r1, #64	; 0x40
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f837 	bl	8002538 <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2142      	movs	r1, #66	; 0x42
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f832 	bl	8002538 <_ZN7TMC22095writeEhm>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	10000053 	.word	0x10000053
 80024e0:	c10d0024 	.word	0xc10d0024

080024e4 <_ZN7TMC220911reverseDataEm>:
//	driver_current_.irun = CURRENT_SETTING_MIN;
//	driver_current_.ihold = CURRENT_SETTING_MIN;
//	writeStoredDriverCurrent();
//}
//
uint32_t TMC2209::reverseData(uint32_t data) {
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 80024f2:	2300      	movs	r3, #0
 80024f4:	72fb      	strb	r3, [r7, #11]
 80024f6:	e016      	b.n	8002526 <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 80024f8:	7afb      	ldrb	r3, [r7, #11]
 80024fa:	f1c3 0303 	rsb	r3, r3, #3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8002504:	7afb      	ldrb	r3, [r7, #11]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800250a:	7abb      	ldrb	r3, [r7, #10]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	b2da      	uxtb	r2, r3
 8002514:	7a7b      	ldrb	r3, [r7, #9]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002520:	7afb      	ldrb	r3, [r7, #11]
 8002522:	3301      	adds	r3, #1
 8002524:	72fb      	strb	r3, [r7, #11]
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d9e5      	bls.n	80024f8 <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 800252c:	68fb      	ldr	r3, [r7, #12]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <_ZN7TMC22095writeEhm>:
//	for (uint8_t i = 0; i < datagram_size; ++i) {
//		byte = serialRead();
//	}*/
//}
//
void TMC2209::write(uint8_t register_address, uint32_t data) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	460b      	mov	r3, r1
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8002552:	7c3b      	ldrb	r3, [r7, #16]
 8002554:	2205      	movs	r2, #5
 8002556:	f362 0303 	bfi	r3, r2, #0, #4
 800255a:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	791b      	ldrb	r3, [r3, #4]
 8002560:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002568:	b2da      	uxtb	r2, r3
 800256a:	7cbb      	ldrb	r3, [r7, #18]
 800256c:	f362 0306 	bfi	r3, r2, #0, #7
 8002570:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002572:	7cbb      	ldrb	r3, [r7, #18]
 8002574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002578:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff ffb1 	bl	80024e4 <_ZN7TMC220911reverseDataEm>
 8002582:	4603      	mov	r3, r0
 8002584:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	2208      	movs	r2, #8
 800258e:	4619      	mov	r1, r3
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f89a 	bl	80026ca <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 8002596:	4603      	mov	r3, r0
 8002598:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	2208      	movs	r2, #8
 80025a0:	4619      	mov	r1, r3
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f8e0 	bl	8002768 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZN7TMC220923percentToCurrentSettingEh>:
//	}
//
//	return reverseData(read_reply_datagram.data);
//}
//
uint8_t TMC2209::percentToCurrentSetting(uint8_t percent) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
	uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	b299      	uxth	r1, r3
 80025c0:	2364      	movs	r3, #100	; 0x64
 80025c2:	2200      	movs	r2, #0
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff fe13 	bl	80021f0 <_ZN7TMC22099constrainEttt>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]
	uint8_t current_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX,
 80025ce:	7bf9      	ldrb	r1, [r7, #15]
 80025d0:	231f      	movs	r3, #31
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	2300      	movs	r3, #0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2364      	movs	r3, #100	; 0x64
 80025da:	2200      	movs	r2, #0
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f807 	bl	80025f0 <_ZN7TMC22093mapEhhhhh>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73bb      	strb	r3, [r7, #14]
			CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
	return current_setting;
 80025e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_ZN7TMC22093mapEhhhhh>:
//	uint8_t percent = map(current_setting, CURRENT_SETTING_MIN,
//			CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
uint8_t TMC2209::map(uint8_t x, uint8_t in_min,  uint8_t in_max, uint8_t out_min, uint8_t out_max){
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	70fb      	strb	r3, [r7, #3]
 8002602:	460b      	mov	r3, r1
 8002604:	70bb      	strb	r3, [r7, #2]
 8002606:	4613      	mov	r3, r2
 8002608:	707b      	strb	r3, [r7, #1]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	78bb      	ldrb	r3, [r7, #2]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	7d39      	ldrb	r1, [r7, #20]
 8002612:	7c3a      	ldrb	r2, [r7, #16]
 8002614:	1a8a      	subs	r2, r1, r2
 8002616:	fb03 f202 	mul.w	r2, r3, r2
 800261a:	7879      	ldrb	r1, [r7, #1]
 800261c:	78bb      	ldrb	r3, [r7, #2]
 800261e:	1acb      	subs	r3, r1, r3
 8002620:	fb92 f3f3 	sdiv	r3, r2, r3
 8002624:	b2da      	uxtb	r2, r3
 8002626:	7c3b      	ldrb	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	b2db      	uxtb	r3, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <_ZN7TMC220923writeStoredGlobalConfigEv>:
//uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
//	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
//	return percent;
//}
//
void TMC2209::writeStoredGlobalConfig() {
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	461a      	mov	r2, r3
 8002644:	2100      	movs	r1, #0
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff76 	bl	8002538 <_ZN7TMC22095writeEhm>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_ZN7TMC220924writeStoredDriverCurrentEv>:
//
//uint32_t TMC2209::readGlobalConfigBytes() {
//	return read(ADDRESS_GCONF);
//}
//
void TMC2209::writeStoredDriverCurrent() {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	461a      	mov	r2, r3
 8002662:	2110      	movs	r1, #16
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff67 	bl	8002538 <_ZN7TMC22095writeEhm>

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7c5b      	ldrb	r3, [r3, #17]
 800266e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b13      	cmp	r3, #19
 8002676:	d905      	bls.n	8002684 <_ZN7TMC220924writeStoredDriverCurrentEv+0x30>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	7d53      	ldrb	r3, [r2, #21]
 800267c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002680:	7553      	strb	r3, [r2, #21]
 8002682:	e004      	b.n	800268e <_ZN7TMC220924writeStoredDriverCurrentEv+0x3a>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	7d53      	ldrb	r3, [r2, #21]
 8002688:	f36f 13c7 	bfc	r3, #7, #1
 800268c:	7553      	strb	r3, [r2, #21]
	}
	if (cool_step_enabled_) {
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7e1b      	ldrb	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <_ZN7TMC220924writeStoredDriverCurrentEv+0x50>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	461a      	mov	r2, r3
 800269c:	2142      	movs	r1, #66	; 0x42
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff4a 	bl	8002538 <_ZN7TMC22095writeEhm>
	}
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_ZN7TMC220924writeStoredChopperConfigEv>:
//
void TMC2209::writeStoredChopperConfig() {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	461a      	mov	r2, r3
 80026ba:	216c      	movs	r1, #108	; 0x6c
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff3b 	bl	8002538 <_ZN7TMC22095writeEhm>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 80026ca:	b4f0      	push	{r4, r5, r6, r7}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80026dc:	2300      	movs	r3, #0
 80026de:	757b      	strb	r3, [r7, #21]
 80026e0:	e037      	b.n	8002752 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	7d79      	ldrb	r1, [r7, #21]
 80026ea:	00c9      	lsls	r1, r1, #3
 80026ec:	f1c1 0620 	rsb	r6, r1, #32
 80026f0:	f1a1 0020 	sub.w	r0, r1, #32
 80026f4:	fa22 f401 	lsr.w	r4, r2, r1
 80026f8:	fa03 f606 	lsl.w	r6, r3, r6
 80026fc:	4334      	orrs	r4, r6
 80026fe:	fa23 f000 	lsr.w	r0, r3, r0
 8002702:	4304      	orrs	r4, r0
 8002704:	fa23 f501 	lsr.w	r5, r3, r1
 8002708:	4623      	mov	r3, r4
 800270a:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 800270c:	2300      	movs	r3, #0
 800270e:	753b      	strb	r3, [r7, #20]
 8002710:	e019      	b.n	8002746 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	09db      	lsrs	r3, r3, #7
 8002716:	b2da      	uxtb	r2, r3
 8002718:	7dbb      	ldrb	r3, [r7, #22]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	429a      	cmp	r2, r3
 8002722:	d007      	beq.n	8002734 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	b25b      	sxtb	r3, r3
 800272a:	f083 0307 	eor.w	r3, r3, #7
 800272e:	b25b      	sxtb	r3, r3
 8002730:	75fb      	strb	r3, [r7, #23]
 8002732:	e002      	b.n	800273a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 800273a:	7dbb      	ldrb	r3, [r7, #22]
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002740:	7d3b      	ldrb	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	753b      	strb	r3, [r7, #20]
 8002746:	7d3b      	ldrb	r3, [r7, #20]
 8002748:	2b07      	cmp	r3, #7
 800274a:	d9e2      	bls.n	8002712 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 800274c:	7d7b      	ldrb	r3, [r7, #21]
 800274e:	3301      	adds	r3, #1
 8002750:	757b      	strb	r3, [r7, #21]
 8002752:	7d7a      	ldrb	r2, [r7, #21]
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	3b01      	subs	r3, #1
 8002758:	429a      	cmp	r2, r3
 800275a:	dbc2      	blt.n	80026e2 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 800275c:	7dfb      	ldrb	r3, [r7, #23]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bcf0      	pop	{r4, r5, r6, r7}
 8002766:	4770      	bx	lr

08002768 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 f9ee 	bl	8006b5c <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6898      	ldr	r0, [r3, #8]
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	b29a      	uxth	r2, r3
 8002788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	f003 fe96 	bl	80064be <HAL_UART_Transmit>
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b094      	sub	sp, #80	; 0x50
 80027a0:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027a2:	f001 fb01 	bl	8003da8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027a6:	f000 fa13 	bl	8002bd0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80027aa:	f000 fc63 	bl	8003074 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80027ae:	f000 fc05 	bl	8002fbc <_ZL19MX_USART1_UART_Initv>
	MX_TIM1_Init();
 80027b2:	f000 fa9b 	bl	8002cec <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 80027b6:	f000 fb31 	bl	8002e1c <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 80027ba:	f000 fb97 	bl	8002eec <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 80027be:	f000 fc2b 	bl	8003018 <_ZL19MX_USART2_UART_Initv>
	MX_SPI1_Init();
 80027c2:	f000 fa57 	bl	8002c74 <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim1);
 80027c6:	48a2      	ldr	r0, [pc, #648]	; (8002a50 <main+0x2b4>)
 80027c8:	f002 ff02 	bl	80055d0 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 80027cc:	48a1      	ldr	r0, [pc, #644]	; (8002a54 <main+0x2b8>)
 80027ce:	f002 feff 	bl	80055d0 <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2, htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 80027d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d6:	930e      	str	r3, [sp, #56]	; 0x38
 80027d8:	4b9f      	ldr	r3, [pc, #636]	; (8002a58 <main+0x2bc>)
 80027da:	930d      	str	r3, [sp, #52]	; 0x34
 80027dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e0:	930c      	str	r3, [sp, #48]	; 0x30
 80027e2:	4b9e      	ldr	r3, [pc, #632]	; (8002a5c <main+0x2c0>)
 80027e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80027e6:	2301      	movs	r3, #1
 80027e8:	930a      	str	r3, [sp, #40]	; 0x28
 80027ea:	4b9b      	ldr	r3, [pc, #620]	; (8002a58 <main+0x2bc>)
 80027ec:	9309      	str	r3, [sp, #36]	; 0x24
 80027ee:	2320      	movs	r3, #32
 80027f0:	9308      	str	r3, [sp, #32]
 80027f2:	4b99      	ldr	r3, [pc, #612]	; (8002a58 <main+0x2bc>)
 80027f4:	9307      	str	r3, [sp, #28]
 80027f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fa:	9306      	str	r3, [sp, #24]
 80027fc:	4b97      	ldr	r3, [pc, #604]	; (8002a5c <main+0x2c0>)
 80027fe:	9305      	str	r3, [sp, #20]
 8002800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002804:	9304      	str	r3, [sp, #16]
 8002806:	4b95      	ldr	r3, [pc, #596]	; (8002a5c <main+0x2c0>)
 8002808:	9303      	str	r3, [sp, #12]
 800280a:	2340      	movs	r3, #64	; 0x40
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <main+0x2bc>)
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	4b93      	ldr	r3, [pc, #588]	; (8002a60 <main+0x2c4>)
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4b8f      	ldr	r3, [pc, #572]	; (8002a54 <main+0x2b8>)
 8002818:	4a8d      	ldr	r2, [pc, #564]	; (8002a50 <main+0x2b4>)
 800281a:	4992      	ldr	r1, [pc, #584]	; (8002a64 <main+0x2c8>)
 800281c:	4892      	ldr	r0, [pc, #584]	; (8002a68 <main+0x2cc>)
 800281e:	f7ff fbb5 	bl	8001f8c <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_tS5_t>
	Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
	En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin,
	Buser_GPIO_Port, Buser_Pin);
	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 8002822:	230e      	movs	r3, #14
 8002824:	9302      	str	r3, [sp, #8]
 8002826:	2302      	movs	r3, #2
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	4b8c      	ldr	r3, [pc, #560]	; (8002a5c <main+0x2c0>)
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <main+0x2c0>)
 8002832:	498e      	ldr	r1, [pc, #568]	; (8002a6c <main+0x2d0>)
 8002834:	488c      	ldr	r0, [pc, #560]	; (8002a68 <main+0x2cc>)
 8002836:	f7ff fa2c 	bl	8001c92 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
			14);

	//Додано функція
	arm.SetSettGripper(EndCap1_GPIO_Port, EndCap1_Pin, EndCap2_GPIO_Port,
 800283a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800283e:	9304      	str	r3, [sp, #16]
 8002840:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <main+0x2bc>)
 8002842:	9303      	str	r3, [sp, #12]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	9302      	str	r3, [sp, #8]
 8002848:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <main+0x2c0>)
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <main+0x2c0>)
 8002854:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002858:	4980      	ldr	r1, [pc, #512]	; (8002a5c <main+0x2c0>)
 800285a:	4883      	ldr	r0, [pc, #524]	; (8002a68 <main+0x2cc>)
 800285c:	f7ff f92c 	bl	8001ab8 <_ZN7RoboArm14SetSettGripperEP12GPIO_TypeDeftS1_tS1_tS1_t>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT (&huart1, str, 1);
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002860:	2214      	movs	r2, #20
 8002862:	4983      	ldr	r1, [pc, #524]	; (8002a70 <main+0x2d4>)
 8002864:	4883      	ldr	r0, [pc, #524]	; (8002a74 <main+0x2d8>)
 8002866:	f003 fead 	bl	80065c4 <HAL_UART_Receive_IT>
	arm.setPrintState(true);
 800286a:	2101      	movs	r1, #1
 800286c:	487e      	ldr	r0, [pc, #504]	; (8002a68 <main+0x2cc>)
 800286e:	f7ff f9c7 	bl	8001c00 <_ZN7RoboArm13setPrintStateEb>

	arm.SetBuserState(8);
 8002872:	2108      	movs	r1, #8
 8002874:	487c      	ldr	r0, [pc, #496]	; (8002a68 <main+0x2cc>)
 8002876:	f7ff f8be 	bl	80019f6 <_ZN7RoboArm13SetBuserStateEi>
//	arm.SetBuserState(4);

	arm.State = arm.ArmSTAND;
 800287a:	4b7b      	ldr	r3, [pc, #492]	; (8002a68 <main+0x2cc>)
 800287c:	2206      	movs	r2, #6
 800287e:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
				HAL_Delay(1);
			}
		}

		//!!!!!!!!!ЯКЩО зараз йде рух зацепа то ми постійно в цій умові перевіряємо стан зацепа і виставляємо флаг
		if (arm.State == arm.ArmGripPreMOVE || arm.State == arm.ArmGripMOVE) {
 8002882:	4b79      	ldr	r3, [pc, #484]	; (8002a68 <main+0x2cc>)
 8002884:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8002888:	2b0a      	cmp	r3, #10
 800288a:	d004      	beq.n	8002896 <main+0xfa>
 800288c:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <main+0x2cc>)
 800288e:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8002892:	2b08      	cmp	r3, #8
 8002894:	d101      	bne.n	800289a <main+0xfe>

			debounce_check_pins_and_set_flag();
 8002896:	f000 fdf9 	bl	800348c <_Z32debounce_check_pins_and_set_flagv>

		}

		// +2 початок руху якщо прийшли нові дані
		if (arm.State == arm.ArmSTART) {
 800289a:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <main+0x2cc>)
 800289c:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11b      	bne.n	80028dc <main+0x140>
			arm.State = arm.ArmSTAND;
 80028a4:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <main+0x2cc>)
 80028a6:	2206      	movs	r2, #6
 80028a8:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			//перевіряємо статус зацепа якщо він зачеплений то ОПУСКАЄМО (це не вірна логіка)
			//+1.2
			int tempGripState = arm.GetGripperState();
 80028ac:	486e      	ldr	r0, [pc, #440]	; (8002a68 <main+0x2cc>)
 80028ae:	f7ff f8d4 	bl	8001a5a <_ZN7RoboArm15GetGripperStateEv>
 80028b2:	60f8      	str	r0, [r7, #12]
			if (tempGripState == 1 && un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10c      	bne.n	80028d4 <main+0x138>
 80028ba:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <main+0x2dc>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <main+0x138>
//			if (un_to.params.hold == 0) { //якщо піднятий +1.1 і треба опустити
				arm.State = arm.ArmGripPreMOVE;
 80028c2:	4b69      	ldr	r3, [pc, #420]	; (8002a68 <main+0x2cc>)
 80028c4:	220a      	movs	r2, #10
 80028c6:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
				arm.SetGripper(0);
 80028ca:	2100      	movs	r1, #0
 80028cc:	4866      	ldr	r0, [pc, #408]	; (8002a68 <main+0x2cc>)
 80028ce:	f7ff f91d 	bl	8001b0c <_ZN7RoboArm10SetGripperEi>
 80028d2:	e003      	b.n	80028dc <main+0x140>
			} else { //if (tempGripState == 0) { //якщо опущенний то можна далі рухатись
				//+3
				arm.State = arm.ArmGripPreENDMOVE;
 80028d4:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <main+0x2cc>)
 80028d6:	220b      	movs	r2, #11
 80028d8:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			}
		}

		//обробка кількість кроків та періоди.
		if (arm.State == arm.ArmStepSTART) {
 80028dc:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <main+0x2cc>)
 80028de:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d114      	bne.n	8002910 <main+0x174>
			arm.State = arm.ArmSTAND;
 80028e6:	4b60      	ldr	r3, [pc, #384]	; (8002a68 <main+0x2cc>)
 80028e8:	2206      	movs	r2, #6
 80028ea:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			arm.Set2StepMotors(un_to.params.lin, un_to.params.PoT_lin,
 80028ee:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <main+0x2dc>)
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <main+0x2dc>)
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <main+0x2dc>)
 80028f8:	6858      	ldr	r0, [r3, #4]
 80028fa:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <main+0x2dc>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	4859      	ldr	r0, [pc, #356]	; (8002a68 <main+0x2cc>)
 8002904:	f7fe ff8e 	bl	8001824 <_ZN7RoboArm14Set2StepMotorsEfifi>
					un_to.params.ang, un_to.params.PoT_ang);
			arm.State=arm.ArmStepWaitMOVE;
 8002908:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <main+0x2cc>)
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		}

		if (arm.State == arm.ArmStepWaitMOVE) {
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <main+0x2cc>)
 8002912:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8002916:	2b02      	cmp	r3, #2
 8002918:	d11a      	bne.n	8002950 <main+0x1b4>
//			stepsSetFlagSent = true;
			arm.State = arm.ArmSTAND;
 800291a:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <main+0x2cc>)
 800291c:	2206      	movs	r2, #6
 800291e:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			un_send.params.lin = 0.0;
 8002922:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <main+0x2e0>)
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0.0;
 800292a:	4b54      	ldr	r3, [pc, #336]	; (8002a7c <main+0x2e0>)
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	605a      	str	r2, [r3, #4]
			un_send.params.PoT_lin = 0;
 8002932:	4b52      	ldr	r3, [pc, #328]	; (8002a7c <main+0x2e0>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <main+0x2e0>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
			un_send.params.hold = 10;
 800293e:	4b4f      	ldr	r3, [pc, #316]	; (8002a7c <main+0x2e0>)
 8002940:	220a      	movs	r2, #10
 8002942:	611a      	str	r2, [r3, #16]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002944:	230c      	movs	r3, #12
 8002946:	2214      	movs	r2, #20
 8002948:	494c      	ldr	r1, [pc, #304]	; (8002a7c <main+0x2e0>)
 800294a:	484a      	ldr	r0, [pc, #296]	; (8002a74 <main+0x2d8>)
 800294c:	f003 fdb7 	bl	80064be <HAL_UART_Transmit>
								12);
		}

		if (arm.State == arm.ArmStepStartMOVE) {
 8002950:	4b45      	ldr	r3, [pc, #276]	; (8002a68 <main+0x2cc>)
 8002952:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8002956:	2b03      	cmp	r3, #3
 8002958:	d106      	bne.n	8002968 <main+0x1cc>
			arm.State = arm.ArmStepMOVE;
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <main+0x2cc>)
 800295c:	2204      	movs	r2, #4
 800295e:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			arm.Move2StepMotors();
 8002962:	4841      	ldr	r0, [pc, #260]	; (8002a68 <main+0x2cc>)
 8002964:	f7ff f816 	bl	8001994 <_ZN7RoboArm15Move2StepMotorsEv>
//			stepsSetFlagSent = false;
		}

		//+4 опустили якщо треба було або починаємо одночасний рух моторів.
		if (arm.State == arm.ArmGripPreENDMOVE) {
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <main+0x2cc>)
 800296a:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800296e:	2b0b      	cmp	r3, #11
 8002970:	d10b      	bne.n	800298a <main+0x1ee>
			arm.State = arm.ArmMOVE;
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <main+0x2cc>)
 8002974:	2205      	movs	r2, #5
 8002976:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			arm.Move2Motors(un_to.params.ang, un_to.params.lin);
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <main+0x2dc>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a3e      	ldr	r2, [pc, #248]	; (8002a78 <main+0x2dc>)
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	4838      	ldr	r0, [pc, #224]	; (8002a68 <main+0x2cc>)
 8002986:	f7fe fd8f 	bl	80014a8 <_ZN7RoboArm11Move2MotorsEff>
		 //		  }
		 //	  }
		 */

		//+5 обидва мотори доїхали по статусам в таймерах
		if (timerFT1 && timerFT2) {
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <main+0x2e4>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d02b      	beq.n	80029ea <main+0x24e>
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <main+0x2e8>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d027      	beq.n	80029ea <main+0x24e>
			arm.State = arm.ArmEndMOVE;
 800299a:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <main+0x2cc>)
 800299c:	220c      	movs	r2, #12
 800299e:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			timerFT1 = false;
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <main+0x2e4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <main+0x2e8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]

//			un_now.params.lin = un_to.params.lin;
//			un_now.params.ang = un_to.params.ang;
			//+6 Перевірка статуса зацепа чи він не посередині і встановлюємо потрібний опускаємо
			int tempGripState = arm.GetGripperState();
 80029ae:	482e      	ldr	r0, [pc, #184]	; (8002a68 <main+0x2cc>)
 80029b0:	f7ff f853 	bl	8001a5a <_ZN7RoboArm15GetGripperStateEv>
 80029b4:	60b8      	str	r0, [r7, #8]
			if ((tempGripState == 1 || tempGripState == 0)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d002      	beq.n	80029c2 <main+0x226>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <main+0x246>
					&& (tempGripState != un_to.params.hold)) {
 80029c2:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <main+0x2dc>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d00a      	beq.n	80029e2 <main+0x246>
				arm.State = arm.ArmGripMOVE;
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <main+0x2cc>)
 80029ce:	2208      	movs	r2, #8
 80029d0:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137

				arm.SetGripper(un_to.params.hold);
 80029d4:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <main+0x2dc>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4619      	mov	r1, r3
 80029da:	4823      	ldr	r0, [pc, #140]	; (8002a68 <main+0x2cc>)
 80029dc:	f7ff f896 	bl	8001b0c <_ZN7RoboArm10SetGripperEi>
 80029e0:	e003      	b.n	80029ea <main+0x24e>
			} else {
				arm.State = arm.ArmGripENDMOVE;
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <main+0x2cc>)
 80029e4:	2209      	movs	r2, #9
 80029e6:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			}
		}

		// +7 закінчили рух зацепа
		if (arm.State == arm.ArmGripENDMOVE) {
 80029ea:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <main+0x2cc>)
 80029ec:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	d120      	bne.n	8002a36 <main+0x29a>
			arm.State = arm.ArmSTAND;
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <main+0x2cc>)
 80029f6:	2206      	movs	r2, #6
 80029f8:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			un_send.params.lin = 0;
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <main+0x2e0>)
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <main+0x2e0>)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
			un_send.params.PoT_lin = 0;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <main+0x2e0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <main+0x2e0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]
			un_send.params.hold = 10;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <main+0x2e0>)
 8002a1a:	220a      	movs	r2, #10
 8002a1c:	611a      	str	r2, [r3, #16]
			gripperMoveFinished = false;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <main+0x2ec>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
			moveFinished = false;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <main+0x2f0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	2214      	movs	r2, #20
 8002a2e:	4913      	ldr	r1, [pc, #76]	; (8002a7c <main+0x2e0>)
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <main+0x2d8>)
 8002a32:	f003 fd44 	bl	80064be <HAL_UART_Transmit>
					12);
		}

		//запит на читання координат
		if (arm.getPrintState() && arm.State == arm.ArmGetData) {
 8002a36:	480c      	ldr	r0, [pc, #48]	; (8002a68 <main+0x2cc>)
 8002a38:	f7ff f8fa 	bl	8001c30 <_ZN7RoboArm13getPrintStateEv>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d026      	beq.n	8002a90 <main+0x2f4>
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <main+0x2cc>)
 8002a44:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8002a48:	2b0e      	cmp	r3, #14
 8002a4a:	d121      	bne.n	8002a90 <main+0x2f4>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e020      	b.n	8002a92 <main+0x2f6>
 8002a50:	2000008c 	.word	0x2000008c
 8002a54:	200000d4 	.word	0x200000d4
 8002a58:	40010800 	.word	0x40010800
 8002a5c:	40010c00 	.word	0x40010c00
 8002a60:	2000011c 	.word	0x2000011c
 8002a64:	200001ac 	.word	0x200001ac
 8002a68:	20000258 	.word	0x20000258
 8002a6c:	20000034 	.word	0x20000034
 8002a70:	200001f4 	.word	0x200001f4
 8002a74:	20000164 	.word	0x20000164
 8002a78:	20000238 	.word	0x20000238
 8002a7c:	20000224 	.word	0x20000224
 8002a80:	20000209 	.word	0x20000209
 8002a84:	2000020a 	.word	0x2000020a
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	2000020d 	.word	0x2000020d
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d026      	beq.n	8002ae4 <main+0x348>
			arm.State = arm.ArmSTAND;
 8002a96:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <main+0x420>)
 8002a98:	2206      	movs	r2, #6
 8002a9a:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			float lin = arm.GetLin();
 8002a9e:	4847      	ldr	r0, [pc, #284]	; (8002bbc <main+0x420>)
 8002aa0:	f7ff f970 	bl	8001d84 <_ZN7RoboArm6GetLinEv>
 8002aa4:	6078      	str	r0, [r7, #4]
			un_send.params.lin = lin;
 8002aa6:	4a46      	ldr	r2, [pc, #280]	; (8002bc0 <main+0x424>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6013      	str	r3, [r2, #0]
//		  un_send.params.lin = arm.ShiftZeroLin(lin); //це для АМТ223С-V
			HAL_Delay(10);
 8002aac:	200a      	movs	r0, #10
 8002aae:	f001 f9dd 	bl	8003e6c <HAL_Delay>
			float ang = arm.GetAng();
 8002ab2:	4842      	ldr	r0, [pc, #264]	; (8002bbc <main+0x420>)
 8002ab4:	f7ff f9e2 	bl	8001e7c <_ZN7RoboArm6GetAngEv>
 8002ab8:	6038      	str	r0, [r7, #0]
			un_send.params.ang = ang;
 8002aba:	4a41      	ldr	r2, [pc, #260]	; (8002bc0 <main+0x424>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6053      	str	r3, [r2, #4]
//		  un_send.params.ang = arm.ShiftZeroAng(ang); //це для АМТ223С-V
			un_send.params.hold = arm.GetGripperState();
 8002ac0:	483e      	ldr	r0, [pc, #248]	; (8002bbc <main+0x420>)
 8002ac2:	f7fe ffca 	bl	8001a5a <_ZN7RoboArm15GetGripperStateEv>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a3d      	ldr	r2, [pc, #244]	; (8002bc0 <main+0x424>)
 8002aca:	6113      	str	r3, [r2, #16]
			un_send.params.PoT_lin = 0;
 8002acc:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <main+0x424>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <main+0x424>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002ad8:	230c      	movs	r3, #12
 8002ada:	2214      	movs	r2, #20
 8002adc:	4938      	ldr	r1, [pc, #224]	; (8002bc0 <main+0x424>)
 8002ade:	4839      	ldr	r0, [pc, #228]	; (8002bc4 <main+0x428>)
 8002ae0:	f003 fced 	bl	80064be <HAL_UART_Transmit>
					12);
		}

		//екстренна зупинка
		if (arm.State == arm.ArmSTOP) {
 8002ae4:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <main+0x420>)
 8002ae6:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8002aea:	2b0d      	cmp	r3, #13
 8002aec:	d120      	bne.n	8002b30 <main+0x394>
			stopHand = false;
 8002aee:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <main+0x42c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 8002af4:	4831      	ldr	r0, [pc, #196]	; (8002bbc <main+0x420>)
 8002af6:	f7fe fc93 	bl	8001420 <_ZN7RoboArm13EmergencyStopEv>

			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <main+0x424>)
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <main+0x424>)
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
			un_send.params.PoT_lin = 0;
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <main+0x424>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <main+0x424>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
			un_send.params.hold = 10;
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <main+0x424>)
 8002b18:	220a      	movs	r2, #10
 8002b1a:	611a      	str	r2, [r3, #16]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	2214      	movs	r2, #20
 8002b20:	4927      	ldr	r1, [pc, #156]	; (8002bc0 <main+0x424>)
 8002b22:	4828      	ldr	r0, [pc, #160]	; (8002bc4 <main+0x428>)
 8002b24:	f003 fccb 	bl	80064be <HAL_UART_Transmit>
					12);
			arm.State = arm.ArmSTAND;
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <main+0x420>)
 8002b2a:	2206      	movs	r2, #6
 8002b2c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		}

		//встановлення нуля
		if (arm.State == arm.ArmSetZero) {
 8002b30:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <main+0x420>)
 8002b32:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	d11d      	bne.n	8002b76 <main+0x3da>
			arm.SetZeroEncoders();
 8002b3a:	4820      	ldr	r0, [pc, #128]	; (8002bbc <main+0x420>)
 8002b3c:	f7ff f9e2 	bl	8001f04 <_ZN7RoboArm15SetZeroEncodersEv>
//		  arm.SetSoftwareZero();
			//відправляємо "все ок" до малини
			un_send.params.lin = 0;
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <main+0x424>)
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <main+0x424>)
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
			un_send.params.PoT_lin = 0;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <main+0x424>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <main+0x424>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60da      	str	r2, [r3, #12]
			un_send.params.hold = 10;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <main+0x424>)
 8002b5e:	220a      	movs	r2, #10
 8002b60:	611a      	str	r2, [r3, #16]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002b62:	230c      	movs	r3, #12
 8002b64:	2214      	movs	r2, #20
 8002b66:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <main+0x424>)
 8002b68:	4816      	ldr	r0, [pc, #88]	; (8002bc4 <main+0x428>)
 8002b6a:	f003 fca8 	bl	80064be <HAL_UART_Transmit>
					12);

			arm.State = arm.ArmSTAND;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <main+0x420>)
 8002b70:	2206      	movs	r2, #6
 8002b72:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		}

		if (arm.State == arm.ArmGetVers) {
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <main+0x420>)
 8002b78:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	f47f ae80 	bne.w	8002882 <main+0xe6>
			arm.State = arm.ArmSTAND;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <main+0x420>)
 8002b84:	2206      	movs	r2, #6
 8002b86:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			un_send.params.lin = 0;
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <main+0x424>)
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <main+0x424>)
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	605a      	str	r2, [r3, #4]
			un_send.params.PoT_lin = 0;
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <main+0x424>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
			un_send.params.PoT_ang = 0;
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <main+0x424>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
			un_send.params.hold = version;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <main+0x430>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <main+0x424>)
 8002bac:	6113      	str	r3, [r2, #16]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002bae:	230c      	movs	r3, #12
 8002bb0:	2214      	movs	r2, #20
 8002bb2:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <main+0x424>)
 8002bb4:	4803      	ldr	r0, [pc, #12]	; (8002bc4 <main+0x428>)
 8002bb6:	f003 fc82 	bl	80064be <HAL_UART_Transmit>
					12);
		}
	}
 8002bba:	e662      	b.n	8002882 <main+0xe6>
 8002bbc:	20000258 	.word	0x20000258
 8002bc0:	20000224 	.word	0x20000224
 8002bc4:	20000164 	.word	0x20000164
 8002bc8:	20000208 	.word	0x20000208
 8002bcc:	20000004 	.word	0x20000004

08002bd0 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b090      	sub	sp, #64	; 0x40
 8002bd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bd6:	f107 0318 	add.w	r3, r7, #24
 8002bda:	2228      	movs	r2, #40	; 0x28
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 fb10 	bl	8007204 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c00:	2301      	movs	r3, #1
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c04:	2302      	movs	r3, #2
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c0c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c12:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c14:	f107 0318 	add.w	r3, r7, #24
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 fce7 	bl	80045ec <HAL_RCC_OscConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 8002c2e:	f000 fdd1 	bl	80037d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c32:	230f      	movs	r3, #15
 8002c34:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c36:	2302      	movs	r3, #2
 8002c38:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c42:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 ff4f 	bl	8004af0 <HAL_RCC_ClockConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8002c62:	f000 fdb7 	bl	80037d4 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8002c66:	f002 f82d 	bl	8004cc4 <HAL_RCC_EnableCSS>
}
 8002c6a:	bf00      	nop
 8002c6c:	3740      	adds	r7, #64	; 0x40
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None HAL_Delay(1);
 }
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <_ZL12MX_SPI1_Initv+0x74>)
 8002c7c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c84:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002ca8:	2218      	movs	r2, #24
 8002caa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002cc0:	220a      	movs	r2, #10
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002cc4:	4807      	ldr	r0, [pc, #28]	; (8002ce4 <_ZL12MX_SPI1_Initv+0x70>)
 8002cc6:	f002 f8ad 	bl	8004e24 <HAL_SPI_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 8002cda:	f000 fd7b 	bl	80037d4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000034 	.word	0x20000034
 8002ce8:	40013000 	.word	0x40013000

08002cec <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b092      	sub	sp, #72	; 0x48
 8002cf0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	2220      	movs	r2, #32
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 fa74 	bl	8007204 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d1e:	4a3e      	ldr	r2, [pc, #248]	; (8002e18 <_ZL12MX_TIM1_Initv+0x12c>)
 8002d20:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 8002d22:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d24:	2248      	movs	r2, #72	; 0x48
 8002d26:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d28:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8002d2e:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d34:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002d3c:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d42:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002d48:	4832      	ldr	r0, [pc, #200]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d4a:	f002 fd13 	bl	8005774 <HAL_TIM_PWM_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 8002d5e:	f000 fd39 	bl	80037d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4828      	ldr	r0, [pc, #160]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002d72:	f003 fa41 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d76:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf14      	ite	ne
 8002d7c:	2301      	movne	r3, #1
 8002d7e:	2300      	moveq	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 8002d86:	f000 fd25 	bl	80037d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8a:	2360      	movs	r3, #96	; 0x60
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d96:	2300      	movs	r3, #0
 8002d98:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002daa:	2200      	movs	r2, #0
 8002dac:	4619      	mov	r1, r3
 8002dae:	4819      	ldr	r0, [pc, #100]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002db0:	f002 ff38 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 8002db4:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 8002dc4:	f000 fd06 	bl	80037d4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	480a      	ldr	r0, [pc, #40]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002dec:	f003 fa5c 	bl	80062a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002df0:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <_ZL12MX_TIM1_Initv+0x118>
		Error_Handler();
 8002e00:	f000 fce8 	bl	80037d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002e04:	4803      	ldr	r0, [pc, #12]	; (8002e14 <_ZL12MX_TIM1_Initv+0x128>)
 8002e06:	f000 fe27 	bl	8003a58 <HAL_TIM_MspPostInit>

}
 8002e0a:	bf00      	nop
 8002e0c:	3748      	adds	r7, #72	; 0x48
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000008c 	.word	0x2000008c
 8002e18:	40012c00 	.word	0x40012c00

08002e1c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002e22:	f107 0320 	add.w	r3, r7, #32
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	615a      	str	r2, [r3, #20]
 8002e3c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e44:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8002e46:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002e48:	2248      	movs	r2, #72	; 0x48
 8002e4a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8002e52:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002e54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e58:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002e66:	4820      	ldr	r0, [pc, #128]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002e68:	f002 fc84 	bl	8005774 <HAL_TIM_PWM_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 8002e7c:	f000 fcaa 	bl	80037d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002e88:	f107 0320 	add.w	r3, r7, #32
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4816      	ldr	r0, [pc, #88]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002e90:	f003 f9b2 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e94:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 8002ea4:	f000 fc96 	bl	80037d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ea8:	2360      	movs	r3, #96	; 0x60
 8002eaa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002ec0:	f002 feb0 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 8002ec4:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <_ZL12MX_TIM2_Initv+0xbc>
		Error_Handler();
 8002ed4:	f000 fc7e 	bl	80037d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <_ZL12MX_TIM2_Initv+0xcc>)
 8002eda:	f000 fdbd 	bl	8003a58 <HAL_TIM_MspPostInit>

}
 8002ede:	bf00      	nop
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200000d4 	.word	0x200000d4

08002eec <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ef2:	f107 0320 	add.w	r3, r7, #32
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	611a      	str	r2, [r3, #16]
 8002f0a:	615a      	str	r2, [r3, #20]
 8002f0c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f10:	4a29      	ldr	r2, [pc, #164]	; (8002fb8 <_ZL12MX_TIM3_Initv+0xcc>)
 8002f12:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72;
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f16:	2248      	movs	r2, #72	; 0x48
 8002f18:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f26:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002f34:	481f      	ldr	r0, [pc, #124]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f36:	f002 fc1d 	bl	8005774 <HAL_TIM_PWM_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <_ZL12MX_TIM3_Initv+0x62>
		Error_Handler();
 8002f4a:	f000 fc43 	bl	80037d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002f56:	f107 0320 	add.w	r3, r7, #32
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4815      	ldr	r0, [pc, #84]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f5e:	f003 f94b 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f62:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <_ZL12MX_TIM3_Initv+0x8a>
		Error_Handler();
 8002f72:	f000 fc2f 	bl	80037d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f76:	2360      	movs	r3, #96	; 0x60
 8002f78:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	2204      	movs	r2, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f8e:	f002 fe49 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <_ZL12MX_TIM3_Initv+0xba>
		Error_Handler();
 8002fa2:	f000 fc17 	bl	80037d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002fa6:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc8>)
 8002fa8:	f000 fd56 	bl	8003a58 <HAL_TIM_MspPostInit>

}
 8002fac:	bf00      	nop
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	2000011c 	.word	0x2000011c
 8002fb8:	40000400 	.word	0x40000400

08002fbc <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002fc4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fcc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002ff2:	4807      	ldr	r0, [pc, #28]	; (8003010 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002ff4:	f003 f9bb 	bl	800636e <HAL_UART_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8003008:	f000 fbe4 	bl	80037d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000164 	.word	0x20000164
 8003014:	40013800 	.word	0x40013800

08003018 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
//
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 800301e:	4a14      	ldr	r2, [pc, #80]	; (8003070 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003020:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003028:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 800303e:	220c      	movs	r2, #12
 8003040:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 800304a:	2200      	movs	r2, #0
 800304c:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 800304e:	4807      	ldr	r0, [pc, #28]	; (800306c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003050:	f003 f9dd 	bl	800640e <HAL_HalfDuplex_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8003064:	f000 fbb6 	bl	80037d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
//
	/* USER CODE END USART2_Init 2 */

}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200001ac 	.word	0x200001ac
 8003070:	40004400 	.word	0x40004400

08003074 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003088:	4b4e      	ldr	r3, [pc, #312]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4a4d      	ldr	r2, [pc, #308]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 800308e:	f043 0310 	orr.w	r3, r3, #16
 8003092:	6193      	str	r3, [r2, #24]
 8003094:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80030a0:	4b48      	ldr	r3, [pc, #288]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a47      	ldr	r2, [pc, #284]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030a6:	f043 0320 	orr.w	r3, r3, #32
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a41      	ldr	r2, [pc, #260]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030d0:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a3b      	ldr	r2, [pc, #236]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030d6:	f043 0308 	orr.w	r3, r3, #8
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <_ZL12MX_GPIO_Initv+0x150>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ee:	4836      	ldr	r0, [pc, #216]	; (80031c8 <_ZL12MX_GPIO_Initv+0x154>)
 80030f0:	f001 fa33 	bl	800455a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80030f4:	2200      	movs	r2, #0
 80030f6:	f241 0171 	movw	r1, #4209	; 0x1071
 80030fa:	4834      	ldr	r0, [pc, #208]	; (80031cc <_ZL12MX_GPIO_Initv+0x158>)
 80030fc:	f001 fa2d 	bl	800455a <HAL_GPIO_WritePin>
	En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8003100:	2200      	movs	r2, #0
 8003102:	f648 7143 	movw	r1, #36675	; 0x8f43
 8003106:	4832      	ldr	r0, [pc, #200]	; (80031d0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003108:	f001 fa27 	bl	800455a <HAL_GPIO_WritePin>
			CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin | S2_Pin | En3_Pin
					| Dir3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 800310c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003110:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003112:	2301      	movs	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2302      	movs	r3, #2
 800311c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	4619      	mov	r1, r3
 8003124:	4828      	ldr	r0, [pc, #160]	; (80031c8 <_ZL12MX_GPIO_Initv+0x154>)
 8003126:	f001 f885 	bl	8004234 <HAL_GPIO_Init>

	/*Configure GPIO pins : En2_Pin Button_Pin En1_Pin Dir1_Pin
	 Buser_Pin */
	GPIO_InitStruct.Pin = En2_Pin | Button_Pin | En1_Pin | Dir1_Pin | Buser_Pin;
 800312a:	f241 0371 	movw	r3, #4209	; 0x1071
 800312e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003130:	2301      	movs	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2302      	movs	r3, #2
 800313a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	f107 0310 	add.w	r3, r7, #16
 8003140:	4619      	mov	r1, r3
 8003142:	4822      	ldr	r0, [pc, #136]	; (80031cc <_ZL12MX_GPIO_Initv+0x158>)
 8003144:	f001 f876 	bl	8004234 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
	 S1_Pin S2_Pin En3_Pin Dir3_Pin */
	GPIO_InitStruct.Pin = CS1_Pin | CS2_Pin | Dir2_Pin | Led1_Pin | S1_Pin
 8003148:	f648 7343 	movw	r3, #36675	; 0x8f43
 800314c:	613b      	str	r3, [r7, #16]
			| S2_Pin | En3_Pin | Dir3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	2301      	movs	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2302      	movs	r3, #2
 8003158:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	f107 0310 	add.w	r3, r7, #16
 800315e:	4619      	mov	r1, r3
 8003160:	481b      	ldr	r0, [pc, #108]	; (80031d0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003162:	f001 f867 	bl	8004234 <HAL_GPIO_Init>

	/*Configure GPIO pins : EndCap1_Pin EndCap2_Pin EndCap3_Pin */
	GPIO_InitStruct.Pin = EndCap1_Pin | EndCap2_Pin | EndCap3_Pin;
 8003166:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 800316a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <_ZL12MX_GPIO_Initv+0x160>)
 800316e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	4619      	mov	r1, r3
 800317a:	4815      	ldr	r0, [pc, #84]	; (80031d0 <_ZL12MX_GPIO_Initv+0x15c>)
 800317c:	f001 f85a 	bl	8004234 <HAL_GPIO_Init>

	/*Configure GPIO pin : EndCap4_Pin */
	GPIO_InitStruct.Pin = EndCap4_Pin;
 8003180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003184:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <_ZL12MX_GPIO_Initv+0x160>)
 8003188:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(EndCap4_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	4619      	mov	r1, r3
 8003194:	480d      	ldr	r0, [pc, #52]	; (80031cc <_ZL12MX_GPIO_Initv+0x158>)
 8003196:	f001 f84d 	bl	8004234 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2105      	movs	r1, #5
 800319e:	2017      	movs	r0, #23
 80031a0:	f000 ff5f 	bl	8004062 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031a4:	2017      	movs	r0, #23
 80031a6:	f000 ff78 	bl	800409a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2105      	movs	r1, #5
 80031ae:	2028      	movs	r0, #40	; 0x28
 80031b0:	f000 ff57 	bl	8004062 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031b4:	2028      	movs	r0, #40	; 0x28
 80031b6:	f000 ff70 	bl	800409a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80031ba:	bf00      	nop
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40010800 	.word	0x40010800
 80031d0:	40010c00 	.word	0x40010c00
 80031d4:	10110000 	.word	0x10110000

080031d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a7b      	ldr	r2, [pc, #492]	; (80033d0 <HAL_UART_RxCpltCallback+0x1f8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	f040 80ea 	bne.w	80033be <HAL_UART_RxCpltCallback+0x1e6>
		// копіюємо отримані дані у rx_buffer
		memcpy(un_get.bytes, rx_buffer, sizeof(rx_buffer));
 80031ea:	4a7a      	ldr	r2, [pc, #488]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 80031ec:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <HAL_UART_RxCpltCallback+0x200>)
 80031ee:	4614      	mov	r4, r2
 80031f0:	461d      	mov	r5, r3
 80031f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	6023      	str	r3, [r4, #0]

		switch (un_get.params.hold) {
 80031fa:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	dc7a      	bgt.n	80032f8 <HAL_UART_RxCpltCallback+0x120>
 8003202:	2b00      	cmp	r3, #0
 8003204:	da7d      	bge.n	8003302 <HAL_UART_RxCpltCallback+0x12a>
 8003206:	e0d0      	b.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>
 8003208:	3b19      	subs	r3, #25
 800320a:	2b37      	cmp	r3, #55	; 0x37
 800320c:	f200 80cd 	bhi.w	80033aa <HAL_UART_RxCpltCallback+0x1d2>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_UART_RxCpltCallback+0x40>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	08003331 	.word	0x08003331
 800321c:	080033ab 	.word	0x080033ab
 8003220:	080033ab 	.word	0x080033ab
 8003224:	080033ab 	.word	0x080033ab
 8003228:	080033ab 	.word	0x080033ab
 800322c:	08003359 	.word	0x08003359
 8003230:	08003359 	.word	0x08003359
 8003234:	080033ab 	.word	0x080033ab
 8003238:	080033ab 	.word	0x080033ab
 800323c:	080033ab 	.word	0x080033ab
 8003240:	080033ab 	.word	0x080033ab
 8003244:	080033ab 	.word	0x080033ab
 8003248:	080033ab 	.word	0x080033ab
 800324c:	080033ab 	.word	0x080033ab
 8003250:	080033ab 	.word	0x080033ab
 8003254:	080033a1 	.word	0x080033a1
 8003258:	080033ab 	.word	0x080033ab
 800325c:	080033ab 	.word	0x080033ab
 8003260:	080033ab 	.word	0x080033ab
 8003264:	080033ab 	.word	0x080033ab
 8003268:	080033ab 	.word	0x080033ab
 800326c:	080033ab 	.word	0x080033ab
 8003270:	080033ab 	.word	0x080033ab
 8003274:	080033ab 	.word	0x080033ab
 8003278:	080033ab 	.word	0x080033ab
 800327c:	0800333b 	.word	0x0800333b
 8003280:	080033ab 	.word	0x080033ab
 8003284:	080033ab 	.word	0x080033ab
 8003288:	080033ab 	.word	0x080033ab
 800328c:	080033ab 	.word	0x080033ab
 8003290:	080033ab 	.word	0x080033ab
 8003294:	080033ab 	.word	0x080033ab
 8003298:	080033ab 	.word	0x080033ab
 800329c:	080033ab 	.word	0x080033ab
 80032a0:	080033ab 	.word	0x080033ab
 80032a4:	080033ab 	.word	0x080033ab
 80032a8:	080033ab 	.word	0x080033ab
 80032ac:	080033ab 	.word	0x080033ab
 80032b0:	080033ab 	.word	0x080033ab
 80032b4:	080033ab 	.word	0x080033ab
 80032b8:	080033ab 	.word	0x080033ab
 80032bc:	080033ab 	.word	0x080033ab
 80032c0:	080033ab 	.word	0x080033ab
 80032c4:	080033ab 	.word	0x080033ab
 80032c8:	080033ab 	.word	0x080033ab
 80032cc:	080033ab 	.word	0x080033ab
 80032d0:	080033ab 	.word	0x080033ab
 80032d4:	080033ab 	.word	0x080033ab
 80032d8:	080033ab 	.word	0x080033ab
 80032dc:	080033ab 	.word	0x080033ab
 80032e0:	08003345 	.word	0x08003345
 80032e4:	080033ab 	.word	0x080033ab
 80032e8:	080033ab 	.word	0x080033ab
 80032ec:	080033ab 	.word	0x080033ab
 80032f0:	080033ab 	.word	0x080033ab
 80032f4:	0800334f 	.word	0x0800334f
 80032f8:	2b50      	cmp	r3, #80	; 0x50
 80032fa:	dc56      	bgt.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>
 80032fc:	2b19      	cmp	r3, #25
 80032fe:	da83      	bge.n	8003208 <HAL_UART_RxCpltCallback+0x30>
 8003300:	e053      	b.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>
		case 1:
			// 0 або 1 у un_get.params.hold = прийшли нові координати
			//startFirstMove = true;

			//статус початку руху  +1
			arm.State = arm.ArmSTART;
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_UART_RxCpltCallback+0x204>)
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137

			un_to.params.lin = un_get.params.lin;
 800330a:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 8003310:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang;
 8003312:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4a32      	ldr	r2, [pc, #200]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 8003318:	6053      	str	r3, [r2, #4]
			un_to.params.PoT_ang=0;
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 800331c:	2200      	movs	r2, #0
 800331e:	60da      	str	r2, [r3, #12]
			un_to.params.PoT_lin=0;
 8003320:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
			un_to.params.hold = un_get.params.hold;
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 800332c:	6113      	str	r3, [r2, #16]
//			arm.moveGripper = un_get.params.hold;
			break;
 800332e:	e03c      	b.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>

		case 25:
			//25 = екстренна зупинка

			arm.State = arm.ArmSTOP;
 8003330:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_UART_RxCpltCallback+0x204>)
 8003332:	220d      	movs	r2, #13
 8003334:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			//оце би на переривання якесь повісити, щоб якщо натиснули в дашборді - то остаточно вирубати.
			break;
 8003338:	e037      	b.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>
		case 50:
			//50 = get-запит
			//sendDataFlag = true;
			arm.State = arm.ArmGetData;
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_UART_RxCpltCallback+0x204>)
 800333c:	220e      	movs	r2, #14
 800333e:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			break;
 8003342:	e032      	b.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>
		case 75:
			//75 = встановлення нуля
			//	setZeroFlag = true;
			arm.State = arm.ArmSetZero;
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_UART_RxCpltCallback+0x204>)
 8003346:	220f      	movs	r2, #15
 8003348:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			break;
 800334c:	e02d      	b.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>
		case 80:
			arm.State = arm.ArmGetVers;
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_UART_RxCpltCallback+0x204>)
 8003350:	2210      	movs	r2, #16
 8003352:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			break;
 8003356:	e028      	b.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>

		case 31: //так робити погано але ладна)
		case 30:
			arm.State = arm.ArmStepSTART;
 8003358:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_UART_RxCpltCallback+0x204>)
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			un_to.params.lin = un_get.params.lin; //це кроки 1
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 8003366:	6013      	str	r3, [r2, #0]
			un_to.params.ang = un_get.params.ang; //це кроки 2
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 800336e:	6053      	str	r3, [r2, #4]
			un_to.params.PoT_ang = un_get.params.PoT_ang; //це період 2
 8003370:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 8003376:	60d3      	str	r3, [r2, #12]
			un_to.params.PoT_lin = un_get.params.PoT_lin; //це період 1
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 800337e:	6093      	str	r3, [r2, #8]
			un_to.params.hold = un_get.params.hold % 10; //парсимо hold 0 або 1
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_UART_RxCpltCallback+0x1fc>)
 8003382:	6919      	ldr	r1, [r3, #16]
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <HAL_UART_RxCpltCallback+0x20c>)
 8003386:	fb83 2301 	smull	r2, r3, r3, r1
 800338a:	109a      	asrs	r2, r3, #2
 800338c:	17cb      	asrs	r3, r1, #31
 800338e:	1ad2      	subs	r2, r2, r3
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	1aca      	subs	r2, r1, r3
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_UART_RxCpltCallback+0x208>)
 800339c:	611a      	str	r2, [r3, #16]

			break;
 800339e:	e004      	b.n	80033aa <HAL_UART_RxCpltCallback+0x1d2>

		case 40:
			//перевірка чи були налаштовані таймери до цього для руху по крокам
				arm.State = arm.ArmStepStartMOVE;
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_UART_RxCpltCallback+0x204>)
 80033a2:	2203      	movs	r2, #3
 80033a4:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137

			break;
 80033a8:	bf00      	nop

		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80033aa:	2214      	movs	r2, #20
 80033ac:	2100      	movs	r1, #0
 80033ae:	480a      	ldr	r0, [pc, #40]	; (80033d8 <HAL_UART_RxCpltCallback+0x200>)
 80033b0:	f003 ff28 	bl	8007204 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80033b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033b8:	480b      	ldr	r0, [pc, #44]	; (80033e8 <HAL_UART_RxCpltCallback+0x210>)
 80033ba:	f001 f8e6 	bl	800458a <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80033be:	2214      	movs	r2, #20
 80033c0:	4905      	ldr	r1, [pc, #20]	; (80033d8 <HAL_UART_RxCpltCallback+0x200>)
 80033c2:	4803      	ldr	r0, [pc, #12]	; (80033d0 <HAL_UART_RxCpltCallback+0x1f8>)
 80033c4:	f003 f8fe 	bl	80065c4 <HAL_UART_Receive_IT>
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bdb0      	pop	{r4, r5, r7, pc}
 80033d0:	20000164 	.word	0x20000164
 80033d4:	20000210 	.word	0x20000210
 80033d8:	200001f4 	.word	0x200001f4
 80033dc:	20000258 	.word	0x20000258
 80033e0:	20000238 	.word	0x20000238
 80033e4:	66666667 	.word	0x66666667
 80033e8:	40011000 	.word	0x40011000

080033ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	80fb      	strh	r3, [r7, #6]
		//	timerFT2 = true;
	}
//	else {
//		__NOP();
//	}
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_UART_ErrorCallback+0x84>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d133      	bne.n	800347a <HAL_UART_ErrorCallback+0x7a>
		if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	2b08      	cmp	r3, #8
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_UART_ErrorCallback+0x2c>
			// переполнение
			arm.SetBuserState(2);
 8003424:	2102      	movs	r1, #2
 8003426:	4818      	ldr	r0, [pc, #96]	; (8003488 <HAL_UART_ErrorCallback+0x88>)
 8003428:	f7fe fae5 	bl	80019f6 <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_PE) {
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	2b01      	cmp	r3, #1
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_UART_ErrorCallback+0x46>
			// Ошибка четности
			arm.SetBuserState(3);
 800343e:	2103      	movs	r1, #3
 8003440:	4811      	ldr	r0, [pc, #68]	; (8003488 <HAL_UART_ErrorCallback+0x88>)
 8003442:	f7fe fad8 	bl	80019f6 <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_NE) {
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	2b02      	cmp	r3, #2
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_UART_ErrorCallback+0x60>
			// Ошибка зашумление
			arm.SetBuserState(4);
 8003458:	2104      	movs	r1, #4
 800345a:	480b      	ldr	r0, [pc, #44]	; (8003488 <HAL_UART_ErrorCallback+0x88>)
 800345c:	f7fe facb 	bl	80019f6 <_ZN7RoboArm13SetBuserStateEi>
		}
		if (huart->ErrorCode == HAL_UART_ERROR_FE) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	2b04      	cmp	r3, #4
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_UART_ErrorCallback+0x7a>
			// Ошибка кадрирования
			arm.SetBuserState(5);
 8003472:	2105      	movs	r1, #5
 8003474:	4804      	ldr	r0, [pc, #16]	; (8003488 <HAL_UART_ErrorCallback+0x88>)
 8003476:	f7fe fabe 	bl	80019f6 <_ZN7RoboArm13SetBuserStateEi>
		}
	}
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40013800 	.word	0x40013800
 8003488:	20000258 	.word	0x20000258

0800348c <_Z32debounce_check_pins_and_set_flagv>:

void debounce_check_pins_and_set_flag() {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
	static bool checkFlag1 = false;
	static bool checkFlag2 = false;
//	static uint8_t last_EndCap1_state = GPIO_PIN_RESET;
//	static uint8_t last_EndCap2_state = GPIO_PIN_RESET;
	static uint8_t last_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
			arm.EndCap1_PinG);
 8003492:	4b71      	ldr	r3, [pc, #452]	; (8003658 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f3bf 8f5b 	dmb	ish
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01a      	beq.n	80034e2 <_Z32debounce_check_pins_and_set_flagv+0x56>
 80034ac:	486a      	ldr	r0, [pc, #424]	; (8003658 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 80034ae:	f003 fe59 	bl	8007164 <__cxa_guard_acquire>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00f      	beq.n	80034e2 <_Z32debounce_check_pins_and_set_flagv+0x56>
	static uint8_t last_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 80034c2:	4b66      	ldr	r3, [pc, #408]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80034c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c6:	4a65      	ldr	r2, [pc, #404]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80034c8:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 f82c 	bl	800452c <HAL_GPIO_ReadPin>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
			arm.EndCap1_PinG);
 80034d8:	4b61      	ldr	r3, [pc, #388]	; (8003660 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	485e      	ldr	r0, [pc, #376]	; (8003658 <_Z32debounce_check_pins_and_set_flagv+0x1cc>)
 80034de:	f003 fe4d 	bl	800717c <__cxa_guard_release>
	static uint8_t last_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
			arm.EndCap2_PinG);
 80034e2:	4b60      	ldr	r3, [pc, #384]	; (8003664 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f3bf 8f5b 	dmb	ish
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01a      	beq.n	8003532 <_Z32debounce_check_pins_and_set_flagv+0xa6>
 80034fc:	4859      	ldr	r0, [pc, #356]	; (8003664 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 80034fe:	f003 fe31 	bl	8007164 <__cxa_guard_acquire>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00f      	beq.n	8003532 <_Z32debounce_check_pins_and_set_flagv+0xa6>
	static uint8_t last_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 8003512:	4b52      	ldr	r3, [pc, #328]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	4a51      	ldr	r2, [pc, #324]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003518:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f001 f804 	bl	800452c <HAL_GPIO_ReadPin>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
			arm.EndCap2_PinG);
 8003528:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	484d      	ldr	r0, [pc, #308]	; (8003664 <_Z32debounce_check_pins_and_set_flagv+0x1d8>)
 800352e:	f003 fe25 	bl	800717c <__cxa_guard_release>
	uint32_t current_time = HAL_GetTick();
 8003532:	f000 fc91 	bl	8003e58 <HAL_GetTick>
 8003536:	6078      	str	r0, [r7, #4]

	// Перевірка чи пройшла достатня затримка для уникнення дребезгу
	if (current_time - last_check_time >= debounce_delay) {
 8003538:	4b4c      	ldr	r3, [pc, #304]	; (800366c <_Z32debounce_check_pins_and_set_flagv+0x1e0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	1ad2      	subs	r2, r2, r3
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <_Z32debounce_check_pins_and_set_flagv+0x1e4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	f0c0 8083 	bcc.w	8003650 <_Z32debounce_check_pins_and_set_flagv+0x1c4>
		// Оновлення часу останньої перевірки
		last_check_time = current_time;
 800354a:	4a48      	ldr	r2, [pc, #288]	; (800366c <_Z32debounce_check_pins_and_set_flagv+0x1e0>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6013      	str	r3, [r2, #0]

		// Перевірка стану піну EndCap1
		uint8_t current_EndCap1_state = HAL_GPIO_ReadPin(arm.EndCap1_GPIO_PortG,
 8003550:	4b42      	ldr	r3, [pc, #264]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003554:	4a41      	ldr	r2, [pc, #260]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 8003556:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f000 ffe5 	bl	800452c <HAL_GPIO_ReadPin>
 8003562:	4603      	mov	r3, r0
 8003564:	70fb      	strb	r3, [r7, #3]
				arm.EndCap1_PinG);

		if (current_EndCap1_state == GPIO_PIN_SET
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d120      	bne.n	80035ae <_Z32debounce_check_pins_and_set_flagv+0x122>
				&& last_EndCap1_state == GPIO_PIN_RESET) {
 800356c:	4b3c      	ldr	r3, [pc, #240]	; (8003660 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11c      	bne.n	80035ae <_Z32debounce_check_pins_and_set_flagv+0x122>
			if (checkFlag1) {
 8003574:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00f      	beq.n	800359c <_Z32debounce_check_pins_and_set_flagv+0x110>
				checkFlag1 = false;
 800357c:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
				gripIntFlag = true;
 8003582:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <_Z32debounce_check_pins_and_set_flagv+0x1ec>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
				HAL_GPIO_TogglePin(arm.Buser_GPIO_Port_Ind, arm.Buser_Pin_Ind);
 8003588:	4b34      	ldr	r3, [pc, #208]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 800358a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358c:	4a33      	ldr	r2, [pc, #204]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 800358e:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fff8 	bl	800458a <HAL_GPIO_TogglePin>
			if (checkFlag1) {
 800359a:	e00f      	b.n	80035bc <_Z32debounce_check_pins_and_set_flagv+0x130>
			} else {
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 800359c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035a0:	4836      	ldr	r0, [pc, #216]	; (800367c <_Z32debounce_check_pins_and_set_flagv+0x1f0>)
 80035a2:	f000 fff2 	bl	800458a <HAL_GPIO_TogglePin>
				checkFlag1 = true;
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
			if (checkFlag1) {
 80035ac:	e006      	b.n	80035bc <_Z32debounce_check_pins_and_set_flagv+0x130>
			}
		} else {
			if (checkFlag1) {
 80035ae:	4b31      	ldr	r3, [pc, #196]	; (8003674 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <_Z32debounce_check_pins_and_set_flagv+0x130>
				checkFlag1 = false;
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
			}
		}
		if (!checkFlag1) {
 80035bc:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <_Z32debounce_check_pins_and_set_flagv+0x1e8>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <_Z32debounce_check_pins_and_set_flagv+0x144>
			last_EndCap1_state = current_EndCap1_state;
 80035ca:	4a25      	ldr	r2, [pc, #148]	; (8003660 <_Z32debounce_check_pins_and_set_flagv+0x1d4>)
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	7013      	strb	r3, [r2, #0]
		}

		// Перевірка стану піну EndCap2
		uint8_t current_EndCap2_state = HAL_GPIO_ReadPin(arm.EndCap2_GPIO_PortG,
 80035d0:	4b22      	ldr	r3, [pc, #136]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80035d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d4:	4a21      	ldr	r2, [pc, #132]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 80035d6:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 ffa5 	bl	800452c <HAL_GPIO_ReadPin>
 80035e2:	4603      	mov	r3, r0
 80035e4:	70bb      	strb	r3, [r7, #2]
//		if (current_EndCap2_state == GPIO_PIN_SET
//				&& last_EndCap2_state == GPIO_PIN_RESET) {
//			gripIntFlag = true;
//		}
//		last_EndCap2_state = current_EndCap2_state;
		if (current_EndCap2_state == GPIO_PIN_SET
 80035e6:	78bb      	ldrb	r3, [r7, #2]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d120      	bne.n	800362e <_Z32debounce_check_pins_and_set_flagv+0x1a2>
				&& last_EndCap2_state == GPIO_PIN_RESET) {
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11c      	bne.n	800362e <_Z32debounce_check_pins_and_set_flagv+0x1a2>
			if (checkFlag2) {
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00f      	beq.n	800361c <_Z32debounce_check_pins_and_set_flagv+0x190>
				checkFlag2 = false;
 80035fc:	4b20      	ldr	r3, [pc, #128]	; (8003680 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
				gripIntFlag = true;
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <_Z32debounce_check_pins_and_set_flagv+0x1ec>)
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
				HAL_GPIO_TogglePin(arm.Buser_GPIO_Port_Ind, arm.Buser_Pin_Ind);
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 800360a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360c:	4a13      	ldr	r2, [pc, #76]	; (800365c <_Z32debounce_check_pins_and_set_flagv+0x1d0>)
 800360e:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 ffb8 	bl	800458a <HAL_GPIO_TogglePin>
			if (checkFlag2) {
 800361a:	e00f      	b.n	800363c <_Z32debounce_check_pins_and_set_flagv+0x1b0>
			} else {
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 800361c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003620:	4816      	ldr	r0, [pc, #88]	; (800367c <_Z32debounce_check_pins_and_set_flagv+0x1f0>)
 8003622:	f000 ffb2 	bl	800458a <HAL_GPIO_TogglePin>
				checkFlag2 = true;
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003628:	2201      	movs	r2, #1
 800362a:	701a      	strb	r2, [r3, #0]
			if (checkFlag2) {
 800362c:	e006      	b.n	800363c <_Z32debounce_check_pins_and_set_flagv+0x1b0>
			}
		} else {
			if (checkFlag2) {
 800362e:	4b14      	ldr	r3, [pc, #80]	; (8003680 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <_Z32debounce_check_pins_and_set_flagv+0x1b0>
				checkFlag2 = false;
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (!checkFlag2) {
 800363c:	4b10      	ldr	r3, [pc, #64]	; (8003680 <_Z32debounce_check_pins_and_set_flagv+0x1f4>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <_Z32debounce_check_pins_and_set_flagv+0x1c4>
			last_EndCap2_state = current_EndCap2_state;
 800364a:	4a07      	ldr	r2, [pc, #28]	; (8003668 <_Z32debounce_check_pins_and_set_flagv+0x1dc>)
 800364c:	78bb      	ldrb	r3, [r7, #2]
 800364e:	7013      	strb	r3, [r2, #0]
		}
	}
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200003b8 	.word	0x200003b8
 800365c:	20000258 	.word	0x20000258
 8003660:	200003b6 	.word	0x200003b6
 8003664:	200003c0 	.word	0x200003c0
 8003668:	200003bc 	.word	0x200003bc
 800366c:	200003b0 	.word	0x200003b0
 8003670:	20000008 	.word	0x20000008
 8003674:	200003b4 	.word	0x200003b4
 8003678:	2000020c 	.word	0x2000020c
 800367c:	40011000 	.word	0x40011000
 8003680:	200003b5 	.word	0x200003b5

08003684 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a43      	ldr	r2, [pc, #268]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d11d      	bne.n	80036d2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		cntImpulse1++;
 8003696:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	4a41      	ldr	r2, [pc, #260]	; (80037a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800369e:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80036a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80036a4:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d875      	bhi.n	8003798 <HAL_TIM_PeriodElapsedCallback+0x114>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80036ac:	2100      	movs	r1, #0
 80036ae:	483f      	ldr	r0, [pc, #252]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0x128>)
 80036b0:	f002 f94c 	bl	800594c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 80036b4:	483d      	ldr	r0, [pc, #244]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0x128>)
 80036b6:	f002 f82f 	bl	8005718 <HAL_TIM_Base_Stop_IT>
//			arm.SetEnable(1, false);
			arm.SetEnable(1, true);
 80036ba:	2201      	movs	r2, #1
 80036bc:	2101      	movs	r1, #1
 80036be:	483a      	ldr	r0, [pc, #232]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80036c0:	f7fe fcfc 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1 = 0;
 80036c4:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
			timerFT1 = true;
 80036ca:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
//    HAL_IncTick();
//  }
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80036d0:	e062      	b.n	8003798 <HAL_TIM_PeriodElapsedCallback+0x114>
	} else if (htim->Instance == TIM2) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d11d      	bne.n	8003718 <HAL_TIM_PeriodElapsedCallback+0x94>
		cntImpulse2++;
 80036dc:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80036e4:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80036e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036ea:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d852      	bhi.n	8003798 <HAL_TIM_PeriodElapsedCallback+0x114>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80036f2:	2104      	movs	r1, #4
 80036f4:	4830      	ldr	r0, [pc, #192]	; (80037b8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80036f6:	f002 f929 	bl	800594c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 80036fa:	482f      	ldr	r0, [pc, #188]	; (80037b8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80036fc:	f002 f80c 	bl	8005718 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, true);
 8003700:	2201      	movs	r2, #1
 8003702:	2102      	movs	r1, #2
 8003704:	4828      	ldr	r0, [pc, #160]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003706:	f7fe fcd9 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2 = 0;
 800370a:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
			timerFT2 = true;
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
}
 8003716:	e03f      	b.n	8003798 <HAL_TIM_PeriodElapsedCallback+0x114>
	} else if (htim->Instance == TIM3) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d13a      	bne.n	8003798 <HAL_TIM_PeriodElapsedCallback+0x114>
		cntImpulse3++;
 8003722:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800372a:	6013      	str	r3, [r2, #0]
		if (cntImpulse3 >= arm.gripperPsteps || gripIntFlag == true) {
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800372e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003730:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d903      	bls.n	8003740 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8003738:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d12b      	bne.n	8003798 <HAL_TIM_PeriodElapsedCallback+0x114>
			gripIntFlag = false;
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003746:	2104      	movs	r1, #4
 8003748:	4820      	ldr	r0, [pc, #128]	; (80037cc <HAL_TIM_PeriodElapsedCallback+0x148>)
 800374a:	f002 f8ff 	bl	800594c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 800374e:	481f      	ldr	r0, [pc, #124]	; (80037cc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003750:	f001 ffe2 	bl	8005718 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(3, true);
 8003754:	2201      	movs	r2, #1
 8003756:	2103      	movs	r1, #3
 8003758:	4813      	ldr	r0, [pc, #76]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800375a:	f7fe fcaf 	bl	80020bc <_ZN7RoboArm9SetEnableEtb>
			if (arm.State == arm.ArmGripPreMOVE) {
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003760:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8003764:	2b0a      	cmp	r3, #10
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PeriodElapsedCallback+0xee>
				arm.State = arm.ArmGripPreENDMOVE;
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800376a:	220b      	movs	r2, #11
 800376c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8003770:	e008      	b.n	8003784 <HAL_TIM_PeriodElapsedCallback+0x100>
			} else if (arm.State == arm.ArmGripMOVE) {
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003774:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8003778:	2b08      	cmp	r3, #8
 800377a:	d103      	bne.n	8003784 <HAL_TIM_PeriodElapsedCallback+0x100>
				arm.State = arm.ArmGripENDMOVE;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800377e:	2209      	movs	r2, #9
 8003780:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
			cntImpulse3 = 0;
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
			arm.stateMoveM3 = false;
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800378c:	2200      	movs	r2, #0
 800378e:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
			timerFT3 = true;
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	2000024c 	.word	0x2000024c
 80037a8:	20000258 	.word	0x20000258
 80037ac:	2000008c 	.word	0x2000008c
 80037b0:	20000209 	.word	0x20000209
 80037b4:	20000250 	.word	0x20000250
 80037b8:	200000d4 	.word	0x200000d4
 80037bc:	2000020a 	.word	0x2000020a
 80037c0:	40000400 	.word	0x40000400
 80037c4:	20000254 	.word	0x20000254
 80037c8:	2000020c 	.word	0x2000020c
 80037cc:	2000011c 	.word	0x2000011c
 80037d0:	2000020b 	.word	0x2000020b

080037d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//повинен пропищати при помилці; треба перевірити
	for (int t = 0; t <= 4; t++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	e016      	b.n	800380e <Error_Handler+0x3a>
		for (int i = 0; i <= 200; i++) {
 80037e0:	2300      	movs	r3, #0
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	e00a      	b.n	80037fc <Error_Handler+0x28>
			HAL_GPIO_TogglePin(Buser_GPIO_Port, Buser_Pin);
 80037e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037ea:	480c      	ldr	r0, [pc, #48]	; (800381c <Error_Handler+0x48>)
 80037ec:	f000 fecd 	bl	800458a <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 80037f0:	2001      	movs	r0, #1
 80037f2:	f000 fb3b 	bl	8003e6c <HAL_Delay>
		for (int i = 0; i <= 200; i++) {
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2bc8      	cmp	r3, #200	; 0xc8
 8003800:	ddf1      	ble.n	80037e6 <Error_Handler+0x12>
		}
		HAL_Delay(100);
 8003802:	2064      	movs	r0, #100	; 0x64
 8003804:	f000 fb32 	bl	8003e6c <HAL_Delay>
	for (int t = 0; t <= 4; t++) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3301      	adds	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b04      	cmp	r3, #4
 8003812:	dde5      	ble.n	80037e0 <Error_Handler+0xc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003814:	b672      	cpsid	i
}
 8003816:	bf00      	nop
	}
	__disable_irq();
	while (1) {
 8003818:	e7fe      	b.n	8003818 <Error_Handler+0x44>
 800381a:	bf00      	nop
 800381c:	40010800 	.word	0x40010800

08003820 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d109      	bne.n	8003844 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003836:	4293      	cmp	r3, r2
 8003838:	d104      	bne.n	8003844 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(240.0, 124.0);
 800383a:	4a04      	ldr	r2, [pc, #16]	; (800384c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800383e:	4805      	ldr	r0, [pc, #20]	; (8003854 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003840:	f7fd fd70 	bl	8001324 <_ZN7RoboArmC1Eff>
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	42f80000 	.word	0x42f80000
 8003850:	43700000 	.word	0x43700000
 8003854:	20000258 	.word	0x20000258

08003858 <_GLOBAL__sub_I_hspi1>:
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
 800385c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003860:	2001      	movs	r0, #1
 8003862:	f7ff ffdd 	bl	8003820 <_Z41__static_initialization_and_destruction_0ii>
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800386e:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_MspInit+0x6c>)
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_MspInit+0x6c>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6193      	str	r3, [r2, #24]
 800387a:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <HAL_MspInit+0x6c>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_MspInit+0x6c>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <HAL_MspInit+0x6c>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003890:	61d3      	str	r3, [r2, #28]
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_MspInit+0x6c>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	2105      	movs	r1, #5
 80038a2:	2005      	movs	r0, #5
 80038a4:	f000 fbdd 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80038a8:	2005      	movs	r0, #5
 80038aa:	f000 fbf6 	bl	800409a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <HAL_MspInit+0x70>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <HAL_MspInit+0x70>)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40010000 	.word	0x40010000

080038dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a26      	ldr	r2, [pc, #152]	; (8003990 <HAL_SPI_MspInit+0xb4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d145      	bne.n	8003988 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038fc:	4b25      	ldr	r3, [pc, #148]	; (8003994 <HAL_SPI_MspInit+0xb8>)
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	4a24      	ldr	r2, [pc, #144]	; (8003994 <HAL_SPI_MspInit+0xb8>)
 8003902:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003906:	6193      	str	r3, [r2, #24]
 8003908:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_SPI_MspInit+0xb8>)
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_SPI_MspInit+0xb8>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_SPI_MspInit+0xb8>)
 800391a:	f043 0308 	orr.w	r3, r3, #8
 800391e:	6193      	str	r3, [r2, #24]
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_SPI_MspInit+0xb8>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800392c:	2328      	movs	r3, #40	; 0x28
 800392e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003934:	2303      	movs	r3, #3
 8003936:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	4619      	mov	r1, r3
 800393e:	4816      	ldr	r0, [pc, #88]	; (8003998 <HAL_SPI_MspInit+0xbc>)
 8003940:	f000 fc78 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003944:	2310      	movs	r3, #16
 8003946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	4619      	mov	r1, r3
 8003956:	4810      	ldr	r0, [pc, #64]	; (8003998 <HAL_SPI_MspInit+0xbc>)
 8003958:	f000 fc6c 	bl	8004234 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <HAL_SPI_MspInit+0xc0>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <HAL_SPI_MspInit+0xc0>)
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003978:	2200      	movs	r2, #0
 800397a:	2105      	movs	r1, #5
 800397c:	2023      	movs	r0, #35	; 0x23
 800397e:	f000 fb70 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003982:	2023      	movs	r0, #35	; 0x23
 8003984:	f000 fb89 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003988:	bf00      	nop
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40013000 	.word	0x40013000
 8003994:	40021000 	.word	0x40021000
 8003998:	40010c00 	.word	0x40010c00
 800399c:	40010000 	.word	0x40010000

080039a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <HAL_TIM_PWM_MspInit+0xac>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d114      	bne.n	80039dc <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039b2:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	4a26      	ldr	r2, [pc, #152]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 80039b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039bc:	6193      	str	r3, [r2, #24]
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2105      	movs	r1, #5
 80039ce:	2019      	movs	r0, #25
 80039d0:	f000 fb47 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80039d4:	2019      	movs	r0, #25
 80039d6:	f000 fb60 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039da:	e032      	b.n	8003a42 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d114      	bne.n	8003a10 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	61d3      	str	r3, [r2, #28]
 80039f2:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2105      	movs	r1, #5
 8003a02:	201c      	movs	r0, #28
 8003a04:	f000 fb2d 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a08:	201c      	movs	r0, #28
 8003a0a:	f000 fb46 	bl	800409a <HAL_NVIC_EnableIRQ>
}
 8003a0e:	e018      	b.n	8003a42 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_TIM_PWM_MspInit+0xb4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d113      	bne.n	8003a42 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	61d3      	str	r3, [r2, #28]
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_TIM_PWM_MspInit+0xb0>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	2105      	movs	r1, #5
 8003a36:	201d      	movs	r0, #29
 8003a38:	f000 fb13 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a3c:	201d      	movs	r0, #29
 8003a3e:	f000 fb2c 	bl	800409a <HAL_NVIC_EnableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40000400 	.word	0x40000400

08003a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 0318 	add.w	r3, r7, #24
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <HAL_TIM_MspPostInit+0xd4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d119      	bne.n	8003aac <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	6193      	str	r3, [r2, #24]
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a96:	2302      	movs	r3, #2
 8003a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9e:	f107 0318 	add.w	r3, r7, #24
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4823      	ldr	r0, [pc, #140]	; (8003b34 <HAL_TIM_MspPostInit+0xdc>)
 8003aa6:	f000 fbc5 	bl	8004234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003aaa:	e03a      	b.n	8003b22 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d118      	bne.n	8003ae8 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	6193      	str	r3, [r2, #24]
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ada:	f107 0318 	add.w	r3, r7, #24
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4814      	ldr	r0, [pc, #80]	; (8003b34 <HAL_TIM_MspPostInit+0xdc>)
 8003ae2:	f000 fba7 	bl	8004234 <HAL_GPIO_Init>
}
 8003ae6:	e01c      	b.n	8003b22 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <HAL_TIM_MspPostInit+0xe0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d117      	bne.n	8003b22 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	4a0e      	ldr	r2, [pc, #56]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	6193      	str	r3, [r2, #24]
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <HAL_TIM_MspPostInit+0xd8>)
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b12:	2302      	movs	r3, #2
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	f107 0318 	add.w	r3, r7, #24
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4805      	ldr	r0, [pc, #20]	; (8003b34 <HAL_TIM_MspPostInit+0xdc>)
 8003b1e:	f000 fb89 	bl	8004234 <HAL_GPIO_Init>
}
 8003b22:	bf00      	nop
 8003b24:	3728      	adds	r7, #40	; 0x28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40010800 	.word	0x40010800
 8003b38:	40000400 	.word	0x40000400

08003b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	f107 0318 	add.w	r3, r7, #24
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a3a      	ldr	r2, [pc, #232]	; (8003c40 <HAL_UART_MspInit+0x104>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d13a      	bne.n	8003bd2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	4a38      	ldr	r2, [pc, #224]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b66:	6193      	str	r3, [r2, #24]
 8003b68:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b74:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	4a32      	ldr	r2, [pc, #200]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	6193      	str	r3, [r2, #24]
 8003b80:	4b30      	ldr	r3, [pc, #192]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	2302      	movs	r3, #2
 8003b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b96:	2303      	movs	r3, #3
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9a:	f107 0318 	add.w	r3, r7, #24
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4829      	ldr	r0, [pc, #164]	; (8003c48 <HAL_UART_MspInit+0x10c>)
 8003ba2:	f000 fb47 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb4:	f107 0318 	add.w	r3, r7, #24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4823      	ldr	r0, [pc, #140]	; (8003c48 <HAL_UART_MspInit+0x10c>)
 8003bbc:	f000 fb3a 	bl	8004234 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2105      	movs	r1, #5
 8003bc4:	2025      	movs	r0, #37	; 0x25
 8003bc6:	f000 fa4c 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bca:	2025      	movs	r0, #37	; 0x25
 8003bcc:	f000 fa65 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bd0:	e032      	b.n	8003c38 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_UART_MspInit+0x110>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d12d      	bne.n	8003c38 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be6:	61d3      	str	r3, [r2, #28]
 8003be8:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	6193      	str	r3, [r2, #24]
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_UART_MspInit+0x108>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c10:	2312      	movs	r3, #18
 8003c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c14:	2301      	movs	r3, #1
 8003c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f107 0318 	add.w	r3, r7, #24
 8003c20:	4619      	mov	r1, r3
 8003c22:	4809      	ldr	r0, [pc, #36]	; (8003c48 <HAL_UART_MspInit+0x10c>)
 8003c24:	f000 fb06 	bl	8004234 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2105      	movs	r1, #5
 8003c2c:	2026      	movs	r0, #38	; 0x26
 8003c2e:	f000 fa18 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c32:	2026      	movs	r0, #38	; 0x26
 8003c34:	f000 fa31 	bl	800409a <HAL_NVIC_EnableIRQ>
}
 8003c38:	bf00      	nop
 8003c3a:	3728      	adds	r7, #40	; 0x28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40013800 	.word	0x40013800
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40010800 	.word	0x40010800
 8003c4c:	40004400 	.word	0x40004400

08003c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c54:	e7fe      	b.n	8003c54 <NMI_Handler+0x4>

08003c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c5a:	e7fe      	b.n	8003c5a <HardFault_Handler+0x4>

08003c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <MemManage_Handler+0x4>

08003c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c66:	e7fe      	b.n	8003c66 <BusFault_Handler+0x4>

08003c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c6c:	e7fe      	b.n	8003c6c <UsageFault_Handler+0x4>

08003c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c96:	f000 f8cd 	bl	8003e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap3_Pin);
 8003cae:	2080      	movs	r0, #128	; 0x80
 8003cb0:	f000 fc84 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <TIM1_UP_IRQHandler+0x10>)
 8003cbe:	f001 fea9 	bl	8005a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000008c 	.word	0x2000008c

08003ccc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <TIM2_IRQHandler+0x10>)
 8003cd2:	f001 fe9f 	bl	8005a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	200000d4 	.word	0x200000d4

08003ce0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <TIM3_IRQHandler+0x10>)
 8003ce6:	f001 fe95 	bl	8005a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000011c 	.word	0x2000011c

08003cf4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <SPI1_IRQHandler+0x10>)
 8003cfa:	f001 fac7 	bl	800528c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000034 	.word	0x20000034

08003d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d0c:	4802      	ldr	r0, [pc, #8]	; (8003d18 <USART1_IRQHandler+0x10>)
 8003d0e:	f002 fc7f 	bl	8006610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000164 	.word	0x20000164

08003d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d20:	4802      	ldr	r0, [pc, #8]	; (8003d2c <USART2_IRQHandler+0x10>)
 8003d22:	f002 fc75 	bl	8006610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200001ac 	.word	0x200001ac

08003d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EndCap4_Pin);
 8003d34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d38:	f000 fc40 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap1_Pin);
 8003d3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d40:	f000 fc3c 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EndCap2_Pin);
 8003d44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d48:	f000 fc38 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d5c:	f7ff fff8 	bl	8003d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d60:	480b      	ldr	r0, [pc, #44]	; (8003d90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003d62:	490c      	ldr	r1, [pc, #48]	; (8003d94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003d64:	4a0c      	ldr	r2, [pc, #48]	; (8003d98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d68:	e002      	b.n	8003d70 <LoopCopyDataInit>

08003d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6e:	3304      	adds	r3, #4

08003d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d74:	d3f9      	bcc.n	8003d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d78:	4c09      	ldr	r4, [pc, #36]	; (8003da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d7c:	e001      	b.n	8003d82 <LoopFillZerobss>

08003d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d80:	3204      	adds	r2, #4

08003d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d84:	d3fb      	bcc.n	8003d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d86:	f003 fa45 	bl	8007214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d8a:	f7fe fd07 	bl	800279c <main>
  bx lr
 8003d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8003d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d94:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003d98:	080072ac 	.word	0x080072ac
  ldr r2, =_sbss
 8003d9c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003da0:	200003c8 	.word	0x200003c8

08003da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003da4:	e7fe      	b.n	8003da4 <ADC1_2_IRQHandler>
	...

08003da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_Init+0x28>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <HAL_Init+0x28>)
 8003db2:	f043 0310 	orr.w	r3, r3, #16
 8003db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db8:	2003      	movs	r0, #3
 8003dba:	f000 f947 	bl	800404c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dbe:	200f      	movs	r0, #15
 8003dc0:	f000 f808 	bl	8003dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dc4:	f7ff fd50 	bl	8003868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40022000 	.word	0x40022000

08003dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_InitTick+0x54>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_InitTick+0x58>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f95f 	bl	80040b6 <HAL_SYSTICK_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00e      	b.n	8003e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d80a      	bhi.n	8003e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e10:	f000 f927 	bl	8004062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e14:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <HAL_InitTick+0x5c>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	2000000c 	.word	0x2000000c
 8003e2c:	20000014 	.word	0x20000014
 8003e30:	20000010 	.word	0x20000010

08003e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_IncTick+0x1c>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_IncTick+0x20>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	4a03      	ldr	r2, [pc, #12]	; (8003e54 <HAL_IncTick+0x20>)
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	20000014 	.word	0x20000014
 8003e54:	200003c4 	.word	0x200003c4

08003e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e5c:	4b02      	ldr	r3, [pc, #8]	; (8003e68 <HAL_GetTick+0x10>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	200003c4 	.word	0x200003c4

08003e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e74:	f7ff fff0 	bl	8003e58 <HAL_GetTick>
 8003e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e84:	d005      	beq.n	8003e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_Delay+0x44>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e92:	bf00      	nop
 8003e94:	f7ff ffe0 	bl	8003e58 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d8f7      	bhi.n	8003e94 <HAL_Delay+0x28>
  {
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000014 	.word	0x20000014

08003eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ee6:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	60d3      	str	r3, [r2, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <__NVIC_GetPriorityGrouping+0x18>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 0307 	and.w	r3, r3, #7
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	db0b      	blt.n	8003f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	f003 021f 	and.w	r2, r3, #31
 8003f30:	4906      	ldr	r1, [pc, #24]	; (8003f4c <__NVIC_EnableIRQ+0x34>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2001      	movs	r0, #1
 8003f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	e000e100 	.word	0xe000e100

08003f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	6039      	str	r1, [r7, #0]
 8003f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	db0a      	blt.n	8003f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	490c      	ldr	r1, [pc, #48]	; (8003f9c <__NVIC_SetPriority+0x4c>)
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	0112      	lsls	r2, r2, #4
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	440b      	add	r3, r1
 8003f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f78:	e00a      	b.n	8003f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4908      	ldr	r1, [pc, #32]	; (8003fa0 <__NVIC_SetPriority+0x50>)
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	3b04      	subs	r3, #4
 8003f88:	0112      	lsls	r2, r2, #4
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	761a      	strb	r2, [r3, #24]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	e000e100 	.word	0xe000e100
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	; 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f1c3 0307 	rsb	r3, r3, #7
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	bf28      	it	cs
 8003fc2:	2304      	movcs	r3, #4
 8003fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d902      	bls.n	8003fd4 <NVIC_EncodePriority+0x30>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3b03      	subs	r3, #3
 8003fd2:	e000      	b.n	8003fd6 <NVIC_EncodePriority+0x32>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff6:	43d9      	mvns	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ffc:	4313      	orrs	r3, r2
         );
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004018:	d301      	bcc.n	800401e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401a:	2301      	movs	r3, #1
 800401c:	e00f      	b.n	800403e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401e:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <SysTick_Config+0x40>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004026:	210f      	movs	r1, #15
 8004028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402c:	f7ff ff90 	bl	8003f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <SysTick_Config+0x40>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <SysTick_Config+0x40>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000e010 	.word	0xe000e010

0800404c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff2d 	bl	8003eb4 <__NVIC_SetPriorityGrouping>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004074:	f7ff ff42 	bl	8003efc <__NVIC_GetPriorityGrouping>
 8004078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff ff90 	bl	8003fa4 <NVIC_EncodePriority>
 8004084:	4602      	mov	r2, r0
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff5f 	bl	8003f50 <__NVIC_SetPriority>
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	4603      	mov	r3, r0
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ff35 	bl	8003f18 <__NVIC_EnableIRQ>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ffa2 	bl	8004008 <SysTick_Config>
 80040c4:	4603      	mov	r3, r0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e020      	b.n	800413a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020e 	bic.w	r2, r2, #14
 8004106:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d005      	beq.n	8004168 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2204      	movs	r2, #4
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e051      	b.n	800420c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 020e 	bic.w	r2, r2, #14
 8004176:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <HAL_DMA_Abort_IT+0xd4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d029      	beq.n	80041e6 <HAL_DMA_Abort_IT+0xa2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a21      	ldr	r2, [pc, #132]	; (800421c <HAL_DMA_Abort_IT+0xd8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d022      	beq.n	80041e2 <HAL_DMA_Abort_IT+0x9e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <HAL_DMA_Abort_IT+0xdc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01a      	beq.n	80041dc <HAL_DMA_Abort_IT+0x98>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1e      	ldr	r2, [pc, #120]	; (8004224 <HAL_DMA_Abort_IT+0xe0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d012      	beq.n	80041d6 <HAL_DMA_Abort_IT+0x92>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <HAL_DMA_Abort_IT+0xe4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00a      	beq.n	80041d0 <HAL_DMA_Abort_IT+0x8c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1b      	ldr	r2, [pc, #108]	; (800422c <HAL_DMA_Abort_IT+0xe8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d102      	bne.n	80041ca <HAL_DMA_Abort_IT+0x86>
 80041c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041c8:	e00e      	b.n	80041e8 <HAL_DMA_Abort_IT+0xa4>
 80041ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041ce:	e00b      	b.n	80041e8 <HAL_DMA_Abort_IT+0xa4>
 80041d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041d4:	e008      	b.n	80041e8 <HAL_DMA_Abort_IT+0xa4>
 80041d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041da:	e005      	b.n	80041e8 <HAL_DMA_Abort_IT+0xa4>
 80041dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041e0:	e002      	b.n	80041e8 <HAL_DMA_Abort_IT+0xa4>
 80041e2:	2310      	movs	r3, #16
 80041e4:	e000      	b.n	80041e8 <HAL_DMA_Abort_IT+0xa4>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4a11      	ldr	r2, [pc, #68]	; (8004230 <HAL_DMA_Abort_IT+0xec>)
 80041ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
    } 
  }
  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40020008 	.word	0x40020008
 800421c:	4002001c 	.word	0x4002001c
 8004220:	40020030 	.word	0x40020030
 8004224:	40020044 	.word	0x40020044
 8004228:	40020058 	.word	0x40020058
 800422c:	4002006c 	.word	0x4002006c
 8004230:	40020000 	.word	0x40020000

08004234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004234:	b480      	push	{r7}
 8004236:	b08b      	sub	sp, #44	; 0x2c
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004242:	2300      	movs	r3, #0
 8004244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004246:	e161      	b.n	800450c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004248:	2201      	movs	r2, #1
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	429a      	cmp	r2, r3
 8004262:	f040 8150 	bne.w	8004506 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4a97      	ldr	r2, [pc, #604]	; (80044c8 <HAL_GPIO_Init+0x294>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d05e      	beq.n	800432e <HAL_GPIO_Init+0xfa>
 8004270:	4a95      	ldr	r2, [pc, #596]	; (80044c8 <HAL_GPIO_Init+0x294>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d875      	bhi.n	8004362 <HAL_GPIO_Init+0x12e>
 8004276:	4a95      	ldr	r2, [pc, #596]	; (80044cc <HAL_GPIO_Init+0x298>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d058      	beq.n	800432e <HAL_GPIO_Init+0xfa>
 800427c:	4a93      	ldr	r2, [pc, #588]	; (80044cc <HAL_GPIO_Init+0x298>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d86f      	bhi.n	8004362 <HAL_GPIO_Init+0x12e>
 8004282:	4a93      	ldr	r2, [pc, #588]	; (80044d0 <HAL_GPIO_Init+0x29c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d052      	beq.n	800432e <HAL_GPIO_Init+0xfa>
 8004288:	4a91      	ldr	r2, [pc, #580]	; (80044d0 <HAL_GPIO_Init+0x29c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d869      	bhi.n	8004362 <HAL_GPIO_Init+0x12e>
 800428e:	4a91      	ldr	r2, [pc, #580]	; (80044d4 <HAL_GPIO_Init+0x2a0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d04c      	beq.n	800432e <HAL_GPIO_Init+0xfa>
 8004294:	4a8f      	ldr	r2, [pc, #572]	; (80044d4 <HAL_GPIO_Init+0x2a0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d863      	bhi.n	8004362 <HAL_GPIO_Init+0x12e>
 800429a:	4a8f      	ldr	r2, [pc, #572]	; (80044d8 <HAL_GPIO_Init+0x2a4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d046      	beq.n	800432e <HAL_GPIO_Init+0xfa>
 80042a0:	4a8d      	ldr	r2, [pc, #564]	; (80044d8 <HAL_GPIO_Init+0x2a4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d85d      	bhi.n	8004362 <HAL_GPIO_Init+0x12e>
 80042a6:	2b12      	cmp	r3, #18
 80042a8:	d82a      	bhi.n	8004300 <HAL_GPIO_Init+0xcc>
 80042aa:	2b12      	cmp	r3, #18
 80042ac:	d859      	bhi.n	8004362 <HAL_GPIO_Init+0x12e>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <HAL_GPIO_Init+0x80>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	0800432f 	.word	0x0800432f
 80042b8:	08004309 	.word	0x08004309
 80042bc:	0800431b 	.word	0x0800431b
 80042c0:	0800435d 	.word	0x0800435d
 80042c4:	08004363 	.word	0x08004363
 80042c8:	08004363 	.word	0x08004363
 80042cc:	08004363 	.word	0x08004363
 80042d0:	08004363 	.word	0x08004363
 80042d4:	08004363 	.word	0x08004363
 80042d8:	08004363 	.word	0x08004363
 80042dc:	08004363 	.word	0x08004363
 80042e0:	08004363 	.word	0x08004363
 80042e4:	08004363 	.word	0x08004363
 80042e8:	08004363 	.word	0x08004363
 80042ec:	08004363 	.word	0x08004363
 80042f0:	08004363 	.word	0x08004363
 80042f4:	08004363 	.word	0x08004363
 80042f8:	08004311 	.word	0x08004311
 80042fc:	08004325 	.word	0x08004325
 8004300:	4a76      	ldr	r2, [pc, #472]	; (80044dc <HAL_GPIO_Init+0x2a8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004306:	e02c      	b.n	8004362 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	623b      	str	r3, [r7, #32]
          break;
 800430e:	e029      	b.n	8004364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	3304      	adds	r3, #4
 8004316:	623b      	str	r3, [r7, #32]
          break;
 8004318:	e024      	b.n	8004364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	3308      	adds	r3, #8
 8004320:	623b      	str	r3, [r7, #32]
          break;
 8004322:	e01f      	b.n	8004364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	330c      	adds	r3, #12
 800432a:	623b      	str	r3, [r7, #32]
          break;
 800432c:	e01a      	b.n	8004364 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004336:	2304      	movs	r3, #4
 8004338:	623b      	str	r3, [r7, #32]
          break;
 800433a:	e013      	b.n	8004364 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004344:	2308      	movs	r3, #8
 8004346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	611a      	str	r2, [r3, #16]
          break;
 800434e:	e009      	b.n	8004364 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004350:	2308      	movs	r3, #8
 8004352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	615a      	str	r2, [r3, #20]
          break;
 800435a:	e003      	b.n	8004364 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800435c:	2300      	movs	r3, #0
 800435e:	623b      	str	r3, [r7, #32]
          break;
 8004360:	e000      	b.n	8004364 <HAL_GPIO_Init+0x130>
          break;
 8004362:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2bff      	cmp	r3, #255	; 0xff
 8004368:	d801      	bhi.n	800436e <HAL_GPIO_Init+0x13a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	e001      	b.n	8004372 <HAL_GPIO_Init+0x13e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2bff      	cmp	r3, #255	; 0xff
 8004378:	d802      	bhi.n	8004380 <HAL_GPIO_Init+0x14c>
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	e002      	b.n	8004386 <HAL_GPIO_Init+0x152>
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	3b08      	subs	r3, #8
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	210f      	movs	r1, #15
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	401a      	ands	r2, r3
 8004398:	6a39      	ldr	r1, [r7, #32]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	431a      	orrs	r2, r3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80a9 	beq.w	8004506 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043b4:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <HAL_GPIO_Init+0x2ac>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	4a49      	ldr	r2, [pc, #292]	; (80044e0 <HAL_GPIO_Init+0x2ac>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6193      	str	r3, [r2, #24]
 80043c0:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <HAL_GPIO_Init+0x2ac>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80043cc:	4a45      	ldr	r2, [pc, #276]	; (80044e4 <HAL_GPIO_Init+0x2b0>)
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	3302      	adds	r3, #2
 80043d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	220f      	movs	r2, #15
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a3d      	ldr	r2, [pc, #244]	; (80044e8 <HAL_GPIO_Init+0x2b4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00d      	beq.n	8004414 <HAL_GPIO_Init+0x1e0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a3c      	ldr	r2, [pc, #240]	; (80044ec <HAL_GPIO_Init+0x2b8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <HAL_GPIO_Init+0x1dc>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3b      	ldr	r2, [pc, #236]	; (80044f0 <HAL_GPIO_Init+0x2bc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d101      	bne.n	800440c <HAL_GPIO_Init+0x1d8>
 8004408:	2302      	movs	r3, #2
 800440a:	e004      	b.n	8004416 <HAL_GPIO_Init+0x1e2>
 800440c:	2303      	movs	r3, #3
 800440e:	e002      	b.n	8004416 <HAL_GPIO_Init+0x1e2>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_GPIO_Init+0x1e2>
 8004414:	2300      	movs	r3, #0
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	f002 0203 	and.w	r2, r2, #3
 800441c:	0092      	lsls	r2, r2, #2
 800441e:	4093      	lsls	r3, r2
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004426:	492f      	ldr	r1, [pc, #188]	; (80044e4 <HAL_GPIO_Init+0x2b0>)
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	3302      	adds	r3, #2
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004440:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	492b      	ldr	r1, [pc, #172]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
 800444c:	e006      	b.n	800445c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800444e:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	43db      	mvns	r3, r3
 8004456:	4927      	ldr	r1, [pc, #156]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 8004458:	4013      	ands	r3, r2
 800445a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d006      	beq.n	8004476 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004468:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	4921      	ldr	r1, [pc, #132]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	4313      	orrs	r3, r2
 8004472:	60cb      	str	r3, [r1, #12]
 8004474:	e006      	b.n	8004484 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004476:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	43db      	mvns	r3, r3
 800447e:	491d      	ldr	r1, [pc, #116]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 8004480:	4013      	ands	r3, r2
 8004482:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d006      	beq.n	800449e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	4917      	ldr	r1, [pc, #92]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
 800449c:	e006      	b.n	80044ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	4913      	ldr	r1, [pc, #76]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01f      	beq.n	80044f8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	490d      	ldr	r1, [pc, #52]	; (80044f4 <HAL_GPIO_Init+0x2c0>)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
 80044c4:	e01f      	b.n	8004506 <HAL_GPIO_Init+0x2d2>
 80044c6:	bf00      	nop
 80044c8:	10320000 	.word	0x10320000
 80044cc:	10310000 	.word	0x10310000
 80044d0:	10220000 	.word	0x10220000
 80044d4:	10210000 	.word	0x10210000
 80044d8:	10120000 	.word	0x10120000
 80044dc:	10110000 	.word	0x10110000
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40010800 	.word	0x40010800
 80044ec:	40010c00 	.word	0x40010c00
 80044f0:	40011000 	.word	0x40011000
 80044f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_GPIO_Init+0x2f4>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	43db      	mvns	r3, r3
 8004500:	4909      	ldr	r1, [pc, #36]	; (8004528 <HAL_GPIO_Init+0x2f4>)
 8004502:	4013      	ands	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	3301      	adds	r3, #1
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	f47f ae96 	bne.w	8004248 <HAL_GPIO_Init+0x14>
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	372c      	adds	r7, #44	; 0x2c
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	40010400 	.word	0x40010400

0800452c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	887b      	ldrh	r3, [r7, #2]
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e001      	b.n	800454e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	807b      	strh	r3, [r7, #2]
 8004566:	4613      	mov	r3, r2
 8004568:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800456a:	787b      	ldrb	r3, [r7, #1]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004570:	887a      	ldrh	r2, [r7, #2]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004576:	e003      	b.n	8004580 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004578:	887b      	ldrh	r3, [r7, #2]
 800457a:	041a      	lsls	r2, r3, #16
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	611a      	str	r2, [r3, #16]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800459c:	887a      	ldrh	r2, [r7, #2]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4013      	ands	r3, r2
 80045a2:	041a      	lsls	r2, r3, #16
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43d9      	mvns	r1, r3
 80045a8:	887b      	ldrh	r3, [r7, #2]
 80045aa:	400b      	ands	r3, r1
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045d2:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe ff06 	bl	80033ec <HAL_GPIO_EXTI_Callback>
  }
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40010400 	.word	0x40010400

080045ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e272      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8087 	beq.w	800471a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800460c:	4b92      	ldr	r3, [pc, #584]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	2b04      	cmp	r3, #4
 8004616:	d00c      	beq.n	8004632 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004618:	4b8f      	ldr	r3, [pc, #572]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d112      	bne.n	800464a <HAL_RCC_OscConfig+0x5e>
 8004624:	4b8c      	ldr	r3, [pc, #560]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d10b      	bne.n	800464a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004632:	4b89      	ldr	r3, [pc, #548]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d06c      	beq.n	8004718 <HAL_RCC_OscConfig+0x12c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d168      	bne.n	8004718 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e24c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004652:	d106      	bne.n	8004662 <HAL_RCC_OscConfig+0x76>
 8004654:	4b80      	ldr	r3, [pc, #512]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7f      	ldr	r2, [pc, #508]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800465a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	e02e      	b.n	80046c0 <HAL_RCC_OscConfig+0xd4>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0x98>
 800466a:	4b7b      	ldr	r3, [pc, #492]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7a      	ldr	r2, [pc, #488]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b78      	ldr	r3, [pc, #480]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a77      	ldr	r2, [pc, #476]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800467c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e01d      	b.n	80046c0 <HAL_RCC_OscConfig+0xd4>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0xbc>
 800468e:	4b72      	ldr	r3, [pc, #456]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a71      	ldr	r2, [pc, #452]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b6f      	ldr	r3, [pc, #444]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6e      	ldr	r2, [pc, #440]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0xd4>
 80046a8:	4b6b      	ldr	r3, [pc, #428]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a6a      	ldr	r2, [pc, #424]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b68      	ldr	r3, [pc, #416]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a67      	ldr	r2, [pc, #412]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7ff fbc6 	bl	8003e58 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d0:	f7ff fbc2 	bl	8003e58 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	; 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e200      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	4b5d      	ldr	r3, [pc, #372]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe4>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7ff fbb2 	bl	8003e58 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f8:	f7ff fbae 	bl	8003e58 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	; 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1ec      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	4b53      	ldr	r3, [pc, #332]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x10c>
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d063      	beq.n	80047ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004726:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004732:	4b49      	ldr	r3, [pc, #292]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b08      	cmp	r3, #8
 800473c:	d11c      	bne.n	8004778 <HAL_RCC_OscConfig+0x18c>
 800473e:	4b46      	ldr	r3, [pc, #280]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d116      	bne.n	8004778 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474a:	4b43      	ldr	r3, [pc, #268]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x176>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e1c0      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4939      	ldr	r1, [pc, #228]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004776:	e03a      	b.n	80047ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_RCC_OscConfig+0x270>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004786:	f7ff fb67 	bl	8003e58 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478e:	f7ff fb63 	bl	8003e58 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1a1      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4927      	ldr	r1, [pc, #156]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]
 80047c0:	e015      	b.n	80047ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <HAL_RCC_OscConfig+0x270>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7ff fb46 	bl	8003e58 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d0:	f7ff fb42 	bl	8003e58 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e180      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d03a      	beq.n	8004870 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d019      	beq.n	8004836 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004802:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_RCC_OscConfig+0x274>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004808:	f7ff fb26 	bl	8003e58 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004810:	f7ff fb22 	bl	8003e58 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e160      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800482e:	2001      	movs	r0, #1
 8004830:	f000 fada 	bl	8004de8 <RCC_Delay>
 8004834:	e01c      	b.n	8004870 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RCC_OscConfig+0x274>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483c:	f7ff fb0c 	bl	8003e58 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004842:	e00f      	b.n	8004864 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004844:	f7ff fb08 	bl	8003e58 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d908      	bls.n	8004864 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e146      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	42420000 	.word	0x42420000
 8004860:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004864:	4b92      	ldr	r3, [pc, #584]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e9      	bne.n	8004844 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a6 	beq.w	80049ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004882:	4b8b      	ldr	r3, [pc, #556]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488e:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4a87      	ldr	r2, [pc, #540]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004898:	61d3      	str	r3, [r2, #28]
 800489a:	4b85      	ldr	r3, [pc, #532]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	4b82      	ldr	r3, [pc, #520]	; (8004ab4 <HAL_RCC_OscConfig+0x4c8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d118      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b6:	4b7f      	ldr	r3, [pc, #508]	; (8004ab4 <HAL_RCC_OscConfig+0x4c8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7e      	ldr	r2, [pc, #504]	; (8004ab4 <HAL_RCC_OscConfig+0x4c8>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c2:	f7ff fac9 	bl	8003e58 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ca:	f7ff fac5 	bl	8003e58 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b64      	cmp	r3, #100	; 0x64
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e103      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	4b75      	ldr	r3, [pc, #468]	; (8004ab4 <HAL_RCC_OscConfig+0x4c8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x312>
 80048f0:	4b6f      	ldr	r3, [pc, #444]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a6e      	ldr	r2, [pc, #440]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6213      	str	r3, [r2, #32]
 80048fc:	e02d      	b.n	800495a <HAL_RCC_OscConfig+0x36e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x334>
 8004906:	4b6a      	ldr	r3, [pc, #424]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	4a69      	ldr	r2, [pc, #420]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	6213      	str	r3, [r2, #32]
 8004912:	4b67      	ldr	r3, [pc, #412]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4a66      	ldr	r2, [pc, #408]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	6213      	str	r3, [r2, #32]
 800491e:	e01c      	b.n	800495a <HAL_RCC_OscConfig+0x36e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b05      	cmp	r3, #5
 8004926:	d10c      	bne.n	8004942 <HAL_RCC_OscConfig+0x356>
 8004928:	4b61      	ldr	r3, [pc, #388]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	4a60      	ldr	r2, [pc, #384]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	f043 0304 	orr.w	r3, r3, #4
 8004932:	6213      	str	r3, [r2, #32]
 8004934:	4b5e      	ldr	r3, [pc, #376]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	4a5d      	ldr	r2, [pc, #372]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6213      	str	r3, [r2, #32]
 8004940:	e00b      	b.n	800495a <HAL_RCC_OscConfig+0x36e>
 8004942:	4b5b      	ldr	r3, [pc, #364]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4a5a      	ldr	r2, [pc, #360]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	6213      	str	r3, [r2, #32]
 800494e:	4b58      	ldr	r3, [pc, #352]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4a57      	ldr	r2, [pc, #348]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	f023 0304 	bic.w	r3, r3, #4
 8004958:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d015      	beq.n	800498e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004962:	f7ff fa79 	bl	8003e58 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	e00a      	b.n	8004980 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7ff fa75 	bl	8003e58 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e0b1      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004980:	4b4b      	ldr	r3, [pc, #300]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ee      	beq.n	800496a <HAL_RCC_OscConfig+0x37e>
 800498c:	e014      	b.n	80049b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498e:	f7ff fa63 	bl	8003e58 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004994:	e00a      	b.n	80049ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7ff fa5f 	bl	8003e58 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e09b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ac:	4b40      	ldr	r3, [pc, #256]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1ee      	bne.n	8004996 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049be:	4b3c      	ldr	r3, [pc, #240]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8087 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d4:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d061      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d146      	bne.n	8004a76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e8:	4b33      	ldr	r3, [pc, #204]	; (8004ab8 <HAL_RCC_OscConfig+0x4cc>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7ff fa33 	bl	8003e58 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f6:	f7ff fa2f 	bl	8003e58 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e06d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a08:	4b29      	ldr	r3, [pc, #164]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d108      	bne.n	8004a30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4921      	ldr	r1, [pc, #132]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a30:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a19      	ldr	r1, [r3, #32]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	430b      	orrs	r3, r1
 8004a42:	491b      	ldr	r1, [pc, #108]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_RCC_OscConfig+0x4cc>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7ff fa03 	bl	8003e58 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a56:	f7ff f9ff 	bl	8003e58 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e03d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x46a>
 8004a74:	e035      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <HAL_RCC_OscConfig+0x4cc>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7ff f9ec 	bl	8003e58 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a84:	f7ff f9e8 	bl	8003e58 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e026      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x498>
 8004aa2:	e01e      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e019      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_OscConfig+0x500>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d106      	bne.n	8004ade <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000

08004af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0d0      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b04:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d910      	bls.n	8004b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b67      	ldr	r3, [pc, #412]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 0207 	bic.w	r2, r3, #7
 8004b1a:	4965      	ldr	r1, [pc, #404]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b63      	ldr	r3, [pc, #396]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0b8      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b4c:	4b59      	ldr	r3, [pc, #356]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4a58      	ldr	r2, [pc, #352]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b64:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4a52      	ldr	r2, [pc, #328]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b70:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	494d      	ldr	r1, [pc, #308]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d040      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d115      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e07f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bae:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e073      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbe:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06b      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f023 0203 	bic.w	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4936      	ldr	r1, [pc, #216]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be0:	f7ff f93a 	bl	8003e58 <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be8:	f7ff f936 	bl	8003e58 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e053      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 020c 	and.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d1eb      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d210      	bcs.n	8004c40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 0207 	bic.w	r2, r3, #7
 8004c26:	4922      	ldr	r1, [pc, #136]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2e:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e032      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	490e      	ldr	r1, [pc, #56]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c7e:	f000 f82d 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	490a      	ldr	r1, [pc, #40]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c90:	5ccb      	ldrb	r3, [r1, r3]
 8004c92:	fa22 f303 	lsr.w	r3, r2, r3
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <HAL_RCC_ClockConfig+0x1cc>)
 8004c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1d0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff f898 	bl	8003dd4 <HAL_InitTick>

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40022000 	.word	0x40022000
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	08007274 	.word	0x08007274
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	20000010 	.word	0x20000010

08004cc4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <HAL_RCC_EnableCSS+0x14>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	4242004c 	.word	0x4242004c

08004cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d002      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x30>
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d003      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x36>
 8004d0a:	e027      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d0c:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d0e:	613b      	str	r3, [r7, #16]
      break;
 8004d10:	e027      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	0c9b      	lsrs	r3, r3, #18
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	4a17      	ldr	r2, [pc, #92]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d1c:	5cd3      	ldrb	r3, [r2, r3]
 8004d1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d010      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	0c5b      	lsrs	r3, r3, #17
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d36:	5cd3      	ldrb	r3, [r2, r3]
 8004d38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a0d      	ldr	r2, [pc, #52]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d3e:	fb03 f202 	mul.w	r2, r3, r2
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e004      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a0c      	ldr	r2, [pc, #48]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d50:	fb02 f303 	mul.w	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	613b      	str	r3, [r7, #16]
      break;
 8004d5a:	e002      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d5e:	613b      	str	r3, [r7, #16]
      break;
 8004d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d62:	693b      	ldr	r3, [r7, #16]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40021000 	.word	0x40021000
 8004d74:	007a1200 	.word	0x007a1200
 8004d78:	0800728c 	.word	0x0800728c
 8004d7c:	0800729c 	.word	0x0800729c
 8004d80:	003d0900 	.word	0x003d0900

08004d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d88:	4b02      	ldr	r3, [pc, #8]	; (8004d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	2000000c 	.word	0x2000000c

08004d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d9c:	f7ff fff2 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4903      	ldr	r1, [pc, #12]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	08007284 	.word	0x08007284

08004dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dc4:	f7ff ffde 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	0adb      	lsrs	r3, r3, #11
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4903      	ldr	r1, [pc, #12]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40021000 	.word	0x40021000
 8004de4:	08007284 	.word	0x08007284

08004de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <RCC_Delay+0x34>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <RCC_Delay+0x38>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0a5b      	lsrs	r3, r3, #9
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e04:	bf00      	nop
  }
  while (Delay --);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1e5a      	subs	r2, r3, #1
 8004e0a:	60fa      	str	r2, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f9      	bne.n	8004e04 <RCC_Delay+0x1c>
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	2000000c 	.word	0x2000000c
 8004e20:	10624dd3 	.word	0x10624dd3

08004e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e076      	b.n	8004f24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e46:	d009      	beq.n	8004e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	61da      	str	r2, [r3, #28]
 8004e4e:	e005      	b.n	8004e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fe fd30 	bl	80038dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	0c1a      	lsrs	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f002 0204 	and.w	r2, r2, #4
 8004f02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	; 0x30
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_SPI_TransmitReceive+0x26>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e198      	b.n	8005284 <HAL_SPI_TransmitReceive+0x358>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f5a:	f7fe ff7d 	bl	8003e58 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f70:	887b      	ldrh	r3, [r7, #2]
 8004f72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d00f      	beq.n	8004f9c <HAL_SPI_TransmitReceive+0x70>
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f82:	d107      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d103      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x68>
 8004f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d003      	beq.n	8004f9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f9a:	e16d      	b.n	8005278 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x82>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x82>
 8004fa8:	887b      	ldrh	r3, [r7, #2]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fb4:	e160      	b.n	8005278 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d003      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2205      	movs	r2, #5
 8004fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	887a      	ldrh	r2, [r7, #2]
 8004fda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	887a      	ldrh	r2, [r7, #2]
 8004fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	887a      	ldrh	r2, [r7, #2]
 8004ff2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	d007      	beq.n	800501e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005026:	d17c      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x10a>
 8005030:	8b7b      	ldrh	r3, [r7, #26]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d16a      	bne.n	800510c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	881a      	ldrh	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	1c9a      	adds	r2, r3, #2
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505a:	e057      	b.n	800510c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b02      	cmp	r3, #2
 8005068:	d11b      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x176>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d016      	beq.n	80050a2 <HAL_SPI_TransmitReceive+0x176>
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d113      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	881a      	ldrh	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	1c9a      	adds	r2, r3, #2
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d119      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x1b8>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d014      	beq.n	80050e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	b292      	uxth	r2, r2
 80050c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	1c9a      	adds	r2, r3, #2
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050e0:	2301      	movs	r3, #1
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050e4:	f7fe feb8 	bl	8003e58 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d80b      	bhi.n	800510c <HAL_SPI_TransmitReceive+0x1e0>
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fa:	d007      	beq.n	800510c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800510a:	e0b5      	b.n	8005278 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1a2      	bne.n	800505c <HAL_SPI_TransmitReceive+0x130>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d19d      	bne.n	800505c <HAL_SPI_TransmitReceive+0x130>
 8005120:	e080      	b.n	8005224 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x204>
 800512a:	8b7b      	ldrh	r3, [r7, #26]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d16f      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005156:	e05b      	b.n	8005210 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d11c      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x274>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d017      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x274>
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d114      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	330c      	adds	r3, #12
 8005180:	7812      	ldrb	r2, [r2, #0]
 8005182:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d119      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x2b6>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d014      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051de:	2301      	movs	r3, #1
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051e2:	f7fe fe39 	bl	8003e58 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d803      	bhi.n	80051fa <HAL_SPI_TransmitReceive+0x2ce>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f8:	d102      	bne.n	8005200 <HAL_SPI_TransmitReceive+0x2d4>
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d107      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800520e:	e033      	b.n	8005278 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d19e      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x22c>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d199      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f9b3 	bl	8005594 <SPI_EndRxTxTransaction>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005240:	e01a      	b.n	8005278 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526e:	e003      	b.n	8005278 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005280:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005284:	4618      	mov	r0, r3
 8005286:	3730      	adds	r7, #48	; 0x30
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10e      	bne.n	80052cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
    return;
 80052ca:	e0b7      	b.n	800543c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_SPI_IRQHandler+0x5e>
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
    return;
 80052e8:	e0a8      	b.n	800543c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d105      	bne.n	8005300 <HAL_SPI_IRQHandler+0x74>
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 809e 	beq.w	800543c <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8098 	beq.w	800543c <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d023      	beq.n	800535e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b03      	cmp	r3, #3
 8005320:	d011      	beq.n	8005346 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f043 0204 	orr.w	r2, r3, #4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	e00b      	b.n	800535e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	693b      	ldr	r3, [r7, #16]
        return;
 800535c:	e06e      	b.n	800543c <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d014      	beq.n	8005392 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	2b00      	cmp	r3, #0
 8005398:	d04f      	beq.n	800543a <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <HAL_SPI_IRQHandler+0x13a>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d034      	beq.n	8005430 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0203 	bic.w	r2, r2, #3
 80053d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d011      	beq.n	8005402 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e2:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_SPI_IRQHandler+0x1b8>)
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe feaa 	bl	8004144 <HAL_DMA_Abort_IT>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540e:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <HAL_SPI_IRQHandler+0x1b8>)
 8005410:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fe94 	bl	8004144 <HAL_DMA_Abort_IT>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800542e:	e003      	b.n	8005438 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f809 	bl	8005448 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005436:	e000      	b.n	800543a <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005438:	bf00      	nop
    return;
 800543a:	bf00      	nop
  }
}
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	0800545b 	.word	0x0800545b

08005448 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff ffe7 	bl	8005448 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005494:	f7fe fce0 	bl	8003e58 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	4413      	add	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054a4:	f7fe fcd8 	bl	8003e58 <HAL_GetTick>
 80054a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054aa:	4b39      	ldr	r3, [pc, #228]	; (8005590 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	015b      	lsls	r3, r3, #5
 80054b0:	0d1b      	lsrs	r3, r3, #20
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ba:	e054      	b.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c2:	d050      	beq.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054c4:	f7fe fcc8 	bl	8003e58 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d902      	bls.n	80054da <SPI_WaitFlagStateUntilTimeout+0x56>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d13d      	bne.n	8005556 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f2:	d111      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fc:	d004      	beq.n	8005508 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005506:	d107      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005520:	d10f      	bne.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e017      	b.n	8005586 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3b01      	subs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	429a      	cmp	r2, r3
 8005582:	d19b      	bne.n	80054bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	2000000c 	.word	0x2000000c

08005594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff ff6a 	bl	8005484 <SPI_WaitFlagStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e000      	b.n	80055c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e041      	b.n	8005666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f839 	bl	800566e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 fbee 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d001      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e035      	b.n	8005704 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_TIM_Base_Start_IT+0x90>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_TIM_Base_Start_IT+0x4e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c2:	d004      	beq.n	80056ce <HAL_TIM_Base_Start_IT+0x4e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a12      	ldr	r2, [pc, #72]	; (8005714 <HAL_TIM_Base_Start_IT+0x94>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d111      	bne.n	80056f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b06      	cmp	r3, #6
 80056de:	d010      	beq.n	8005702 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	e007      	b.n	8005702 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400

08005718 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	f241 1311 	movw	r3, #4369	; 0x1111
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10f      	bne.n	8005760 <HAL_TIM_Base_Stop_IT+0x48>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	f240 4344 	movw	r3, #1092	; 0x444
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_TIM_Base_Stop_IT+0x48>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e041      	b.n	800580a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fe f900 	bl	80039a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 fb1c 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_TIM_PWM_Start+0x24>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e022      	b.n	800587e <HAL_TIM_PWM_Start+0x6a>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b04      	cmp	r3, #4
 800583c:	d109      	bne.n	8005852 <HAL_TIM_PWM_Start+0x3e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e015      	b.n	800587e <HAL_TIM_PWM_Start+0x6a>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d109      	bne.n	800586c <HAL_TIM_PWM_Start+0x58>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e008      	b.n	800587e <HAL_TIM_PWM_Start+0x6a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e059      	b.n	800593a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <HAL_TIM_PWM_Start+0x82>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005894:	e013      	b.n	80058be <HAL_TIM_PWM_Start+0xaa>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b04      	cmp	r3, #4
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x92>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a4:	e00b      	b.n	80058be <HAL_TIM_PWM_Start+0xaa>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_PWM_Start+0xa2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b4:	e003      	b.n	80058be <HAL_TIM_PWM_Start+0xaa>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2201      	movs	r2, #1
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fc72 	bl	80061b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <HAL_TIM_PWM_Start+0x130>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d107      	bne.n	80058e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a16      	ldr	r2, [pc, #88]	; (8005944 <HAL_TIM_PWM_Start+0x130>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d009      	beq.n	8005904 <HAL_TIM_PWM_Start+0xf0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	d004      	beq.n	8005904 <HAL_TIM_PWM_Start+0xf0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a12      	ldr	r2, [pc, #72]	; (8005948 <HAL_TIM_PWM_Start+0x134>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d111      	bne.n	8005928 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b06      	cmp	r3, #6
 8005914:	d010      	beq.n	8005938 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	e007      	b.n	8005938 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40000400 	.word	0x40000400

0800594c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2200      	movs	r2, #0
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fc26 	bl	80061b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <HAL_TIM_PWM_Stop+0xc4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d117      	bne.n	800599e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	f241 1311 	movw	r3, #4369	; 0x1111
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <HAL_TIM_PWM_Stop+0x52>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a1a      	ldr	r2, [r3, #32]
 8005984:	f240 4344 	movw	r3, #1092	; 0x444
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <HAL_TIM_PWM_Stop+0x52>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800599c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <HAL_TIM_PWM_Stop+0x82>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1a      	ldr	r2, [r3, #32]
 80059b4:	f240 4344 	movw	r3, #1092	; 0x444
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <HAL_TIM_PWM_Stop+0x82>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Stop+0x92>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	e013      	b.n	8005a06 <HAL_TIM_PWM_Stop+0xba>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Stop+0xa2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ec:	e00b      	b.n	8005a06 <HAL_TIM_PWM_Stop+0xba>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Stop+0xb2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fc:	e003      	b.n	8005a06 <HAL_TIM_PWM_Stop+0xba>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40012c00 	.word	0x40012c00

08005a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d122      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d11b      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0202 	mvn.w	r2, #2
 8005a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f9af 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f9a2 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f9b1 	bl	8005dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d122      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0204 	mvn.w	r2, #4
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f985 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f978 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f987 	bl	8005dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d122      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d11b      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0208 	mvn.w	r2, #8
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2204      	movs	r2, #4
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f95b 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f94e 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f95d 	bl	8005dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b10      	cmp	r3, #16
 8005b24:	d122      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d11b      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0210 	mvn.w	r2, #16
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2208      	movs	r2, #8
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f931 	bl	8005dba <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f924 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f933 	bl	8005dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d10e      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d107      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0201 	mvn.w	r2, #1
 8005b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fd fd76 	bl	8003684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b80      	cmp	r3, #128	; 0x80
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fbcc 	bl	800635c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f8f7 	bl	8005dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d10e      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d107      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0220 	mvn.w	r2, #32
 8005c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fb97 	bl	800634a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e0ae      	b.n	8005da0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	f200 809f 	bhi.w	8005d90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c8d 	.word	0x08005c8d
 8005c5c:	08005d91 	.word	0x08005d91
 8005c60:	08005d91 	.word	0x08005d91
 8005c64:	08005d91 	.word	0x08005d91
 8005c68:	08005ccd 	.word	0x08005ccd
 8005c6c:	08005d91 	.word	0x08005d91
 8005c70:	08005d91 	.word	0x08005d91
 8005c74:	08005d91 	.word	0x08005d91
 8005c78:	08005d0f 	.word	0x08005d0f
 8005c7c:	08005d91 	.word	0x08005d91
 8005c80:	08005d91 	.word	0x08005d91
 8005c84:	08005d91 	.word	0x08005d91
 8005c88:	08005d4f 	.word	0x08005d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 f904 	bl	8005ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0208 	orr.w	r2, r2, #8
 8005ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0204 	bic.w	r2, r2, #4
 8005cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	619a      	str	r2, [r3, #24]
      break;
 8005cca:	e064      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f94a 	bl	8005f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6999      	ldr	r1, [r3, #24]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	619a      	str	r2, [r3, #24]
      break;
 8005d0c:	e043      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f993 	bl	8006040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0208 	orr.w	r2, r2, #8
 8005d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0204 	bic.w	r2, r2, #4
 8005d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	61da      	str	r2, [r3, #28]
      break;
 8005d4c:	e023      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f9dd 	bl	8006114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69d9      	ldr	r1, [r3, #28]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	021a      	lsls	r2, r3, #8
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	61da      	str	r2, [r3, #28]
      break;
 8005d8e:	e002      	b.n	8005d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
      break;
 8005d94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr

08005dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <TIM_Base_SetConfig+0xa8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_Base_SetConfig+0x28>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0x28>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a22      	ldr	r2, [pc, #136]	; (8005e9c <TIM_Base_SetConfig+0xac>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <TIM_Base_SetConfig+0xa8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <TIM_Base_SetConfig+0x52>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d003      	beq.n	8005e42 <TIM_Base_SetConfig+0x52>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <TIM_Base_SetConfig+0xac>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d108      	bne.n	8005e54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <TIM_Base_SetConfig+0xa8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d103      	bne.n	8005e88 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	615a      	str	r2, [r3, #20]
}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40000400 	.word	0x40000400

08005ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f023 0201 	bic.w	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0303 	bic.w	r3, r3, #3
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f023 0302 	bic.w	r3, r3, #2
 8005ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a1c      	ldr	r2, [pc, #112]	; (8005f68 <TIM_OC1_SetConfig+0xc8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d10c      	bne.n	8005f16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0308 	bic.w	r3, r3, #8
 8005f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0304 	bic.w	r3, r3, #4
 8005f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a13      	ldr	r2, [pc, #76]	; (8005f68 <TIM_OC1_SetConfig+0xc8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d111      	bne.n	8005f42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	621a      	str	r2, [r3, #32]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00

08005f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f023 0210 	bic.w	r2, r3, #16
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0320 	bic.w	r3, r3, #32
 8005fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a1d      	ldr	r2, [pc, #116]	; (800603c <TIM_OC2_SetConfig+0xd0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d10d      	bne.n	8005fe8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a14      	ldr	r2, [pc, #80]	; (800603c <TIM_OC2_SetConfig+0xd0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d113      	bne.n	8006018 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr
 800603c:	40012c00 	.word	0x40012c00

08006040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <TIM_OC3_SetConfig+0xd0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10d      	bne.n	80060ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a14      	ldr	r2, [pc, #80]	; (8006110 <TIM_OC3_SetConfig+0xd0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d113      	bne.n	80060ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	621a      	str	r2, [r3, #32]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40012c00 	.word	0x40012c00

08006114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800615e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a0f      	ldr	r2, [pc, #60]	; (80061ac <TIM_OC4_SetConfig+0x98>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d109      	bne.n	8006188 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800617a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	019b      	lsls	r3, r3, #6
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr
 80061ac:	40012c00 	.word	0x40012c00

080061b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2201      	movs	r2, #1
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1a      	ldr	r2, [r3, #32]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	431a      	orrs	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800620c:	2302      	movs	r3, #2
 800620e:	e041      	b.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a14      	ldr	r2, [pc, #80]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d009      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625c:	d004      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a10      	ldr	r2, [pc, #64]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d10c      	bne.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800626e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4313      	orrs	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40000400 	.word	0x40000400

080062a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e03d      	b.n	8006340 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr

0800634a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e042      	b.n	8006406 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fd fbd1 	bl	8003b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2224      	movs	r2, #36	; 0x24
 800639e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fe48 	bl	8007048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e04a      	b.n	80064b6 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fd fb81 	bl	8003b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2224      	movs	r2, #36	; 0x24
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006450:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fdf8 	bl	8007048 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006466:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006476:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0208 	orr.w	r2, r2, #8
 8006486:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006496:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b08a      	sub	sp, #40	; 0x28
 80064c2:	af02      	add	r7, sp, #8
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d16d      	bne.n	80065ba <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <HAL_UART_Transmit+0x2c>
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e066      	b.n	80065bc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2221      	movs	r2, #33	; 0x21
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064fc:	f7fd fcac 	bl	8003e58 <HAL_GetTick>
 8006500:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006516:	d108      	bne.n	800652a <HAL_UART_Transmit+0x6c>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006520:	2300      	movs	r3, #0
 8006522:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	e003      	b.n	8006532 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006532:	e02a      	b.n	800658a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	2180      	movs	r1, #128	; 0x80
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fb3f 	bl	8006bc2 <UART_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e036      	b.n	80065bc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006562:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	3302      	adds	r3, #2
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e007      	b.n	800657c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3301      	adds	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1cf      	bne.n	8006534 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	2140      	movs	r1, #64	; 0x40
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fb0f 	bl	8006bc2 <UART_WaitOnFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e006      	b.n	80065bc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e000      	b.n	80065bc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80065ba:	2302      	movs	r3, #2
  }
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3720      	adds	r7, #32
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d112      	bne.n	8006604 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_UART_Receive_IT+0x26>
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e00b      	b.n	8006606 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	461a      	mov	r2, r3
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 fb4f 	bl	8006c9e <UART_Start_Receive_IT>
 8006600:	4603      	mov	r3, r0
 8006602:	e000      	b.n	8006606 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b0ba      	sub	sp, #232	; 0xe8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006636:	2300      	movs	r3, #0
 8006638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800663c:	2300      	movs	r3, #0
 800663e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800664e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10f      	bne.n	8006676 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <HAL_UART_IRQHandler+0x66>
 8006662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fc2b 	bl	8006eca <UART_Receive_IT>
      return;
 8006674:	e25b      	b.n	8006b2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80de 	beq.w	800683c <HAL_UART_IRQHandler+0x22c>
 8006680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800668c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006690:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 80d1 	beq.w	800683c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_UART_IRQHandler+0xae>
 80066a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b6:	f043 0201 	orr.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00b      	beq.n	80066e2 <HAL_UART_IRQHandler+0xd2>
 80066ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066da:	f043 0202 	orr.w	r2, r3, #2
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00b      	beq.n	8006706 <HAL_UART_IRQHandler+0xf6>
 80066ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	f043 0204 	orr.w	r2, r3, #4
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d011      	beq.n	8006736 <HAL_UART_IRQHandler+0x126>
 8006712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800671e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	f043 0208 	orr.w	r2, r3, #8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 81f2 	beq.w	8006b24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d008      	beq.n	800675e <HAL_UART_IRQHandler+0x14e>
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fbb6 	bl	8006eca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <HAL_UART_IRQHandler+0x17a>
 8006782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d04f      	beq.n	800682a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fac0 	bl	8006d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d041      	beq.n	8006822 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3314      	adds	r3, #20
 80067a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3314      	adds	r3, #20
 80067c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1d9      	bne.n	800679e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d013      	beq.n	800681a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	4a7e      	ldr	r2, [pc, #504]	; (80069f0 <HAL_UART_IRQHandler+0x3e0>)
 80067f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fd fca0 	bl	8004144 <HAL_DMA_Abort_IT>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e00e      	b.n	8006838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fc fdf0 	bl	8003400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	e00a      	b.n	8006838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fc fdec 	bl	8003400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006828:	e006      	b.n	8006838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fc fde8 	bl	8003400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006836:	e175      	b.n	8006b24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	bf00      	nop
    return;
 800683a:	e173      	b.n	8006b24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	2b01      	cmp	r3, #1
 8006842:	f040 814f 	bne.w	8006ae4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684a:	f003 0310 	and.w	r3, r3, #16
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8148 	beq.w	8006ae4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8141 	beq.w	8006ae4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006862:	2300      	movs	r3, #0
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80b6 	beq.w	80069f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8145 	beq.w	8006b28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068a6:	429a      	cmp	r2, r3
 80068a8:	f080 813e 	bcs.w	8006b28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	f000 8088 	beq.w	80069d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1d9      	bne.n	80068c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800691c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800691e:	f023 0301 	bic.w	r3, r3, #1
 8006922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3314      	adds	r3, #20
 800692c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006930:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006934:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006938:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e1      	bne.n	800690c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800695a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3314      	adds	r3, #20
 8006968:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800696c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800696e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006972:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800697a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e3      	bne.n	8006948 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	330c      	adds	r3, #12
 8006994:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800699e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a0:	f023 0310 	bic.w	r3, r3, #16
 80069a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80069b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e3      	bne.n	800698e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fd fb7f 	bl	80040ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f8ad 	bl	8006b46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069ec:	e09c      	b.n	8006b28 <HAL_UART_IRQHandler+0x518>
 80069ee:	bf00      	nop
 80069f0:	08006dd5 	.word	0x08006dd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 808e 	beq.w	8006b2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8089 	beq.w	8006b2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006a40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e3      	bne.n	8006a1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	623b      	str	r3, [r7, #32]
   return(result);
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3314      	adds	r3, #20
 8006a72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a76:	633a      	str	r2, [r7, #48]	; 0x30
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e3      	bne.n	8006a52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	e853 3f00 	ldrex	r3, [r3]
 8006aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0310 	bic.w	r3, r3, #16
 8006aae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006abc:	61fa      	str	r2, [r7, #28]
 8006abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	69b9      	ldr	r1, [r7, #24]
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e3      	bne.n	8006a98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f832 	bl	8006b46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ae2:	e023      	b.n	8006b2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d009      	beq.n	8006b04 <HAL_UART_IRQHandler+0x4f4>
 8006af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f97d 	bl	8006dfc <UART_Transmit_IT>
    return;
 8006b02:	e014      	b.n	8006b2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <HAL_UART_IRQHandler+0x51e>
 8006b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f9bc 	bl	8006e9a <UART_EndTransmit_IT>
    return;
 8006b22:	e004      	b.n	8006b2e <HAL_UART_IRQHandler+0x51e>
    return;
 8006b24:	bf00      	nop
 8006b26:	e002      	b.n	8006b2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006b2c:	bf00      	nop
  }
}
 8006b2e:	37e8      	adds	r7, #232	; 0xe8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e020      	b.n	8006bb8 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2224      	movs	r2, #36	; 0x24
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f023 030c 	bic.w	r3, r3, #12
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f043 0308 	orr.w	r3, r3, #8
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr

08006bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b090      	sub	sp, #64	; 0x40
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	603b      	str	r3, [r7, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd2:	e050      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bda:	d04c      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006be2:	f7fd f939 	bl	8003e58 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d241      	bcs.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	330c      	adds	r3, #12
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	330c      	adds	r3, #12
 8006c10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c12:	637a      	str	r2, [r7, #52]	; 0x34
 8006c14:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e5      	bne.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3314      	adds	r3, #20
 8006c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	613b      	str	r3, [r7, #16]
   return(result);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3314      	adds	r3, #20
 8006c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c46:	623a      	str	r2, [r7, #32]
 8006c48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	69f9      	ldr	r1, [r7, #28]
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e5      	bne.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e00f      	b.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	bf0c      	ite	eq
 8006c86:	2301      	moveq	r3, #1
 8006c88:	2300      	movne	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d09f      	beq.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3740      	adds	r7, #64	; 0x40
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2222      	movs	r2, #34	; 0x22
 8006cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695a      	ldr	r2, [r3, #20]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0201 	orr.w	r2, r2, #1
 8006cf2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0220 	orr.w	r2, r2, #32
 8006d02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b095      	sub	sp, #84	; 0x54
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d38:	643a      	str	r2, [r7, #64]	; 0x40
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e5      	bne.n	8006d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3314      	adds	r3, #20
 8006d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3314      	adds	r3, #20
 8006d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e5      	bne.n	8006d4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d119      	bne.n	8006dbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f023 0310 	bic.w	r3, r3, #16
 8006d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	330c      	adds	r3, #12
 8006da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da8:	61ba      	str	r2, [r7, #24]
 8006daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6979      	ldr	r1, [r7, #20]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	613b      	str	r3, [r7, #16]
   return(result);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006dca:	bf00      	nop
 8006dcc:	3754      	adds	r7, #84	; 0x54
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f7fc fb06 	bl	8003400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b21      	cmp	r3, #33	; 0x21
 8006e0e:	d13e      	bne.n	8006e8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e18:	d114      	bne.n	8006e44 <UART_Transmit_IT+0x48>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d110      	bne.n	8006e44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	1c9a      	adds	r2, r3, #2
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]
 8006e42:	e008      	b.n	8006e56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6211      	str	r1, [r2, #32]
 8006e4e:	781a      	ldrb	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	4619      	mov	r1, r3
 8006e64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10f      	bne.n	8006e8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e000      	b.n	8006e90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e8e:	2302      	movs	r3, #2
  }
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff fe3a 	bl	8006b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b08c      	sub	sp, #48	; 0x30
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b22      	cmp	r3, #34	; 0x22
 8006edc:	f040 80ae 	bne.w	800703c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee8:	d117      	bne.n	8006f1a <UART_Receive_IT+0x50>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d113      	bne.n	8006f1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	629a      	str	r2, [r3, #40]	; 0x28
 8006f18:	e026      	b.n	8006f68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2c:	d007      	beq.n	8006f3e <UART_Receive_IT+0x74>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <UART_Receive_IT+0x82>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	e008      	b.n	8006f5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4619      	mov	r1, r3
 8006f76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d15d      	bne.n	8007038 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0220 	bic.w	r2, r2, #32
 8006f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695a      	ldr	r2, [r3, #20]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d135      	bne.n	800702e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f023 0310 	bic.w	r3, r3, #16
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe8:	623a      	str	r2, [r7, #32]
 8006fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	69f9      	ldr	r1, [r7, #28]
 8006fee:	6a3a      	ldr	r2, [r7, #32]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e5      	bne.n	8006fc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0310 	and.w	r3, r3, #16
 8007006:	2b10      	cmp	r3, #16
 8007008:	d10a      	bne.n	8007020 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fd8d 	bl	8006b46 <HAL_UARTEx_RxEventCallback>
 800702c:	e002      	b.n	8007034 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fc f8d2 	bl	80031d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e002      	b.n	800703e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	e000      	b.n	800703e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800703c:	2302      	movs	r3, #2
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	3730      	adds	r7, #48	; 0x30
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007082:	f023 030c 	bic.w	r3, r3, #12
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	430b      	orrs	r3, r1
 800708e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2c      	ldr	r2, [pc, #176]	; (800715c <UART_SetConfig+0x114>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d103      	bne.n	80070b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80070b0:	f7fd fe86 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	e002      	b.n	80070be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80070b8:	f7fd fe6e 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 80070bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009a      	lsls	r2, r3, #2
 80070c8:	441a      	add	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d4:	4a22      	ldr	r2, [pc, #136]	; (8007160 <UART_SetConfig+0x118>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	0119      	lsls	r1, r3, #4
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	009a      	lsls	r2, r3, #2
 80070e8:	441a      	add	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80070f4:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <UART_SetConfig+0x118>)
 80070f6:	fba3 0302 	umull	r0, r3, r3, r2
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	2064      	movs	r0, #100	; 0x64
 80070fe:	fb00 f303 	mul.w	r3, r0, r3
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	3332      	adds	r3, #50	; 0x32
 8007108:	4a15      	ldr	r2, [pc, #84]	; (8007160 <UART_SetConfig+0x118>)
 800710a:	fba2 2303 	umull	r2, r3, r2, r3
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007114:	4419      	add	r1, r3
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009a      	lsls	r2, r3, #2
 8007120:	441a      	add	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	fbb2 f2f3 	udiv	r2, r2, r3
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <UART_SetConfig+0x118>)
 800712e:	fba3 0302 	umull	r0, r3, r3, r2
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	2064      	movs	r0, #100	; 0x64
 8007136:	fb00 f303 	mul.w	r3, r0, r3
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	3332      	adds	r3, #50	; 0x32
 8007140:	4a07      	ldr	r2, [pc, #28]	; (8007160 <UART_SetConfig+0x118>)
 8007142:	fba2 2303 	umull	r2, r3, r2, r3
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	f003 020f 	and.w	r2, r3, #15
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	440a      	add	r2, r1
 8007152:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007154:	bf00      	nop
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40013800 	.word	0x40013800
 8007160:	51eb851f 	.word	0x51eb851f

08007164 <__cxa_guard_acquire>:
 8007164:	6802      	ldr	r2, [r0, #0]
 8007166:	4603      	mov	r3, r0
 8007168:	07d2      	lsls	r2, r2, #31
 800716a:	d405      	bmi.n	8007178 <__cxa_guard_acquire+0x14>
 800716c:	7842      	ldrb	r2, [r0, #1]
 800716e:	b102      	cbz	r2, 8007172 <__cxa_guard_acquire+0xe>
 8007170:	deff      	udf	#255	; 0xff
 8007172:	2001      	movs	r0, #1
 8007174:	7058      	strb	r0, [r3, #1]
 8007176:	4770      	bx	lr
 8007178:	2000      	movs	r0, #0
 800717a:	4770      	bx	lr

0800717c <__cxa_guard_release>:
 800717c:	2301      	movs	r3, #1
 800717e:	6003      	str	r3, [r0, #0]
 8007180:	4770      	bx	lr
	...

08007184 <ceilf>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800718a:	3d7f      	subs	r5, #127	; 0x7f
 800718c:	2d16      	cmp	r5, #22
 800718e:	4601      	mov	r1, r0
 8007190:	4604      	mov	r4, r0
 8007192:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007196:	dc25      	bgt.n	80071e4 <ceilf+0x60>
 8007198:	2d00      	cmp	r5, #0
 800719a:	da0e      	bge.n	80071ba <ceilf+0x36>
 800719c:	4917      	ldr	r1, [pc, #92]	; (80071fc <ceilf+0x78>)
 800719e:	f7f9 fbf9 	bl	8000994 <__addsf3>
 80071a2:	2100      	movs	r1, #0
 80071a4:	f7f9 feba 	bl	8000f1c <__aeabi_fcmpgt>
 80071a8:	b128      	cbz	r0, 80071b6 <ceilf+0x32>
 80071aa:	2c00      	cmp	r4, #0
 80071ac:	db22      	blt.n	80071f4 <ceilf+0x70>
 80071ae:	2e00      	cmp	r6, #0
 80071b0:	bf18      	it	ne
 80071b2:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 80071b6:	4621      	mov	r1, r4
 80071b8:	e01a      	b.n	80071f0 <ceilf+0x6c>
 80071ba:	4e11      	ldr	r6, [pc, #68]	; (8007200 <ceilf+0x7c>)
 80071bc:	412e      	asrs	r6, r5
 80071be:	4230      	tst	r0, r6
 80071c0:	d016      	beq.n	80071f0 <ceilf+0x6c>
 80071c2:	490e      	ldr	r1, [pc, #56]	; (80071fc <ceilf+0x78>)
 80071c4:	f7f9 fbe6 	bl	8000994 <__addsf3>
 80071c8:	2100      	movs	r1, #0
 80071ca:	f7f9 fea7 	bl	8000f1c <__aeabi_fcmpgt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d0f1      	beq.n	80071b6 <ceilf+0x32>
 80071d2:	2c00      	cmp	r4, #0
 80071d4:	bfc2      	ittt	gt
 80071d6:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 80071da:	412b      	asrgt	r3, r5
 80071dc:	18e4      	addgt	r4, r4, r3
 80071de:	ea24 0406 	bic.w	r4, r4, r6
 80071e2:	e7e8      	b.n	80071b6 <ceilf+0x32>
 80071e4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80071e8:	d302      	bcc.n	80071f0 <ceilf+0x6c>
 80071ea:	f7f9 fbd3 	bl	8000994 <__addsf3>
 80071ee:	4601      	mov	r1, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80071f8:	e7dd      	b.n	80071b6 <ceilf+0x32>
 80071fa:	bf00      	nop
 80071fc:	7149f2ca 	.word	0x7149f2ca
 8007200:	007fffff 	.word	0x007fffff

08007204 <memset>:
 8007204:	4603      	mov	r3, r0
 8007206:	4402      	add	r2, r0
 8007208:	4293      	cmp	r3, r2
 800720a:	d100      	bne.n	800720e <memset+0xa>
 800720c:	4770      	bx	lr
 800720e:	f803 1b01 	strb.w	r1, [r3], #1
 8007212:	e7f9      	b.n	8007208 <memset+0x4>

08007214 <__libc_init_array>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	2600      	movs	r6, #0
 8007218:	4d0c      	ldr	r5, [pc, #48]	; (800724c <__libc_init_array+0x38>)
 800721a:	4c0d      	ldr	r4, [pc, #52]	; (8007250 <__libc_init_array+0x3c>)
 800721c:	1b64      	subs	r4, r4, r5
 800721e:	10a4      	asrs	r4, r4, #2
 8007220:	42a6      	cmp	r6, r4
 8007222:	d109      	bne.n	8007238 <__libc_init_array+0x24>
 8007224:	f000 f81a 	bl	800725c <_init>
 8007228:	2600      	movs	r6, #0
 800722a:	4d0a      	ldr	r5, [pc, #40]	; (8007254 <__libc_init_array+0x40>)
 800722c:	4c0a      	ldr	r4, [pc, #40]	; (8007258 <__libc_init_array+0x44>)
 800722e:	1b64      	subs	r4, r4, r5
 8007230:	10a4      	asrs	r4, r4, #2
 8007232:	42a6      	cmp	r6, r4
 8007234:	d105      	bne.n	8007242 <__libc_init_array+0x2e>
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	f855 3b04 	ldr.w	r3, [r5], #4
 800723c:	4798      	blx	r3
 800723e:	3601      	adds	r6, #1
 8007240:	e7ee      	b.n	8007220 <__libc_init_array+0xc>
 8007242:	f855 3b04 	ldr.w	r3, [r5], #4
 8007246:	4798      	blx	r3
 8007248:	3601      	adds	r6, #1
 800724a:	e7f2      	b.n	8007232 <__libc_init_array+0x1e>
 800724c:	080072a0 	.word	0x080072a0
 8007250:	080072a0 	.word	0x080072a0
 8007254:	080072a0 	.word	0x080072a0
 8007258:	080072a8 	.word	0x080072a8

0800725c <_init>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr

08007268 <_fini>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr
